// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"daBI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Field = exports.EMPTY = exports.COCKROACH = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var COCKROACH = '~';
exports.COCKROACH = COCKROACH;
var EMPTY = '_';
exports.EMPTY = EMPTY;
var CAN_T_MOVE_WALL = 'Не могу!';

var Field = /*#__PURE__*/function () {
  function Field(fieldStr) {
    _classCallCheck(this, Field);

    this.fld = fieldStr.split(/\r?\n/);
    this.last = EMPTY;
    var lineWidth = this.fld[0].length;

    for (var i = 0; i < this.fld.length; i++) {
      if (lineWidth != this.fld[i].length) throw 'Lines has different length';
      if (!this.testline(this.fld[i])) throw 'Line has wrong format[' + this.fld[i] + ']';
      this.fld[i] = this.fld[i].split('');
      var idx = this.fld[i].indexOf(COCKROACH);
      if (idx == -1) continue;
      if (this.pos) throw 'Double cockroach position!';
      this.pos = [i, idx];
    }
  }

  _createClass(Field, [{
    key: "set",
    value: function set(char, i, j) {
      if (this.pos[0] == i && this.pos[1] == j) return;
      this.fld[i][j] = char.charAt(0);
      if (this.lsnr) this.lsnr();
    }
  }, {
    key: "testline",
    value: function testline(line) {
      return /^[A-Za-zА-Яа-я0-9_~]+$/.test(line);
    }
  }, {
    key: "change",
    value: function change(from_i, from_j, to_i, to_j) {
      if (this.pos[0] == to_i && this.pos[1] == to_j) return;
      if (this.pos[0] == from_i && this.pos[1] == from_j) this.pos = [to_i, to_j];
      this.fld[to_i][to_j] = this.fld[from_i][from_j];
      this.fld[from_i][from_j] = EMPTY;
      if (this.lsnr) this.lsnr();
    }
  }, {
    key: "up",
    value: function up() {
      return this.move(-1, 0);
    }
  }, {
    key: "down",
    value: function down() {
      return this.move(1, 0);
    }
  }, {
    key: "left",
    value: function left() {
      return this.move(0, -1);
    }
  }, {
    key: "right",
    value: function right() {
      return this.move(0, 1);
    }
  }, {
    key: "stay",
    value: function stay() {
      return this.move(0, 0);
    }
  }, {
    key: "move",
    value: function move(idelta, jdelta) {
      var res = Promise.resolve();
      if (this.lsnr) res = this.lsnr();
      if (idelta == 0 && jdelta == 0) return res;
      this.last = this.move0(COCKROACH, this.pos[0], this.pos[1], idelta, jdelta);
      this.pos[0] += idelta;
      this.pos[1] += jdelta;
      return res;
    }
  }, {
    key: "move0",
    value: function move0(toUp, i, j, idelta, jdelta) {
      if (i + idelta < 0 || i + idelta >= this.fld.length) {
        console.log(this.toString());
        throw CAN_T_MOVE_WALL;
      }

      if (j + jdelta < 0 || j + jdelta >= this.fld[0].length) {
        console.log(this.toString());
        throw CAN_T_MOVE_WALL;
      }

      var possiblyEmpty = this.fld[i + idelta][j + jdelta];
      if (possiblyEmpty != EMPTY) this.move0(possiblyEmpty, i + idelta, j + jdelta, idelta, jdelta);
      this.fld[i][j] = EMPTY;
      this.fld[i + idelta][j + jdelta] = toUp;
      return possiblyEmpty;
    }
  }, {
    key: "onChange",
    value: function onChange(lsnr) {
      this.lsnr = lsnr;
      this.lsnr();
    }
  }, {
    key: "toString",
    value: function toString() {
      var res = "";

      for (var i = 0; i < this.fld.length; i++) {
        if (i != 0) res += "\n";
        res += this.fld[i].join("");
      }

      return res;
    }
  }, {
    key: "width",
    value: function width() {
      return this.fld[0].length;
    }
  }, {
    key: "height",
    value: function height() {
      return this.fld.length;
    }
  }]);

  return Field;
}();

exports.Field = Field;
},{}],"Nizs":[function(require,module,exports) {
/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.
 * Use is of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
String.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));

String.prototype.hashCode = function () {
  var key = this.toString();
  var h1b, k1;
  var remainder = key.length & 3; // key.length % 4

  var bytes = key.length - remainder;
  var h1 = String.prototype.seed;
  var c1 = 0xcc9e2d51;
  var c2 = 0x1b873593;
  var i = 0;

  while (i < bytes) {
    k1 = key.charCodeAt(i) & 0xff | (key.charCodeAt(++i) & 0xff) << 8 | (key.charCodeAt(++i) & 0xff) << 16 | (key.charCodeAt(++i) & 0xff) << 24;
    ++i;
    k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;
    k1 = k1 << 15 | k1 >>> 17;
    k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;
    h1 ^= k1;
    h1 = h1 << 13 | h1 >>> 19;
    h1b = (h1 & 0xffff) * 5 + (((h1 >>> 16) * 5 & 0xffff) << 16) & 0xffffffff;
    h1 = (h1b & 0xffff) + 0x6b64 + (((h1b >>> 16) + 0xe654 & 0xffff) << 16);
  }

  k1 = 0;

  switch (remainder) {
    case 3:
      k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;
    // no-break

    case 2:
      k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;
    // no-break

    case 1:
      k1 ^= key.charCodeAt(i) & 0xff;
      k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;
      k1 = k1 << 15 | k1 >>> 17;
      k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;
      h1 ^= k1;
  }

  h1 ^= key.length;
  h1 ^= h1 >>> 16;
  h1 = (h1 & 0xffff) * 0x85ebca6b + (((h1 >>> 16) * 0x85ebca6b & 0xffff) << 16) & 0xffffffff;
  h1 ^= h1 >>> 13;
  h1 = (h1 & 0xffff) * 0xc2b2ae35 + (((h1 >>> 16) * 0xc2b2ae35 & 0xffff) << 16) & 0xffffffff;
  h1 ^= h1 >>> 16;
  return h1 >>> 0;
};
},{}],"ghVe":[function(require,module,exports) {
/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.
 * Use is of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/*! https://mths.be/codepointat v0.2.0 by @mathias */
if (!String.prototype.codePointAt) {
  (function () {
    'use strict'; // needed to support `apply`/`call` with `undefined`/`null`

    var defineProperty = function () {
      // IE 8 only supports `Object.defineProperty` on DOM elements
      var result;

      try {
        var object = {};
        var $defineProperty = Object.defineProperty;
        result = $defineProperty(object, object, object) && $defineProperty;
      } catch (error) {
        /* eslint no-empty: [ "off" ] */
      }

      return result;
    }();

    var codePointAt = function codePointAt(position) {
      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var size = string.length; // `ToInteger`

      var index = position ? Number(position) : 0;

      if (index !== index) {
        // better `isNaN`
        index = 0;
      } // Account for out-of-bounds indices:


      if (index < 0 || index >= size) {
        return undefined;
      } // Get the first code unit


      var first = string.charCodeAt(index);
      var second;

      if ( // check if it’s the start of a surrogate pair
      first >= 0xD800 && first <= 0xDBFF && // high surrogate
      size > index + 1 // there is a next code unit
      ) {
        second = string.charCodeAt(index + 1);

        if (second >= 0xDC00 && second <= 0xDFFF) {
          // low surrogate
          // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
          return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
        }
      }

      return first;
    };

    if (defineProperty) {
      defineProperty(String.prototype, 'codePointAt', {
        'value': codePointAt,
        'configurable': true,
        'writable': true
      });
    } else {
      String.prototype.codePointAt = codePointAt;
    }
  })();
}
},{}],"HvJh":[function(require,module,exports) {
/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.
 * Use is of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */
if (!String.fromCodePoint) {
  (function () {
    var defineProperty = function () {
      // IE 8 only supports `Object.defineProperty` on DOM elements
      var result;

      try {
        var object = {};
        var $defineProperty = Object.defineProperty;
        result = $defineProperty(object, object, object) && $defineProperty;
      } catch (error) {
        /* eslint no-empty: [ "off" ] */
      }

      return result;
    }();

    var stringFromCharCode = String.fromCharCode;
    var floor = Math.floor;

    var fromCodePoint = function fromCodePoint(_) {
      var MAX_SIZE = 0x4000;
      var codeUnits = [];
      var highSurrogate;
      var lowSurrogate;
      var index = -1;
      var length = arguments.length;

      if (!length) {
        return '';
      }

      var result = '';

      while (++index < length) {
        var codePoint = Number(arguments[index]);

        if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
        codePoint < 0 || // not a valid Unicode code point
        codePoint > 0x10FFFF || // not a valid Unicode code point
        floor(codePoint) !== codePoint // not an integer
        ) {
          throw RangeError('Invalid code point: ' + codePoint);
        }

        if (codePoint <= 0xFFFF) {
          // BMP code point
          codeUnits.push(codePoint);
        } else {
          // Astral code point; split in surrogate halves
          // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
          codePoint -= 0x10000;
          highSurrogate = (codePoint >> 10) + 0xD800;
          lowSurrogate = codePoint % 0x400 + 0xDC00;
          codeUnits.push(highSurrogate, lowSurrogate);
        }

        if (index + 1 === length || codeUnits.length > MAX_SIZE) {
          result += stringFromCharCode.apply(null, codeUnits);
          codeUnits.length = 0;
        }
      }

      return result;
    };

    if (defineProperty) {
      defineProperty(String, 'fromCodePoint', {
        'value': fromCodePoint,
        'configurable': true,
        'writable': true
      });
    } else {
      String.fromCodePoint = fromCodePoint;
    }
  })();
}
},{}],"tczR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/**
 * A token has properties: text, type, line, character position in the line
 * (so we can ignore tabs), token channel, index, and source from which
 * we obtained this token.
 */
var Token = /*#__PURE__*/function () {
  function Token() {
    _classCallCheck(this, Token);

    this.source = null;
    this.type = null; // token type of the token

    this.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL

    this.start = null; // optional; return -1 if not implemented.

    this.stop = null; // optional; return -1 if not implemented.

    this.tokenIndex = null; // from 0..n-1 of the token object in the input stream

    this.line = null; // line=1..n of the 1st character

    this.column = null; // beginning of the line at which it occurs, 0..n-1

    this._text = null; // text of the token.
  }

  _createClass(Token, [{
    key: "getTokenSource",
    value: function getTokenSource() {
      return this.source[0];
    }
  }, {
    key: "getInputStream",
    value: function getInputStream() {
      return this.source[1];
    }
  }, {
    key: "text",
    get: function get() {
      return this._text;
    },
    set: function set(text) {
      this._text = text;
    }
  }]);

  return Token;
}();

exports.default = Token;
Token.INVALID_TYPE = 0;
/**
 * During lookahead operations, this "token" signifies we hit rule end ATN state
 * and did not follow it despite needing to.
 */

Token.EPSILON = -2;
Token.MIN_USER_TOKEN_TYPE = 1;
Token.EOF = -1;
/**
 * All tokens go to the parser (unless skip() is called in that rule)
 * on a particular "channel". The parser tunes to a particular channel
 * so that whitespace etc... can go to the parser on a "hidden" channel.
 */

Token.DEFAULT_CHANNEL = 0;
/**
 * Anything on different channel than DEFAULT_CHANNEL is not parsed
 * by parser.
 */

Token.HIDDEN_CHANNEL = 1;
},{}],"fx5K":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = equalArrays;

/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.
 * Use is of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
function equalArrays(a, b) {
  if (!Array.isArray(a) || !Array.isArray(b)) return false;
  if (a === b) return true;
  if (a.length !== b.length) return false;

  for (var i = 0; i < a.length; i++) {
    if (a[i] === b[i]) continue;
    if (!a[i].equals || !a[i].equals(b[i])) return false;
  }

  return true;
}
},{}],"JXAn":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.
 * Use is of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
var HashCode = /*#__PURE__*/function () {
  function HashCode() {
    _classCallCheck(this, HashCode);

    this.count = 0;
    this.hash = 0;
  }

  _createClass(HashCode, [{
    key: "update",
    value: function update() {
      for (var i = 0; i < arguments.length; i++) {
        var value = arguments[i];
        if (value == null) continue;
        if (Array.isArray(value)) this.update.apply(this, value);else {
          var k = 0;

          switch (_typeof(value)) {
            case 'undefined':
            case 'function':
              continue;

            case 'number':
            case 'boolean':
              k = value;
              break;

            case 'string':
              k = value.hashCode();
              break;

            default:
              if (value.updateHashCode) value.updateHashCode(this);else console.log("No updateHashCode for " + value.toString());
              continue;
          }

          k = k * 0xCC9E2D51;
          k = k << 15 | k >>> 32 - 15;
          k = k * 0x1B873593;
          this.count = this.count + 1;
          var hash = this.hash ^ k;
          hash = hash << 13 | hash >>> 32 - 13;
          hash = hash * 5 + 0xE6546B64;
          this.hash = hash;
        }
      }
    }
  }, {
    key: "finish",
    value: function finish() {
      var hash = this.hash ^ this.count * 4;
      hash = hash ^ hash >>> 16;
      hash = hash * 0x85EBCA6B;
      hash = hash ^ hash >>> 13;
      hash = hash * 0xC2B2AE35;
      hash = hash ^ hash >>> 16;
      return hash;
    }
  }], [{
    key: "hashStuff",
    value: function hashStuff() {
      var hash = new HashCode();
      hash.update.apply(hash, arguments);
      return hash.finish();
    }
  }]);

  return HashCode;
}();

exports.default = HashCode;
},{}],"ccNy":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = standardHashCodeFunction;

/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.
 * Use is of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
function standardHashCodeFunction(a) {
  return a ? a.hashCode() : -1;
}
},{}],"aFH0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = standardEqualsFunction;

/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.
 * Use is of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
function standardEqualsFunction(a, b) {
  return a ? a.equals(b) : a === b;
}
},{}],"QgAq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = valueToString;

/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.
 * Use is of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
function valueToString(v) {
  return v === null ? "null" : v;
}
},{}],"oS3b":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = arrayToString;

var _valueToString = _interopRequireDefault(require("./valueToString.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.
 * Use is of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
function arrayToString(a) {
  return Array.isArray(a) ? "[" + a.map(_valueToString.default).join(", ") + "]" : "null";
}
},{"./valueToString.js":"QgAq"}],"hSGu":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _standardHashCodeFunction = _interopRequireDefault(require("../utils/standardHashCodeFunction.js"));

var _standardEqualsFunction = _interopRequireDefault(require("../utils/standardEqualsFunction.js"));

var _arrayToString = _interopRequireDefault(require("../utils/arrayToString.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var HASH_KEY_PREFIX = "h-";

var HashSet = /*#__PURE__*/function () {
  function HashSet(hashFunction, equalsFunction) {
    _classCallCheck(this, HashSet);

    this.data = {};
    this.hashFunction = hashFunction || _standardHashCodeFunction.default;
    this.equalsFunction = equalsFunction || _standardEqualsFunction.default;
  }

  _createClass(HashSet, [{
    key: "add",
    value: function add(value) {
      var key = HASH_KEY_PREFIX + this.hashFunction(value);

      if (key in this.data) {
        var values = this.data[key];

        for (var i = 0; i < values.length; i++) {
          if (this.equalsFunction(value, values[i])) {
            return values[i];
          }
        }

        values.push(value);
        return value;
      } else {
        this.data[key] = [value];
        return value;
      }
    }
  }, {
    key: "has",
    value: function has(value) {
      return this.get(value) != null;
    }
  }, {
    key: "get",
    value: function get(value) {
      var key = HASH_KEY_PREFIX + this.hashFunction(value);

      if (key in this.data) {
        var values = this.data[key];

        for (var i = 0; i < values.length; i++) {
          if (this.equalsFunction(value, values[i])) {
            return values[i];
          }
        }
      }

      return null;
    }
  }, {
    key: "values",
    value: function values() {
      var _this = this;

      return Object.keys(this.data).filter(function (key) {
        return key.startsWith(HASH_KEY_PREFIX);
      }).flatMap(function (key) {
        return _this.data[key];
      }, this);
    }
  }, {
    key: "toString",
    value: function toString() {
      return (0, _arrayToString.default)(this.values());
    }
  }, {
    key: "length",
    get: function get() {
      var _this2 = this;

      return Object.keys(this.data).filter(function (key) {
        return key.startsWith(HASH_KEY_PREFIX);
      }).map(function (key) {
        return _this2.data[key].length;
      }, this).reduce(function (accum, item) {
        return accum + item;
      }, 0);
    }
  }]);

  return HashSet;
}();

exports.default = HashSet;
},{"../utils/standardHashCodeFunction.js":"ccNy","../utils/standardEqualsFunction.js":"aFH0","../utils/arrayToString.js":"oS3b"}],"fWJV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _equalArrays = _interopRequireDefault(require("../utils/equalArrays.js"));

var _HashCode = _interopRequireDefault(require("../misc/HashCode.js"));

var _HashSet = _interopRequireDefault(require("../misc/HashSet.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * A tree structure used to record the semantic context in which
 * an ATN configuration is valid.  It's either a single predicate,
 * a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.
 *
 * <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of
 * {@link SemanticContext} within the scope of this outer class.</p>
 */
var SemanticContext = /*#__PURE__*/function () {
  function SemanticContext() {
    _classCallCheck(this, SemanticContext);
  }

  _createClass(SemanticContext, [{
    key: "hashCode",
    value: function hashCode() {
      var hash = new _HashCode.default();
      this.updateHashCode(hash);
      return hash.finish();
    }
    /**
     * For context independent predicates, we evaluate them without a local
     * context (i.e., null context). That way, we can evaluate them without
     * having to create proper rule-specific context during prediction (as
     * opposed to the parser, which creates them naturally). In a practical
     * sense, this avoids a cast exception from RuleContext to myruleContext.
     *
     * <p>For context dependent predicates, we must pass in a local context so that
     * references such as $arg evaluate properly as _localctx.arg. We only
     * capture context dependent predicates in the context in which we begin
     * prediction, so we passed in the outer context here in case of context
     * dependent predicate evaluation.</p>
     */

  }, {
    key: "evaluate",
    value: function evaluate(parser, outerContext) {}
    /**
     * Evaluate the precedence predicates for the context and reduce the result.
     *
     * @param parser The parser instance.
     * @param outerContext The current parser context object.
     * @return The simplified semantic context after precedence predicates are
     * evaluated, which will be one of the following values.
     * <ul>
     * <li>{@link //NONE}: if the predicate simplifies to {@code true} after
     * precedence predicates are evaluated.</li>
     * <li>{@code null}: if the predicate simplifies to {@code false} after
     * precedence predicates are evaluated.</li>
     * <li>{@code this}: if the semantic context is not changed as a result of
     * precedence predicate evaluation.</li>
     * <li>A non-{@code null} {@link SemanticContext}: the new simplified
     * semantic context after precedence predicates are evaluated.</li>
     * </ul>
     */

  }, {
    key: "evalPrecedence",
    value: function evalPrecedence(parser, outerContext) {
      return this;
    }
  }], [{
    key: "andContext",
    value: function andContext(a, b) {
      if (a === null || a === SemanticContext.NONE) {
        return b;
      }

      if (b === null || b === SemanticContext.NONE) {
        return a;
      }

      var result = new AND(a, b);

      if (result.opnds.length === 1) {
        return result.opnds[0];
      } else {
        return result;
      }
    }
  }, {
    key: "orContext",
    value: function orContext(a, b) {
      if (a === null) {
        return b;
      }

      if (b === null) {
        return a;
      }

      if (a === SemanticContext.NONE || b === SemanticContext.NONE) {
        return SemanticContext.NONE;
      }

      var result = new OR(a, b);

      if (result.opnds.length === 1) {
        return result.opnds[0];
      } else {
        return result;
      }
    }
  }]);

  return SemanticContext;
}();

exports.default = SemanticContext;

var AND = /*#__PURE__*/function (_SemanticContext) {
  _inherits(AND, _SemanticContext);

  var _super = _createSuper(AND);

  /**
   * A semantic context which is true whenever none of the contained contexts
   * is false
   */
  function AND(a, b) {
    var _this;

    _classCallCheck(this, AND);

    _this = _super.call(this);
    var operands = new _HashSet.default();

    if (a instanceof AND) {
      a.opnds.map(function (o) {
        operands.add(o);
      });
    } else {
      operands.add(a);
    }

    if (b instanceof AND) {
      b.opnds.map(function (o) {
        operands.add(o);
      });
    } else {
      operands.add(b);
    }

    var precedencePredicates = filterPrecedencePredicates(operands);

    if (precedencePredicates.length > 0) {
      // interested in the transition with the lowest precedence
      var reduced = null;
      precedencePredicates.map(function (p) {
        if (reduced === null || p.precedence < reduced.precedence) {
          reduced = p;
        }
      });
      operands.add(reduced);
    }

    _this.opnds = Array.from(operands.values());
    return _this;
  }

  _createClass(AND, [{
    key: "equals",
    value: function equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof AND)) {
        return false;
      } else {
        return (0, _equalArrays.default)(this.opnds, other.opnds);
      }
    }
  }, {
    key: "updateHashCode",
    value: function updateHashCode(hash) {
      hash.update(this.opnds, "AND");
    }
    /**
     * {@inheritDoc}
     *
     * <p>
     * The evaluation of predicates by this context is short-circuiting, but
     * unordered.</p>
     */

  }, {
    key: "evaluate",
    value: function evaluate(parser, outerContext) {
      for (var i = 0; i < this.opnds.length; i++) {
        if (!this.opnds[i].evaluate(parser, outerContext)) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "evalPrecedence",
    value: function evalPrecedence(parser, outerContext) {
      var differs = false;
      var operands = [];

      for (var i = 0; i < this.opnds.length; i++) {
        var context = this.opnds[i];
        var evaluated = context.evalPrecedence(parser, outerContext);
        differs |= evaluated !== context;

        if (evaluated === null) {
          // The AND context is false if any element is false
          return null;
        } else if (evaluated !== SemanticContext.NONE) {
          // Reduce the result by skipping true elements
          operands.push(evaluated);
        }
      }

      if (!differs) {
        return this;
      }

      if (operands.length === 0) {
        // all elements were true, so the AND context is true
        return SemanticContext.NONE;
      }

      var result = null;
      operands.map(function (o) {
        result = result === null ? o : SemanticContext.andContext(result, o);
      });
      return result;
    }
  }, {
    key: "toString",
    value: function toString() {
      var s = this.opnds.map(function (o) {
        return o.toString();
      });
      return (s.length > 3 ? s.slice(3) : s).join("&&");
    }
  }]);

  return AND;
}(SemanticContext);

var OR = /*#__PURE__*/function (_SemanticContext2) {
  _inherits(OR, _SemanticContext2);

  var _super2 = _createSuper(OR);

  /**
   * A semantic context which is true whenever at least one of the contained
   * contexts is true
   */
  function OR(a, b) {
    var _this2;

    _classCallCheck(this, OR);

    _this2 = _super2.call(this);
    var operands = new _HashSet.default();

    if (a instanceof OR) {
      a.opnds.map(function (o) {
        operands.add(o);
      });
    } else {
      operands.add(a);
    }

    if (b instanceof OR) {
      b.opnds.map(function (o) {
        operands.add(o);
      });
    } else {
      operands.add(b);
    }

    var precedencePredicates = filterPrecedencePredicates(operands);

    if (precedencePredicates.length > 0) {
      // interested in the transition with the highest precedence
      var s = precedencePredicates.sort(function (a, b) {
        return a.compareTo(b);
      });
      var reduced = s[s.length - 1];
      operands.add(reduced);
    }

    _this2.opnds = Array.from(operands.values());
    return _this2;
  }

  _createClass(OR, [{
    key: "equals",
    value: function equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof OR)) {
        return false;
      } else {
        return (0, _equalArrays.default)(this.opnds, other.opnds);
      }
    }
  }, {
    key: "updateHashCode",
    value: function updateHashCode(hash) {
      hash.update(this.opnds, "OR");
    }
    /**
     * <p>
     * The evaluation of predicates by this context is short-circuiting, but
     * unordered.</p>
     */

  }, {
    key: "evaluate",
    value: function evaluate(parser, outerContext) {
      for (var i = 0; i < this.opnds.length; i++) {
        if (this.opnds[i].evaluate(parser, outerContext)) {
          return true;
        }
      }

      return false;
    }
  }, {
    key: "evalPrecedence",
    value: function evalPrecedence(parser, outerContext) {
      var differs = false;
      var operands = [];

      for (var i = 0; i < this.opnds.length; i++) {
        var context = this.opnds[i];
        var evaluated = context.evalPrecedence(parser, outerContext);
        differs |= evaluated !== context;

        if (evaluated === SemanticContext.NONE) {
          // The OR context is true if any element is true
          return SemanticContext.NONE;
        } else if (evaluated !== null) {
          // Reduce the result by skipping false elements
          operands.push(evaluated);
        }
      }

      if (!differs) {
        return this;
      }

      if (operands.length === 0) {
        // all elements were false, so the OR context is false
        return null;
      }

      var result = null;
      operands.map(function (o) {
        return result === null ? o : SemanticContext.orContext(result, o);
      });
      return result;
    }
  }, {
    key: "toString",
    value: function toString() {
      var s = this.opnds.map(function (o) {
        return o.toString();
      });
      return (s.length > 3 ? s.slice(3) : s).join("||");
    }
  }]);

  return OR;
}(SemanticContext);

function filterPrecedencePredicates(set) {
  var result = [];
  set.values().map(function (context) {
    if (context instanceof SemanticContext.PrecedencePredicate) {
      result.push(context);
    }
  });
  return result;
}
},{"../utils/equalArrays.js":"fx5K","../misc/HashCode.js":"JXAn","../misc/HashSet.js":"hSGu"}],"vzuf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _SemanticContext = _interopRequireDefault(require("./SemanticContext.js"));

var _HashCode = _interopRequireDefault(require("../misc/HashCode.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function checkParams(params, isCfg) {
  if (params === null) {
    var result = {
      state: null,
      alt: null,
      context: null,
      semanticContext: null
    };

    if (isCfg) {
      result.reachesIntoOuterContext = 0;
    }

    return result;
  } else {
    var props = {};
    props.state = params.state || null;
    props.alt = params.alt === undefined ? null : params.alt;
    props.context = params.context || null;
    props.semanticContext = params.semanticContext || null;

    if (isCfg) {
      props.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;
      props.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;
    }

    return props;
  }
}

var ATNConfig = /*#__PURE__*/function () {
  /**
   * @param {Object} params A tuple: (ATN state, predicted alt, syntactic, semantic context).
   * The syntactic context is a graph-structured stack node whose
   * path(s) to the root is the rule invocation(s)
   * chain used to arrive at the state.  The semantic context is
   * the tree of semantic predicates encountered before reaching
   * an ATN state
   */
  function ATNConfig(params, config) {
    _classCallCheck(this, ATNConfig);

    this.checkContext(params, config);
    params = checkParams(params);
    config = checkParams(config, true); // The ATN state associated with this configuration///

    this.state = params.state !== null ? params.state : config.state; // What alt (or lexer rule) is predicted by this configuration///

    this.alt = params.alt !== null ? params.alt : config.alt;
    /**
     * The stack of invoking states leading to the rule/states associated
     * with this config.  We track only those contexts pushed during
     * execution of the ATN simulator
     */

    this.context = params.context !== null ? params.context : config.context;
    this.semanticContext = params.semanticContext !== null ? params.semanticContext : config.semanticContext !== null ? config.semanticContext : _SemanticContext.default.NONE; // TODO: make it a boolean then

    /**
     * We cannot execute predicates dependent upon local context unless
     * we know for sure we are in the correct context. Because there is
     * no way to do this efficiently, we simply cannot evaluate
     * dependent predicates unless we are in the rule that initially
     * invokes the ATN simulator.
     * closure() tracks the depth of how far we dip into the
     * outer context: depth &gt; 0.  Note that it may not be totally
     * accurate depth since I don't ever decrement
     */

    this.reachesIntoOuterContext = config.reachesIntoOuterContext;
    this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;
  }

  _createClass(ATNConfig, [{
    key: "checkContext",
    value: function checkContext(params, config) {
      if ((params.context === null || params.context === undefined) && (config === null || config.context === null || config.context === undefined)) {
        this.context = null;
      }
    }
  }, {
    key: "hashCode",
    value: function hashCode() {
      var hash = new _HashCode.default();
      this.updateHashCode(hash);
      return hash.finish();
    }
  }, {
    key: "updateHashCode",
    value: function updateHashCode(hash) {
      hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);
    }
    /**
     * An ATN configuration is equal to another if both have
     * the same state, they predict the same alternative, and
     * syntactic/semantic contexts are the same
     */

  }, {
    key: "equals",
    value: function equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof ATNConfig)) {
        return false;
      } else {
        return this.state.stateNumber === other.state.stateNumber && this.alt === other.alt && (this.context === null ? other.context === null : this.context.equals(other.context)) && this.semanticContext.equals(other.semanticContext) && this.precedenceFilterSuppressed === other.precedenceFilterSuppressed;
      }
    }
  }, {
    key: "hashCodeForConfigSet",
    value: function hashCodeForConfigSet() {
      var hash = new _HashCode.default();
      hash.update(this.state.stateNumber, this.alt, this.semanticContext);
      return hash.finish();
    }
  }, {
    key: "equalsForConfigSet",
    value: function equalsForConfigSet(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof ATNConfig)) {
        return false;
      } else {
        return this.state.stateNumber === other.state.stateNumber && this.alt === other.alt && this.semanticContext.equals(other.semanticContext);
      }
    }
  }, {
    key: "toString",
    value: function toString() {
      return "(" + this.state + "," + this.alt + (this.context !== null ? ",[" + this.context.toString() + "]" : "") + (this.semanticContext !== _SemanticContext.default.NONE ? "," + this.semanticContext.toString() : "") + (this.reachesIntoOuterContext > 0 ? ",up=" + this.reachesIntoOuterContext : "") + ")";
    }
  }]);

  return ATNConfig;
}();

exports.default = ATNConfig;
},{"./SemanticContext.js":"fWJV","../misc/HashCode.js":"JXAn"}],"JCiE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.
 * Use is of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/* stop is not included! */
var Interval = /*#__PURE__*/function () {
  function Interval(start, stop) {
    _classCallCheck(this, Interval);

    this.start = start;
    this.stop = stop;
  }

  _createClass(Interval, [{
    key: "clone",
    value: function clone() {
      return new Interval(this.start, this.stop);
    }
  }, {
    key: "contains",
    value: function contains(item) {
      return item >= this.start && item < this.stop;
    }
  }, {
    key: "toString",
    value: function toString() {
      if (this.start === this.stop - 1) {
        return this.start.toString();
      } else {
        return this.start.toString() + ".." + (this.stop - 1).toString();
      }
    }
  }, {
    key: "length",
    get: function get() {
      return this.stop - this.start;
    }
  }]);

  return Interval;
}();

exports.default = Interval;
Interval.INVALID_INTERVAL = new Interval(-1, -2);
},{}],"lP1U":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Token = _interopRequireDefault(require("../Token.js"));

var _Interval = _interopRequireDefault(require("./Interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var IntervalSet = /*#__PURE__*/function () {
  function IntervalSet() {
    _classCallCheck(this, IntervalSet);

    this.intervals = null;
    this.readOnly = false;
  }

  _createClass(IntervalSet, [{
    key: "first",
    value: function first(v) {
      if (this.intervals === null || this.intervals.length === 0) {
        return _Token.default.INVALID_TYPE;
      } else {
        return this.intervals[0].start;
      }
    }
  }, {
    key: "addOne",
    value: function addOne(v) {
      this.addInterval(new _Interval.default(v, v + 1));
    }
  }, {
    key: "addRange",
    value: function addRange(l, h) {
      this.addInterval(new _Interval.default(l, h + 1));
    }
  }, {
    key: "addInterval",
    value: function addInterval(toAdd) {
      if (this.intervals === null) {
        this.intervals = [];
        this.intervals.push(toAdd.clone());
      } else {
        // find insert pos
        for (var pos = 0; pos < this.intervals.length; pos++) {
          var existing = this.intervals[pos]; // distinct range -> insert

          if (toAdd.stop < existing.start) {
            this.intervals.splice(pos, 0, toAdd);
            return;
          } // contiguous range -> adjust
          else if (toAdd.stop === existing.start) {
            this.intervals[pos] = new _Interval.default(toAdd.start, existing.stop);
            return;
          } // overlapping range -> adjust and reduce
          else if (toAdd.start <= existing.stop) {
            this.intervals[pos] = new _Interval.default(Math.min(existing.start, toAdd.start), Math.max(existing.stop, toAdd.stop));
            this.reduce(pos);
            return;
          }
        } // greater than any existing


        this.intervals.push(toAdd.clone());
      }
    }
  }, {
    key: "addSet",
    value: function addSet(other) {
      var _this = this;

      if (other.intervals !== null) {
        other.intervals.forEach(function (toAdd) {
          return _this.addInterval(toAdd);
        }, this);
      }

      return this;
    }
  }, {
    key: "reduce",
    value: function reduce(pos) {
      // only need to reduce if pos is not the last
      if (pos < this.intervals.length - 1) {
        var current = this.intervals[pos];
        var next = this.intervals[pos + 1]; // if next contained in current

        if (current.stop >= next.stop) {
          this.intervals.splice(pos + 1, 1);
          this.reduce(pos);
        } else if (current.stop >= next.start) {
          this.intervals[pos] = new _Interval.default(current.start, next.stop);
          this.intervals.splice(pos + 1, 1);
        }
      }
    }
  }, {
    key: "complement",
    value: function complement(start, stop) {
      var result = new IntervalSet();
      result.addInterval(new _Interval.default(start, stop + 1));
      if (this.intervals !== null) this.intervals.forEach(function (toRemove) {
        return result.removeRange(toRemove);
      });
      return result;
    }
  }, {
    key: "contains",
    value: function contains(item) {
      if (this.intervals === null) {
        return false;
      } else {
        for (var k = 0; k < this.intervals.length; k++) {
          if (this.intervals[k].contains(item)) {
            return true;
          }
        }

        return false;
      }
    }
  }, {
    key: "removeRange",
    value: function removeRange(toRemove) {
      if (toRemove.start === toRemove.stop - 1) {
        this.removeOne(toRemove.start);
      } else if (this.intervals !== null) {
        var pos = 0;

        for (var n = 0; n < this.intervals.length; n++) {
          var existing = this.intervals[pos]; // intervals are ordered

          if (toRemove.stop <= existing.start) {
            return;
          } // check for including range, split it
          else if (toRemove.start > existing.start && toRemove.stop < existing.stop) {
            this.intervals[pos] = new _Interval.default(existing.start, toRemove.start);
            var x = new _Interval.default(toRemove.stop, existing.stop);
            this.intervals.splice(pos, 0, x);
            return;
          } // check for included range, remove it
          else if (toRemove.start <= existing.start && toRemove.stop >= existing.stop) {
            this.intervals.splice(pos, 1);
            pos = pos - 1; // need another pass
          } // check for lower boundary
          else if (toRemove.start < existing.stop) {
            this.intervals[pos] = new _Interval.default(existing.start, toRemove.start);
          } // check for upper boundary
          else if (toRemove.stop < existing.stop) {
            this.intervals[pos] = new _Interval.default(toRemove.stop, existing.stop);
          }

          pos += 1;
        }
      }
    }
  }, {
    key: "removeOne",
    value: function removeOne(value) {
      if (this.intervals !== null) {
        for (var i = 0; i < this.intervals.length; i++) {
          var existing = this.intervals[i]; // intervals are ordered

          if (value < existing.start) {
            return;
          } // check for single value range
          else if (value === existing.start && value === existing.stop - 1) {
            this.intervals.splice(i, 1);
            return;
          } // check for lower boundary
          else if (value === existing.start) {
            this.intervals[i] = new _Interval.default(existing.start + 1, existing.stop);
            return;
          } // check for upper boundary
          else if (value === existing.stop - 1) {
            this.intervals[i] = new _Interval.default(existing.start, existing.stop - 1);
            return;
          } // split existing range
          else if (value < existing.stop - 1) {
            var replace = new _Interval.default(existing.start, value);
            existing.start = value + 1;
            this.intervals.splice(i, 0, replace);
            return;
          }
        }
      }
    }
  }, {
    key: "toString",
    value: function toString(literalNames, symbolicNames, elemsAreChar) {
      literalNames = literalNames || null;
      symbolicNames = symbolicNames || null;
      elemsAreChar = elemsAreChar || false;

      if (this.intervals === null) {
        return "{}";
      } else if (literalNames !== null || symbolicNames !== null) {
        return this.toTokenString(literalNames, symbolicNames);
      } else if (elemsAreChar) {
        return this.toCharString();
      } else {
        return this.toIndexString();
      }
    }
  }, {
    key: "toCharString",
    value: function toCharString() {
      var names = [];

      for (var i = 0; i < this.intervals.length; i++) {
        var existing = this.intervals[i];

        if (existing.stop === existing.start + 1) {
          if (existing.start === _Token.default.EOF) {
            names.push("<EOF>");
          } else {
            names.push("'" + String.fromCharCode(existing.start) + "'");
          }
        } else {
          names.push("'" + String.fromCharCode(existing.start) + "'..'" + String.fromCharCode(existing.stop - 1) + "'");
        }
      }

      if (names.length > 1) {
        return "{" + names.join(", ") + "}";
      } else {
        return names[0];
      }
    }
  }, {
    key: "toIndexString",
    value: function toIndexString() {
      var names = [];

      for (var i = 0; i < this.intervals.length; i++) {
        var existing = this.intervals[i];

        if (existing.stop === existing.start + 1) {
          if (existing.start === _Token.default.EOF) {
            names.push("<EOF>");
          } else {
            names.push(existing.start.toString());
          }
        } else {
          names.push(existing.start.toString() + ".." + (existing.stop - 1).toString());
        }
      }

      if (names.length > 1) {
        return "{" + names.join(", ") + "}";
      } else {
        return names[0];
      }
    }
  }, {
    key: "toTokenString",
    value: function toTokenString(literalNames, symbolicNames) {
      var names = [];

      for (var i = 0; i < this.intervals.length; i++) {
        var existing = this.intervals[i];

        for (var j = existing.start; j < existing.stop; j++) {
          names.push(this.elementName(literalNames, symbolicNames, j));
        }
      }

      if (names.length > 1) {
        return "{" + names.join(", ") + "}";
      } else {
        return names[0];
      }
    }
  }, {
    key: "elementName",
    value: function elementName(literalNames, symbolicNames, token) {
      if (token === _Token.default.EOF) {
        return "<EOF>";
      } else if (token === _Token.default.EPSILON) {
        return "<EPSILON>";
      } else {
        return literalNames[token] || symbolicNames[token];
      }
    }
  }, {
    key: "length",
    get: function get() {
      return this.intervals.map(function (interval) {
        return interval.length;
      }).reduce(function (acc, val) {
        return acc + val;
      });
    }
  }]);

  return IntervalSet;
}();

exports.default = IntervalSet;
},{"../Token.js":"tczR","./Interval.js":"JCiE"}],"BwnW":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/**
 * The following images show the relation of states and
 * {@link ATNState//transitions} for various grammar constructs.
 *
 * <ul>
 *
 * <li>Solid edges marked with an &//0949; indicate a required
 * {@link EpsilonTransition}.</li>
 *
 * <li>Dashed edges indicate locations where any transition derived from
 * {@link Transition} might appear.</li>
 *
 * <li>Dashed nodes are place holders for either a sequence of linked
 * {@link BasicState} states or the inclusion of a block representing a nested
 * construct in one of the forms below.</li>
 *
 * <li>Nodes showing multiple outgoing alternatives with a {@code ...} support
 * any number of alternatives (one or more). Nodes without the {@code ...} only
 * support the exact number of alternatives shown in the diagram.</li>
 *
 * </ul>
 *
 * <h2>Basic Blocks</h2>
 *
 * <h3>Rule</h3>
 *
 * <embed src="images/Rule.svg" type="image/svg+xml"/>
 *
 * <h3>Block of 1 or more alternatives</h3>
 *
 * <embed src="images/Block.svg" type="image/svg+xml"/>
 *
 * <h2>Greedy Loops</h2>
 *
 * <h3>Greedy Closure: {@code (...)*}</h3>
 *
 * <embed src="images/ClosureGreedy.svg" type="image/svg+xml"/>
 *
 * <h3>Greedy Positive Closure: {@code (...)+}</h3>
 *
 * <embed src="images/PositiveClosureGreedy.svg" type="image/svg+xml"/>
 *
 * <h3>Greedy Optional: {@code (...)?}</h3>
 *
 * <embed src="images/OptionalGreedy.svg" type="image/svg+xml"/>
 *
 * <h2>Non-Greedy Loops</h2>
 *
 * <h3>Non-Greedy Closure: {@code (...)*?}</h3>
 *
 * <embed src="images/ClosureNonGreedy.svg" type="image/svg+xml"/>
 *
 * <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>
 *
 * <embed src="images/PositiveClosureNonGreedy.svg" type="image/svg+xml"/>
 *
 * <h3>Non-Greedy Optional: {@code (...)??}</h3>
 *
 * <embed src="images/OptionalNonGreedy.svg" type="image/svg+xml"/>
 */
var ATNState = /*#__PURE__*/function () {
  function ATNState() {
    _classCallCheck(this, ATNState);

    // Which ATN are we in?
    this.atn = null;
    this.stateNumber = ATNState.INVALID_STATE_NUMBER;
    this.stateType = null;
    this.ruleIndex = 0; // at runtime, we don't have Rule objects

    this.epsilonOnlyTransitions = false; // Track the transitions emanating from this ATN state.

    this.transitions = []; // Used to cache lookahead during parsing, not used during construction

    this.nextTokenWithinRule = null;
  }

  _createClass(ATNState, [{
    key: "toString",
    value: function toString() {
      return this.stateNumber;
    }
  }, {
    key: "equals",
    value: function equals(other) {
      if (other instanceof ATNState) {
        return this.stateNumber === other.stateNumber;
      } else {
        return false;
      }
    }
  }, {
    key: "isNonGreedyExitState",
    value: function isNonGreedyExitState() {
      return false;
    }
  }, {
    key: "addTransition",
    value: function addTransition(trans, index) {
      if (index === undefined) {
        index = -1;
      }

      if (this.transitions.length === 0) {
        this.epsilonOnlyTransitions = trans.isEpsilon;
      } else if (this.epsilonOnlyTransitions !== trans.isEpsilon) {
        this.epsilonOnlyTransitions = false;
      }

      if (index === -1) {
        this.transitions.push(trans);
      } else {
        this.transitions.splice(index, 1, trans);
      }
    }
  }]);

  return ATNState;
}(); // constants for serialization


exports.default = ATNState;
ATNState.INVALID_TYPE = 0;
ATNState.BASIC = 1;
ATNState.RULE_START = 2;
ATNState.BLOCK_START = 3;
ATNState.PLUS_BLOCK_START = 4;
ATNState.STAR_BLOCK_START = 5;
ATNState.TOKEN_START = 6;
ATNState.RULE_STOP = 7;
ATNState.BLOCK_END = 8;
ATNState.STAR_LOOP_BACK = 9;
ATNState.STAR_LOOP_ENTRY = 10;
ATNState.PLUS_LOOP_BACK = 11;
ATNState.LOOP_END = 12;
ATNState.serializationNames = ["INVALID", "BASIC", "RULE_START", "BLOCK_START", "PLUS_BLOCK_START", "STAR_BLOCK_START", "TOKEN_START", "RULE_STOP", "BLOCK_END", "STAR_LOOP_BACK", "STAR_LOOP_ENTRY", "PLUS_LOOP_BACK", "LOOP_END"];
ATNState.INVALID_STATE_NUMBER = -1;
},{}],"WskT":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ATNState2 = _interopRequireDefault(require("./ATNState.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * The last node in the ATN for a rule, unless that rule is the start symbol.
 * In that case, there is one transition to EOF. Later, we might encode
 * references to all calls to this rule to compute FOLLOW sets for
 * error handling
 */
var RuleStopState = /*#__PURE__*/function (_ATNState) {
  _inherits(RuleStopState, _ATNState);

  var _super = _createSuper(RuleStopState);

  function RuleStopState() {
    var _this;

    _classCallCheck(this, RuleStopState);

    _this = _super.call(this);
    _this.stateType = _ATNState2.default.RULE_STOP;
    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
  }

  return _createClass(RuleStopState);
}(_ATNState2.default);

exports.default = RuleStopState;
},{"./ATNState.js":"BwnW"}],"M4hi":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/**
 * An ATN transition between any two ATN states.  Subclasses define
 * atom, set, epsilon, action, predicate, rule transitions.
 *
 * <p>This is a one way link.  It emanates from a state (usually via a list of
 * transitions) and has a target state.</p>
 *
 * <p>Since we never have to change the ATN transitions once we construct it,
 * we can fix these transitions as specific classes. The DFA transitions
 * on the other hand need to update the labels as it adds transitions to
 * the states. We'll use the term Edge for the DFA to distinguish them from
 * ATN transitions.</p>
 */
var Transition = /*#__PURE__*/_createClass(function Transition(target) {
  _classCallCheck(this, Transition);

  // The target of this transition.
  if (target === undefined || target === null) {
    throw "target cannot be null.";
  }

  this.target = target; // Are we epsilon, action, sempred?

  this.isEpsilon = false;
  this.label = null;
}); // constants for serialization


exports.default = Transition;
Transition.EPSILON = 1;
Transition.RANGE = 2;
Transition.RULE = 3; // e.g., {isType(input.LT(1))}?

Transition.PREDICATE = 4;
Transition.ATOM = 5;
Transition.ACTION = 6; // ~(A|B) or ~atom, wildcard, which convert to next 2

Transition.SET = 7;
Transition.NOT_SET = 8;
Transition.WILDCARD = 9;
Transition.PRECEDENCE = 10;
Transition.serializationNames = ["INVALID", "EPSILON", "RANGE", "RULE", "PREDICATE", "ATOM", "ACTION", "SET", "NOT_SET", "WILDCARD", "PRECEDENCE"];
Transition.serializationTypes = {
  EpsilonTransition: Transition.EPSILON,
  RangeTransition: Transition.RANGE,
  RuleTransition: Transition.RULE,
  PredicateTransition: Transition.PREDICATE,
  AtomTransition: Transition.ATOM,
  ActionTransition: Transition.ACTION,
  SetTransition: Transition.SET,
  NotSetTransition: Transition.NOT_SET,
  WildcardTransition: Transition.WILDCARD,
  PrecedencePredicateTransition: Transition.PRECEDENCE
};
},{}],"VKr2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Transition2 = _interopRequireDefault(require("./Transition.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RuleTransition = /*#__PURE__*/function (_Transition) {
  _inherits(RuleTransition, _Transition);

  var _super = _createSuper(RuleTransition);

  function RuleTransition(ruleStart, ruleIndex, precedence, followState) {
    var _this;

    _classCallCheck(this, RuleTransition);

    _this = _super.call(this, ruleStart); // ptr to the rule definition object for this rule ref

    _this.ruleIndex = ruleIndex;
    _this.precedence = precedence; // what node to begin computations following ref to rule

    _this.followState = followState;
    _this.serializationType = _Transition2.default.RULE;
    _this.isEpsilon = true;
    return _this;
  }

  _createClass(RuleTransition, [{
    key: "matches",
    value: function matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return false;
    }
  }]);

  return RuleTransition;
}(_Transition2.default);

exports.default = RuleTransition;
},{"./Transition.js":"M4hi"}],"csAp":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _IntervalSet = _interopRequireDefault(require("../misc/IntervalSet.js"));

var _Token = _interopRequireDefault(require("../Token.js"));

var _Transition2 = _interopRequireDefault(require("./Transition.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SetTransition = /*#__PURE__*/function (_Transition) {
  _inherits(SetTransition, _Transition);

  var _super = _createSuper(SetTransition);

  function SetTransition(target, set) {
    var _this;

    _classCallCheck(this, SetTransition);

    _this = _super.call(this, target);
    _this.serializationType = _Transition2.default.SET;

    if (set !== undefined && set !== null) {
      _this.label = set;
    } else {
      _this.label = new _IntervalSet.default();

      _this.label.addOne(_Token.default.INVALID_TYPE);
    }

    return _this;
  }

  _createClass(SetTransition, [{
    key: "matches",
    value: function matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return this.label.contains(symbol);
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.label.toString();
    }
  }]);

  return SetTransition;
}(_Transition2.default);

exports.default = SetTransition;
},{"../misc/IntervalSet.js":"lP1U","../Token.js":"tczR","./Transition.js":"M4hi"}],"kgAb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Transition = _interopRequireDefault(require("./Transition.js"));

var _SetTransition2 = _interopRequireDefault(require("./SetTransition.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var NotSetTransition = /*#__PURE__*/function (_SetTransition) {
  _inherits(NotSetTransition, _SetTransition);

  var _super = _createSuper(NotSetTransition);

  function NotSetTransition(target, set) {
    var _this;

    _classCallCheck(this, NotSetTransition);

    _this = _super.call(this, target, set);
    _this.serializationType = _Transition.default.NOT_SET;
    return _this;
  }

  _createClass(NotSetTransition, [{
    key: "matches",
    value: function matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return symbol >= minVocabSymbol && symbol <= maxVocabSymbol && !_get(_getPrototypeOf(NotSetTransition.prototype), "matches", this).call(this, symbol, minVocabSymbol, maxVocabSymbol);
    }
  }, {
    key: "toString",
    value: function toString() {
      return '~' + _get(_getPrototypeOf(NotSetTransition.prototype), "toString", this).call(this);
    }
  }]);

  return NotSetTransition;
}(_SetTransition2.default);

exports.default = NotSetTransition;
},{"./Transition.js":"M4hi","./SetTransition.js":"csAp"}],"WW8v":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Transition2 = _interopRequireDefault(require("./Transition.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var WildcardTransition = /*#__PURE__*/function (_Transition) {
  _inherits(WildcardTransition, _Transition);

  var _super = _createSuper(WildcardTransition);

  function WildcardTransition(target) {
    var _this;

    _classCallCheck(this, WildcardTransition);

    _this = _super.call(this, target);
    _this.serializationType = _Transition2.default.WILDCARD;
    return _this;
  }

  _createClass(WildcardTransition, [{
    key: "matches",
    value: function matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;
    }
  }, {
    key: "toString",
    value: function toString() {
      return ".";
    }
  }]);

  return WildcardTransition;
}(_Transition2.default);

exports.default = WildcardTransition;
},{"./Transition.js":"M4hi"}],"Q4qH":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Transition2 = _interopRequireDefault(require("../transition/Transition.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var AbstractPredicateTransition = /*#__PURE__*/function (_Transition) {
  _inherits(AbstractPredicateTransition, _Transition);

  var _super = _createSuper(AbstractPredicateTransition);

  function AbstractPredicateTransition(target) {
    _classCallCheck(this, AbstractPredicateTransition);

    return _super.call(this, target);
  }

  return _createClass(AbstractPredicateTransition);
}(_Transition2.default);

exports.default = AbstractPredicateTransition;
},{"../transition/Transition.js":"M4hi"}],"hndm":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/**
 * The basic notion of a tree has a parent, a payload, and a list of children.
 * It is the most abstract interface for all the trees used by ANTLR.
 */
var Tree = /*#__PURE__*/_createClass(function Tree() {
  _classCallCheck(this, Tree);
});

exports.default = Tree;
},{}],"IVwf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tree2 = _interopRequireDefault(require("./Tree.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SyntaxTree = /*#__PURE__*/function (_Tree) {
  _inherits(SyntaxTree, _Tree);

  var _super = _createSuper(SyntaxTree);

  function SyntaxTree() {
    _classCallCheck(this, SyntaxTree);

    return _super.apply(this, arguments);
  }

  return _createClass(SyntaxTree);
}(_Tree2.default);

exports.default = SyntaxTree;
},{"./Tree.js":"hndm"}],"gRgh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _SyntaxTree2 = _interopRequireDefault(require("./SyntaxTree.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ParseTree = /*#__PURE__*/function (_SyntaxTree) {
  _inherits(ParseTree, _SyntaxTree);

  var _super = _createSuper(ParseTree);

  function ParseTree() {
    _classCallCheck(this, ParseTree);

    return _super.apply(this, arguments);
  }

  return _createClass(ParseTree);
}(_SyntaxTree2.default);

exports.default = ParseTree;
},{"./SyntaxTree.js":"IVwf"}],"AQV4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ParseTree2 = _interopRequireDefault(require("./ParseTree.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RuleNode = /*#__PURE__*/function (_ParseTree) {
  _inherits(RuleNode, _ParseTree);

  var _super = _createSuper(RuleNode);

  function RuleNode() {
    _classCallCheck(this, RuleNode);

    return _super.apply(this, arguments);
  }

  _createClass(RuleNode, [{
    key: "getRuleContext",
    value: function getRuleContext() {
      throw new Error("missing interface implementation");
    }
  }]);

  return RuleNode;
}(_ParseTree2.default);

exports.default = RuleNode;
},{"./ParseTree.js":"gRgh"}],"GZ6H":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ParseTree2 = _interopRequireDefault(require("./ParseTree.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var TerminalNode = /*#__PURE__*/function (_ParseTree) {
  _inherits(TerminalNode, _ParseTree);

  var _super = _createSuper(TerminalNode);

  function TerminalNode() {
    _classCallCheck(this, TerminalNode);

    return _super.apply(this, arguments);
  }

  return _createClass(TerminalNode);
}(_ParseTree2.default);

exports.default = TerminalNode;
},{"./ParseTree.js":"gRgh"}],"UIKP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _TerminalNode2 = _interopRequireDefault(require("./TerminalNode.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ErrorNode = /*#__PURE__*/function (_TerminalNode) {
  _inherits(ErrorNode, _TerminalNode);

  var _super = _createSuper(ErrorNode);

  function ErrorNode() {
    _classCallCheck(this, ErrorNode);

    return _super.apply(this, arguments);
  }

  return _createClass(ErrorNode);
}(_TerminalNode2.default);

exports.default = ErrorNode;
},{"./TerminalNode.js":"GZ6H"}],"e67t":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = escapeWhitespace;

/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.
 * Use is of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
function escapeWhitespace(s, escapeSpaces) {
  s = s.replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r");

  if (escapeSpaces) {
    s = s.replace(/ /g, "\xB7");
  }

  return s;
}
},{}],"gLxX":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Token = _interopRequireDefault(require("../Token.js"));

var _ErrorNode = _interopRequireDefault(require("./ErrorNode.js"));

var _TerminalNode = _interopRequireDefault(require("./TerminalNode.js"));

var _RuleNode = _interopRequireDefault(require("./RuleNode.js"));

var _escapeWhitespace = _interopRequireDefault(require("../utils/escapeWhitespace.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/** A set of utility routines useful for all kinds of ANTLR trees. */
var Trees = {
  /**
   * Print out a whole tree in LISP form. {@link //getNodeText} is used on the
   *  node payloads to get the text for the nodes.  Detect
   *  parse trees and extract data appropriately.
   */
  toStringTree: function toStringTree(tree, ruleNames, recog) {
    ruleNames = ruleNames || null;
    recog = recog || null;

    if (recog !== null) {
      ruleNames = recog.ruleNames;
    }

    var s = Trees.getNodeText(tree, ruleNames);
    s = (0, _escapeWhitespace.default)(s, false);
    var c = tree.getChildCount();

    if (c === 0) {
      return s;
    }

    var res = "(" + s + ' ';

    if (c > 0) {
      s = Trees.toStringTree(tree.getChild(0), ruleNames);
      res = res.concat(s);
    }

    for (var i = 1; i < c; i++) {
      s = Trees.toStringTree(tree.getChild(i), ruleNames);
      res = res.concat(' ' + s);
    }

    res = res.concat(")");
    return res;
  },
  getNodeText: function getNodeText(t, ruleNames, recog) {
    ruleNames = ruleNames || null;
    recog = recog || null;

    if (recog !== null) {
      ruleNames = recog.ruleNames;
    }

    if (ruleNames !== null) {
      if (t instanceof _RuleNode.default) {
        var context = t.getRuleContext();
        var altNumber = context.getAltNumber(); // use const value of ATN.INVALID_ALT_NUMBER to avoid circular dependency

        if (altNumber != 0) {
          return ruleNames[t.ruleIndex] + ":" + altNumber;
        }

        return ruleNames[t.ruleIndex];
      } else if (t instanceof _ErrorNode.default) {
        return t.toString();
      } else if (t instanceof _TerminalNode.default) {
        if (t.symbol !== null) {
          return t.symbol.text;
        }
      }
    } // no recog for rule names


    var payload = t.getPayload();

    if (payload instanceof _Token.default) {
      return payload.text;
    }

    return t.getPayload().toString();
  },

  /**
   * Return ordered list of all children of this node
   */
  getChildren: function getChildren(t) {
    var list = [];

    for (var i = 0; i < t.getChildCount(); i++) {
      list.push(t.getChild(i));
    }

    return list;
  },

  /**
   * Return a list of all ancestors of this node.  The first node of
   * list is the root and the last is the parent of this node.
   */
  getAncestors: function getAncestors(t) {
    var ancestors = [];
    t = t.getParent();

    while (t !== null) {
      ancestors = [t].concat(ancestors);
      t = t.getParent();
    }

    return ancestors;
  },
  findAllTokenNodes: function findAllTokenNodes(t, ttype) {
    return Trees.findAllNodes(t, ttype, true);
  },
  findAllRuleNodes: function findAllRuleNodes(t, ruleIndex) {
    return Trees.findAllNodes(t, ruleIndex, false);
  },
  findAllNodes: function findAllNodes(t, index, findTokens) {
    var nodes = [];

    Trees._findAllNodes(t, index, findTokens, nodes);

    return nodes;
  },
  _findAllNodes: function _findAllNodes(t, index, findTokens, nodes) {
    // check this node (the root) first
    if (findTokens && t instanceof _TerminalNode.default) {
      if (t.symbol.type === index) {
        nodes.push(t);
      }
    } else if (!findTokens && t instanceof _RuleNode.default) {
      if (t.ruleIndex === index) {
        nodes.push(t);
      }
    } // check children


    for (var i = 0; i < t.getChildCount(); i++) {
      Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);
    }
  },
  descendants: function descendants(t) {
    var nodes = [t];

    for (var i = 0; i < t.getChildCount(); i++) {
      nodes = nodes.concat(Trees.descendants(t.getChild(i)));
    }

    return nodes;
  }
};
var _default = Trees;
exports.default = _default;
},{"../Token.js":"tczR","./ErrorNode.js":"UIKP","./TerminalNode.js":"GZ6H","./RuleNode.js":"AQV4","../utils/escapeWhitespace.js":"e67t"}],"WP8O":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _RuleNode2 = _interopRequireDefault(require("../tree/RuleNode.js"));

var _Interval = _interopRequireDefault(require("../misc/Interval.js"));

var _Trees = _interopRequireDefault(require("../tree/Trees.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RuleContext = /*#__PURE__*/function (_RuleNode) {
  _inherits(RuleContext, _RuleNode);

  var _super = _createSuper(RuleContext);

  /** A rule context is a record of a single rule invocation. It knows
   * which context invoked it, if any. If there is no parent context, then
   * naturally the invoking state is not valid.  The parent link
   * provides a chain upwards from the current rule invocation to the root
   * of the invocation tree, forming a stack. We actually carry no
   * information about the rule associated with this context (except
   * when parsing). We keep only the state number of the invoking state from
   * the ATN submachine that invoked this. Contrast this with the s
   * pointer inside ParserRuleContext that tracks the current state
   * being "executed" for the current rule.
   *
   * The parent contexts are useful for computing lookahead sets and
   * getting error information.
   *
   * These objects are used during parsing and prediction.
   * For the special case of parsers, we use the subclass
   * ParserRuleContext.
   *
   * @see ParserRuleContext
   */
  function RuleContext(parent, invokingState) {
    var _this;

    _classCallCheck(this, RuleContext);

    // What context invoked this rule?
    _this = _super.call(this);
    _this.parentCtx = parent || null;
    /**
     * What state invoked the rule associated with this context?
     * The "return address" is the followState of invokingState
     * If parent is null, this should be -1.
     */

    _this.invokingState = invokingState || -1;
    return _this;
  }

  _createClass(RuleContext, [{
    key: "depth",
    value: function depth() {
      var n = 0;
      var p = this;

      while (p !== null) {
        p = p.parentCtx;
        n += 1;
      }

      return n;
    }
    /**
     * A context is empty if there is no invoking state; meaning nobody call
     * current context.
     */

  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return this.invokingState === -1;
    } // satisfy the ParseTree / SyntaxTree interface

  }, {
    key: "getSourceInterval",
    value: function getSourceInterval() {
      return _Interval.default.INVALID_INTERVAL;
    }
  }, {
    key: "getRuleContext",
    value: function getRuleContext() {
      return this;
    }
  }, {
    key: "getPayload",
    value: function getPayload() {
      return this;
    }
    /**
     * Return the combined text of all child nodes. This method only considers
     * tokens which have been added to the parse tree.
     * <p>
     * Since tokens on hidden channels (e.g. whitespace or comments) are not
     * added to the parse trees, they will not appear in the output of this
     * method.
     */

  }, {
    key: "getText",
    value: function getText() {
      if (this.getChildCount() === 0) {
        return "";
      } else {
        return this.children.map(function (child) {
          return child.getText();
        }).join("");
      }
    }
    /**
     * For rule associated with this parse tree internal node, return
     * the outer alternative number used to match the input. Default
     * implementation does not compute nor store this alt num. Create
     * a subclass of ParserRuleContext with backing field and set
     * option contextSuperClass.
     * to set it.
     */

  }, {
    key: "getAltNumber",
    value: function getAltNumber() {
      // use constant value of ATN.INVALID_ALT_NUMBER to avoid circular dependency
      return 0;
    }
    /**
     * Set the outer alternative number for this context node. Default
     * implementation does nothing to avoid backing field overhead for
     * trees that don't need it.  Create
     * a subclass of ParserRuleContext with backing field and set
     * option contextSuperClass.
     */

  }, {
    key: "setAltNumber",
    value: function setAltNumber(altNumber) {}
  }, {
    key: "getChild",
    value: function getChild(i) {
      return null;
    }
  }, {
    key: "getChildCount",
    value: function getChildCount() {
      return 0;
    }
  }, {
    key: "accept",
    value: function accept(visitor) {
      return visitor.visitChildren(this);
    }
    /**
     * Print out a whole tree, not just a node, in LISP format
     * (root child1 .. childN). Print just a node if this is a leaf.
     */

  }, {
    key: "toStringTree",
    value: function toStringTree(ruleNames, recog) {
      return _Trees.default.toStringTree(this, ruleNames, recog);
    }
  }, {
    key: "toString",
    value: function toString(ruleNames, stop) {
      ruleNames = ruleNames || null;
      stop = stop || null;
      var p = this;
      var s = "[";

      while (p !== null && p !== stop) {
        if (ruleNames === null) {
          if (!p.isEmpty()) {
            s += p.invokingState;
          }
        } else {
          var ri = p.ruleIndex;
          var ruleName = ri >= 0 && ri < ruleNames.length ? ruleNames[ri] : "" + ri;
          s += ruleName;
        }

        if (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {
          s += " ";
        }

        p = p.parentCtx;
      }

      s += "]";
      return s;
    }
  }]);

  return RuleContext;
}(_RuleNode2.default);

exports.default = RuleContext;
},{"../tree/RuleNode.js":"AQV4","../misc/Interval.js":"JCiE","../tree/Trees.js":"gLxX"}],"QQ7c":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
var PredictionContext = /*#__PURE__*/function () {
  function PredictionContext(cachedHashCode) {
    _classCallCheck(this, PredictionContext);

    this.cachedHashCode = cachedHashCode;
  }
  /**
   * Stores the computed hash code of this {@link PredictionContext}. The hash
   * code is computed in parts to match the following reference algorithm.
   *
   * <pre>
   * private int referenceHashCode() {
   * int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link
   * //INITIAL_HASH});
   *
   * for (int i = 0; i &lt; {@link //size()}; i++) {
   * hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent
   * getParent}(i));
   * }
   *
   * for (int i = 0; i &lt; {@link //size()}; i++) {
   * hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link
   * //getReturnState getReturnState}(i));
   * }
   *
   * hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link
   * //size()});
   * return hash;
   * }
   * </pre>
   * This means only the {@link //EMPTY} context is in set.
   */


  _createClass(PredictionContext, [{
    key: "isEmpty",
    value: function isEmpty() {
      return this === PredictionContext.EMPTY;
    }
  }, {
    key: "hasEmptyPath",
    value: function hasEmptyPath() {
      return this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;
    }
  }, {
    key: "hashCode",
    value: function hashCode() {
      return this.cachedHashCode;
    }
  }, {
    key: "updateHashCode",
    value: function updateHashCode(hash) {
      hash.update(this.cachedHashCode);
    }
  }]);

  return PredictionContext;
}();
/**
 * Represents {@code $} in local context prediction, which means wildcard.
 * {@code//+x =//}.
 */


exports.default = PredictionContext;
PredictionContext.EMPTY = null;
/**
 * Represents {@code $} in an array in full context mode, when {@code $}
 * doesn't mean wildcard: {@code $ + x = [$,x]}. Here,
 * {@code $} = {@link //EMPTY_RETURN_STATE}.
 */

PredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;
PredictionContext.globalNodeCount = 1;
PredictionContext.id = PredictionContext.globalNodeCount;
},{}],"Soc2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _PredictionContext2 = _interopRequireDefault(require("./PredictionContext.js"));

var _equalArrays = _interopRequireDefault(require("../utils/equalArrays.js"));

var _HashCode = _interopRequireDefault(require("../misc/HashCode.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ArrayPredictionContext = /*#__PURE__*/function (_PredictionContext) {
  _inherits(ArrayPredictionContext, _PredictionContext);

  var _super = _createSuper(ArrayPredictionContext);

  function ArrayPredictionContext(parents, returnStates) {
    var _this;

    _classCallCheck(this, ArrayPredictionContext);

    /**
     * Parent can be null only if full ctx mode and we make an array
     * from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using
     * null parent and
     * returnState == {@link //EMPTY_RETURN_STATE}.
     */
    var h = new _HashCode.default();
    h.update(parents, returnStates);
    var hashCode = h.finish();
    _this = _super.call(this, hashCode);
    _this.parents = parents;
    _this.returnStates = returnStates;
    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
  }

  _createClass(ArrayPredictionContext, [{
    key: "isEmpty",
    value: function isEmpty() {
      // since EMPTY_RETURN_STATE can only appear in the last position, we
      // don't need to verify that size==1
      return this.returnStates[0] === _PredictionContext2.default.EMPTY_RETURN_STATE;
    }
  }, {
    key: "getParent",
    value: function getParent(index) {
      return this.parents[index];
    }
  }, {
    key: "getReturnState",
    value: function getReturnState(index) {
      return this.returnStates[index];
    }
  }, {
    key: "equals",
    value: function equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof ArrayPredictionContext)) {
        return false;
      } else if (this.hashCode() !== other.hashCode()) {
        return false; // can't be same if hash is different
      } else {
        return (0, _equalArrays.default)(this.returnStates, other.returnStates) && (0, _equalArrays.default)(this.parents, other.parents);
      }
    }
  }, {
    key: "toString",
    value: function toString() {
      if (this.isEmpty()) {
        return "[]";
      } else {
        var s = "[";

        for (var i = 0; i < this.returnStates.length; i++) {
          if (i > 0) {
            s = s + ", ";
          }

          if (this.returnStates[i] === _PredictionContext2.default.EMPTY_RETURN_STATE) {
            s = s + "$";
            continue;
          }

          s = s + this.returnStates[i];

          if (this.parents[i] !== null) {
            s = s + " " + this.parents[i];
          } else {
            s = s + "null";
          }
        }

        return s + "]";
      }
    }
  }, {
    key: "length",
    get: function get() {
      return this.returnStates.length;
    }
  }]);

  return ArrayPredictionContext;
}(_PredictionContext2.default);

exports.default = ArrayPredictionContext;
},{"./PredictionContext.js":"QQ7c","../utils/equalArrays.js":"fx5K","../misc/HashCode.js":"JXAn"}],"rrYw":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _PredictionContext2 = _interopRequireDefault(require("./PredictionContext.js"));

var _HashCode = _interopRequireDefault(require("../misc/HashCode.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SingletonPredictionContext = /*#__PURE__*/function (_PredictionContext) {
  _inherits(SingletonPredictionContext, _PredictionContext);

  var _super = _createSuper(SingletonPredictionContext);

  function SingletonPredictionContext(parent, returnState) {
    var _this;

    _classCallCheck(this, SingletonPredictionContext);

    var hashCode = 0;
    var hash = new _HashCode.default();

    if (parent !== null) {
      hash.update(parent, returnState);
    } else {
      hash.update(1);
    }

    hashCode = hash.finish();
    _this = _super.call(this, hashCode);
    _this.parentCtx = parent;
    _this.returnState = returnState;
    return _this;
  }

  _createClass(SingletonPredictionContext, [{
    key: "getParent",
    value: function getParent(index) {
      return this.parentCtx;
    }
  }, {
    key: "getReturnState",
    value: function getReturnState(index) {
      return this.returnState;
    }
  }, {
    key: "equals",
    value: function equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof SingletonPredictionContext)) {
        return false;
      } else if (this.hashCode() !== other.hashCode()) {
        return false; // can't be same if hash is different
      } else {
        if (this.returnState !== other.returnState) return false;else if (this.parentCtx == null) return other.parentCtx == null;else return this.parentCtx.equals(other.parentCtx);
      }
    }
  }, {
    key: "toString",
    value: function toString() {
      var up = this.parentCtx === null ? "" : this.parentCtx.toString();

      if (up.length === 0) {
        if (this.returnState === _PredictionContext2.default.EMPTY_RETURN_STATE) {
          return "$";
        } else {
          return "" + this.returnState;
        }
      } else {
        return "" + this.returnState + " " + up;
      }
    }
  }, {
    key: "length",
    get: function get() {
      return 1;
    }
  }], [{
    key: "create",
    value: function create(parent, returnState) {
      if (returnState === _PredictionContext2.default.EMPTY_RETURN_STATE && parent === null) {
        // someone can pass in the bits of an array ctx that mean $
        return _PredictionContext2.default.EMPTY;
      } else {
        return new SingletonPredictionContext(parent, returnState);
      }
    }
  }]);

  return SingletonPredictionContext;
}(_PredictionContext2.default);

exports.default = SingletonPredictionContext;
},{"./PredictionContext.js":"QQ7c","../misc/HashCode.js":"JXAn"}],"PX8I":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _PredictionContext = _interopRequireDefault(require("./PredictionContext.js"));

var _SingletonPredictionContext = _interopRequireDefault(require("./SingletonPredictionContext.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var EmptyPredictionContext = /*#__PURE__*/function (_SingletonPredictionC) {
  _inherits(EmptyPredictionContext, _SingletonPredictionC);

  var _super = _createSuper(EmptyPredictionContext);

  function EmptyPredictionContext() {
    _classCallCheck(this, EmptyPredictionContext);

    return _super.call(this, null, _PredictionContext.default.EMPTY_RETURN_STATE);
  }

  _createClass(EmptyPredictionContext, [{
    key: "isEmpty",
    value: function isEmpty() {
      return true;
    }
  }, {
    key: "getParent",
    value: function getParent(index) {
      return null;
    }
  }, {
    key: "getReturnState",
    value: function getReturnState(index) {
      return this.returnState;
    }
  }, {
    key: "equals",
    value: function equals(other) {
      return this === other;
    }
  }, {
    key: "toString",
    value: function toString() {
      return "$";
    }
  }]);

  return EmptyPredictionContext;
}(_SingletonPredictionContext.default);

exports.default = EmptyPredictionContext;
_PredictionContext.default.EMPTY = new EmptyPredictionContext();
},{"./PredictionContext.js":"QQ7c","./SingletonPredictionContext.js":"rrYw"}],"TPpe":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _standardEqualsFunction = _interopRequireDefault(require("../utils/standardEqualsFunction.js"));

var _standardHashCodeFunction = _interopRequireDefault(require("../utils/standardHashCodeFunction.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var HASH_KEY_PREFIX = "h-";

var HashMap = /*#__PURE__*/function () {
  function HashMap(hashFunction, equalsFunction) {
    _classCallCheck(this, HashMap);

    this.data = {};
    this.hashFunction = hashFunction || _standardHashCodeFunction.default;
    this.equalsFunction = equalsFunction || _standardEqualsFunction.default;
  }

  _createClass(HashMap, [{
    key: "set",
    value: function set(key, value) {
      var hashKey = HASH_KEY_PREFIX + this.hashFunction(key);

      if (hashKey in this.data) {
        var entries = this.data[hashKey];

        for (var i = 0; i < entries.length; i++) {
          var entry = entries[i];

          if (this.equalsFunction(key, entry.key)) {
            var oldValue = entry.value;
            entry.value = value;
            return oldValue;
          }
        }

        entries.push({
          key: key,
          value: value
        });
        return value;
      } else {
        this.data[hashKey] = [{
          key: key,
          value: value
        }];
        return value;
      }
    }
  }, {
    key: "containsKey",
    value: function containsKey(key) {
      var hashKey = HASH_KEY_PREFIX + this.hashFunction(key);

      if (hashKey in this.data) {
        var entries = this.data[hashKey];

        for (var i = 0; i < entries.length; i++) {
          var entry = entries[i];
          if (this.equalsFunction(key, entry.key)) return true;
        }
      }

      return false;
    }
  }, {
    key: "get",
    value: function get(key) {
      var hashKey = HASH_KEY_PREFIX + this.hashFunction(key);

      if (hashKey in this.data) {
        var entries = this.data[hashKey];

        for (var i = 0; i < entries.length; i++) {
          var entry = entries[i];
          if (this.equalsFunction(key, entry.key)) return entry.value;
        }
      }

      return null;
    }
  }, {
    key: "entries",
    value: function entries() {
      var _this = this;

      return Object.keys(this.data).filter(function (key) {
        return key.startsWith(HASH_KEY_PREFIX);
      }).flatMap(function (key) {
        return _this.data[key];
      }, this);
    }
  }, {
    key: "getKeys",
    value: function getKeys() {
      return this.entries().map(function (e) {
        return e.key;
      });
    }
  }, {
    key: "getValues",
    value: function getValues() {
      return this.entries().map(function (e) {
        return e.value;
      });
    }
  }, {
    key: "toString",
    value: function toString() {
      var ss = this.entries().map(function (e) {
        return '{' + e.key + ':' + e.value + '}';
      });
      return '[' + ss.join(", ") + ']';
    }
  }, {
    key: "length",
    get: function get() {
      var _this2 = this;

      return Object.keys(this.data).filter(function (key) {
        return key.startsWith(HASH_KEY_PREFIX);
      }).map(function (key) {
        return _this2.data[key].length;
      }, this).reduce(function (accum, item) {
        return accum + item;
      }, 0);
    }
  }]);

  return HashMap;
}();

exports.default = HashMap;
},{"../utils/standardEqualsFunction.js":"aFH0","../utils/standardHashCodeFunction.js":"ccNy"}],"D05O":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAllContextNodes = getAllContextNodes;
exports.getCachedPredictionContext = getCachedPredictionContext;
exports.merge = merge;
exports.predictionContextFromRuleContext = predictionContextFromRuleContext;

var _RuleContext = _interopRequireDefault(require("./RuleContext.js"));

var _PredictionContext = _interopRequireDefault(require("./PredictionContext.js"));

var _ArrayPredictionContext = _interopRequireDefault(require("./ArrayPredictionContext.js"));

var _SingletonPredictionContext = _interopRequireDefault(require("./SingletonPredictionContext.js"));

var _EmptyPredictionContext = _interopRequireDefault(require("./EmptyPredictionContext.js"));

var _HashMap = _interopRequireDefault(require("../misc/HashMap.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.
 * Use is of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/**
 * Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.
 * Return {@link //EMPTY} if {@code outerContext} is empty or null.
 */
function predictionContextFromRuleContext(atn, outerContext) {
  if (outerContext === undefined || outerContext === null) {
    outerContext = _RuleContext.default.EMPTY;
  } // if we are in RuleContext of start rule, s, then PredictionContext
  // is EMPTY. Nobody called us. (if we are empty, return empty)


  if (outerContext.parentCtx === null || outerContext === _RuleContext.default.EMPTY) {
    return _PredictionContext.default.EMPTY;
  } // If we have a parent, convert it to a PredictionContext graph


  var parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);
  var state = atn.states[outerContext.invokingState];
  var transition = state.transitions[0];
  return _SingletonPredictionContext.default.create(parent, transition.followState.stateNumber);
}

function getCachedPredictionContext(context, contextCache, visited) {
  if (context.isEmpty()) {
    return context;
  }

  var existing = visited.get(context) || null;

  if (existing !== null) {
    return existing;
  }

  existing = contextCache.get(context);

  if (existing !== null) {
    visited.set(context, existing);
    return existing;
  }

  var changed = false;
  var parents = [];

  for (var i = 0; i < parents.length; i++) {
    var parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);

    if (changed || parent !== context.getParent(i)) {
      if (!changed) {
        parents = [];

        for (var j = 0; j < context.length; j++) {
          parents[j] = context.getParent(j);
        }

        changed = true;
      }

      parents[i] = parent;
    }
  }

  if (!changed) {
    contextCache.add(context);
    visited.set(context, context);
    return context;
  }

  var updated = null;

  if (parents.length === 0) {
    updated = _PredictionContext.default.EMPTY;
  } else if (parents.length === 1) {
    updated = _SingletonPredictionContext.default.create(parents[0], context.getReturnState(0));
  } else {
    updated = new _ArrayPredictionContext.default(parents, context.returnStates);
  }

  contextCache.add(updated);
  visited.set(updated, updated);
  visited.set(context, updated);
  return updated;
}

function merge(a, b, rootIsWildcard, mergeCache) {
  // share same graph if both same
  if (a === b) {
    return a;
  }

  if (a instanceof _SingletonPredictionContext.default && b instanceof _SingletonPredictionContext.default) {
    return mergeSingletons(a, b, rootIsWildcard, mergeCache);
  } // At least one of a or b is array
  // If one is $ and rootIsWildcard, return $ as// wildcard


  if (rootIsWildcard) {
    if (a instanceof _EmptyPredictionContext.default) {
      return a;
    }

    if (b instanceof _EmptyPredictionContext.default) {
      return b;
    }
  } // convert singleton so both are arrays to normalize


  if (a instanceof _SingletonPredictionContext.default) {
    a = new _ArrayPredictionContext.default([a.getParent()], [a.returnState]);
  }

  if (b instanceof _SingletonPredictionContext.default) {
    b = new _ArrayPredictionContext.default([b.getParent()], [b.returnState]);
  }

  return mergeArrays(a, b, rootIsWildcard, mergeCache);
}
/**
 * Merge two {@link ArrayPredictionContext} instances.
 *
 * <p>Different tops, different parents.<br>
 * <embed src="images/ArrayMerge_DiffTopDiffPar.svg" type="image/svg+xml"/></p>
 *
 * <p>Shared top, same parents.<br>
 * <embed src="images/ArrayMerge_ShareTopSamePar.svg" type="image/svg+xml"/></p>
 *
 * <p>Shared top, different parents.<br>
 * <embed src="images/ArrayMerge_ShareTopDiffPar.svg" type="image/svg+xml"/></p>
 *
 * <p>Shared top, all shared parents.<br>
 * <embed src="images/ArrayMerge_ShareTopSharePar.svg"
 * type="image/svg+xml"/></p>
 *
 * <p>Equal tops, merge parents and reduce top to
 * {@link SingletonPredictionContext}.<br>
 * <embed src="images/ArrayMerge_EqualTop.svg" type="image/svg+xml"/></p>
 */


function mergeArrays(a, b, rootIsWildcard, mergeCache) {
  if (mergeCache !== null) {
    var previous = mergeCache.get(a, b);

    if (previous !== null) {
      return previous;
    }

    previous = mergeCache.get(b, a);

    if (previous !== null) {
      return previous;
    }
  } // merge sorted payloads a + b => M


  var i = 0; // walks a

  var j = 0; // walks b

  var k = 0; // walks target M array

  var mergedReturnStates = [];
  var mergedParents = []; // walk and merge to yield mergedParents, mergedReturnStates

  while (i < a.returnStates.length && j < b.returnStates.length) {
    var a_parent = a.parents[i];
    var b_parent = b.parents[j];

    if (a.returnStates[i] === b.returnStates[j]) {
      // same payload (stack tops are equal), must yield merged singleton
      var payload = a.returnStates[i]; // $+$ = $

      var bothDollars = payload === _PredictionContext.default.EMPTY_RETURN_STATE && a_parent === null && b_parent === null;
      var ax_ax = a_parent !== null && b_parent !== null && a_parent === b_parent; // ax+ax
      // ->
      // ax

      if (bothDollars || ax_ax) {
        mergedParents[k] = a_parent; // choose left

        mergedReturnStates[k] = payload;
      } else {
        // ax+ay -> a'[x,y]
        mergedParents[k] = merge(a_parent, b_parent, rootIsWildcard, mergeCache);
        mergedReturnStates[k] = payload;
      }

      i += 1; // hop over left one as usual

      j += 1; // but also skip one in right side since we merge
    } else if (a.returnStates[i] < b.returnStates[j]) {
      // copy a[i] to M
      mergedParents[k] = a_parent;
      mergedReturnStates[k] = a.returnStates[i];
      i += 1;
    } else {
      // b > a, copy b[j] to M
      mergedParents[k] = b_parent;
      mergedReturnStates[k] = b.returnStates[j];
      j += 1;
    }

    k += 1;
  } // copy over any payloads remaining in either array


  if (i < a.returnStates.length) {
    for (var p = i; p < a.returnStates.length; p++) {
      mergedParents[k] = a.parents[p];
      mergedReturnStates[k] = a.returnStates[p];
      k += 1;
    }
  } else {
    for (var _p = j; _p < b.returnStates.length; _p++) {
      mergedParents[k] = b.parents[_p];
      mergedReturnStates[k] = b.returnStates[_p];
      k += 1;
    }
  } // trim merged if we combined a few that had same stack tops


  if (k < mergedParents.length) {
    // write index < last position; trim
    if (k === 1) {
      // for just one merged element, return singleton top
      var a_ = _SingletonPredictionContext.default.create(mergedParents[0], mergedReturnStates[0]);

      if (mergeCache !== null) {
        mergeCache.set(a, b, a_);
      }

      return a_;
    }

    mergedParents = mergedParents.slice(0, k);
    mergedReturnStates = mergedReturnStates.slice(0, k);
  }

  var M = new _ArrayPredictionContext.default(mergedParents, mergedReturnStates); // if we created same array as a or b, return that instead
  // TODO: track whether this is possible above during merge sort for speed

  if (M === a) {
    if (mergeCache !== null) {
      mergeCache.set(a, b, a);
    }

    return a;
  }

  if (M === b) {
    if (mergeCache !== null) {
      mergeCache.set(a, b, b);
    }

    return b;
  }

  combineCommonParents(mergedParents);

  if (mergeCache !== null) {
    mergeCache.set(a, b, M);
  }

  return M;
}
/**
 * Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}
 * ones.
 */


function combineCommonParents(parents) {
  var uniqueParents = new _HashMap.default();

  for (var p = 0; p < parents.length; p++) {
    var parent = parents[p];

    if (!uniqueParents.containsKey(parent)) {
      uniqueParents.set(parent, parent);
    }
  }

  for (var q = 0; q < parents.length; q++) {
    parents[q] = uniqueParents.get(parents[q]);
  }
}
/**
 * Merge two {@link SingletonPredictionContext} instances.
 *
 * <p>Stack tops equal, parents merge is same; return left graph.<br>
 * <embed src="images/SingletonMerge_SameRootSamePar.svg"
 * type="image/svg+xml"/></p>
 *
 * <p>Same stack top, parents differ; merge parents giving array node, then
 * remainders of those graphs. A new root node is created to point to the
 * merged parents.<br>
 * <embed src="images/SingletonMerge_SameRootDiffPar.svg"
 * type="image/svg+xml"/></p>
 *
 * <p>Different stack tops pointing to same parent. Make array node for the
 * root where both element in the root point to the same (original)
 * parent.<br>
 * <embed src="images/SingletonMerge_DiffRootSamePar.svg"
 * type="image/svg+xml"/></p>
 *
 * <p>Different stack tops pointing to different parents. Make array node for
 * the root where each element points to the corresponding original
 * parent.<br>
 * <embed src="images/SingletonMerge_DiffRootDiffPar.svg"
 * type="image/svg+xml"/></p>
 *
 * @param a the first {@link SingletonPredictionContext}
 * @param b the second {@link SingletonPredictionContext}
 * @param rootIsWildcard {@code true} if this is a local-context merge,
 * otherwise false to indicate a full-context merge
 * @param mergeCache
 */


function mergeSingletons(a, b, rootIsWildcard, mergeCache) {
  if (mergeCache !== null) {
    var previous = mergeCache.get(a, b);

    if (previous !== null) {
      return previous;
    }

    previous = mergeCache.get(b, a);

    if (previous !== null) {
      return previous;
    }
  }

  var rootMerge = mergeRoot(a, b, rootIsWildcard);

  if (rootMerge !== null) {
    if (mergeCache !== null) {
      mergeCache.set(a, b, rootMerge);
    }

    return rootMerge;
  }

  if (a.returnState === b.returnState) {
    var parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache); // if parent is same as existing a or b parent or reduced to a parent,
    // return it

    if (parent === a.parentCtx) {
      return a; // ax + bx = ax, if a=b
    }

    if (parent === b.parentCtx) {
      return b; // ax + bx = bx, if a=b
    } // else: ax + ay = a'[x,y]
    // merge parents x and y, giving array node with x,y then remainders
    // of those graphs. dup a, a' points at merged array
    // new joined parent so create new singleton pointing to it, a'


    var spc = _SingletonPredictionContext.default.create(parent, a.returnState);

    if (mergeCache !== null) {
      mergeCache.set(a, b, spc);
    }

    return spc;
  } else {
    // a != b payloads differ
    // see if we can collapse parents due to $+x parents if local ctx
    var singleParent = null;

    if (a === b || a.parentCtx !== null && a.parentCtx === b.parentCtx) {
      // ax +
      // bx =
      // [a,b]x
      singleParent = a.parentCtx;
    }

    if (singleParent !== null) {
      // parents are same
      // sort payloads and use same parent
      var _payloads = [a.returnState, b.returnState];

      if (a.returnState > b.returnState) {
        _payloads[0] = b.returnState;
        _payloads[1] = a.returnState;
      }

      var _parents = [singleParent, singleParent];
      var apc = new _ArrayPredictionContext.default(_parents, _payloads);

      if (mergeCache !== null) {
        mergeCache.set(a, b, apc);
      }

      return apc;
    } // parents differ and can't merge them. Just pack together
    // into array; can't merge.
    // ax + by = [ax,by]


    var payloads = [a.returnState, b.returnState];
    var parents = [a.parentCtx, b.parentCtx];

    if (a.returnState > b.returnState) {
      // sort by payload
      payloads[0] = b.returnState;
      payloads[1] = a.returnState;
      parents = [b.parentCtx, a.parentCtx];
    }

    var a_ = new _ArrayPredictionContext.default(parents, payloads);

    if (mergeCache !== null) {
      mergeCache.set(a, b, a_);
    }

    return a_;
  }
}
/**
 * Handle case where at least one of {@code a} or {@code b} is
 * {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used
 * to represent {@link //EMPTY}.
 *
 * <h2>Local-Context Merges</h2>
 *
 * <p>These local-context merge operations are used when {@code rootIsWildcard}
 * is true.</p>
 *
 * <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>
 * <embed src="images/LocalMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
 *
 * <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is
 * {@code //EMPTY}; return left graph.<br>
 * <embed src="images/LocalMerge_EmptyParent.svg" type="image/svg+xml"/></p>
 *
 * <p>Special case of last merge if local context.<br>
 * <embed src="images/LocalMerge_DiffRoots.svg" type="image/svg+xml"/></p>
 *
 * <h2>Full-Context Merges</h2>
 *
 * <p>These full-context merge operations are used when {@code rootIsWildcard}
 * is false.</p>
 *
 * <p><embed src="images/FullMerge_EmptyRoots.svg" type="image/svg+xml"/></p>
 *
 * <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and
 * null parent).<br>
 * <embed src="images/FullMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
 *
 * <p><embed src="images/FullMerge_SameRoot.svg" type="image/svg+xml"/></p>
 *
 * @param a the first {@link SingletonPredictionContext}
 * @param b the second {@link SingletonPredictionContext}
 * @param rootIsWildcard {@code true} if this is a local-context merge,
 * otherwise false to indicate a full-context merge
 */


function mergeRoot(a, b, rootIsWildcard) {
  if (rootIsWildcard) {
    if (a === _PredictionContext.default.EMPTY) {
      return _PredictionContext.default.EMPTY; // // + b =//
    }

    if (b === _PredictionContext.default.EMPTY) {
      return _PredictionContext.default.EMPTY; // a +// =//
    }
  } else {
    if (a === _PredictionContext.default.EMPTY && b === _PredictionContext.default.EMPTY) {
      return _PredictionContext.default.EMPTY; // $ + $ = $
    } else if (a === _PredictionContext.default.EMPTY) {
      // $ + x = [$,x]
      var payloads = [b.returnState, _PredictionContext.default.EMPTY_RETURN_STATE];
      var parents = [b.parentCtx, null];
      return new _ArrayPredictionContext.default(parents, payloads);
    } else if (b === _PredictionContext.default.EMPTY) {
      // x + $ = [$,x] ($ is always first if present)
      var _payloads2 = [a.returnState, _PredictionContext.default.EMPTY_RETURN_STATE];
      var _parents2 = [a.parentCtx, null];
      return new _ArrayPredictionContext.default(_parents2, _payloads2);
    }
  }

  return null;
} // ter's recursive version of Sam's getAllNodes()


function getAllContextNodes(context, nodes, visited) {
  if (nodes === null) {
    nodes = [];
    return getAllContextNodes(context, nodes, visited);
  } else if (visited === null) {
    visited = new _HashMap.default();
    return getAllContextNodes(context, nodes, visited);
  } else {
    if (context === null || visited.containsKey(context)) {
      return nodes;
    }

    visited.set(context, context);
    nodes.push(context);

    for (var i = 0; i < context.length; i++) {
      getAllContextNodes(context.getParent(i), nodes, visited);
    }

    return nodes;
  }
}
},{"./RuleContext.js":"WP8O","./PredictionContext.js":"QQ7c","./ArrayPredictionContext.js":"Soc2","./SingletonPredictionContext.js":"rrYw","./EmptyPredictionContext.js":"PX8I","../misc/HashMap.js":"TPpe"}],"krtX":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _HashCode = _interopRequireDefault(require("./HashCode.js"));

var _equalArrays = _interopRequireDefault(require("../utils/equalArrays.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var BitSet = /*#__PURE__*/function () {
  function BitSet() {
    _classCallCheck(this, BitSet);

    this.data = [];
  }

  _createClass(BitSet, [{
    key: "add",
    value: function add(value) {
      this.data[value] = true;
    }
  }, {
    key: "or",
    value: function or(set) {
      var _this = this;

      Object.keys(set.data).map(function (alt) {
        return _this.add(alt);
      }, this);
    }
  }, {
    key: "remove",
    value: function remove(value) {
      delete this.data[value];
    }
  }, {
    key: "has",
    value: function has(value) {
      return this.data[value] === true;
    }
  }, {
    key: "values",
    value: function values() {
      return Object.keys(this.data);
    }
  }, {
    key: "minValue",
    value: function minValue() {
      return Math.min.apply(null, this.values());
    }
  }, {
    key: "hashCode",
    value: function hashCode() {
      return _HashCode.default.hashStuff(this.values());
    }
  }, {
    key: "equals",
    value: function equals(other) {
      return other instanceof BitSet && (0, _equalArrays.default)(this.data, other.data);
    }
  }, {
    key: "toString",
    value: function toString() {
      return "{" + this.values().join(", ") + "}";
    }
  }, {
    key: "length",
    get: function get() {
      return this.values().length;
    }
  }]);

  return BitSet;
}();

exports.default = BitSet;
},{"./HashCode.js":"JXAn","../utils/equalArrays.js":"fx5K"}],"qekX":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Token = _interopRequireDefault(require("../Token.js"));

var _ATNConfig = _interopRequireDefault(require("./ATNConfig.js"));

var _IntervalSet = _interopRequireDefault(require("../misc/IntervalSet.js"));

var _RuleStopState = _interopRequireDefault(require("../state/RuleStopState.js"));

var _RuleTransition = _interopRequireDefault(require("../transition/RuleTransition.js"));

var _NotSetTransition = _interopRequireDefault(require("../transition/NotSetTransition.js"));

var _WildcardTransition = _interopRequireDefault(require("../transition/WildcardTransition.js"));

var _AbstractPredicateTransition = _interopRequireDefault(require("./AbstractPredicateTransition.js"));

var _PredictionContextUtils = require("../context/PredictionContextUtils.js");

var _PredictionContext = _interopRequireDefault(require("../context/PredictionContext.js"));

var _SingletonPredictionContext = _interopRequireDefault(require("../context/SingletonPredictionContext.js"));

var _BitSet = _interopRequireDefault(require("../misc/BitSet.js"));

var _HashSet = _interopRequireDefault(require("../misc/HashSet.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var LL1Analyzer = /*#__PURE__*/function () {
  function LL1Analyzer(atn) {
    _classCallCheck(this, LL1Analyzer);

    this.atn = atn;
  }
  /**
   * Calculates the SLL(1) expected lookahead set for each outgoing transition
   * of an {@link ATNState}. The returned array has one element for each
   * outgoing transition in {@code s}. If the closure from transition
   * <em>i</em> leads to a semantic predicate before matching a symbol, the
   * element at index <em>i</em> of the result will be {@code null}.
   *
   * @param s the ATN state
   * @return the expected symbols for each outgoing transition of {@code s}.
   */


  _createClass(LL1Analyzer, [{
    key: "getDecisionLookahead",
    value: function getDecisionLookahead(s) {
      if (s === null) {
        return null;
      }

      var count = s.transitions.length;
      var look = [];

      for (var alt = 0; alt < count; alt++) {
        look[alt] = new _IntervalSet.default();
        var lookBusy = new _HashSet.default();
        var seeThruPreds = false; // fail to get lookahead upon pred

        this._LOOK(s.transition(alt).target, null, _PredictionContext.default.EMPTY, look[alt], lookBusy, new _BitSet.default(), seeThruPreds, false); // Wipe out lookahead for this alternative if we found nothing
        // or we had a predicate when we !seeThruPreds


        if (look[alt].length === 0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {
          look[alt] = null;
        }
      }

      return look;
    }
    /**
     * Compute set of tokens that can follow {@code s} in the ATN in the
     * specified {@code ctx}.
     *
     * <p>If {@code ctx} is {@code null} and the end of the rule containing
     * {@code s} is reached, {@link Token//EPSILON} is added to the result set.
     * If {@code ctx} is not {@code null} and the end of the outermost rule is
     * reached, {@link Token//EOF} is added to the result set.</p>
     *
     * @param s the ATN state
     * @param stopState the ATN state to stop at. This can be a
     * {@link BlockEndState} to detect epsilon paths through a closure.
     * @param ctx the complete parser context, or {@code null} if the context
     * should be ignored
     *
     * @return The set of tokens that can follow {@code s} in the ATN in the
     * specified {@code ctx}.
     */

  }, {
    key: "LOOK",
    value: function LOOK(s, stopState, ctx) {
      var r = new _IntervalSet.default();
      var seeThruPreds = true; // ignore preds; get all lookahead

      ctx = ctx || null;
      var lookContext = ctx !== null ? (0, _PredictionContextUtils.predictionContextFromRuleContext)(s.atn, ctx) : null;

      this._LOOK(s, stopState, lookContext, r, new _HashSet.default(), new _BitSet.default(), seeThruPreds, true);

      return r;
    }
    /**
     * Compute set of tokens that can follow {@code s} in the ATN in the
     * specified {@code ctx}.
     *
     * <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the
     * rule containing {@code s} is reached, {@link Token//EPSILON} is added to
     * the result set. If {@code ctx} is not {@code null} and {@code addEOF} is
     * {@code true} and {@code stopState} or the end of the outermost rule is
     * reached, {@link Token//EOF} is added to the result set.</p>
     *
     * @param s the ATN state.
     * @param stopState the ATN state to stop at. This can be a
     * {@link BlockEndState} to detect epsilon paths through a closure.
     * @param ctx The outer context, or {@code null} if the outer context should
     * not be used.
     * @param look The result lookahead set.
     * @param lookBusy A set used for preventing epsilon closures in the ATN
     * from causing a stack overflow. Outside code should pass
     * {@code new CustomizedSet<ATNConfig>} for this argument.
     * @param calledRuleStack A set used for preventing left recursion in the
     * ATN from causing a stack overflow. Outside code should pass
     * {@code new BitSet()} for this argument.
     * @param seeThruPreds {@code true} to true semantic predicates as
     * implicitly {@code true} and "see through them", otherwise {@code false}
     * to treat semantic predicates as opaque and add {@link //HIT_PRED} to the
     * result if one is encountered.
     * @param addEOF Add {@link Token//EOF} to the result if the end of the
     * outermost context is reached. This parameter has no effect if {@code ctx}
     * is {@code null}.
     */

  }, {
    key: "_LOOK",
    value: function _LOOK(s, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {
      var c = new _ATNConfig.default({
        state: s,
        alt: 0,
        context: ctx
      }, null);

      if (lookBusy.has(c)) {
        return;
      }

      lookBusy.add(c);

      if (s === stopState) {
        if (ctx === null) {
          look.addOne(_Token.default.EPSILON);
          return;
        } else if (ctx.isEmpty() && addEOF) {
          look.addOne(_Token.default.EOF);
          return;
        }
      }

      if (s instanceof _RuleStopState.default) {
        if (ctx === null) {
          look.addOne(_Token.default.EPSILON);
          return;
        } else if (ctx.isEmpty() && addEOF) {
          look.addOne(_Token.default.EOF);
          return;
        }

        if (ctx !== _PredictionContext.default.EMPTY) {
          var removed = calledRuleStack.has(s.ruleIndex);

          try {
            calledRuleStack.remove(s.ruleIndex); // run thru all possible stack tops in ctx

            for (var i = 0; i < ctx.length; i++) {
              var returnState = this.atn.states[ctx.getReturnState(i)];

              this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            }
          } finally {
            if (removed) {
              calledRuleStack.add(s.ruleIndex);
            }
          }

          return;
        }
      }

      for (var j = 0; j < s.transitions.length; j++) {
        var t = s.transitions[j];

        if (t.constructor === _RuleTransition.default) {
          if (calledRuleStack.has(t.target.ruleIndex)) {
            continue;
          }

          var newContext = _SingletonPredictionContext.default.create(ctx, t.followState.stateNumber);

          try {
            calledRuleStack.add(t.target.ruleIndex);

            this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
          } finally {
            calledRuleStack.remove(t.target.ruleIndex);
          }
        } else if (t instanceof _AbstractPredicateTransition.default) {
          if (seeThruPreds) {
            this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
          } else {
            look.addOne(LL1Analyzer.HIT_PRED);
          }
        } else if (t.isEpsilon) {
          this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
        } else if (t.constructor === _WildcardTransition.default) {
          look.addRange(_Token.default.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);
        } else {
          var set = t.label;

          if (set !== null) {
            if (t instanceof _NotSetTransition.default) {
              set = set.complement(_Token.default.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);
            }

            look.addSet(set);
          }
        }
      }
    }
  }]);

  return LL1Analyzer;
}();
/**
 * Special value added to the lookahead sets to indicate that we hit
 * a predicate during analysis if {@code seeThruPreds==false}.
 */


exports.default = LL1Analyzer;
LL1Analyzer.HIT_PRED = _Token.default.INVALID_TYPE;
},{"../Token.js":"tczR","./ATNConfig.js":"vzuf","../misc/IntervalSet.js":"lP1U","../state/RuleStopState.js":"WskT","../transition/RuleTransition.js":"VKr2","../transition/NotSetTransition.js":"kgAb","../transition/WildcardTransition.js":"WW8v","./AbstractPredicateTransition.js":"Q4qH","../context/PredictionContextUtils.js":"D05O","../context/PredictionContext.js":"QQ7c","../context/SingletonPredictionContext.js":"rrYw","../misc/BitSet.js":"krtX","../misc/HashSet.js":"hSGu"}],"VSBa":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _LL1Analyzer = _interopRequireDefault(require("./LL1Analyzer.js"));

var _IntervalSet = _interopRequireDefault(require("../misc/IntervalSet.js"));

var _Token = _interopRequireDefault(require("../Token.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var ATN = /*#__PURE__*/function () {
  function ATN(grammarType, maxTokenType) {
    _classCallCheck(this, ATN);

    /**
     * Used for runtime deserialization of ATNs from strings
     * The type of the ATN.
    */
    this.grammarType = grammarType; // The maximum value for any symbol recognized by a transition in the ATN.

    this.maxTokenType = maxTokenType;
    this.states = [];
    /**
     * Each subrule/rule is a decision point and we must track them so we
     * can go back later and build DFA predictors for them.  This includes
     * all the rules, subrules, optional blocks, ()+, ()* etc...
     */

    this.decisionToState = []; // Maps from rule index to starting state number.

    this.ruleToStartState = []; // Maps from rule index to stop state number.

    this.ruleToStopState = null;
    this.modeNameToStartState = {};
    /**
     * For lexer ATNs, this maps the rule index to the resulting token type.
     * For parser ATNs, this maps the rule index to the generated bypass token
     * type if the {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}
     * deserialization option was specified; otherwise, this is {@code null}
     */

    this.ruleToTokenType = null;
    /**
     * For lexer ATNs, this is an array of {@link LexerAction} objects which may
     * be referenced by action transitions in the ATN
     */

    this.lexerActions = null;
    this.modeToStartState = [];
  }
  /**
   * Compute the set of valid tokens that can occur starting in state {@code s}.
   * If {@code ctx} is null, the set of tokens will not include what can follow
   * the rule surrounding {@code s}. In other words, the set will be
   * restricted to tokens reachable staying within {@code s}'s rule
   */


  _createClass(ATN, [{
    key: "nextTokensInContext",
    value: function nextTokensInContext(s, ctx) {
      var anal = new _LL1Analyzer.default(this);
      return anal.LOOK(s, null, ctx);
    }
    /**
     * Compute the set of valid tokens that can occur starting in {@code s} and
     * staying in same rule. {@link Token//EPSILON} is in set if we reach end of
     * rule
     */

  }, {
    key: "nextTokensNoContext",
    value: function nextTokensNoContext(s) {
      if (s.nextTokenWithinRule !== null) {
        return s.nextTokenWithinRule;
      }

      s.nextTokenWithinRule = this.nextTokensInContext(s, null);
      s.nextTokenWithinRule.readOnly = true;
      return s.nextTokenWithinRule;
    }
  }, {
    key: "nextTokens",
    value: function nextTokens(s, ctx) {
      if (ctx === undefined) {
        return this.nextTokensNoContext(s);
      } else {
        return this.nextTokensInContext(s, ctx);
      }
    }
  }, {
    key: "addState",
    value: function addState(state) {
      if (state !== null) {
        state.atn = this;
        state.stateNumber = this.states.length;
      }

      this.states.push(state);
    }
  }, {
    key: "removeState",
    value: function removeState(state) {
      this.states[state.stateNumber] = null; // just free mem, don't shift states in list
    }
  }, {
    key: "defineDecisionState",
    value: function defineDecisionState(s) {
      this.decisionToState.push(s);
      s.decision = this.decisionToState.length - 1;
      return s.decision;
    }
  }, {
    key: "getDecisionState",
    value: function getDecisionState(decision) {
      if (this.decisionToState.length === 0) {
        return null;
      } else {
        return this.decisionToState[decision];
      }
    }
    /**
     * Computes the set of input symbols which could follow ATN state number
     * {@code stateNumber} in the specified full {@code context}. This method
     * considers the complete parser context, but does not evaluate semantic
     * predicates (i.e. all predicates encountered during the calculation are
     * assumed true). If a path in the ATN exists from the starting state to the
     * {@link RuleStopState} of the outermost context without matching any
     * symbols, {@link Token//EOF} is added to the returned set.
     *
     * <p>If {@code context} is {@code null}, it is treated as
     * {@link ParserRuleContext//EMPTY}.</p>
     *
     * @param stateNumber the ATN state number
     * @param ctx the full parse context
     *
     * @return {IntervalSet} The set of potentially valid input symbols which could follow the
     * specified state in the specified context.
     *
     * @throws IllegalArgumentException if the ATN does not contain a state with
     * number {@code stateNumber}
     */

  }, {
    key: "getExpectedTokens",
    value: function getExpectedTokens(stateNumber, ctx) {
      if (stateNumber < 0 || stateNumber >= this.states.length) {
        throw "Invalid state number.";
      }

      var s = this.states[stateNumber];
      var following = this.nextTokens(s);

      if (!following.contains(_Token.default.EPSILON)) {
        return following;
      }

      var expected = new _IntervalSet.default();
      expected.addSet(following);
      expected.removeOne(_Token.default.EPSILON);

      while (ctx !== null && ctx.invokingState >= 0 && following.contains(_Token.default.EPSILON)) {
        var invokingState = this.states[ctx.invokingState];
        var rt = invokingState.transitions[0];
        following = this.nextTokens(rt.followState);
        expected.addSet(following);
        expected.removeOne(_Token.default.EPSILON);
        ctx = ctx.parentCtx;
      }

      if (following.contains(_Token.default.EPSILON)) {
        expected.addOne(_Token.default.EOF);
      }

      return expected;
    }
  }]);

  return ATN;
}();

exports.default = ATN;
ATN.INVALID_ALT_NUMBER = 0;
},{"./LL1Analyzer.js":"qekX","../misc/IntervalSet.js":"lP1U","../Token.js":"tczR"}],"sBLl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/**
 * Represents the type of recognizer an ATN applies to
 */
var _default = {
  LEXER: 0,
  PARSER: 1
};
exports.default = _default;
},{}],"G3AO":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ATNState2 = _interopRequireDefault(require("./ATNState.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var BasicState = /*#__PURE__*/function (_ATNState) {
  _inherits(BasicState, _ATNState);

  var _super = _createSuper(BasicState);

  function BasicState() {
    var _this;

    _classCallCheck(this, BasicState);

    _this = _super.call(this);
    _this.stateType = _ATNState2.default.BASIC;
    return _this;
  }

  return _createClass(BasicState);
}(_ATNState2.default);

exports.default = BasicState;
},{"./ATNState.js":"BwnW"}],"tj9k":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ATNState2 = _interopRequireDefault(require("./ATNState.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var DecisionState = /*#__PURE__*/function (_ATNState) {
  _inherits(DecisionState, _ATNState);

  var _super = _createSuper(DecisionState);

  function DecisionState() {
    var _this;

    _classCallCheck(this, DecisionState);

    _this = _super.call(this);
    _this.decision = -1;
    _this.nonGreedy = false;
    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
  }

  return _createClass(DecisionState);
}(_ATNState2.default);

exports.default = DecisionState;
},{"./ATNState.js":"BwnW"}],"g0or":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _DecisionState2 = _interopRequireDefault(require("./DecisionState.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 *  The start of a regular {@code (...)} block
 */
var BlockStartState = /*#__PURE__*/function (_DecisionState) {
  _inherits(BlockStartState, _DecisionState);

  var _super = _createSuper(BlockStartState);

  function BlockStartState() {
    var _this;

    _classCallCheck(this, BlockStartState);

    _this = _super.call(this);
    _this.endState = null;
    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
  }

  return _createClass(BlockStartState);
}(_DecisionState2.default);

exports.default = BlockStartState;
},{"./DecisionState.js":"tj9k"}],"LSYo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ATNState2 = _interopRequireDefault(require("./ATNState.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Terminal node of a simple {@code (a|b|c)} block
 */
var BlockEndState = /*#__PURE__*/function (_ATNState) {
  _inherits(BlockEndState, _ATNState);

  var _super = _createSuper(BlockEndState);

  function BlockEndState() {
    var _this;

    _classCallCheck(this, BlockEndState);

    _this = _super.call(this);
    _this.stateType = _ATNState2.default.BLOCK_END;
    _this.startState = null;
    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
  }

  return _createClass(BlockEndState);
}(_ATNState2.default);

exports.default = BlockEndState;
},{"./ATNState.js":"BwnW"}],"FC1L":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ATNState2 = _interopRequireDefault(require("./ATNState.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Mark the end of a * or + loop
 */
var LoopEndState = /*#__PURE__*/function (_ATNState) {
  _inherits(LoopEndState, _ATNState);

  var _super = _createSuper(LoopEndState);

  function LoopEndState() {
    var _this;

    _classCallCheck(this, LoopEndState);

    _this = _super.call(this);
    _this.stateType = _ATNState2.default.LOOP_END;
    _this.loopBackState = null;
    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
  }

  return _createClass(LoopEndState);
}(_ATNState2.default);

exports.default = LoopEndState;
},{"./ATNState.js":"BwnW"}],"cu7u":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ATNState2 = _interopRequireDefault(require("./ATNState.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RuleStartState = /*#__PURE__*/function (_ATNState) {
  _inherits(RuleStartState, _ATNState);

  var _super = _createSuper(RuleStartState);

  function RuleStartState() {
    var _this;

    _classCallCheck(this, RuleStartState);

    _this = _super.call(this);
    _this.stateType = _ATNState2.default.RULE_START;
    _this.stopState = null;
    _this.isPrecedenceRule = false;
    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
  }

  return _createClass(RuleStartState);
}(_ATNState2.default);

exports.default = RuleStartState;
},{"./ATNState.js":"BwnW"}],"P9Yj":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _DecisionState2 = _interopRequireDefault(require("./DecisionState.js"));

var _ATNState = _interopRequireDefault(require("./ATNState.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * The Tokens rule start state linking to each lexer rule start state
 */
var TokensStartState = /*#__PURE__*/function (_DecisionState) {
  _inherits(TokensStartState, _DecisionState);

  var _super = _createSuper(TokensStartState);

  function TokensStartState() {
    var _this;

    _classCallCheck(this, TokensStartState);

    _this = _super.call(this);
    _this.stateType = _ATNState.default.TOKEN_START;
    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
  }

  return _createClass(TokensStartState);
}(_DecisionState2.default);

exports.default = TokensStartState;
},{"./DecisionState.js":"tj9k","./ATNState.js":"BwnW"}],"lNju":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _DecisionState2 = _interopRequireDefault(require("./DecisionState.js"));

var _ATNState = _interopRequireDefault(require("./ATNState.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:
 * one to the loop back to start of the block and one to exit.
 */
var PlusLoopbackState = /*#__PURE__*/function (_DecisionState) {
  _inherits(PlusLoopbackState, _DecisionState);

  var _super = _createSuper(PlusLoopbackState);

  function PlusLoopbackState() {
    var _this;

    _classCallCheck(this, PlusLoopbackState);

    _this = _super.call(this);
    _this.stateType = _ATNState.default.PLUS_LOOP_BACK;
    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
  }

  return _createClass(PlusLoopbackState);
}(_DecisionState2.default);

exports.default = PlusLoopbackState;
},{"./DecisionState.js":"tj9k","./ATNState.js":"BwnW"}],"gAdv":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ATNState2 = _interopRequireDefault(require("./ATNState.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var StarLoopbackState = /*#__PURE__*/function (_ATNState) {
  _inherits(StarLoopbackState, _ATNState);

  var _super = _createSuper(StarLoopbackState);

  function StarLoopbackState() {
    var _this;

    _classCallCheck(this, StarLoopbackState);

    _this = _super.call(this);
    _this.stateType = _ATNState2.default.STAR_LOOP_BACK;
    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
  }

  return _createClass(StarLoopbackState);
}(_ATNState2.default);

exports.default = StarLoopbackState;
},{"./ATNState.js":"BwnW"}],"SMF9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _DecisionState2 = _interopRequireDefault(require("./DecisionState.js"));

var _ATNState = _interopRequireDefault(require("./ATNState.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var StarLoopEntryState = /*#__PURE__*/function (_DecisionState) {
  _inherits(StarLoopEntryState, _DecisionState);

  var _super = _createSuper(StarLoopEntryState);

  function StarLoopEntryState() {
    var _this;

    _classCallCheck(this, StarLoopEntryState);

    _this = _super.call(this);
    _this.stateType = _ATNState.default.STAR_LOOP_ENTRY;
    _this.loopBackState = null; // Indicates whether this state can benefit from a precedence DFA during SLL decision making.

    _this.isPrecedenceDecision = null;
    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
  }

  return _createClass(StarLoopEntryState);
}(_DecisionState2.default);

exports.default = StarLoopEntryState;
},{"./DecisionState.js":"tj9k","./ATNState.js":"BwnW"}],"fbkN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _BlockStartState2 = _interopRequireDefault(require("./BlockStartState.js"));

var _ATNState = _interopRequireDefault(require("./ATNState.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Start of {@code (A|B|...)+} loop. Technically a decision state, but
 * we don't use for code generation; somebody might need it, so I'm defining
 * it for completeness. In reality, the {@link PlusLoopbackState} node is the
 * real decision-making note for {@code A+}
 */
var PlusBlockStartState = /*#__PURE__*/function (_BlockStartState) {
  _inherits(PlusBlockStartState, _BlockStartState);

  var _super = _createSuper(PlusBlockStartState);

  function PlusBlockStartState() {
    var _this;

    _classCallCheck(this, PlusBlockStartState);

    _this = _super.call(this);
    _this.stateType = _ATNState.default.PLUS_BLOCK_START;
    _this.loopBackState = null;
    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
  }

  return _createClass(PlusBlockStartState);
}(_BlockStartState2.default);

exports.default = PlusBlockStartState;
},{"./BlockStartState.js":"g0or","./ATNState.js":"BwnW"}],"e1nF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _BlockStartState2 = _interopRequireDefault(require("./BlockStartState.js"));

var _ATNState = _interopRequireDefault(require("./ATNState.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * The block that begins a closure loop
 */
var StarBlockStartState = /*#__PURE__*/function (_BlockStartState) {
  _inherits(StarBlockStartState, _BlockStartState);

  var _super = _createSuper(StarBlockStartState);

  function StarBlockStartState() {
    var _this;

    _classCallCheck(this, StarBlockStartState);

    _this = _super.call(this);
    _this.stateType = _ATNState.default.STAR_BLOCK_START;
    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
  }

  return _createClass(StarBlockStartState);
}(_BlockStartState2.default);

exports.default = StarBlockStartState;
},{"./BlockStartState.js":"g0or","./ATNState.js":"BwnW"}],"T8dz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ATNState = _interopRequireDefault(require("./ATNState.js"));

var _BlockStartState2 = _interopRequireDefault(require("./BlockStartState.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var BasicBlockStartState = /*#__PURE__*/function (_BlockStartState) {
  _inherits(BasicBlockStartState, _BlockStartState);

  var _super = _createSuper(BasicBlockStartState);

  function BasicBlockStartState() {
    var _this;

    _classCallCheck(this, BasicBlockStartState);

    _this = _super.call(this);
    _this.stateType = _ATNState.default.BLOCK_START;
    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
  }

  return _createClass(BasicBlockStartState);
}(_BlockStartState2.default);

exports.default = BasicBlockStartState;
},{"./ATNState.js":"BwnW","./BlockStartState.js":"g0or"}],"EaJI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _IntervalSet = _interopRequireDefault(require("../misc/IntervalSet.js"));

var _Transition2 = _interopRequireDefault(require("./Transition.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var AtomTransition = /*#__PURE__*/function (_Transition) {
  _inherits(AtomTransition, _Transition);

  var _super = _createSuper(AtomTransition);

  function AtomTransition(target, label) {
    var _this;

    _classCallCheck(this, AtomTransition);

    _this = _super.call(this, target); // The token type or character value; or, signifies special label.

    _this.label_ = label;
    _this.label = _this.makeLabel();
    _this.serializationType = _Transition2.default.ATOM;
    return _this;
  }

  _createClass(AtomTransition, [{
    key: "makeLabel",
    value: function makeLabel() {
      var s = new _IntervalSet.default();
      s.addOne(this.label_);
      return s;
    }
  }, {
    key: "matches",
    value: function matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return this.label_ === symbol;
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.label_;
    }
  }]);

  return AtomTransition;
}(_Transition2.default);

exports.default = AtomTransition;
},{"../misc/IntervalSet.js":"lP1U","./Transition.js":"M4hi"}],"unTC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _IntervalSet = _interopRequireDefault(require("../misc/IntervalSet.js"));

var _Transition2 = _interopRequireDefault(require("./Transition.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RangeTransition = /*#__PURE__*/function (_Transition) {
  _inherits(RangeTransition, _Transition);

  var _super = _createSuper(RangeTransition);

  function RangeTransition(target, start, stop) {
    var _this;

    _classCallCheck(this, RangeTransition);

    _this = _super.call(this, target);
    _this.serializationType = _Transition2.default.RANGE;
    _this.start = start;
    _this.stop = stop;
    _this.label = _this.makeLabel();
    return _this;
  }

  _createClass(RangeTransition, [{
    key: "makeLabel",
    value: function makeLabel() {
      var s = new _IntervalSet.default();
      s.addRange(this.start, this.stop);
      return s;
    }
  }, {
    key: "matches",
    value: function matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return symbol >= this.start && symbol <= this.stop;
    }
  }, {
    key: "toString",
    value: function toString() {
      return "'" + String.fromCharCode(this.start) + "'..'" + String.fromCharCode(this.stop) + "'";
    }
  }]);

  return RangeTransition;
}(_Transition2.default);

exports.default = RangeTransition;
},{"../misc/IntervalSet.js":"lP1U","./Transition.js":"M4hi"}],"KNa5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Transition2 = _interopRequireDefault(require("./Transition.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ActionTransition = /*#__PURE__*/function (_Transition) {
  _inherits(ActionTransition, _Transition);

  var _super = _createSuper(ActionTransition);

  function ActionTransition(target, ruleIndex, actionIndex, isCtxDependent) {
    var _this;

    _classCallCheck(this, ActionTransition);

    _this = _super.call(this, target);
    _this.serializationType = _Transition2.default.ACTION;
    _this.ruleIndex = ruleIndex;
    _this.actionIndex = actionIndex === undefined ? -1 : actionIndex;
    _this.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred

    _this.isEpsilon = true;
    return _this;
  }

  _createClass(ActionTransition, [{
    key: "matches",
    value: function matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return false;
    }
  }, {
    key: "toString",
    value: function toString() {
      return "action_" + this.ruleIndex + ":" + this.actionIndex;
    }
  }]);

  return ActionTransition;
}(_Transition2.default);

exports.default = ActionTransition;
},{"./Transition.js":"M4hi"}],"WTw1":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Transition2 = _interopRequireDefault(require("./Transition.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var EpsilonTransition = /*#__PURE__*/function (_Transition) {
  _inherits(EpsilonTransition, _Transition);

  var _super = _createSuper(EpsilonTransition);

  function EpsilonTransition(target, outermostPrecedenceReturn) {
    var _this;

    _classCallCheck(this, EpsilonTransition);

    _this = _super.call(this, target);
    _this.serializationType = _Transition2.default.EPSILON;
    _this.isEpsilon = true;
    _this.outermostPrecedenceReturn = outermostPrecedenceReturn;
    return _this;
  }

  _createClass(EpsilonTransition, [{
    key: "matches",
    value: function matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return false;
    }
  }, {
    key: "toString",
    value: function toString() {
      return "epsilon";
    }
  }]);

  return EpsilonTransition;
}(_Transition2.default);

exports.default = EpsilonTransition;
},{"./Transition.js":"M4hi"}],"feKR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _SemanticContext2 = _interopRequireDefault(require("./SemanticContext.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Predicate = /*#__PURE__*/function (_SemanticContext) {
  _inherits(Predicate, _SemanticContext);

  var _super = _createSuper(Predicate);

  function Predicate(ruleIndex, predIndex, isCtxDependent) {
    var _this;

    _classCallCheck(this, Predicate);

    _this = _super.call(this);
    _this.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;
    _this.predIndex = predIndex === undefined ? -1 : predIndex;
    _this.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred

    return _this;
  }

  _createClass(Predicate, [{
    key: "evaluate",
    value: function evaluate(parser, outerContext) {
      var localctx = this.isCtxDependent ? outerContext : null;
      return parser.sempred(localctx, this.ruleIndex, this.predIndex);
    }
  }, {
    key: "updateHashCode",
    value: function updateHashCode(hash) {
      hash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);
    }
  }, {
    key: "equals",
    value: function equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof Predicate)) {
        return false;
      } else {
        return this.ruleIndex === other.ruleIndex && this.predIndex === other.predIndex && this.isCtxDependent === other.isCtxDependent;
      }
    }
  }, {
    key: "toString",
    value: function toString() {
      return "{" + this.ruleIndex + ":" + this.predIndex + "}?";
    }
  }]);

  return Predicate;
}(_SemanticContext2.default);
/**
 * The default {@link SemanticContext}, which is semantically equivalent to
 * a predicate of the form {@code {true}?}
 */


exports.default = Predicate;
_SemanticContext2.default.NONE = new Predicate();
},{"./SemanticContext.js":"fWJV"}],"Umms":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Predicate = _interopRequireDefault(require("../atn/Predicate.js"));

var _Transition = _interopRequireDefault(require("./Transition.js"));

var _AbstractPredicateTransition = _interopRequireDefault(require("../atn/AbstractPredicateTransition.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var PredicateTransition = /*#__PURE__*/function (_AbstractPredicateTra) {
  _inherits(PredicateTransition, _AbstractPredicateTra);

  var _super = _createSuper(PredicateTransition);

  function PredicateTransition(target, ruleIndex, predIndex, isCtxDependent) {
    var _this;

    _classCallCheck(this, PredicateTransition);

    _this = _super.call(this, target);
    _this.serializationType = _Transition.default.PREDICATE;
    _this.ruleIndex = ruleIndex;
    _this.predIndex = predIndex;
    _this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred

    _this.isEpsilon = true;
    return _this;
  }

  _createClass(PredicateTransition, [{
    key: "matches",
    value: function matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return false;
    }
  }, {
    key: "getPredicate",
    value: function getPredicate() {
      return new _Predicate.default(this.ruleIndex, this.predIndex, this.isCtxDependent);
    }
  }, {
    key: "toString",
    value: function toString() {
      return "pred_" + this.ruleIndex + ":" + this.predIndex;
    }
  }]);

  return PredicateTransition;
}(_AbstractPredicateTransition.default);

exports.default = PredicateTransition;
},{"../atn/Predicate.js":"feKR","./Transition.js":"M4hi","../atn/AbstractPredicateTransition.js":"Q4qH"}],"WODf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _SemanticContext2 = _interopRequireDefault(require("./SemanticContext.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var PrecedencePredicate = /*#__PURE__*/function (_SemanticContext) {
  _inherits(PrecedencePredicate, _SemanticContext);

  var _super = _createSuper(PrecedencePredicate);

  function PrecedencePredicate(precedence) {
    var _this;

    _classCallCheck(this, PrecedencePredicate);

    _this = _super.call(this);
    _this.precedence = precedence === undefined ? 0 : precedence;
    return _this;
  }

  _createClass(PrecedencePredicate, [{
    key: "evaluate",
    value: function evaluate(parser, outerContext) {
      return parser.precpred(outerContext, this.precedence);
    }
  }, {
    key: "evalPrecedence",
    value: function evalPrecedence(parser, outerContext) {
      if (parser.precpred(outerContext, this.precedence)) {
        return _SemanticContext2.default.NONE;
      } else {
        return null;
      }
    }
  }, {
    key: "compareTo",
    value: function compareTo(other) {
      return this.precedence - other.precedence;
    }
  }, {
    key: "updateHashCode",
    value: function updateHashCode(hash) {
      hash.update(this.precedence);
    }
  }, {
    key: "equals",
    value: function equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof PrecedencePredicate)) {
        return false;
      } else {
        return this.precedence === other.precedence;
      }
    }
  }, {
    key: "toString",
    value: function toString() {
      return "{" + this.precedence + ">=prec}?";
    }
  }]);

  return PrecedencePredicate;
}(_SemanticContext2.default); // HORRIBLE workaround circular import, avoiding dynamic import


exports.default = PrecedencePredicate;
_SemanticContext2.default.PrecedencePredicate = PrecedencePredicate;
},{"./SemanticContext.js":"fWJV"}],"i8xh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _PrecedencePredicate = _interopRequireDefault(require("../atn/PrecedencePredicate.js"));

var _Transition = _interopRequireDefault(require("./Transition.js"));

var _AbstractPredicateTransition = _interopRequireDefault(require("../atn/AbstractPredicateTransition.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var PrecedencePredicateTransition = /*#__PURE__*/function (_AbstractPredicateTra) {
  _inherits(PrecedencePredicateTransition, _AbstractPredicateTra);

  var _super = _createSuper(PrecedencePredicateTransition);

  function PrecedencePredicateTransition(target, precedence) {
    var _this;

    _classCallCheck(this, PrecedencePredicateTransition);

    _this = _super.call(this, target);
    _this.serializationType = _Transition.default.PRECEDENCE;
    _this.precedence = precedence;
    _this.isEpsilon = true;
    return _this;
  }

  _createClass(PrecedencePredicateTransition, [{
    key: "matches",
    value: function matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return false;
    }
  }, {
    key: "getPredicate",
    value: function getPredicate() {
      return new _PrecedencePredicate.default(this.precedence);
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.precedence + " >= _p";
    }
  }]);

  return PrecedencePredicateTransition;
}(_AbstractPredicateTransition.default);

exports.default = PrecedencePredicateTransition;
},{"../atn/PrecedencePredicate.js":"WODf","./Transition.js":"M4hi","../atn/AbstractPredicateTransition.js":"Q4qH"}],"w0lY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
var ATNDeserializationOptions = /*#__PURE__*/_createClass(function ATNDeserializationOptions(copyFrom) {
  _classCallCheck(this, ATNDeserializationOptions);

  if (copyFrom === undefined) {
    copyFrom = null;
  }

  this.readOnly = false;
  this.verifyATN = copyFrom === null ? true : copyFrom.verifyATN;
  this.generateRuleBypassTransitions = copyFrom === null ? false : copyFrom.generateRuleBypassTransitions;
});

exports.default = ATNDeserializationOptions;
ATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();
ATNDeserializationOptions.defaultOptions.readOnly = true;
},{}],"jbwV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.
 * Use is of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
var _default = {
  // The type of a {@link LexerChannelAction} action.
  CHANNEL: 0,
  // The type of a {@link LexerCustomAction} action
  CUSTOM: 1,
  // The type of a {@link LexerModeAction} action.
  MODE: 2,
  //The type of a {@link LexerMoreAction} action.
  MORE: 3,
  //The type of a {@link LexerPopModeAction} action.
  POP_MODE: 4,
  //The type of a {@link LexerPushModeAction} action.
  PUSH_MODE: 5,
  //The type of a {@link LexerSkipAction} action.
  SKIP: 6,
  //The type of a {@link LexerTypeAction} action.
  TYPE: 7
};
exports.default = _default;
},{}],"BfcY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _HashCode = _interopRequireDefault(require("../misc/HashCode.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
var LexerAction = /*#__PURE__*/function () {
  function LexerAction(action) {
    _classCallCheck(this, LexerAction);

    this.actionType = action;
    this.isPositionDependent = false;
  }

  _createClass(LexerAction, [{
    key: "hashCode",
    value: function hashCode() {
      var hash = new _HashCode.default();
      this.updateHashCode(hash);
      return hash.finish();
    }
  }, {
    key: "updateHashCode",
    value: function updateHashCode(hash) {
      hash.update(this.actionType);
    }
  }, {
    key: "equals",
    value: function equals(other) {
      return this === other;
    }
  }]);

  return LexerAction;
}();

exports.default = LexerAction;
},{"../misc/HashCode.js":"JXAn"}],"afKK":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _LexerActionType = _interopRequireDefault(require("../atn/LexerActionType.js"));

var _LexerAction2 = _interopRequireDefault(require("./LexerAction.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Implements the {@code skip} lexer action by calling {@link Lexer//skip}.
 *
 * <p>The {@code skip} command does not have any parameters, so this action is
 * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
 */
var LexerSkipAction = /*#__PURE__*/function (_LexerAction) {
  _inherits(LexerSkipAction, _LexerAction);

  var _super = _createSuper(LexerSkipAction);

  function LexerSkipAction() {
    _classCallCheck(this, LexerSkipAction);

    return _super.call(this, _LexerActionType.default.SKIP);
  }

  _createClass(LexerSkipAction, [{
    key: "execute",
    value: function execute(lexer) {
      lexer.skip();
    }
  }, {
    key: "toString",
    value: function toString() {
      return "skip";
    }
  }]);

  return LexerSkipAction;
}(_LexerAction2.default); // Provides a singleton instance of this parameterless lexer action.


exports.default = LexerSkipAction;
LexerSkipAction.INSTANCE = new LexerSkipAction();
},{"../atn/LexerActionType.js":"jbwV","./LexerAction.js":"BfcY"}],"mhMe":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _LexerActionType = _interopRequireDefault(require("../atn/LexerActionType.js"));

var _LexerAction2 = _interopRequireDefault(require("./LexerAction.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Implements the {@code channel} lexer action by calling
 * {@link Lexer//setChannel} with the assigned channel.
 * Constructs a new {@code channel} action with the specified channel value.
 * @param channel The channel value to pass to {@link Lexer//setChannel}
 */
var LexerChannelAction = /*#__PURE__*/function (_LexerAction) {
  _inherits(LexerChannelAction, _LexerAction);

  var _super = _createSuper(LexerChannelAction);

  function LexerChannelAction(channel) {
    var _this;

    _classCallCheck(this, LexerChannelAction);

    _this = _super.call(this, _LexerActionType.default.CHANNEL);
    _this.channel = channel;
    return _this;
  }
  /**
   * <p>This action is implemented by calling {@link Lexer//setChannel} with the
   * value provided by {@link //getChannel}.</p>
   */


  _createClass(LexerChannelAction, [{
    key: "execute",
    value: function execute(lexer) {
      lexer._channel = this.channel;
    }
  }, {
    key: "updateHashCode",
    value: function updateHashCode(hash) {
      hash.update(this.actionType, this.channel);
    }
  }, {
    key: "equals",
    value: function equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof LexerChannelAction)) {
        return false;
      } else {
        return this.channel === other.channel;
      }
    }
  }, {
    key: "toString",
    value: function toString() {
      return "channel(" + this.channel + ")";
    }
  }]);

  return LexerChannelAction;
}(_LexerAction2.default);

exports.default = LexerChannelAction;
},{"../atn/LexerActionType.js":"jbwV","./LexerAction.js":"BfcY"}],"hf1i":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _LexerActionType = _interopRequireDefault(require("../atn/LexerActionType.js"));

var _LexerAction2 = _interopRequireDefault(require("./LexerAction.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Executes a custom lexer action by calling {@link Recognizer//action} with the
 * rule and action indexes assigned to the custom action. The implementation of
 * a custom action is added to the generated code for the lexer in an override
 * of {@link Recognizer//action} when the grammar is compiled.
 *
 * <p>This class may represent embedded actions created with the <code>{...}</code>
 * syntax in ANTLR 4, as well as actions created for lexer commands where the
 * command argument could not be evaluated when the grammar was compiled.</p>
 */
var LexerCustomAction = /*#__PURE__*/function (_LexerAction) {
  _inherits(LexerCustomAction, _LexerAction);

  var _super = _createSuper(LexerCustomAction);

  /**
   * Constructs a custom lexer action with the specified rule and action
   * indexes.
   *
   * @param ruleIndex The rule index to use for calls to
   * {@link Recognizer//action}.
   * @param actionIndex The action index to use for calls to
   * {@link Recognizer//action}.
   */
  function LexerCustomAction(ruleIndex, actionIndex) {
    var _this;

    _classCallCheck(this, LexerCustomAction);

    _this = _super.call(this, _LexerActionType.default.CUSTOM);
    _this.ruleIndex = ruleIndex;
    _this.actionIndex = actionIndex;
    _this.isPositionDependent = true;
    return _this;
  }
  /**
   * <p>Custom actions are implemented by calling {@link Lexer//action} with the
   * appropriate rule and action indexes.</p>
   */


  _createClass(LexerCustomAction, [{
    key: "execute",
    value: function execute(lexer) {
      lexer.action(null, this.ruleIndex, this.actionIndex);
    }
  }, {
    key: "updateHashCode",
    value: function updateHashCode(hash) {
      hash.update(this.actionType, this.ruleIndex, this.actionIndex);
    }
  }, {
    key: "equals",
    value: function equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof LexerCustomAction)) {
        return false;
      } else {
        return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;
      }
    }
  }]);

  return LexerCustomAction;
}(_LexerAction2.default);

exports.default = LexerCustomAction;
},{"../atn/LexerActionType.js":"jbwV","./LexerAction.js":"BfcY"}],"w8tF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _LexerActionType = _interopRequireDefault(require("../atn/LexerActionType.js"));

var _LexerAction2 = _interopRequireDefault(require("./LexerAction.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Implements the {@code more} lexer action by calling {@link Lexer//more}.
 *
 * <p>The {@code more} command does not have any parameters, so this action is
 * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
 */
var LexerMoreAction = /*#__PURE__*/function (_LexerAction) {
  _inherits(LexerMoreAction, _LexerAction);

  var _super = _createSuper(LexerMoreAction);

  function LexerMoreAction() {
    _classCallCheck(this, LexerMoreAction);

    return _super.call(this, _LexerActionType.default.MORE);
  }
  /**
   * <p>This action is implemented by calling {@link Lexer//popMode}.</p>
   */


  _createClass(LexerMoreAction, [{
    key: "execute",
    value: function execute(lexer) {
      lexer.more();
    }
  }, {
    key: "toString",
    value: function toString() {
      return "more";
    }
  }]);

  return LexerMoreAction;
}(_LexerAction2.default);

exports.default = LexerMoreAction;
LexerMoreAction.INSTANCE = new LexerMoreAction();
},{"../atn/LexerActionType.js":"jbwV","./LexerAction.js":"BfcY"}],"efiT":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _LexerActionType = _interopRequireDefault(require("../atn/LexerActionType.js"));

var _LexerAction2 = _interopRequireDefault(require("./LexerAction.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Implements the {@code type} lexer action by calling {@link Lexer//setType}
 * with the assigned type
 */
var LexerTypeAction = /*#__PURE__*/function (_LexerAction) {
  _inherits(LexerTypeAction, _LexerAction);

  var _super = _createSuper(LexerTypeAction);

  function LexerTypeAction(type) {
    var _this;

    _classCallCheck(this, LexerTypeAction);

    _this = _super.call(this, _LexerActionType.default.TYPE);
    _this.type = type;
    return _this;
  }

  _createClass(LexerTypeAction, [{
    key: "execute",
    value: function execute(lexer) {
      lexer.type = this.type;
    }
  }, {
    key: "updateHashCode",
    value: function updateHashCode(hash) {
      hash.update(this.actionType, this.type);
    }
  }, {
    key: "equals",
    value: function equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof LexerTypeAction)) {
        return false;
      } else {
        return this.type === other.type;
      }
    }
  }, {
    key: "toString",
    value: function toString() {
      return "type(" + this.type + ")";
    }
  }]);

  return LexerTypeAction;
}(_LexerAction2.default);

exports.default = LexerTypeAction;
},{"../atn/LexerActionType.js":"jbwV","./LexerAction.js":"BfcY"}],"oykp":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _LexerActionType = _interopRequireDefault(require("../atn/LexerActionType.js"));

var _LexerAction2 = _interopRequireDefault(require("./LexerAction.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Implements the {@code pushMode} lexer action by calling
 * {@link Lexer//pushMode} with the assigned mode
 */
var LexerPushModeAction = /*#__PURE__*/function (_LexerAction) {
  _inherits(LexerPushModeAction, _LexerAction);

  var _super = _createSuper(LexerPushModeAction);

  function LexerPushModeAction(mode) {
    var _this;

    _classCallCheck(this, LexerPushModeAction);

    _this = _super.call(this, _LexerActionType.default.PUSH_MODE);
    _this.mode = mode;
    return _this;
  }
  /**
   * <p>This action is implemented by calling {@link Lexer//pushMode} with the
   * value provided by {@link //getMode}.</p>
   */


  _createClass(LexerPushModeAction, [{
    key: "execute",
    value: function execute(lexer) {
      lexer.pushMode(this.mode);
    }
  }, {
    key: "updateHashCode",
    value: function updateHashCode(hash) {
      hash.update(this.actionType, this.mode);
    }
  }, {
    key: "equals",
    value: function equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof LexerPushModeAction)) {
        return false;
      } else {
        return this.mode === other.mode;
      }
    }
  }, {
    key: "toString",
    value: function toString() {
      return "pushMode(" + this.mode + ")";
    }
  }]);

  return LexerPushModeAction;
}(_LexerAction2.default);

exports.default = LexerPushModeAction;
},{"../atn/LexerActionType.js":"jbwV","./LexerAction.js":"BfcY"}],"qndD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _LexerActionType = _interopRequireDefault(require("../atn/LexerActionType.js"));

var _LexerAction2 = _interopRequireDefault(require("./LexerAction.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.
 *
 * <p>The {@code popMode} command does not have any parameters, so this action is
 * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
 */
var LexerPopModeAction = /*#__PURE__*/function (_LexerAction) {
  _inherits(LexerPopModeAction, _LexerAction);

  var _super = _createSuper(LexerPopModeAction);

  function LexerPopModeAction() {
    _classCallCheck(this, LexerPopModeAction);

    return _super.call(this, _LexerActionType.default.POP_MODE);
  }
  /**
   * <p>This action is implemented by calling {@link Lexer//popMode}.</p>
   */


  _createClass(LexerPopModeAction, [{
    key: "execute",
    value: function execute(lexer) {
      lexer.popMode();
    }
  }, {
    key: "toString",
    value: function toString() {
      return "popMode";
    }
  }]);

  return LexerPopModeAction;
}(_LexerAction2.default);

exports.default = LexerPopModeAction;
LexerPopModeAction.INSTANCE = new LexerPopModeAction();
},{"../atn/LexerActionType.js":"jbwV","./LexerAction.js":"BfcY"}],"DWSz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _LexerActionType = _interopRequireDefault(require("../atn/LexerActionType.js"));

var _LexerAction2 = _interopRequireDefault(require("./LexerAction.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Implements the {@code mode} lexer action by calling {@link Lexer//mode} with
 * the assigned mode
 */
var LexerModeAction = /*#__PURE__*/function (_LexerAction) {
  _inherits(LexerModeAction, _LexerAction);

  var _super = _createSuper(LexerModeAction);

  function LexerModeAction(mode) {
    var _this;

    _classCallCheck(this, LexerModeAction);

    _this = _super.call(this, _LexerActionType.default.MODE);
    _this.mode = mode;
    return _this;
  }
  /**
   * <p>This action is implemented by calling {@link Lexer//mode} with the
   * value provided by {@link //getMode}.</p>
   */


  _createClass(LexerModeAction, [{
    key: "execute",
    value: function execute(lexer) {
      lexer.mode(this.mode);
    }
  }, {
    key: "updateHashCode",
    value: function updateHashCode(hash) {
      hash.update(this.actionType, this.mode);
    }
  }, {
    key: "equals",
    value: function equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof LexerModeAction)) {
        return false;
      } else {
        return this.mode === other.mode;
      }
    }
  }, {
    key: "toString",
    value: function toString() {
      return "mode(" + this.mode + ")";
    }
  }]);

  return LexerModeAction;
}(_LexerAction2.default);

exports.default = LexerModeAction;
},{"../atn/LexerActionType.js":"jbwV","./LexerAction.js":"BfcY"}],"qCvY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Token = _interopRequireDefault(require("../Token.js"));

var _ATN = _interopRequireDefault(require("./ATN.js"));

var _ATNType = _interopRequireDefault(require("./ATNType.js"));

var _ATNState = _interopRequireDefault(require("../state/ATNState.js"));

var _BasicState = _interopRequireDefault(require("../state/BasicState.js"));

var _DecisionState = _interopRequireDefault(require("../state/DecisionState.js"));

var _BlockStartState = _interopRequireDefault(require("../state/BlockStartState.js"));

var _BlockEndState = _interopRequireDefault(require("../state/BlockEndState.js"));

var _LoopEndState = _interopRequireDefault(require("../state/LoopEndState.js"));

var _RuleStartState = _interopRequireDefault(require("../state/RuleStartState.js"));

var _RuleStopState = _interopRequireDefault(require("../state/RuleStopState.js"));

var _TokensStartState = _interopRequireDefault(require("../state/TokensStartState.js"));

var _PlusLoopbackState = _interopRequireDefault(require("../state/PlusLoopbackState.js"));

var _StarLoopbackState = _interopRequireDefault(require("../state/StarLoopbackState.js"));

var _StarLoopEntryState = _interopRequireDefault(require("../state/StarLoopEntryState.js"));

var _PlusBlockStartState = _interopRequireDefault(require("../state/PlusBlockStartState.js"));

var _StarBlockStartState = _interopRequireDefault(require("../state/StarBlockStartState.js"));

var _BasicBlockStartState = _interopRequireDefault(require("../state/BasicBlockStartState.js"));

var _Transition = _interopRequireDefault(require("../transition/Transition.js"));

var _AtomTransition = _interopRequireDefault(require("../transition/AtomTransition.js"));

var _SetTransition = _interopRequireDefault(require("../transition/SetTransition.js"));

var _NotSetTransition = _interopRequireDefault(require("../transition/NotSetTransition.js"));

var _RuleTransition = _interopRequireDefault(require("../transition/RuleTransition.js"));

var _RangeTransition = _interopRequireDefault(require("../transition/RangeTransition.js"));

var _ActionTransition = _interopRequireDefault(require("../transition/ActionTransition.js"));

var _EpsilonTransition = _interopRequireDefault(require("../transition/EpsilonTransition.js"));

var _WildcardTransition = _interopRequireDefault(require("../transition/WildcardTransition.js"));

var _PredicateTransition = _interopRequireDefault(require("../transition/PredicateTransition.js"));

var _PrecedencePredicateTransition = _interopRequireDefault(require("../transition/PrecedencePredicateTransition.js"));

var _IntervalSet = _interopRequireDefault(require("../misc/IntervalSet.js"));

var _ATNDeserializationOptions = _interopRequireDefault(require("./ATNDeserializationOptions.js"));

var _LexerActionType = _interopRequireDefault(require("./LexerActionType.js"));

var _LexerSkipAction = _interopRequireDefault(require("../action/LexerSkipAction.js"));

var _LexerChannelAction = _interopRequireDefault(require("../action/LexerChannelAction.js"));

var _LexerCustomAction = _interopRequireDefault(require("../action/LexerCustomAction.js"));

var _LexerMoreAction = _interopRequireDefault(require("../action/LexerMoreAction.js"));

var _LexerTypeAction = _interopRequireDefault(require("../action/LexerTypeAction.js"));

var _LexerPushModeAction = _interopRequireDefault(require("../action/LexerPushModeAction.js"));

var _LexerPopModeAction = _interopRequireDefault(require("../action/LexerPopModeAction.js"));

var _LexerModeAction = _interopRequireDefault(require("../action/LexerModeAction.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var SERIALIZED_VERSION = 4;

function initArray(length, value) {
  var tmp = [];
  tmp[length - 1] = value;
  return tmp.map(function (i) {
    return value;
  });
}

var ATNDeserializer = /*#__PURE__*/function () {
  function ATNDeserializer(options) {
    _classCallCheck(this, ATNDeserializer);

    if (options === undefined || options === null) {
      options = _ATNDeserializationOptions.default.defaultOptions;
    }

    this.deserializationOptions = options;
    this.stateFactories = null;
    this.actionFactories = null;
  }

  _createClass(ATNDeserializer, [{
    key: "deserialize",
    value: function deserialize(data) {
      var legacy = this.reset(data);
      this.checkVersion(legacy);
      if (legacy) this.skipUUID();
      var atn = this.readATN();
      this.readStates(atn, legacy);
      this.readRules(atn, legacy);
      this.readModes(atn);
      var sets = [];
      this.readSets(atn, sets, this.readInt.bind(this));
      if (legacy) this.readSets(atn, sets, this.readInt32.bind(this));
      this.readEdges(atn, sets);
      this.readDecisions(atn);
      this.readLexerActions(atn, legacy);
      this.markPrecedenceDecisions(atn);
      this.verifyATN(atn);

      if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === _ATNType.default.PARSER) {
        this.generateRuleBypassTransitions(atn); // re-verify after modification

        this.verifyATN(atn);
      }

      return atn;
    }
  }, {
    key: "reset",
    value: function reset(data) {
      var version = data.charCodeAt ? data.charCodeAt(0) : data[0];

      if (version === SERIALIZED_VERSION - 1) {
        var adjust = function adjust(c) {
          var v = c.charCodeAt(0);
          return v > 1 ? v - 2 : v + 65534;
        };

        var temp = data.split("").map(adjust); // don't adjust the first value since that's the version number

        temp[0] = data.charCodeAt(0);
        this.data = temp;
        this.pos = 0;
        return true;
      } else {
        this.data = data;
        this.pos = 0;
        return false;
      }
    }
  }, {
    key: "skipUUID",
    value: function skipUUID() {
      var count = 0;

      while (count++ < 8) {
        this.readInt();
      }
    }
  }, {
    key: "checkVersion",
    value: function checkVersion(legacy) {
      var version = this.readInt();

      if (!legacy && version !== SERIALIZED_VERSION) {
        throw "Could not deserialize ATN with version " + version + " (expected " + SERIALIZED_VERSION + ").";
      }
    }
  }, {
    key: "readATN",
    value: function readATN() {
      var grammarType = this.readInt();
      var maxTokenType = this.readInt();
      return new _ATN.default(grammarType, maxTokenType);
    }
  }, {
    key: "readStates",
    value: function readStates(atn, legacy) {
      var j, pair, stateNumber;
      var loopBackStateNumbers = [];
      var endStateNumbers = [];
      var nstates = this.readInt();

      for (var i = 0; i < nstates; i++) {
        var stype = this.readInt(); // ignore bad type of states

        if (stype === _ATNState.default.INVALID_TYPE) {
          atn.addState(null);
          continue;
        }

        var ruleIndex = this.readInt();

        if (legacy && ruleIndex === 0xFFFF) {
          ruleIndex = -1;
        }

        var s = this.stateFactory(stype, ruleIndex);

        if (stype === _ATNState.default.LOOP_END) {
          // special case
          var loopBackStateNumber = this.readInt();
          loopBackStateNumbers.push([s, loopBackStateNumber]);
        } else if (s instanceof _BlockStartState.default) {
          var endStateNumber = this.readInt();
          endStateNumbers.push([s, endStateNumber]);
        }

        atn.addState(s);
      } // delay the assignment of loop back and end states until we know all the
      // state instances have been initialized


      for (j = 0; j < loopBackStateNumbers.length; j++) {
        pair = loopBackStateNumbers[j];
        pair[0].loopBackState = atn.states[pair[1]];
      }

      for (j = 0; j < endStateNumbers.length; j++) {
        pair = endStateNumbers[j];
        pair[0].endState = atn.states[pair[1]];
      }

      var numNonGreedyStates = this.readInt();

      for (j = 0; j < numNonGreedyStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].nonGreedy = true;
      }

      var numPrecedenceStates = this.readInt();

      for (j = 0; j < numPrecedenceStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].isPrecedenceRule = true;
      }
    }
  }, {
    key: "readRules",
    value: function readRules(atn, legacy) {
      var i;
      var nrules = this.readInt();

      if (atn.grammarType === _ATNType.default.LEXER) {
        atn.ruleToTokenType = initArray(nrules, 0);
      }

      atn.ruleToStartState = initArray(nrules, 0);

      for (i = 0; i < nrules; i++) {
        var s = this.readInt();
        atn.ruleToStartState[i] = atn.states[s];

        if (atn.grammarType === _ATNType.default.LEXER) {
          var tokenType = this.readInt();

          if (legacy && tokenType === 0xFFFF) {
            tokenType = _Token.default.EOF;
          }

          atn.ruleToTokenType[i] = tokenType;
        }
      }

      atn.ruleToStopState = initArray(nrules, 0);

      for (i = 0; i < atn.states.length; i++) {
        var state = atn.states[i];

        if (!(state instanceof _RuleStopState.default)) {
          continue;
        }

        atn.ruleToStopState[state.ruleIndex] = state;
        atn.ruleToStartState[state.ruleIndex].stopState = state;
      }
    }
  }, {
    key: "readModes",
    value: function readModes(atn) {
      var nmodes = this.readInt();

      for (var i = 0; i < nmodes; i++) {
        var s = this.readInt();
        atn.modeToStartState.push(atn.states[s]);
      }
    }
  }, {
    key: "readSets",
    value: function readSets(atn, sets, reader) {
      var m = this.readInt();

      for (var i = 0; i < m; i++) {
        var iset = new _IntervalSet.default();
        sets.push(iset);
        var n = this.readInt();
        var containsEof = this.readInt();

        if (containsEof !== 0) {
          iset.addOne(-1);
        }

        for (var j = 0; j < n; j++) {
          var i1 = reader();
          var i2 = reader();
          iset.addRange(i1, i2);
        }
      }
    }
  }, {
    key: "readEdges",
    value: function readEdges(atn, sets) {
      var i, j, state, trans, target;
      var nedges = this.readInt();

      for (i = 0; i < nedges; i++) {
        var src = this.readInt();
        var trg = this.readInt();
        var ttype = this.readInt();
        var arg1 = this.readInt();
        var arg2 = this.readInt();
        var arg3 = this.readInt();
        trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);
        var srcState = atn.states[src];
        srcState.addTransition(trans);
      } // edges for rule stop states can be derived, so they aren't serialized


      for (i = 0; i < atn.states.length; i++) {
        state = atn.states[i];

        for (j = 0; j < state.transitions.length; j++) {
          var t = state.transitions[j];

          if (!(t instanceof _RuleTransition.default)) {
            continue;
          }

          var outermostPrecedenceReturn = -1;

          if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {
            if (t.precedence === 0) {
              outermostPrecedenceReturn = t.target.ruleIndex;
            }
          }

          trans = new _EpsilonTransition.default(t.followState, outermostPrecedenceReturn);
          atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);
        }
      }

      for (i = 0; i < atn.states.length; i++) {
        state = atn.states[i];

        if (state instanceof _BlockStartState.default) {
          // we need to know the end state to set its start state
          if (state.endState === null) {
            throw "IllegalState";
          } // block end states can only be associated to a single block start
          // state


          if (state.endState.startState !== null) {
            throw "IllegalState";
          }

          state.endState.startState = state;
        }

        if (state instanceof _PlusLoopbackState.default) {
          for (j = 0; j < state.transitions.length; j++) {
            target = state.transitions[j].target;

            if (target instanceof _PlusBlockStartState.default) {
              target.loopBackState = state;
            }
          }
        } else if (state instanceof _StarLoopbackState.default) {
          for (j = 0; j < state.transitions.length; j++) {
            target = state.transitions[j].target;

            if (target instanceof _StarLoopEntryState.default) {
              target.loopBackState = state;
            }
          }
        }
      }
    }
  }, {
    key: "readDecisions",
    value: function readDecisions(atn) {
      var ndecisions = this.readInt();

      for (var i = 0; i < ndecisions; i++) {
        var s = this.readInt();
        var decState = atn.states[s];
        atn.decisionToState.push(decState);
        decState.decision = i;
      }
    }
  }, {
    key: "readLexerActions",
    value: function readLexerActions(atn, legacy) {
      if (atn.grammarType === _ATNType.default.LEXER) {
        var count = this.readInt();
        atn.lexerActions = initArray(count, null);

        for (var i = 0; i < count; i++) {
          var actionType = this.readInt();
          var data1 = this.readInt();

          if (legacy && data1 === 0xFFFF) {
            data1 = -1;
          }

          var data2 = this.readInt();

          if (legacy && data2 === 0xFFFF) {
            data2 = -1;
          }

          atn.lexerActions[i] = this.lexerActionFactory(actionType, data1, data2);
        }
      }
    }
  }, {
    key: "generateRuleBypassTransitions",
    value: function generateRuleBypassTransitions(atn) {
      var i;
      var count = atn.ruleToStartState.length;

      for (i = 0; i < count; i++) {
        atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;
      }

      for (i = 0; i < count; i++) {
        this.generateRuleBypassTransition(atn, i);
      }
    }
  }, {
    key: "generateRuleBypassTransition",
    value: function generateRuleBypassTransition(atn, idx) {
      var i, state;
      var bypassStart = new _BasicBlockStartState.default();
      bypassStart.ruleIndex = idx;
      atn.addState(bypassStart);
      var bypassStop = new _BlockEndState.default();
      bypassStop.ruleIndex = idx;
      atn.addState(bypassStop);
      bypassStart.endState = bypassStop;
      atn.defineDecisionState(bypassStart);
      bypassStop.startState = bypassStart;
      var excludeTransition = null;
      var endState = null;

      if (atn.ruleToStartState[idx].isPrecedenceRule) {
        // wrap from the beginning of the rule to the StarLoopEntryState
        endState = null;

        for (i = 0; i < atn.states.length; i++) {
          state = atn.states[i];

          if (this.stateIsEndStateFor(state, idx)) {
            endState = state;
            excludeTransition = state.loopBackState.transitions[0];
            break;
          }
        }

        if (excludeTransition === null) {
          throw "Couldn't identify final state of the precedence rule prefix section.";
        }
      } else {
        endState = atn.ruleToStopState[idx];
      } // all non-excluded transitions that currently target end state need to
      // target blockEnd instead


      for (i = 0; i < atn.states.length; i++) {
        state = atn.states[i];

        for (var j = 0; j < state.transitions.length; j++) {
          var transition = state.transitions[j];

          if (transition === excludeTransition) {
            continue;
          }

          if (transition.target === endState) {
            transition.target = bypassStop;
          }
        }
      } // all transitions leaving the rule start state need to leave blockStart
      // instead


      var ruleToStartState = atn.ruleToStartState[idx];
      var count = ruleToStartState.transitions.length;

      while (count > 0) {
        bypassStart.addTransition(ruleToStartState.transitions[count - 1]);
        ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);
      } // link the new states


      atn.ruleToStartState[idx].addTransition(new _EpsilonTransition.default(bypassStart));
      bypassStop.addTransition(new _EpsilonTransition.default(endState));
      var matchState = new _BasicState.default();
      atn.addState(matchState);
      matchState.addTransition(new _AtomTransition.default(bypassStop, atn.ruleToTokenType[idx]));
      bypassStart.addTransition(new _EpsilonTransition.default(matchState));
    }
  }, {
    key: "stateIsEndStateFor",
    value: function stateIsEndStateFor(state, idx) {
      if (state.ruleIndex !== idx) {
        return null;
      }

      if (!(state instanceof _StarLoopEntryState.default)) {
        return null;
      }

      var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;

      if (!(maybeLoopEndState instanceof _LoopEndState.default)) {
        return null;
      }

      if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transitions[0].target instanceof _RuleStopState.default) {
        return state;
      } else {
        return null;
      }
    }
    /**
     * Analyze the {@link StarLoopEntryState} states in the specified ATN to set
     * the {@link StarLoopEntryState//isPrecedenceDecision} field to the
     * correct value.
     * @param atn The ATN.
     */

  }, {
    key: "markPrecedenceDecisions",
    value: function markPrecedenceDecisions(atn) {
      for (var i = 0; i < atn.states.length; i++) {
        var state = atn.states[i];

        if (!(state instanceof _StarLoopEntryState.default)) {
          continue;
        } // We analyze the ATN to determine if this ATN decision state is the
        // decision for the closure block that determines whether a
        // precedence rule should continue or complete.


        if (atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {
          var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;

          if (maybeLoopEndState instanceof _LoopEndState.default) {
            if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transitions[0].target instanceof _RuleStopState.default) {
              state.isPrecedenceDecision = true;
            }
          }
        }
      }
    }
  }, {
    key: "verifyATN",
    value: function verifyATN(atn) {
      if (!this.deserializationOptions.verifyATN) {
        return;
      } // verify assumptions


      for (var i = 0; i < atn.states.length; i++) {
        var state = atn.states[i];

        if (state === null) {
          continue;
        }

        this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);

        if (state instanceof _PlusBlockStartState.default) {
          this.checkCondition(state.loopBackState !== null);
        } else if (state instanceof _StarLoopEntryState.default) {
          this.checkCondition(state.loopBackState !== null);
          this.checkCondition(state.transitions.length === 2);

          if (state.transitions[0].target instanceof _StarBlockStartState.default) {
            this.checkCondition(state.transitions[1].target instanceof _LoopEndState.default);
            this.checkCondition(!state.nonGreedy);
          } else if (state.transitions[0].target instanceof _LoopEndState.default) {
            this.checkCondition(state.transitions[1].target instanceof _StarBlockStartState.default);
            this.checkCondition(state.nonGreedy);
          } else {
            throw "IllegalState";
          }
        } else if (state instanceof _StarLoopbackState.default) {
          this.checkCondition(state.transitions.length === 1);
          this.checkCondition(state.transitions[0].target instanceof _StarLoopEntryState.default);
        } else if (state instanceof _LoopEndState.default) {
          this.checkCondition(state.loopBackState !== null);
        } else if (state instanceof _RuleStartState.default) {
          this.checkCondition(state.stopState !== null);
        } else if (state instanceof _BlockStartState.default) {
          this.checkCondition(state.endState !== null);
        } else if (state instanceof _BlockEndState.default) {
          this.checkCondition(state.startState !== null);
        } else if (state instanceof _DecisionState.default) {
          this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);
        } else {
          this.checkCondition(state.transitions.length <= 1 || state instanceof _RuleStopState.default);
        }
      }
    }
  }, {
    key: "checkCondition",
    value: function checkCondition(condition, message) {
      if (!condition) {
        if (message === undefined || message === null) {
          message = "IllegalState";
        }

        throw message;
      }
    }
  }, {
    key: "readInt",
    value: function readInt() {
      return this.data[this.pos++];
    }
  }, {
    key: "readInt32",
    value: function readInt32() {
      var low = this.readInt();
      var high = this.readInt();
      return low | high << 16;
    }
  }, {
    key: "edgeFactory",
    value: function edgeFactory(atn, type, src, trg, arg1, arg2, arg3, sets) {
      var target = atn.states[trg];

      switch (type) {
        case _Transition.default.EPSILON:
          return new _EpsilonTransition.default(target);

        case _Transition.default.RANGE:
          return arg3 !== 0 ? new _RangeTransition.default(target, _Token.default.EOF, arg2) : new _RangeTransition.default(target, arg1, arg2);

        case _Transition.default.RULE:
          return new _RuleTransition.default(atn.states[arg1], arg2, arg3, target);

        case _Transition.default.PREDICATE:
          return new _PredicateTransition.default(target, arg1, arg2, arg3 !== 0);

        case _Transition.default.PRECEDENCE:
          return new _PrecedencePredicateTransition.default(target, arg1);

        case _Transition.default.ATOM:
          return arg3 !== 0 ? new _AtomTransition.default(target, _Token.default.EOF) : new _AtomTransition.default(target, arg1);

        case _Transition.default.ACTION:
          return new _ActionTransition.default(target, arg1, arg2, arg3 !== 0);

        case _Transition.default.SET:
          return new _SetTransition.default(target, sets[arg1]);

        case _Transition.default.NOT_SET:
          return new _NotSetTransition.default(target, sets[arg1]);

        case _Transition.default.WILDCARD:
          return new _WildcardTransition.default(target);

        default:
          throw "The specified transition type: " + type + " is not valid.";
      }
    }
  }, {
    key: "stateFactory",
    value: function stateFactory(type, ruleIndex) {
      if (this.stateFactories === null) {
        var sf = [];
        sf[_ATNState.default.INVALID_TYPE] = null;

        sf[_ATNState.default.BASIC] = function () {
          return new _BasicState.default();
        };

        sf[_ATNState.default.RULE_START] = function () {
          return new _RuleStartState.default();
        };

        sf[_ATNState.default.BLOCK_START] = function () {
          return new _BasicBlockStartState.default();
        };

        sf[_ATNState.default.PLUS_BLOCK_START] = function () {
          return new _PlusBlockStartState.default();
        };

        sf[_ATNState.default.STAR_BLOCK_START] = function () {
          return new _StarBlockStartState.default();
        };

        sf[_ATNState.default.TOKEN_START] = function () {
          return new _TokensStartState.default();
        };

        sf[_ATNState.default.RULE_STOP] = function () {
          return new _RuleStopState.default();
        };

        sf[_ATNState.default.BLOCK_END] = function () {
          return new _BlockEndState.default();
        };

        sf[_ATNState.default.STAR_LOOP_BACK] = function () {
          return new _StarLoopbackState.default();
        };

        sf[_ATNState.default.STAR_LOOP_ENTRY] = function () {
          return new _StarLoopEntryState.default();
        };

        sf[_ATNState.default.PLUS_LOOP_BACK] = function () {
          return new _PlusLoopbackState.default();
        };

        sf[_ATNState.default.LOOP_END] = function () {
          return new _LoopEndState.default();
        };

        this.stateFactories = sf;
      }

      if (type > this.stateFactories.length || this.stateFactories[type] === null) {
        throw "The specified state type " + type + " is not valid.";
      } else {
        var s = this.stateFactories[type]();

        if (s !== null) {
          s.ruleIndex = ruleIndex;
          return s;
        }
      }
    }
  }, {
    key: "lexerActionFactory",
    value: function lexerActionFactory(type, data1, data2) {
      if (this.actionFactories === null) {
        var af = [];

        af[_LexerActionType.default.CHANNEL] = function (data1, data2) {
          return new _LexerChannelAction.default(data1);
        };

        af[_LexerActionType.default.CUSTOM] = function (data1, data2) {
          return new _LexerCustomAction.default(data1, data2);
        };

        af[_LexerActionType.default.MODE] = function (data1, data2) {
          return new _LexerModeAction.default(data1);
        };

        af[_LexerActionType.default.MORE] = function (data1, data2) {
          return _LexerMoreAction.default.INSTANCE;
        };

        af[_LexerActionType.default.POP_MODE] = function (data1, data2) {
          return _LexerPopModeAction.default.INSTANCE;
        };

        af[_LexerActionType.default.PUSH_MODE] = function (data1, data2) {
          return new _LexerPushModeAction.default(data1);
        };

        af[_LexerActionType.default.SKIP] = function (data1, data2) {
          return _LexerSkipAction.default.INSTANCE;
        };

        af[_LexerActionType.default.TYPE] = function (data1, data2) {
          return new _LexerTypeAction.default(data1);
        };

        this.actionFactories = af;
      }

      if (type > this.actionFactories.length || this.actionFactories[type] === null) {
        throw "The specified lexer action type " + type + " is not valid.";
      } else {
        return this.actionFactories[type](data1, data2);
      }
    }
  }]);

  return ATNDeserializer;
}();

exports.default = ATNDeserializer;
},{"../Token.js":"tczR","./ATN.js":"VSBa","./ATNType.js":"sBLl","../state/ATNState.js":"BwnW","../state/BasicState.js":"G3AO","../state/DecisionState.js":"tj9k","../state/BlockStartState.js":"g0or","../state/BlockEndState.js":"LSYo","../state/LoopEndState.js":"FC1L","../state/RuleStartState.js":"cu7u","../state/RuleStopState.js":"WskT","../state/TokensStartState.js":"P9Yj","../state/PlusLoopbackState.js":"lNju","../state/StarLoopbackState.js":"gAdv","../state/StarLoopEntryState.js":"SMF9","../state/PlusBlockStartState.js":"fbkN","../state/StarBlockStartState.js":"e1nF","../state/BasicBlockStartState.js":"T8dz","../transition/Transition.js":"M4hi","../transition/AtomTransition.js":"EaJI","../transition/SetTransition.js":"csAp","../transition/NotSetTransition.js":"kgAb","../transition/RuleTransition.js":"VKr2","../transition/RangeTransition.js":"unTC","../transition/ActionTransition.js":"KNa5","../transition/EpsilonTransition.js":"WTw1","../transition/WildcardTransition.js":"WW8v","../transition/PredicateTransition.js":"Umms","../transition/PrecedencePredicateTransition.js":"i8xh","../misc/IntervalSet.js":"lP1U","./ATNDeserializationOptions.js":"w0lY","./LexerActionType.js":"jbwV","../action/LexerSkipAction.js":"afKK","../action/LexerChannelAction.js":"mhMe","../action/LexerCustomAction.js":"hf1i","../action/LexerMoreAction.js":"w8tF","../action/LexerTypeAction.js":"efiT","../action/LexerPushModeAction.js":"oykp","../action/LexerPopModeAction.js":"qndD","../action/LexerModeAction.js":"DWSz"}],"Ov3t":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/**
 * Provides an empty default implementation of {@link ANTLRErrorListener}. The
 * default implementation of each method does nothing, but can be overridden as
 * necessary.
 */
var ErrorListener = /*#__PURE__*/function () {
  function ErrorListener() {
    _classCallCheck(this, ErrorListener);
  }

  _createClass(ErrorListener, [{
    key: "syntaxError",
    value: function syntaxError(recognizer, offendingSymbol, line, column, msg, e) {}
  }, {
    key: "reportAmbiguity",
    value: function reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {}
  }, {
    key: "reportAttemptingFullContext",
    value: function reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {}
  }, {
    key: "reportContextSensitivity",
    value: function reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {}
  }]);

  return ErrorListener;
}();

exports.default = ErrorListener;
},{}],"RHnV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ErrorListener2 = _interopRequireDefault(require("./ErrorListener.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * {@inheritDoc}
 *
 * <p>
 * This implementation prints messages to {@link System//err} containing the
 * values of {@code line}, {@code charPositionInLine}, and {@code msg} using
 * the following format.</p>
 *
 * <pre>
 * line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>
 * </pre>
 *
 */
var ConsoleErrorListener = /*#__PURE__*/function (_ErrorListener) {
  _inherits(ConsoleErrorListener, _ErrorListener);

  var _super = _createSuper(ConsoleErrorListener);

  function ConsoleErrorListener() {
    _classCallCheck(this, ConsoleErrorListener);

    return _super.call(this);
  }

  _createClass(ConsoleErrorListener, [{
    key: "syntaxError",
    value: function syntaxError(recognizer, offendingSymbol, line, column, msg, e) {
      console.error("line " + line + ":" + column + " " + msg);
    }
  }]);

  return ConsoleErrorListener;
}(_ErrorListener2.default);
/**
 * Provides a default instance of {@link ConsoleErrorListener}.
 */


exports.default = ConsoleErrorListener;
ConsoleErrorListener.INSTANCE = new ConsoleErrorListener();
},{"./ErrorListener.js":"Ov3t"}],"PwSI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ErrorListener2 = _interopRequireDefault(require("./ErrorListener.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ProxyErrorListener = /*#__PURE__*/function (_ErrorListener) {
  _inherits(ProxyErrorListener, _ErrorListener);

  var _super = _createSuper(ProxyErrorListener);

  function ProxyErrorListener(delegates) {
    var _this;

    _classCallCheck(this, ProxyErrorListener);

    _this = _super.call(this);

    if (delegates === null) {
      throw "delegates";
    }

    _this.delegates = delegates;
    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
  }

  _createClass(ProxyErrorListener, [{
    key: "syntaxError",
    value: function syntaxError(recognizer, offendingSymbol, line, column, msg, e) {
      this.delegates.map(function (d) {
        return d.syntaxError(recognizer, offendingSymbol, line, column, msg, e);
      });
    }
  }, {
    key: "reportAmbiguity",
    value: function reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
      this.delegates.map(function (d) {
        return d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
      });
    }
  }, {
    key: "reportAttemptingFullContext",
    value: function reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
      this.delegates.map(function (d) {
        return d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs);
      });
    }
  }, {
    key: "reportContextSensitivity",
    value: function reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
      this.delegates.map(function (d) {
        return d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs);
      });
    }
  }]);

  return ProxyErrorListener;
}(_ErrorListener2.default);

exports.default = ProxyErrorListener;
},{"./ErrorListener.js":"Ov3t"}],"Vp1s":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Token = _interopRequireDefault(require("./Token.js"));

var _ConsoleErrorListener = _interopRequireDefault(require("./error/ConsoleErrorListener.js"));

var _ProxyErrorListener = _interopRequireDefault(require("./error/ProxyErrorListener.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var Recognizer = /*#__PURE__*/function () {
  function Recognizer() {
    _classCallCheck(this, Recognizer);

    this._listeners = [_ConsoleErrorListener.default.INSTANCE];
    this._interp = null;
    this._stateNumber = -1;
  }

  _createClass(Recognizer, [{
    key: "checkVersion",
    value: function checkVersion(toolVersion) {
      var runtimeVersion = "4.10.1";

      if (runtimeVersion !== toolVersion) {
        console.log("ANTLR runtime and generated code versions disagree: " + runtimeVersion + "!=" + toolVersion);
      }
    }
  }, {
    key: "addErrorListener",
    value: function addErrorListener(listener) {
      this._listeners.push(listener);
    }
  }, {
    key: "removeErrorListeners",
    value: function removeErrorListeners() {
      this._listeners = [];
    }
  }, {
    key: "getLiteralNames",
    value: function getLiteralNames() {
      return Object.getPrototypeOf(this).constructor.literalNames || [];
    }
  }, {
    key: "getSymbolicNames",
    value: function getSymbolicNames() {
      return Object.getPrototypeOf(this).constructor.symbolicNames || [];
    }
  }, {
    key: "getTokenNames",
    value: function getTokenNames() {
      if (!this.tokenNames) {
        var literalNames = this.getLiteralNames();
        var symbolicNames = this.getSymbolicNames();
        var length = literalNames.length > symbolicNames.length ? literalNames.length : symbolicNames.length;
        this.tokenNames = [];

        for (var i = 0; i < length; i++) {
          this.tokenNames[i] = literalNames[i] || symbolicNames[i] || "<INVALID";
        }
      }

      return this.tokenNames;
    }
  }, {
    key: "getTokenTypeMap",
    value: function getTokenTypeMap() {
      var tokenNames = this.getTokenNames();

      if (tokenNames === null) {
        throw "The current recognizer does not provide a list of token names.";
      }

      var result = this.tokenTypeMapCache[tokenNames];

      if (result === undefined) {
        result = tokenNames.reduce(function (o, k, i) {
          o[k] = i;
        });
        result.EOF = _Token.default.EOF;
        this.tokenTypeMapCache[tokenNames] = result;
      }

      return result;
    }
    /**
     * Get a map from rule names to rule indexes.
     * <p>Used for XPath and tree pattern compilation.</p>
     */

  }, {
    key: "getRuleIndexMap",
    value: function getRuleIndexMap() {
      var ruleNames = this.ruleNames;

      if (ruleNames === null) {
        throw "The current recognizer does not provide a list of rule names.";
      }

      var result = this.ruleIndexMapCache[ruleNames]; // todo: should it be Recognizer.ruleIndexMapCache ?

      if (result === undefined) {
        result = ruleNames.reduce(function (o, k, i) {
          o[k] = i;
        });
        this.ruleIndexMapCache[ruleNames] = result;
      }

      return result;
    }
  }, {
    key: "getTokenType",
    value: function getTokenType(tokenName) {
      var ttype = this.getTokenTypeMap()[tokenName];

      if (ttype !== undefined) {
        return ttype;
      } else {
        return _Token.default.INVALID_TYPE;
      }
    } // What is the error header, normally line/character position information?

  }, {
    key: "getErrorHeader",
    value: function getErrorHeader(e) {
      var line = e.getOffendingToken().line;
      var column = e.getOffendingToken().column;
      return "line " + line + ":" + column;
    }
    /**
     * How should a token be displayed in an error message? The default
     * is to display just the text, but during development you might
     * want to have a lot of information spit out.  Override in that case
     * to use t.toString() (which, for CommonToken, dumps everything about
     * the token). This is better than forcing you to override a method in
     * your token objects because you don't have to go modify your lexer
     * so that it creates a new Java type.
     *
     * @deprecated This method is not called by the ANTLR 4 Runtime. Specific
     * implementations of {@link ANTLRErrorStrategy} may provide a similar
     * feature when necessary. For example, see
     * {@link DefaultErrorStrategy//getTokenErrorDisplay}.*/

  }, {
    key: "getTokenErrorDisplay",
    value: function getTokenErrorDisplay(t) {
      if (t === null) {
        return "<no token>";
      }

      var s = t.text;

      if (s === null) {
        if (t.type === _Token.default.EOF) {
          s = "<EOF>";
        } else {
          s = "<" + t.type + ">";
        }
      }

      s = s.replace("\n", "\\n").replace("\r", "\\r").replace("\t", "\\t");
      return "'" + s + "'";
    }
  }, {
    key: "getErrorListenerDispatch",
    value: function getErrorListenerDispatch() {
      return new _ProxyErrorListener.default(this._listeners);
    }
    /**
     * subclass needs to override these if there are sempreds or actions
     * that the ATN interp needs to execute
     */

  }, {
    key: "sempred",
    value: function sempred(localctx, ruleIndex, actionIndex) {
      return true;
    }
  }, {
    key: "precpred",
    value: function precpred(localctx, precedence) {
      return true;
    }
  }, {
    key: "state",
    get: function get() {
      return this._stateNumber;
    },
    set: function set(state) {
      this._stateNumber = state;
    }
  }]);

  return Recognizer;
}();

exports.default = Recognizer;
Recognizer.tokenTypeMapCache = {};
Recognizer.ruleIndexMapCache = {};
},{"./Token.js":"tczR","./error/ConsoleErrorListener.js":"RHnV","./error/ProxyErrorListener.js":"PwSI"}],"YTV7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Token2 = _interopRequireDefault(require("./Token.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var CommonToken = /*#__PURE__*/function (_Token) {
  _inherits(CommonToken, _Token);

  var _super = _createSuper(CommonToken);

  function CommonToken(source, type, channel, start, stop) {
    var _this;

    _classCallCheck(this, CommonToken);

    _this = _super.call(this);
    _this.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;
    _this.type = type !== undefined ? type : null;
    _this.channel = channel !== undefined ? channel : _Token2.default.DEFAULT_CHANNEL;
    _this.start = start !== undefined ? start : -1;
    _this.stop = stop !== undefined ? stop : -1;
    _this.tokenIndex = -1;

    if (_this.source[0] !== null) {
      _this.line = source[0].line;
      _this.column = source[0].column;
    } else {
      _this.column = -1;
    }

    return _this;
  }
  /**
   * Constructs a new {@link CommonToken} as a copy of another {@link Token}.
   *
   * <p>
   * If {@code oldToken} is also a {@link CommonToken} instance, the newly
   * constructed token will share a reference to the {@link //text} field and
   * the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will
   * be assigned the result of calling {@link //getText}, and {@link //source}
   * will be constructed from the result of {@link Token//getTokenSource} and
   * {@link Token//getInputStream}.</p>
   *
   * @param oldToken The token to copy.
   */


  _createClass(CommonToken, [{
    key: "clone",
    value: function clone() {
      var t = new CommonToken(this.source, this.type, this.channel, this.start, this.stop);
      t.tokenIndex = this.tokenIndex;
      t.line = this.line;
      t.column = this.column;
      t.text = this.text;
      return t;
    }
  }, {
    key: "toString",
    value: function toString() {
      var txt = this.text;

      if (txt !== null) {
        txt = txt.replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t");
      } else {
        txt = "<no text>";
      }

      return "[@" + this.tokenIndex + "," + this.start + ":" + this.stop + "='" + txt + "',<" + this.type + ">" + (this.channel > 0 ? ",channel=" + this.channel : "") + "," + this.line + ":" + this.column + "]";
    }
  }, {
    key: "text",
    get: function get() {
      if (this._text !== null) {
        return this._text;
      }

      var input = this.getInputStream();

      if (input === null) {
        return null;
      }

      var n = input.size;

      if (this.start < n && this.stop < n) {
        return input.getText(this.start, this.stop);
      } else {
        return "<EOF>";
      }
    },
    set: function set(text) {
      this._text = text;
    }
  }]);

  return CommonToken;
}(_Token2.default);
/**
 * An empty {@link Pair} which is used as the default value of
 * {@link //source} for tokens that do not have a source.
 */


exports.default = CommonToken;
CommonToken.EMPTY_SOURCE = [null, null];
},{"./Token.js":"tczR"}],"MQbA":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _CommonToken = _interopRequireDefault(require("./CommonToken.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TokenFactory = /*#__PURE__*/_createClass(function TokenFactory() {
  _classCallCheck(this, TokenFactory);
});
/**
 * This default implementation of {@link TokenFactory} creates
 * {@link CommonToken} objects.
 */


var CommonTokenFactory = /*#__PURE__*/function (_TokenFactory) {
  _inherits(CommonTokenFactory, _TokenFactory);

  var _super = _createSuper(CommonTokenFactory);

  function CommonTokenFactory(copyText) {
    var _this;

    _classCallCheck(this, CommonTokenFactory);

    _this = _super.call(this);
    /**
     * Indicates whether {@link CommonToken//setText} should be called after
     * constructing tokens to explicitly set the text. This is useful for cases
     * where the input stream might not be able to provide arbitrary substrings
     * of text from the input after the lexer creates a token (e.g. the
     * implementation of {@link CharStream//getText} in
     * {@link UnbufferedCharStream} throws an
     * {@link UnsupportedOperationException}). Explicitly setting the token text
     * allows {@link Token//getText} to be called at any time regardless of the
     * input stream implementation.
     *
     * <p>
     * The default value is {@code false} to avoid the performance and memory
     * overhead of copying text for every token unless explicitly requested.</p>
     */

    _this.copyText = copyText === undefined ? false : copyText;
    return _this;
  }

  _createClass(CommonTokenFactory, [{
    key: "create",
    value: function create(source, type, text, channel, start, stop, line, column) {
      var t = new _CommonToken.default(source, type, channel, start, stop);
      t.line = line;
      t.column = column;

      if (text !== null) {
        t.text = text;
      } else if (this.copyText && source[1] !== null) {
        t.text = source[1].getText(start, stop);
      }

      return t;
    }
  }, {
    key: "createThin",
    value: function createThin(type, text) {
      var t = new _CommonToken.default(null, type);
      t.text = text;
      return t;
    }
  }]);

  return CommonTokenFactory;
}(TokenFactory);
/**
 * The default {@link CommonTokenFactory} instance.
 *
 * <p>
 * This token factory does not explicitly copy token text when constructing
 * tokens.</p>
 */


exports.default = CommonTokenFactory;
CommonTokenFactory.DEFAULT = new CommonTokenFactory();
},{"./CommonToken.js":"YTV7"}],"pFqq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/**
 * The root of the ANTLR exception hierarchy. In general, ANTLR tracks just
 *  3 kinds of errors: prediction errors, failed predicate errors, and
 *  mismatched input errors. In each case, the parser knows where it is
 *  in the input, where it is in the ATN, the rule invocation stack,
 *  and what kind of problem occurred.
 */
var RecognitionException = /*#__PURE__*/function (_Error) {
  _inherits(RecognitionException, _Error);

  var _super = _createSuper(RecognitionException);

  function RecognitionException(params) {
    var _this;

    _classCallCheck(this, RecognitionException);

    _this = _super.call(this, params.message);
    if (Error.captureStackTrace) Error.captureStackTrace(_assertThisInitialized(_this), RecognitionException);
    _this.message = params.message;
    _this.recognizer = params.recognizer;
    _this.input = params.input;
    _this.ctx = params.ctx;
    /**
     * The current {@link Token} when an error occurred. Since not all streams
     * support accessing symbols by index, we have to track the {@link Token}
     * instance itself
    */

    _this.offendingToken = null;
    /**
     * Get the ATN state number the parser was in at the time the error
     * occurred. For {@link NoViableAltException} and
     * {@link LexerNoViableAltException} exceptions, this is the
     * {@link DecisionState} number. For others, it is the state whose outgoing
     * edge we couldn't match.
     */

    _this.offendingState = -1;

    if (_this.recognizer !== null) {
      _this.offendingState = _this.recognizer.state;
    }

    return _this;
  }
  /**
   * Gets the set of input symbols which could potentially follow the
   * previously matched symbol at the time this exception was thrown.
   *
   * <p>If the set of expected tokens is not known and could not be computed,
   * this method returns {@code null}.</p>
   *
   * @return The set of token types that could potentially follow the current
   * state in the ATN, or {@code null} if the information is not available.
   */


  _createClass(RecognitionException, [{
    key: "getExpectedTokens",
    value: function getExpectedTokens() {
      if (this.recognizer !== null) {
        return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);
      } else {
        return null;
      }
    } // <p>If the state number is not known, this method returns -1.</p>

  }, {
    key: "toString",
    value: function toString() {
      return this.message;
    }
  }]);

  return RecognitionException;
}( /*#__PURE__*/_wrapNativeSuper(Error));

exports.default = RecognitionException;
},{}],"oFa5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Interval = _interopRequireDefault(require("../misc/Interval.js"));

var _RecognitionException2 = _interopRequireDefault(require("./RecognitionException.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var LexerNoViableAltException = /*#__PURE__*/function (_RecognitionException) {
  _inherits(LexerNoViableAltException, _RecognitionException);

  var _super = _createSuper(LexerNoViableAltException);

  function LexerNoViableAltException(lexer, input, startIndex, deadEndConfigs) {
    var _this;

    _classCallCheck(this, LexerNoViableAltException);

    _this = _super.call(this, {
      message: "",
      recognizer: lexer,
      input: input,
      ctx: null
    });
    _this.startIndex = startIndex;
    _this.deadEndConfigs = deadEndConfigs;
    return _this;
  }

  _createClass(LexerNoViableAltException, [{
    key: "toString",
    value: function toString() {
      var symbol = "";

      if (this.startIndex >= 0 && this.startIndex < this.input.size) {
        symbol = this.input.getText(new _Interval.default(this.startIndex, this.startIndex));
      }

      return "LexerNoViableAltException" + symbol;
    }
  }]);

  return LexerNoViableAltException;
}(_RecognitionException2.default);

exports.default = LexerNoViableAltException;
},{"../misc/Interval.js":"JCiE","./RecognitionException.js":"pFqq"}],"FKtu":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Token = _interopRequireDefault(require("./Token.js"));

var _Recognizer2 = _interopRequireDefault(require("./Recognizer.js"));

var _CommonTokenFactory = _interopRequireDefault(require("./CommonTokenFactory.js"));

var _RecognitionException = _interopRequireDefault(require("./error/RecognitionException.js"));

var _LexerNoViableAltException = _interopRequireDefault(require("./error/LexerNoViableAltException.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * A lexer is recognizer that draws input symbols from a character stream.
 * lexer grammars result in a subclass of this object. A Lexer object
 * uses simplified match() and error recovery mechanisms in the interest of speed.
 */
var Lexer = /*#__PURE__*/function (_Recognizer) {
  _inherits(Lexer, _Recognizer);

  var _super = _createSuper(Lexer);

  function Lexer(input) {
    var _this;

    _classCallCheck(this, Lexer);

    _this = _super.call(this);
    _this._input = input;
    _this._factory = _CommonTokenFactory.default.DEFAULT;
    _this._tokenFactorySourcePair = [_assertThisInitialized(_this), input];
    _this._interp = null; // child classes must populate this

    /**
     * The goal of all lexer rules/methods is to create a token object.
     * this is an instance variable as multiple rules may collaborate to
     * create a single token. nextToken will return this object after
     * matching lexer rule(s). If you subclass to allow multiple token
     * emissions, then set this to the last token to be matched or
     * something nonnull so that the auto token emit mechanism will not
     * emit another token.
     */

    _this._token = null;
    /**
     * What character index in the stream did the current token start at?
     * Needed, for example, to get the text for current token. Set at
     * the start of nextToken.
     */

    _this._tokenStartCharIndex = -1; // The line on which the first character of the token resides///

    _this._tokenStartLine = -1; // The character position of first character within the line///

    _this._tokenStartColumn = -1; // Once we see EOF on char stream, next token will be EOF.
    // If you have DONE : EOF ; then you see DONE EOF.

    _this._hitEOF = false; // The channel number for the current token///

    _this._channel = _Token.default.DEFAULT_CHANNEL; // The token type for the current token///

    _this._type = _Token.default.INVALID_TYPE;
    _this._modeStack = [];
    _this._mode = Lexer.DEFAULT_MODE;
    /**
     * You can set the text for the current token to override what is in
     * the input char buffer. Use setText() or can set this instance var.
     */

    _this._text = null;
    return _this;
  }

  _createClass(Lexer, [{
    key: "reset",
    value: function reset() {
      // wack Lexer state variables
      if (this._input !== null) {
        this._input.seek(0); // rewind the input

      }

      this._token = null;
      this._type = _Token.default.INVALID_TYPE;
      this._channel = _Token.default.DEFAULT_CHANNEL;
      this._tokenStartCharIndex = -1;
      this._tokenStartColumn = -1;
      this._tokenStartLine = -1;
      this._text = null;
      this._hitEOF = false;
      this._mode = Lexer.DEFAULT_MODE;
      this._modeStack = [];

      this._interp.reset();
    } // Return a token from this source; i.e., match a token on the char stream.

  }, {
    key: "nextToken",
    value: function nextToken() {
      if (this._input === null) {
        throw "nextToken requires a non-null input stream.";
      }
      /**
       * Mark start location in char stream so unbuffered streams are
       * guaranteed at least have text of current token
       */


      var tokenStartMarker = this._input.mark();

      try {
        for (;;) {
          if (this._hitEOF) {
            this.emitEOF();
            return this._token;
          }

          this._token = null;
          this._channel = _Token.default.DEFAULT_CHANNEL;
          this._tokenStartCharIndex = this._input.index;
          this._tokenStartColumn = this._interp.column;
          this._tokenStartLine = this._interp.line;
          this._text = null;
          var continueOuter = false;

          for (;;) {
            this._type = _Token.default.INVALID_TYPE;
            var ttype = Lexer.SKIP;

            try {
              ttype = this._interp.match(this._input, this._mode);
            } catch (e) {
              if (e instanceof _RecognitionException.default) {
                this.notifyListeners(e); // report error

                this.recover(e);
              } else {
                console.log(e.stack);
                throw e;
              }
            }

            if (this._input.LA(1) === _Token.default.EOF) {
              this._hitEOF = true;
            }

            if (this._type === _Token.default.INVALID_TYPE) {
              this._type = ttype;
            }

            if (this._type === Lexer.SKIP) {
              continueOuter = true;
              break;
            }

            if (this._type !== Lexer.MORE) {
              break;
            }
          }

          if (continueOuter) {
            continue;
          }

          if (this._token === null) {
            this.emit();
          }

          return this._token;
        }
      } finally {
        // make sure we release marker after match or
        // unbuffered char stream will keep buffering
        this._input.release(tokenStartMarker);
      }
    }
    /**
     * Instruct the lexer to skip creating a token for current lexer rule
     * and look for another token. nextToken() knows to keep looking when
     * a lexer rule finishes with token set to SKIP_TOKEN. Recall that
     * if token==null at end of any token rule, it creates one for you
     * and emits it.
     */

  }, {
    key: "skip",
    value: function skip() {
      this._type = Lexer.SKIP;
    }
  }, {
    key: "more",
    value: function more() {
      this._type = Lexer.MORE;
    }
  }, {
    key: "mode",
    value: function mode(m) {
      this._mode = m;
    }
  }, {
    key: "pushMode",
    value: function pushMode(m) {
      if (this._interp.debug) {
        console.log("pushMode " + m);
      }

      this._modeStack.push(this._mode);

      this.mode(m);
    }
  }, {
    key: "popMode",
    value: function popMode() {
      if (this._modeStack.length === 0) {
        throw "Empty Stack";
      }

      if (this._interp.debug) {
        console.log("popMode back to " + this._modeStack.slice(0, -1));
      }

      this.mode(this._modeStack.pop());
      return this._mode;
    }
    /**
     * By default does not support multiple emits per nextToken invocation
     * for efficiency reasons. Subclass and override this method, nextToken,
     * and getToken (to push tokens into a list and pull from that list
     * rather than a single variable as this implementation does).
     */

  }, {
    key: "emitToken",
    value: function emitToken(token) {
      this._token = token;
    }
    /**
     * The standard method called to automatically emit a token at the
     * outermost lexical rule. The token object should point into the
     * char buffer start..stop. If there is a text override in 'text',
     * use that to set the token's text. Override this method to emit
     * custom Token objects or provide a new factory.
     */

  }, {
    key: "emit",
    value: function emit() {
      var t = this._factory.create(this._tokenFactorySourcePair, this._type, this._text, this._channel, this._tokenStartCharIndex, this.getCharIndex() - 1, this._tokenStartLine, this._tokenStartColumn);

      this.emitToken(t);
      return t;
    }
  }, {
    key: "emitEOF",
    value: function emitEOF() {
      var cpos = this.column;
      var lpos = this.line;

      var eof = this._factory.create(this._tokenFactorySourcePair, _Token.default.EOF, null, _Token.default.DEFAULT_CHANNEL, this._input.index, this._input.index - 1, lpos, cpos);

      this.emitToken(eof);
      return eof;
    } // What is the index of the current character of lookahead?///

  }, {
    key: "getCharIndex",
    value: function getCharIndex() {
      return this._input.index;
    }
    /**
     * Return a list of all Token objects in input char stream.
     * Forces load of all tokens. Does not include EOF token.
     */

  }, {
    key: "getAllTokens",
    value: function getAllTokens() {
      var tokens = [];
      var t = this.nextToken();

      while (t.type !== _Token.default.EOF) {
        tokens.push(t);
        t = this.nextToken();
      }

      return tokens;
    }
  }, {
    key: "notifyListeners",
    value: function notifyListeners(e) {
      var start = this._tokenStartCharIndex;
      var stop = this._input.index;

      var text = this._input.getText(start, stop);

      var msg = "token recognition error at: '" + this.getErrorDisplay(text) + "'";
      var listener = this.getErrorListenerDispatch();
      listener.syntaxError(this, null, this._tokenStartLine, this._tokenStartColumn, msg, e);
    }
  }, {
    key: "getErrorDisplay",
    value: function getErrorDisplay(s) {
      var d = [];

      for (var i = 0; i < s.length; i++) {
        d.push(s[i]);
      }

      return d.join('');
    }
  }, {
    key: "getErrorDisplayForChar",
    value: function getErrorDisplayForChar(c) {
      if (c.charCodeAt(0) === _Token.default.EOF) {
        return "<EOF>";
      } else if (c === '\n') {
        return "\\n";
      } else if (c === '\t') {
        return "\\t";
      } else if (c === '\r') {
        return "\\r";
      } else {
        return c;
      }
    }
  }, {
    key: "getCharErrorDisplay",
    value: function getCharErrorDisplay(c) {
      return "'" + this.getErrorDisplayForChar(c) + "'";
    }
    /**
     * Lexers can normally match any char in it's vocabulary after matching
     * a token, so do the easy thing and just kill a character and hope
     * it all works out. You can instead use the rule invocation stack
     * to do sophisticated error recovery if you are in a fragment rule.
     */

  }, {
    key: "recover",
    value: function recover(re) {
      if (this._input.LA(1) !== _Token.default.EOF) {
        if (re instanceof _LexerNoViableAltException.default) {
          // skip a char and try again
          this._interp.consume(this._input);
        } else {
          // TODO: Do we lose character or line position information?
          this._input.consume();
        }
      }
    }
  }, {
    key: "inputStream",
    get: function get() {
      return this._input;
    },
    set: function set(input) {
      this._input = null;
      this._tokenFactorySourcePair = [this, this._input];
      this.reset();
      this._input = input;
      this._tokenFactorySourcePair = [this, this._input];
    }
  }, {
    key: "sourceName",
    get: function get() {
      return this._input.sourceName;
    }
  }, {
    key: "type",
    get: function get() {
      return this._type;
    },
    set: function set(type) {
      this._type = type;
    }
  }, {
    key: "line",
    get: function get() {
      return this._interp.line;
    },
    set: function set(line) {
      this._interp.line = line;
    }
  }, {
    key: "column",
    get: function get() {
      return this._interp.column;
    },
    set: function set(column) {
      this._interp.column = column;
    }
  }, {
    key: "text",
    get: function get() {
      if (this._text !== null) {
        return this._text;
      } else {
        return this._interp.getText(this._input);
      }
    },
    set: function set(text) {
      this._text = text;
    }
  }]);

  return Lexer;
}(_Recognizer2.default);

exports.default = Lexer;
Lexer.DEFAULT_MODE = 0;
Lexer.MORE = -2;
Lexer.SKIP = -3;
Lexer.DEFAULT_TOKEN_CHANNEL = _Token.default.DEFAULT_CHANNEL;
Lexer.HIDDEN = _Token.default.HIDDEN_CHANNEL;
Lexer.MIN_CHAR_VALUE = 0x0000;
Lexer.MAX_CHAR_VALUE = 0x10FFFF;
},{"./Token.js":"tczR","./Recognizer.js":"Vp1s","./CommonTokenFactory.js":"MQbA","./error/RecognitionException.js":"pFqq","./error/LexerNoViableAltException.js":"oFa5"}],"gGEg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ATN = _interopRequireDefault(require("./ATN.js"));

var _SemanticContext = _interopRequireDefault(require("./SemanticContext.js"));

var _PredictionContextUtils = require("../context/PredictionContextUtils.js");

var _arrayToString = _interopRequireDefault(require("../utils/arrayToString.js"));

var _HashSet = _interopRequireDefault(require("../misc/HashSet.js"));

var _equalArrays = _interopRequireDefault(require("../utils/equalArrays.js"));

var _HashCode = _interopRequireDefault(require("../misc/HashCode.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function hashATNConfig(c) {
  return c.hashCodeForConfigSet();
}

function equalATNConfigs(a, b) {
  if (a === b) {
    return true;
  } else if (a === null || b === null) {
    return false;
  } else return a.equalsForConfigSet(b);
}
/**
 * Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track
 * info about the set, with support for combining similar configurations using a
 * graph-structured stack
 */


var ATNConfigSet = /*#__PURE__*/function () {
  function ATNConfigSet(fullCtx) {
    _classCallCheck(this, ATNConfigSet);

    /**
     * The reason that we need this is because we don't want the hash map to use
     * the standard hash code and equals. We need all configurations with the
     * same
     * {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively
     * doubles
     * the number of objects associated with ATNConfigs. The other solution is
     * to
     * use a hash table that lets us specify the equals/hashcode operation.
     * All configs but hashed by (s, i, _, pi) not including context. Wiped out
     * when we go readonly as this set becomes a DFA state
     */
    this.configLookup = new _HashSet.default(hashATNConfig, equalATNConfigs);
    /**
     * Indicates that this configuration set is part of a full context
     * LL prediction. It will be used to determine how to merge $. With SLL
     * it's a wildcard whereas it is not for LL context merge
     */

    this.fullCtx = fullCtx === undefined ? true : fullCtx;
    /**
     * Indicates that the set of configurations is read-only. Do not
     * allow any code to manipulate the set; DFA states will point at
     * the sets and they must not change. This does not protect the other
     * fields; in particular, conflictingAlts is set after
     * we've made this readonly
     */

    this.readOnly = false; // Track the elements as they are added to the set; supports get(i)///

    this.configs = []; // TODO: these fields make me pretty uncomfortable but nice to pack up info
    // together, saves recomputation
    // TODO: can we track conflicts as they are added to save scanning configs
    // later?

    this.uniqueAlt = 0;
    this.conflictingAlts = null;
    /**
     * Used in parser and lexer. In lexer, it indicates we hit a pred
     * while computing a closure operation. Don't make a DFA state from this
     */

    this.hasSemanticContext = false;
    this.dipsIntoOuterContext = false;
    this.cachedHashCode = -1;
  }
  /**
   * Adding a new config means merging contexts with existing configs for
   * {@code (s, i, pi, _)}, where {@code s} is the
   * {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and
   * {@code pi} is the {@link ATNConfig//semanticContext}. We use
   * {@code (s,i,pi)} as key.
   *
   * <p>This method updates {@link //dipsIntoOuterContext} and
   * {@link //hasSemanticContext} when necessary.</p>
   */


  _createClass(ATNConfigSet, [{
    key: "add",
    value: function add(config, mergeCache) {
      if (mergeCache === undefined) {
        mergeCache = null;
      }

      if (this.readOnly) {
        throw "This set is readonly";
      }

      if (config.semanticContext !== _SemanticContext.default.NONE) {
        this.hasSemanticContext = true;
      }

      if (config.reachesIntoOuterContext > 0) {
        this.dipsIntoOuterContext = true;
      }

      var existing = this.configLookup.add(config);

      if (existing === config) {
        this.cachedHashCode = -1;
        this.configs.push(config); // track order here

        return true;
      } // a previous (s,i,pi,_), merge with it and save result


      var rootIsWildcard = !this.fullCtx;
      var merged = (0, _PredictionContextUtils.merge)(existing.context, config.context, rootIsWildcard, mergeCache);
      /**
       * no need to check for existing.context, config.context in cache
       * since only way to create new graphs is "call rule" and here. We
       * cache at both places
       */

      existing.reachesIntoOuterContext = Math.max(existing.reachesIntoOuterContext, config.reachesIntoOuterContext); // make sure to preserve the precedence filter suppression during the merge

      if (config.precedenceFilterSuppressed) {
        existing.precedenceFilterSuppressed = true;
      }

      existing.context = merged; // replace context; no need to alt mapping

      return true;
    }
  }, {
    key: "getStates",
    value: function getStates() {
      var states = new _HashSet.default();

      for (var i = 0; i < this.configs.length; i++) {
        states.add(this.configs[i].state);
      }

      return states;
    }
  }, {
    key: "getPredicates",
    value: function getPredicates() {
      var preds = [];

      for (var i = 0; i < this.configs.length; i++) {
        var c = this.configs[i].semanticContext;

        if (c !== _SemanticContext.default.NONE) {
          preds.push(c.semanticContext);
        }
      }

      return preds;
    }
  }, {
    key: "optimizeConfigs",
    value: function optimizeConfigs(interpreter) {
      if (this.readOnly) {
        throw "This set is readonly";
      }

      if (this.configLookup.length === 0) {
        return;
      }

      for (var i = 0; i < this.configs.length; i++) {
        var config = this.configs[i];
        config.context = interpreter.getCachedContext(config.context);
      }
    }
  }, {
    key: "addAll",
    value: function addAll(coll) {
      for (var i = 0; i < coll.length; i++) {
        this.add(coll[i]);
      }

      return false;
    }
  }, {
    key: "equals",
    value: function equals(other) {
      return this === other || other instanceof ATNConfigSet && (0, _equalArrays.default)(this.configs, other.configs) && this.fullCtx === other.fullCtx && this.uniqueAlt === other.uniqueAlt && this.conflictingAlts === other.conflictingAlts && this.hasSemanticContext === other.hasSemanticContext && this.dipsIntoOuterContext === other.dipsIntoOuterContext;
    }
  }, {
    key: "hashCode",
    value: function hashCode() {
      var hash = new _HashCode.default();
      hash.update(this.configs);
      return hash.finish();
    }
  }, {
    key: "updateHashCode",
    value: function updateHashCode(hash) {
      if (this.readOnly) {
        if (this.cachedHashCode === -1) {
          this.cachedHashCode = this.hashCode();
        }

        hash.update(this.cachedHashCode);
      } else {
        hash.update(this.hashCode());
      }
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return this.configs.length === 0;
    }
  }, {
    key: "contains",
    value: function contains(item) {
      if (this.configLookup === null) {
        throw "This method is not implemented for readonly sets.";
      }

      return this.configLookup.contains(item);
    }
  }, {
    key: "containsFast",
    value: function containsFast(item) {
      if (this.configLookup === null) {
        throw "This method is not implemented for readonly sets.";
      }

      return this.configLookup.containsFast(item);
    }
  }, {
    key: "clear",
    value: function clear() {
      if (this.readOnly) {
        throw "This set is readonly";
      }

      this.configs = [];
      this.cachedHashCode = -1;
      this.configLookup = new _HashSet.default();
    }
  }, {
    key: "setReadonly",
    value: function setReadonly(readOnly) {
      this.readOnly = readOnly;

      if (readOnly) {
        this.configLookup = null; // can't mod, no need for lookup cache
      }
    }
  }, {
    key: "toString",
    value: function toString() {
      return (0, _arrayToString.default)(this.configs) + (this.hasSemanticContext ? ",hasSemanticContext=" + this.hasSemanticContext : "") + (this.uniqueAlt !== _ATN.default.INVALID_ALT_NUMBER ? ",uniqueAlt=" + this.uniqueAlt : "") + (this.conflictingAlts !== null ? ",conflictingAlts=" + this.conflictingAlts : "") + (this.dipsIntoOuterContext ? ",dipsIntoOuterContext" : "");
    }
  }, {
    key: "items",
    get: function get() {
      return this.configs;
    }
  }, {
    key: "length",
    get: function get() {
      return this.configs.length;
    }
  }]);

  return ATNConfigSet;
}();

exports.default = ATNConfigSet;
},{"./ATN.js":"VSBa","./SemanticContext.js":"fWJV","../context/PredictionContextUtils.js":"D05O","../utils/arrayToString.js":"oS3b","../misc/HashSet.js":"hSGu","../utils/equalArrays.js":"fx5K","../misc/HashCode.js":"JXAn"}],"PVAv":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ATNConfigSet = _interopRequireDefault(require("../atn/ATNConfigSet.js"));

var _HashCode = _interopRequireDefault(require("../misc/HashCode.js"));

var _HashSet = _interopRequireDefault(require("../misc/HashSet.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * A DFA state represents a set of possible ATN configurations.
 * As Aho, Sethi, Ullman p. 117 says "The DFA uses its state
 * to keep track of all possible states the ATN can be in after
 * reading each input symbol. That is to say, after reading
 * input a1a2..an, the DFA is in a state that represents the
 * subset T of the states of the ATN that are reachable from the
 * ATN's start state along some path labeled a1a2..an."
 * In conventional NFA&rarr;DFA conversion, therefore, the subset T
 * would be a bitset representing the set of states the
 * ATN could be in. We need to track the alt predicted by each
 * state as well, however. More importantly, we need to maintain
 * a stack of states, tracking the closure operations as they
 * jump from rule to rule, emulating rule invocations (method calls).
 * I have to add a stack to simulate the proper lookahead sequences for
 * the underlying LL grammar from which the ATN was derived.
 *
 * <p>I use a set of ATNConfig objects not simple states. An ATNConfig
 * is both a state (ala normal conversion) and a RuleContext describing
 * the chain of rules (if any) followed to arrive at that state.</p>
 *
 * <p>A DFA state may have multiple references to a particular state,
 * but with different ATN contexts (with same or different alts)
 * meaning that state was reached via a different set of rule invocations.</p>
 */
var DFAState = /*#__PURE__*/function () {
  function DFAState(stateNumber, configs) {
    _classCallCheck(this, DFAState);

    if (stateNumber === null) {
      stateNumber = -1;
    }

    if (configs === null) {
      configs = new _ATNConfigSet.default();
    }

    this.stateNumber = stateNumber;
    this.configs = configs;
    /**
     * {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)
     * {@link Token//EOF} maps to {@code edges[0]}.
     */

    this.edges = null;
    this.isAcceptState = false;
    /**
     * if accept state, what ttype do we match or alt do we predict?
     * This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link//predicates}
     * {@code !=null} or {@link //requiresFullContext}.
     */

    this.prediction = 0;
    this.lexerActionExecutor = null;
    /**
     * Indicates that this state was created during SLL prediction that
     * discovered a conflict between the configurations in the state. Future
     * {@link ParserATNSimulator//execATN} invocations immediately jumped doing
     * full context prediction if this field is true.
     */

    this.requiresFullContext = false;
    /**
     * During SLL parsing, this is a list of predicates associated with the
     * ATN configurations of the DFA state. When we have predicates,
     * {@link //requiresFullContext} is {@code false} since full context
     * prediction evaluates predicates
     * on-the-fly. If this is not null, then {@link //prediction} is
     * {@link ATN//INVALID_ALT_NUMBER}.
     *
     * <p>We only use these for non-{@link //requiresFullContext} but
     * conflicting states. That
     * means we know from the context (it's $ or we don't dip into outer
     * context) that it's an ambiguity not a conflict.</p>
     *
     * <p>This list is computed by {@link
     * ParserATNSimulator//predicateDFAState}.</p>
     */

    this.predicates = null;
    return this;
  }
  /**
   * Get the set of all alts mentioned by all ATN configurations in this
   * DFA state.
   */


  _createClass(DFAState, [{
    key: "getAltSet",
    value: function getAltSet() {
      var alts = new _HashSet.default();

      if (this.configs !== null) {
        for (var i = 0; i < this.configs.length; i++) {
          var c = this.configs[i];
          alts.add(c.alt);
        }
      }

      if (alts.length === 0) {
        return null;
      } else {
        return alts;
      }
    }
    /**
     * Two {@link DFAState} instances are equal if their ATN configuration sets
     * are the same. This method is used to see if a state already exists.
     *
     * <p>Because the number of alternatives and number of ATN configurations are
     * finite, there is a finite number of DFA states that can be processed.
     * This is necessary to show that the algorithm terminates.</p>
     *
     * <p>Cannot test the DFA state numbers here because in
     * {@link ParserATNSimulator//addDFAState} we need to know if any other state
     * exists that has this exact set of ATN configurations. The
     * {@link //stateNumber} is irrelevant.</p>
     */

  }, {
    key: "equals",
    value: function equals(other) {
      // compare set of ATN configurations in this set with other
      return this === other || other instanceof DFAState && this.configs.equals(other.configs);
    }
  }, {
    key: "toString",
    value: function toString() {
      var s = "" + this.stateNumber + ":" + this.configs;

      if (this.isAcceptState) {
        s = s + "=>";
        if (this.predicates !== null) s = s + this.predicates;else s = s + this.prediction;
      }

      return s;
    }
  }, {
    key: "hashCode",
    value: function hashCode() {
      var hash = new _HashCode.default();
      hash.update(this.configs);
      return hash.finish();
    }
  }]);

  return DFAState;
}();

exports.default = DFAState;
},{"../atn/ATNConfigSet.js":"gGEg","../misc/HashCode.js":"JXAn","../misc/HashSet.js":"hSGu"}],"cOEd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _DFAState = _interopRequireDefault(require("../dfa/DFAState.js"));

var _ATNConfigSet = _interopRequireDefault(require("./ATNConfigSet.js"));

var _PredictionContextUtils = require("../context/PredictionContextUtils.js");

var _HashMap = _interopRequireDefault(require("../misc/HashMap.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var ATNSimulator = /*#__PURE__*/function () {
  function ATNSimulator(atn, sharedContextCache) {
    _classCallCheck(this, ATNSimulator);

    /**
     * The context cache maps all PredictionContext objects that are ==
     * to a single cached copy. This cache is shared across all contexts
     * in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet
     * to use only cached nodes/graphs in addDFAState(). We don't want to
     * fill this during closure() since there are lots of contexts that
     * pop up but are not used ever again. It also greatly slows down closure().
     *
     * <p>This cache makes a huge difference in memory and a little bit in speed.
     * For the Java grammar on java.*, it dropped the memory requirements
     * at the end from 25M to 16M. We don't store any of the full context
     * graphs in the DFA because they are limited to local context only,
     * but apparently there's a lot of repetition there as well. We optimize
     * the config contexts before storing the config set in the DFA states
     * by literally rebuilding them with cached subgraphs only.</p>
     *
     * <p>I tried a cache for use during closure operations, that was
     * whacked after each adaptivePredict(). It cost a little bit
     * more time I think and doesn't save on the overall footprint
     * so it's not worth the complexity.</p>
     */
    this.atn = atn;
    this.sharedContextCache = sharedContextCache;
    return this;
  }

  _createClass(ATNSimulator, [{
    key: "getCachedContext",
    value: function getCachedContext(context) {
      if (this.sharedContextCache === null) {
        return context;
      }

      var visited = new _HashMap.default();
      return (0, _PredictionContextUtils.getCachedPredictionContext)(context, this.sharedContextCache, visited);
    }
  }]);

  return ATNSimulator;
}(); // Must distinguish between missing edge and edge we know leads nowhere///


exports.default = ATNSimulator;
ATNSimulator.ERROR = new _DFAState.default(0x7FFFFFFF, new _ATNConfigSet.default());
},{"../dfa/DFAState.js":"PVAv","./ATNConfigSet.js":"gGEg","../context/PredictionContextUtils.js":"D05O","../misc/HashMap.js":"TPpe"}],"oQ1X":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ATNConfigSet2 = _interopRequireDefault(require("./ATNConfigSet.js"));

var _HashSet = _interopRequireDefault(require("../misc/HashSet.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var OrderedATNConfigSet = /*#__PURE__*/function (_ATNConfigSet) {
  _inherits(OrderedATNConfigSet, _ATNConfigSet);

  var _super = _createSuper(OrderedATNConfigSet);

  function OrderedATNConfigSet() {
    var _this;

    _classCallCheck(this, OrderedATNConfigSet);

    _this = _super.call(this);
    _this.configLookup = new _HashSet.default();
    return _this;
  }

  return _createClass(OrderedATNConfigSet);
}(_ATNConfigSet2.default);

exports.default = OrderedATNConfigSet;
},{"./ATNConfigSet.js":"gGEg","../misc/HashSet.js":"hSGu"}],"M2xx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _DecisionState = _interopRequireDefault(require("../state/DecisionState.js"));

var _ATNConfig2 = _interopRequireDefault(require("./ATNConfig.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var LexerATNConfig = /*#__PURE__*/function (_ATNConfig) {
  _inherits(LexerATNConfig, _ATNConfig);

  var _super = _createSuper(LexerATNConfig);

  function LexerATNConfig(params, config) {
    var _this;

    _classCallCheck(this, LexerATNConfig);

    _this = _super.call(this, params, config); // This is the backing field for {@link //getLexerActionExecutor}.

    var lexerActionExecutor = params.lexerActionExecutor || null;
    _this.lexerActionExecutor = lexerActionExecutor || (config !== null ? config.lexerActionExecutor : null);
    _this.passedThroughNonGreedyDecision = config !== null ? _this.checkNonGreedyDecision(config, _this.state) : false;
    _this.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;
    _this.equalsForConfigSet = LexerATNConfig.prototype.equals;
    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
  }

  _createClass(LexerATNConfig, [{
    key: "updateHashCode",
    value: function updateHashCode(hash) {
      hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);
    }
  }, {
    key: "equals",
    value: function equals(other) {
      return this === other || other instanceof LexerATNConfig && this.passedThroughNonGreedyDecision === other.passedThroughNonGreedyDecision && (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) && _get(_getPrototypeOf(LexerATNConfig.prototype), "equals", this).call(this, other);
    }
  }, {
    key: "checkNonGreedyDecision",
    value: function checkNonGreedyDecision(source, target) {
      return source.passedThroughNonGreedyDecision || target instanceof _DecisionState.default && target.nonGreedy;
    }
  }]);

  return LexerATNConfig;
}(_ATNConfig2.default);

exports.default = LexerATNConfig;
},{"../state/DecisionState.js":"tj9k","./ATNConfig.js":"vzuf"}],"EIJY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _LexerAction2 = _interopRequireDefault(require("./LexerAction.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var LexerIndexedCustomAction = /*#__PURE__*/function (_LexerAction) {
  _inherits(LexerIndexedCustomAction, _LexerAction);

  var _super = _createSuper(LexerIndexedCustomAction);

  function LexerIndexedCustomAction(offset, action) {
    var _this;

    _classCallCheck(this, LexerIndexedCustomAction);

    _this = _super.call(this, action.actionType);
    _this.offset = offset;
    _this.action = action;
    _this.isPositionDependent = true;
    return _this;
  }
  /**
   * <p>This method calls {@link //execute} on the result of {@link //getAction}
   * using the provided {@code lexer}.</p>
   */


  _createClass(LexerIndexedCustomAction, [{
    key: "execute",
    value: function execute(lexer) {
      // assume the input stream position was properly set by the calling code
      this.action.execute(lexer);
    }
  }, {
    key: "updateHashCode",
    value: function updateHashCode(hash) {
      hash.update(this.actionType, this.offset, this.action);
    }
  }, {
    key: "equals",
    value: function equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof LexerIndexedCustomAction)) {
        return false;
      } else {
        return this.offset === other.offset && this.action === other.action;
      }
    }
  }]);

  return LexerIndexedCustomAction;
}(_LexerAction2.default);

exports.default = LexerIndexedCustomAction;
},{"./LexerAction.js":"BfcY"}],"zTXY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _LexerIndexedCustomAction = _interopRequireDefault(require("../action/LexerIndexedCustomAction.js"));

var _HashCode = _interopRequireDefault(require("../misc/HashCode.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var LexerActionExecutor = /*#__PURE__*/function () {
  /**
   * Represents an executor for a sequence of lexer actions which traversed during
   * the matching operation of a lexer rule (token).
   *
   * <p>The executor tracks position information for position-dependent lexer actions
   * efficiently, ensuring that actions appearing only at the end of the rule do
   * not cause bloating of the {@link DFA} created for the lexer.</p>
   */
  function LexerActionExecutor(lexerActions) {
    _classCallCheck(this, LexerActionExecutor);

    this.lexerActions = lexerActions === null ? [] : lexerActions;
    /**
     * Caches the result of {@link //hashCode} since the hash code is an element
     * of the performance-critical {@link LexerATNConfig//hashCode} operation
     */

    this.cachedHashCode = _HashCode.default.hashStuff(lexerActions); // "".join([str(la) for la in
    // lexerActions]))

    return this;
  }
  /**
   * Creates a {@link LexerActionExecutor} which encodes the current offset
   * for position-dependent lexer actions.
   *
   * <p>Normally, when the executor encounters lexer actions where
   * {@link LexerAction//isPositionDependent} returns {@code true}, it calls
   * {@link IntStream//seek} on the input {@link CharStream} to set the input
   * position to the <em>end</em> of the current token. This behavior provides
   * for efficient DFA representation of lexer actions which appear at the end
   * of a lexer rule, even when the lexer rule matches a variable number of
   * characters.</p>
   *
   * <p>Prior to traversing a match transition in the ATN, the current offset
   * from the token start index is assigned to all position-dependent lexer
   * actions which have not already been assigned a fixed offset. By storing
   * the offsets relative to the token start index, the DFA representation of
   * lexer actions which appear in the middle of tokens remains efficient due
   * to sharing among tokens of the same length, regardless of their absolute
   * position in the input stream.</p>
   *
   * <p>If the current executor already has offsets assigned to all
   * position-dependent lexer actions, the method returns {@code this}.</p>
   *
   * @param offset The current offset to assign to all position-dependent
   * lexer actions which do not already have offsets assigned.
   *
   * @return {LexerActionExecutor} A {@link LexerActionExecutor} which stores input stream offsets
   * for all position-dependent lexer actions.
   */


  _createClass(LexerActionExecutor, [{
    key: "fixOffsetBeforeMatch",
    value: function fixOffsetBeforeMatch(offset) {
      var updatedLexerActions = null;

      for (var i = 0; i < this.lexerActions.length; i++) {
        if (this.lexerActions[i].isPositionDependent && !(this.lexerActions[i] instanceof _LexerIndexedCustomAction.default)) {
          if (updatedLexerActions === null) {
            updatedLexerActions = this.lexerActions.concat([]);
          }

          updatedLexerActions[i] = new _LexerIndexedCustomAction.default(offset, this.lexerActions[i]);
        }
      }

      if (updatedLexerActions === null) {
        return this;
      } else {
        return new LexerActionExecutor(updatedLexerActions);
      }
    }
    /**
     * Execute the actions encapsulated by this executor within the context of a
     * particular {@link Lexer}.
     *
     * <p>This method calls {@link IntStream//seek} to set the position of the
     * {@code input} {@link CharStream} prior to calling
     * {@link LexerAction//execute} on a position-dependent action. Before the
     * method returns, the input position will be restored to the same position
     * it was in when the method was invoked.</p>
     *
     * @param lexer The lexer instance.
     * @param input The input stream which is the source for the current token.
     * When this method is called, the current {@link IntStream//index} for
     * {@code input} should be the start of the following token, i.e. 1
     * character past the end of the current token.
     * @param startIndex The token start index. This value may be passed to
     * {@link IntStream//seek} to set the {@code input} position to the beginning
     * of the token.
     */

  }, {
    key: "execute",
    value: function execute(lexer, input, startIndex) {
      var requiresSeek = false;
      var stopIndex = input.index;

      try {
        for (var i = 0; i < this.lexerActions.length; i++) {
          var lexerAction = this.lexerActions[i];

          if (lexerAction instanceof _LexerIndexedCustomAction.default) {
            var offset = lexerAction.offset;
            input.seek(startIndex + offset);
            lexerAction = lexerAction.action;
            requiresSeek = startIndex + offset !== stopIndex;
          } else if (lexerAction.isPositionDependent) {
            input.seek(stopIndex);
            requiresSeek = false;
          }

          lexerAction.execute(lexer);
        }
      } finally {
        if (requiresSeek) {
          input.seek(stopIndex);
        }
      }
    }
  }, {
    key: "hashCode",
    value: function hashCode() {
      return this.cachedHashCode;
    }
  }, {
    key: "updateHashCode",
    value: function updateHashCode(hash) {
      hash.update(this.cachedHashCode);
    }
  }, {
    key: "equals",
    value: function equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof LexerActionExecutor)) {
        return false;
      } else if (this.cachedHashCode != other.cachedHashCode) {
        return false;
      } else if (this.lexerActions.length != other.lexerActions.length) {
        return false;
      } else {
        var numActions = this.lexerActions.length;

        for (var idx = 0; idx < numActions; ++idx) {
          if (!this.lexerActions[idx].equals(other.lexerActions[idx])) {
            return false;
          }
        }

        return true;
      }
    }
    /**
     * Creates a {@link LexerActionExecutor} which executes the actions for
     * the input {@code lexerActionExecutor} followed by a specified
     * {@code lexerAction}.
     *
     * @param lexerActionExecutor The executor for actions already traversed by
     * the lexer while matching a token within a particular
     * {@link LexerATNConfig}. If this is {@code null}, the method behaves as
     * though it were an empty executor.
     * @param lexerAction The lexer action to execute after the actions
     * specified in {@code lexerActionExecutor}.
     *
     * @return {LexerActionExecutor} A {@link LexerActionExecutor} for executing the combine actions
     * of {@code lexerActionExecutor} and {@code lexerAction}.
     */

  }], [{
    key: "append",
    value: function append(lexerActionExecutor, lexerAction) {
      if (lexerActionExecutor === null) {
        return new LexerActionExecutor([lexerAction]);
      }

      var lexerActions = lexerActionExecutor.lexerActions.concat([lexerAction]);
      return new LexerActionExecutor(lexerActions);
    }
  }]);

  return LexerActionExecutor;
}();

exports.default = LexerActionExecutor;
},{"../action/LexerIndexedCustomAction.js":"EIJY","../misc/HashCode.js":"JXAn"}],"iM8L":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Token = _interopRequireDefault(require("../Token.js"));

var _Lexer = _interopRequireDefault(require("./../Lexer.js"));

var _ATN = _interopRequireDefault(require("./ATN.js"));

var _ATNSimulator2 = _interopRequireDefault(require("./ATNSimulator.js"));

var _DFAState = _interopRequireDefault(require("../dfa/DFAState.js"));

var _OrderedATNConfigSet = _interopRequireDefault(require("./OrderedATNConfigSet.js"));

var _PredictionContext = _interopRequireDefault(require("../context/PredictionContext.js"));

var _SingletonPredictionContext = _interopRequireDefault(require("../context/SingletonPredictionContext.js"));

var _RuleStopState = _interopRequireDefault(require("../state/RuleStopState.js"));

var _LexerATNConfig = _interopRequireDefault(require("./LexerATNConfig.js"));

var _Transition = _interopRequireDefault(require("../transition/Transition.js"));

var _LexerActionExecutor = _interopRequireDefault(require("./LexerActionExecutor.js"));

var _LexerNoViableAltException = _interopRequireDefault(require("../error/LexerNoViableAltException.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function resetSimState(sim) {
  sim.index = -1;
  sim.line = 0;
  sim.column = -1;
  sim.dfaState = null;
}

var SimState = /*#__PURE__*/function () {
  function SimState() {
    _classCallCheck(this, SimState);

    resetSimState(this);
  }

  _createClass(SimState, [{
    key: "reset",
    value: function reset() {
      resetSimState(this);
    }
  }]);

  return SimState;
}();

var LexerATNSimulator = /*#__PURE__*/function (_ATNSimulator) {
  _inherits(LexerATNSimulator, _ATNSimulator);

  var _super = _createSuper(LexerATNSimulator);

  /**
   * When we hit an accept state in either the DFA or the ATN, we
   * have to notify the character stream to start buffering characters
   * via {@link IntStream//mark} and record the current state. The current sim state
   * includes the current index into the input, the current line,
   * and current character position in that line. Note that the Lexer is
   * tracking the starting line and characterization of the token. These
   * variables track the "state" of the simulator when it hits an accept state.
   *
   * <p>We track these variables separately for the DFA and ATN simulation
   * because the DFA simulation often has to fail over to the ATN
   * simulation. If the ATN simulation fails, we need the DFA to fall
   * back to its previously accepted state, if any. If the ATN succeeds,
   * then the ATN does the accept and the DFA simulator that invoked it
   * can simply return the predicted token type.</p>
   */
  function LexerATNSimulator(recog, atn, decisionToDFA, sharedContextCache) {
    var _this;

    _classCallCheck(this, LexerATNSimulator);

    _this = _super.call(this, atn, sharedContextCache);
    _this.decisionToDFA = decisionToDFA;
    _this.recog = recog;
    /**
     * The current token's starting index into the character stream.
     * Shared across DFA to ATN simulation in case the ATN fails and the
     * DFA did not have a previous accept state. In this case, we use the
     * ATN-generated exception object
     */

    _this.startIndex = -1; // line number 1..n within the input///

    _this.line = 1;
    /**
     * The index of the character relative to the beginning of the line
     * 0..n-1
     */

    _this.column = 0;
    _this.mode = _Lexer.default.DEFAULT_MODE;
    /**
     * Used during DFA/ATN exec to record the most recent accept configuration
     * info
     */

    _this.prevAccept = new SimState();
    return _this;
  }

  _createClass(LexerATNSimulator, [{
    key: "copyState",
    value: function copyState(simulator) {
      this.column = simulator.column;
      this.line = simulator.line;
      this.mode = simulator.mode;
      this.startIndex = simulator.startIndex;
    }
  }, {
    key: "match",
    value: function match(input, mode) {
      this.mode = mode;
      var mark = input.mark();

      try {
        this.startIndex = input.index;
        this.prevAccept.reset();
        var dfa = this.decisionToDFA[mode];

        if (dfa.s0 === null) {
          return this.matchATN(input);
        } else {
          return this.execATN(input, dfa.s0);
        }
      } finally {
        input.release(mark);
      }
    }
  }, {
    key: "reset",
    value: function reset() {
      this.prevAccept.reset();
      this.startIndex = -1;
      this.line = 1;
      this.column = 0;
      this.mode = _Lexer.default.DEFAULT_MODE;
    }
  }, {
    key: "matchATN",
    value: function matchATN(input) {
      var startState = this.atn.modeToStartState[this.mode];

      if (LexerATNSimulator.debug) {
        console.log("matchATN mode " + this.mode + " start: " + startState);
      }

      var old_mode = this.mode;
      var s0_closure = this.computeStartState(input, startState);
      var suppressEdge = s0_closure.hasSemanticContext;
      s0_closure.hasSemanticContext = false;
      var next = this.addDFAState(s0_closure);

      if (!suppressEdge) {
        this.decisionToDFA[this.mode].s0 = next;
      }

      var predict = this.execATN(input, next);

      if (LexerATNSimulator.debug) {
        console.log("DFA after matchATN: " + this.decisionToDFA[old_mode].toLexerString());
      }

      return predict;
    }
  }, {
    key: "execATN",
    value: function execATN(input, ds0) {
      if (LexerATNSimulator.debug) {
        console.log("start state closure=" + ds0.configs);
      }

      if (ds0.isAcceptState) {
        // allow zero-length tokens
        this.captureSimState(this.prevAccept, input, ds0);
      }

      var t = input.LA(1);
      var s = ds0; // s is current/from DFA state

      for (;;) {
        // while more work
        if (LexerATNSimulator.debug) {
          console.log("execATN loop starting closure: " + s.configs);
        }
        /**
         * As we move src->trg, src->trg, we keep track of the previous trg to
         * avoid looking up the DFA state again, which is expensive.
         * If the previous target was already part of the DFA, we might
         * be able to avoid doing a reach operation upon t. If s!=null,
         * it means that semantic predicates didn't prevent us from
         * creating a DFA state. Once we know s!=null, we check to see if
         * the DFA state has an edge already for t. If so, we can just reuse
         * it's configuration set; there's no point in re-computing it.
         * This is kind of like doing DFA simulation within the ATN
         * simulation because DFA simulation is really just a way to avoid
         * computing reach/closure sets. Technically, once we know that
         * we have a previously added DFA state, we could jump over to
         * the DFA simulator. But, that would mean popping back and forth
         * a lot and making things more complicated algorithmically.
         * This optimization makes a lot of sense for loops within DFA.
         * A character will take us back to an existing DFA state
         * that already has lots of edges out of it. e.g., .* in comments.
         * print("Target for:" + str(s) + " and:" + str(t))
         */


        var target = this.getExistingTargetState(s, t); // print("Existing:" + str(target))

        if (target === null) {
          target = this.computeTargetState(input, s, t); // print("Computed:" + str(target))
        }

        if (target === _ATNSimulator2.default.ERROR) {
          break;
        } // If this is a consumable input element, make sure to consume before
        // capturing the accept state so the input index, line, and char
        // position accurately reflect the state of the interpreter at the
        // end of the token.


        if (t !== _Token.default.EOF) {
          this.consume(input);
        }

        if (target.isAcceptState) {
          this.captureSimState(this.prevAccept, input, target);

          if (t === _Token.default.EOF) {
            break;
          }
        }

        t = input.LA(1);
        s = target; // flip; current DFA target becomes new src/from state
      }

      return this.failOrAccept(this.prevAccept, input, s.configs, t);
    }
    /**
     * Get an existing target state for an edge in the DFA. If the target state
     * for the edge has not yet been computed or is otherwise not available,
     * this method returns {@code null}.
     *
     * @param s The current DFA state
     * @param t The next input symbol
     * @return The existing target DFA state for the given input symbol
     * {@code t}, or {@code null} if the target state for this edge is not
     * already cached
     */

  }, {
    key: "getExistingTargetState",
    value: function getExistingTargetState(s, t) {
      if (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {
        return null;
      }

      var target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];

      if (target === undefined) {
        target = null;
      }

      if (LexerATNSimulator.debug && target !== null) {
        console.log("reuse state " + s.stateNumber + " edge to " + target.stateNumber);
      }

      return target;
    }
    /**
     * Compute a target state for an edge in the DFA, and attempt to add the
     * computed state and corresponding edge to the DFA.
     *
     * @param input The input stream
     * @param s The current DFA state
     * @param t The next input symbol
     *
     * @return The computed target DFA state for the given input symbol
     * {@code t}. If {@code t} does not lead to a valid DFA state, this method
     * returns {@link //ERROR}.
     */

  }, {
    key: "computeTargetState",
    value: function computeTargetState(input, s, t) {
      var reach = new _OrderedATNConfigSet.default(); // if we don't find an existing DFA state
      // Fill reach starting from closure, following t transitions

      this.getReachableConfigSet(input, s.configs, reach, t);

      if (reach.items.length === 0) {
        // we got nowhere on t from s
        if (!reach.hasSemanticContext) {
          // we got nowhere on t, don't throw out this knowledge; it'd
          // cause a failover from DFA later.
          this.addDFAEdge(s, t, _ATNSimulator2.default.ERROR);
        } // stop when we can't match any more char


        return _ATNSimulator2.default.ERROR;
      } // Add an edge from s to target DFA found/created for reach


      return this.addDFAEdge(s, t, null, reach);
    }
  }, {
    key: "failOrAccept",
    value: function failOrAccept(prevAccept, input, reach, t) {
      if (this.prevAccept.dfaState !== null) {
        var lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;
        this.accept(input, lexerActionExecutor, this.startIndex, prevAccept.index, prevAccept.line, prevAccept.column);
        return prevAccept.dfaState.prediction;
      } else {
        // if no accept and EOF is first char, return EOF
        if (t === _Token.default.EOF && input.index === this.startIndex) {
          return _Token.default.EOF;
        }

        throw new _LexerNoViableAltException.default(this.recog, input, this.startIndex, reach);
      }
    }
    /**
     * Given a starting configuration set, figure out all ATN configurations
     * we can reach upon input {@code t}. Parameter {@code reach} is a return
     * parameter.
     */

  }, {
    key: "getReachableConfigSet",
    value: function getReachableConfigSet(input, closure, reach, t) {
      // this is used to skip processing for configs which have a lower priority
      // than a config that already reached an accept state for the same rule
      var skipAlt = _ATN.default.INVALID_ALT_NUMBER;

      for (var i = 0; i < closure.items.length; i++) {
        var cfg = closure.items[i];
        var currentAltReachedAcceptState = cfg.alt === skipAlt;

        if (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {
          continue;
        }

        if (LexerATNSimulator.debug) {
          console.log("testing %s at %s\n", this.getTokenName(t), cfg.toString(this.recog, true));
        }

        for (var j = 0; j < cfg.state.transitions.length; j++) {
          var trans = cfg.state.transitions[j]; // for each transition

          var target = this.getReachableTarget(trans, t);

          if (target !== null) {
            var lexerActionExecutor = cfg.lexerActionExecutor;

            if (lexerActionExecutor !== null) {
              lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);
            }

            var treatEofAsEpsilon = t === _Token.default.EOF;
            var config = new _LexerATNConfig.default({
              state: target,
              lexerActionExecutor: lexerActionExecutor
            }, cfg);

            if (this.closure(input, config, reach, currentAltReachedAcceptState, true, treatEofAsEpsilon)) {
              // any remaining configs for this alt have a lower priority
              // than the one that just reached an accept state.
              skipAlt = cfg.alt;
            }
          }
        }
      }
    }
  }, {
    key: "accept",
    value: function accept(input, lexerActionExecutor, startIndex, index, line, charPos) {
      if (LexerATNSimulator.debug) {
        console.log("ACTION %s\n", lexerActionExecutor);
      } // seek to after last char in token


      input.seek(index);
      this.line = line;
      this.column = charPos;

      if (lexerActionExecutor !== null && this.recog !== null) {
        lexerActionExecutor.execute(this.recog, input, startIndex);
      }
    }
  }, {
    key: "getReachableTarget",
    value: function getReachableTarget(trans, t) {
      if (trans.matches(t, 0, _Lexer.default.MAX_CHAR_VALUE)) {
        return trans.target;
      } else {
        return null;
      }
    }
  }, {
    key: "computeStartState",
    value: function computeStartState(input, p) {
      var initialContext = _PredictionContext.default.EMPTY;
      var configs = new _OrderedATNConfigSet.default();

      for (var i = 0; i < p.transitions.length; i++) {
        var target = p.transitions[i].target;
        var cfg = new _LexerATNConfig.default({
          state: target,
          alt: i + 1,
          context: initialContext
        }, null);
        this.closure(input, cfg, configs, false, false, false);
      }

      return configs;
    }
    /**
     * Since the alternatives within any lexer decision are ordered by
     * preference, this method stops pursuing the closure as soon as an accept
     * state is reached. After the first accept state is reached by depth-first
     * search from {@code config}, all other (potentially reachable) states for
     * this rule would have a lower priority.
     *
     * @return {Boolean} {@code true} if an accept state is reached, otherwise
     * {@code false}.
     */

  }, {
    key: "closure",
    value: function closure(input, config, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {
      var cfg = null;

      if (LexerATNSimulator.debug) {
        console.log("closure(" + config.toString(this.recog, true) + ")");
      }

      if (config.state instanceof _RuleStopState.default) {
        if (LexerATNSimulator.debug) {
          if (this.recog !== null) {
            console.log("closure at %s rule stop %s\n", this.recog.ruleNames[config.state.ruleIndex], config);
          } else {
            console.log("closure at rule stop %s\n", config);
          }
        }

        if (config.context === null || config.context.hasEmptyPath()) {
          if (config.context === null || config.context.isEmpty()) {
            configs.add(config);
            return true;
          } else {
            configs.add(new _LexerATNConfig.default({
              state: config.state,
              context: _PredictionContext.default.EMPTY
            }, config));
            currentAltReachedAcceptState = true;
          }
        }

        if (config.context !== null && !config.context.isEmpty()) {
          for (var i = 0; i < config.context.length; i++) {
            if (config.context.getReturnState(i) !== _PredictionContext.default.EMPTY_RETURN_STATE) {
              var newContext = config.context.getParent(i); // "pop" return state

              var returnState = this.atn.states[config.context.getReturnState(i)];
              cfg = new _LexerATNConfig.default({
                state: returnState,
                context: newContext
              }, config);
              currentAltReachedAcceptState = this.closure(input, cfg, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
            }
          }
        }

        return currentAltReachedAcceptState;
      } // optimization


      if (!config.state.epsilonOnlyTransitions) {
        if (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {
          configs.add(config);
        }
      }

      for (var j = 0; j < config.state.transitions.length; j++) {
        var trans = config.state.transitions[j];
        cfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);

        if (cfg !== null) {
          currentAltReachedAcceptState = this.closure(input, cfg, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
        }
      }

      return currentAltReachedAcceptState;
    } // side-effect: can alter configs.hasSemanticContext

  }, {
    key: "getEpsilonTarget",
    value: function getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon) {
      var cfg = null;

      if (trans.serializationType === _Transition.default.RULE) {
        var newContext = _SingletonPredictionContext.default.create(config.context, trans.followState.stateNumber);

        cfg = new _LexerATNConfig.default({
          state: trans.target,
          context: newContext
        }, config);
      } else if (trans.serializationType === _Transition.default.PRECEDENCE) {
        throw "Precedence predicates are not supported in lexers.";
      } else if (trans.serializationType === _Transition.default.PREDICATE) {
        // Track traversing semantic predicates. If we traverse,
        // we cannot add a DFA state for this "reach" computation
        // because the DFA would not test the predicate again in the
        // future. Rather than creating collections of semantic predicates
        // like v3 and testing them on prediction, v4 will test them on the
        // fly all the time using the ATN not the DFA. This is slower but
        // semantically it's not used that often. One of the key elements to
        // this predicate mechanism is not adding DFA states that see
        // predicates immediately afterwards in the ATN. For example,
        // a : ID {p1}? | ID {p2}? ;
        // should create the start state for rule 'a' (to save start state
        // competition), but should not create target of ID state. The
        // collection of ATN states the following ID references includes
        // states reached by traversing predicates. Since this is when we
        // test them, we cannot cash the DFA state target of ID.
        if (LexerATNSimulator.debug) {
          console.log("EVAL rule " + trans.ruleIndex + ":" + trans.predIndex);
        }

        configs.hasSemanticContext = true;

        if (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {
          cfg = new _LexerATNConfig.default({
            state: trans.target
          }, config);
        }
      } else if (trans.serializationType === _Transition.default.ACTION) {
        if (config.context === null || config.context.hasEmptyPath()) {
          // execute actions anywhere in the start rule for a token.
          //
          // TODO: if the entry rule is invoked recursively, some
          // actions may be executed during the recursive call. The
          // problem can appear when hasEmptyPath() is true but
          // isEmpty() is false. In this case, the config needs to be
          // split into two contexts - one with just the empty path
          // and another with everything but the empty path.
          // Unfortunately, the current algorithm does not allow
          // getEpsilonTarget to return two configurations, so
          // additional modifications are needed before we can support
          // the split operation.
          var lexerActionExecutor = _LexerActionExecutor.default.append(config.lexerActionExecutor, this.atn.lexerActions[trans.actionIndex]);

          cfg = new _LexerATNConfig.default({
            state: trans.target,
            lexerActionExecutor: lexerActionExecutor
          }, config);
        } else {
          // ignore actions in referenced rules
          cfg = new _LexerATNConfig.default({
            state: trans.target
          }, config);
        }
      } else if (trans.serializationType === _Transition.default.EPSILON) {
        cfg = new _LexerATNConfig.default({
          state: trans.target
        }, config);
      } else if (trans.serializationType === _Transition.default.ATOM || trans.serializationType === _Transition.default.RANGE || trans.serializationType === _Transition.default.SET) {
        if (treatEofAsEpsilon) {
          if (trans.matches(_Token.default.EOF, 0, _Lexer.default.MAX_CHAR_VALUE)) {
            cfg = new _LexerATNConfig.default({
              state: trans.target
            }, config);
          }
        }
      }

      return cfg;
    }
    /**
     * Evaluate a predicate specified in the lexer.
     *
     * <p>If {@code speculative} is {@code true}, this method was called before
     * {@link //consume} for the matched character. This method should call
     * {@link //consume} before evaluating the predicate to ensure position
     * sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},
     * and {@link Lexer//getcolumn}, properly reflect the current
     * lexer state. This method should restore {@code input} and the simulator
     * to the original state before returning (i.e. undo the actions made by the
     * call to {@link //consume}.</p>
     *
     * @param input The input stream.
     * @param ruleIndex The rule containing the predicate.
     * @param predIndex The index of the predicate within the rule.
     * @param speculative {@code true} if the current index in {@code input} is
     * one character before the predicate's location.
     *
     * @return {@code true} if the specified predicate evaluates to
     * {@code true}.
     */

  }, {
    key: "evaluatePredicate",
    value: function evaluatePredicate(input, ruleIndex, predIndex, speculative) {
      // assume true if no recognizer was provided
      if (this.recog === null) {
        return true;
      }

      if (!speculative) {
        return this.recog.sempred(null, ruleIndex, predIndex);
      }

      var savedcolumn = this.column;
      var savedLine = this.line;
      var index = input.index;
      var marker = input.mark();

      try {
        this.consume(input);
        return this.recog.sempred(null, ruleIndex, predIndex);
      } finally {
        this.column = savedcolumn;
        this.line = savedLine;
        input.seek(index);
        input.release(marker);
      }
    }
  }, {
    key: "captureSimState",
    value: function captureSimState(settings, input, dfaState) {
      settings.index = input.index;
      settings.line = this.line;
      settings.column = this.column;
      settings.dfaState = dfaState;
    }
  }, {
    key: "addDFAEdge",
    value: function addDFAEdge(from_, tk, to, cfgs) {
      if (to === undefined) {
        to = null;
      }

      if (cfgs === undefined) {
        cfgs = null;
      }

      if (to === null && cfgs !== null) {
        // leading to this call, ATNConfigSet.hasSemanticContext is used as a
        // marker indicating dynamic predicate evaluation makes this edge
        // dependent on the specific input sequence, so the static edge in the
        // DFA should be omitted. The target DFAState is still created since
        // execATN has the ability to resynchronize with the DFA state cache
        // following the predicate evaluation step.
        //
        // TJP notes: next time through the DFA, we see a pred again and eval.
        // If that gets us to a previously created (but dangling) DFA
        // state, we can continue in pure DFA mode from there.
        // /
        var suppressEdge = cfgs.hasSemanticContext;
        cfgs.hasSemanticContext = false;
        to = this.addDFAState(cfgs);

        if (suppressEdge) {
          return to;
        }
      } // add the edge


      if (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {
        // Only track edges within the DFA bounds
        return to;
      }

      if (LexerATNSimulator.debug) {
        console.log("EDGE " + from_ + " -> " + to + " upon " + tk);
      }

      if (from_.edges === null) {
        // make room for tokens 1..n and -1 masquerading as index 0
        from_.edges = [];
      }

      from_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect

      return to;
    }
    /**
     * Add a new DFA state if there isn't one with this set of
     * configurations already. This method also detects the first
     * configuration containing an ATN rule stop state. Later, when
     * traversing the DFA, we will know which rule to accept.
     */

  }, {
    key: "addDFAState",
    value: function addDFAState(configs) {
      var proposed = new _DFAState.default(null, configs);
      var firstConfigWithRuleStopState = null;

      for (var i = 0; i < configs.items.length; i++) {
        var cfg = configs.items[i];

        if (cfg.state instanceof _RuleStopState.default) {
          firstConfigWithRuleStopState = cfg;
          break;
        }
      }

      if (firstConfigWithRuleStopState !== null) {
        proposed.isAcceptState = true;
        proposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;
        proposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];
      }

      var dfa = this.decisionToDFA[this.mode];
      var existing = dfa.states.get(proposed);

      if (existing !== null) {
        return existing;
      }

      var newState = proposed;
      newState.stateNumber = dfa.states.length;
      configs.setReadonly(true);
      newState.configs = configs;
      dfa.states.add(newState);
      return newState;
    }
  }, {
    key: "getDFA",
    value: function getDFA(mode) {
      return this.decisionToDFA[mode];
    } // Get the text matched so far for the current token.

  }, {
    key: "getText",
    value: function getText(input) {
      // index is first lookahead char, don't include.
      return input.getText(this.startIndex, input.index - 1);
    }
  }, {
    key: "consume",
    value: function consume(input) {
      var curChar = input.LA(1);

      if (curChar === "\n".charCodeAt(0)) {
        this.line += 1;
        this.column = 0;
      } else {
        this.column += 1;
      }

      input.consume();
    }
  }, {
    key: "getTokenName",
    value: function getTokenName(tt) {
      if (tt === -1) {
        return "EOF";
      } else {
        return "'" + String.fromCharCode(tt) + "'";
      }
    }
  }]);

  return LexerATNSimulator;
}(_ATNSimulator2.default);

exports.default = LexerATNSimulator;
LexerATNSimulator.debug = false;
LexerATNSimulator.dfa_debug = false;
LexerATNSimulator.MIN_DFA_EDGE = 0;
LexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN
},{"../Token.js":"tczR","./../Lexer.js":"FKtu","./ATN.js":"VSBa","./ATNSimulator.js":"cOEd","../dfa/DFAState.js":"PVAv","./OrderedATNConfigSet.js":"oQ1X","../context/PredictionContext.js":"QQ7c","../context/SingletonPredictionContext.js":"rrYw","../state/RuleStopState.js":"WskT","./LexerATNConfig.js":"M2xx","../transition/Transition.js":"M4hi","./LexerActionExecutor.js":"zTXY","../error/LexerNoViableAltException.js":"oFa5"}],"cT9s":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.
 * Use is of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/**
 * Map a predicate to a predicted alternative.
 */
var PredPrediction = /*#__PURE__*/function () {
  function PredPrediction(pred, alt) {
    _classCallCheck(this, PredPrediction);

    this.alt = alt;
    this.pred = pred;
  }

  _createClass(PredPrediction, [{
    key: "toString",
    value: function toString() {
      return "(" + this.pred + ", " + this.alt + ")";
    }
  }]);

  return PredPrediction;
}();

exports.default = PredPrediction;
},{}],"hlJ3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.
 * Use is of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
var AltDict = /*#__PURE__*/function () {
  function AltDict() {
    _classCallCheck(this, AltDict);

    this.data = {};
  }

  _createClass(AltDict, [{
    key: "get",
    value: function get(key) {
      return this.data["k-" + key] || null;
    }
  }, {
    key: "set",
    value: function set(key, value) {
      this.data["k-" + key] = value;
    }
  }, {
    key: "values",
    value: function values() {
      var _this = this;

      return Object.keys(this.data).filter(function (key) {
        return key.startsWith("k-");
      }).map(function (key) {
        return _this.data[key];
      }, this);
    }
  }]);

  return AltDict;
}();

exports.default = AltDict;
},{}],"W7HO":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ATN = _interopRequireDefault(require("./ATN.js"));

var _RuleStopState = _interopRequireDefault(require("../state/RuleStopState.js"));

var _ATNConfigSet = _interopRequireDefault(require("./ATNConfigSet.js"));

var _ATNConfig = _interopRequireDefault(require("./ATNConfig.js"));

var _SemanticContext = _interopRequireDefault(require("./SemanticContext.js"));

var _BitSet = _interopRequireDefault(require("../misc/BitSet.js"));

var _AltDict = _interopRequireDefault(require("../misc/AltDict.js"));

var _HashCode = _interopRequireDefault(require("../misc/HashCode.js"));

var _HashMap = _interopRequireDefault(require("../misc/HashMap.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/**
 * This enumeration defines the prediction modes available in ANTLR 4 along with
 * utility methods for analyzing configuration sets for conflicts and/or
 * ambiguities.
 */
var PredictionMode = {
  /**
   * The SLL(*) prediction mode. This prediction mode ignores the current
   * parser context when making predictions. This is the fastest prediction
   * mode, and provides correct results for many grammars. This prediction
   * mode is more powerful than the prediction mode provided by ANTLR 3, but
   * may result in syntax errors for grammar and input combinations which are
   * not SLL.
   *
   * <p>
   * When using this prediction mode, the parser will either return a correct
   * parse tree (i.e. the same parse tree that would be returned with the
   * {@link //LL} prediction mode), or it will report a syntax error. If a
   * syntax error is encountered when using the {@link //SLL} prediction mode,
   * it may be due to either an actual syntax error in the input or indicate
   * that the particular combination of grammar and input requires the more
   * powerful {@link //LL} prediction abilities to complete successfully.</p>
   *
   * <p>
   * This prediction mode does not provide any guarantees for prediction
   * behavior for syntactically-incorrect inputs.</p>
   */
  SLL: 0,

  /**
   * The LL(*) prediction mode. This prediction mode allows the current parser
   * context to be used for resolving SLL conflicts that occur during
   * prediction. This is the fastest prediction mode that guarantees correct
   * parse results for all combinations of grammars with syntactically correct
   * inputs.
   *
   * <p>
   * When using this prediction mode, the parser will make correct decisions
   * for all syntactically-correct grammar and input combinations. However, in
   * cases where the grammar is truly ambiguous this prediction mode might not
   * report a precise answer for <em>exactly which</em> alternatives are
   * ambiguous.</p>
   *
   * <p>
   * This prediction mode does not provide any guarantees for prediction
   * behavior for syntactically-incorrect inputs.</p>
   */
  LL: 1,

  /**
   *
   * The LL(*) prediction mode with exact ambiguity detection. In addition to
   * the correctness guarantees provided by the {@link //LL} prediction mode,
   * this prediction mode instructs the prediction algorithm to determine the
   * complete and exact set of ambiguous alternatives for every ambiguous
   * decision encountered while parsing.
   *
   * <p>
   * This prediction mode may be used for diagnosing ambiguities during
   * grammar development. Due to the performance overhead of calculating sets
   * of ambiguous alternatives, this prediction mode should be avoided when
   * the exact results are not necessary.</p>
   *
   * <p>
   * This prediction mode does not provide any guarantees for prediction
   * behavior for syntactically-incorrect inputs.</p>
   */
  LL_EXACT_AMBIG_DETECTION: 2,

  /**
   *
   * Computes the SLL prediction termination condition.
   *
   * <p>
   * This method computes the SLL prediction termination condition for both of
   * the following cases.</p>
   *
   * <ul>
   * <li>The usual SLL+LL fallback upon SLL conflict</li>
   * <li>Pure SLL without LL fallback</li>
   * </ul>
   *
   * <p><strong>COMBINED SLL+LL PARSING</strong></p>
   *
   * <p>When LL-fallback is enabled upon SLL conflict, correct predictions are
   * ensured regardless of how the termination condition is computed by this
   * method. Due to the substantially higher cost of LL prediction, the
   * prediction should only fall back to LL when the additional lookahead
   * cannot lead to a unique SLL prediction.</p>
   *
   * <p>Assuming combined SLL+LL parsing, an SLL configuration set with only
   * conflicting subsets should fall back to full LL, even if the
   * configuration sets don't resolve to the same alternative (e.g.
   * {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting
   * configuration, SLL could continue with the hopes that more lookahead will
   * resolve via one of those non-conflicting configurations.</p>
   *
   * <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)
   * stops when it sees only conflicting configuration subsets. In contrast,
   * full LL keeps going when there is uncertainty.</p>
   *
   * <p><strong>HEURISTIC</strong></p>
   *
   * <p>As a heuristic, we stop prediction when we see any conflicting subset
   * unless we see a state that only has one alternative associated with it.
   * The single-alt-state thing lets prediction continue upon rules like
   * (otherwise, it would admit defeat too soon):</p>
   *
   * <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>
   *
   * <p>When the ATN simulation reaches the state before {@code ';'}, it has a
   * DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally
   * {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop
   * processing this node because alternative to has another way to continue,
   * via {@code [6|2|[]]}.</p>
   *
   * <p>It also let's us continue for this rule:</p>
   *
   * <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>
   *
   * <p>After matching input A, we reach the stop state for rule A, state 1.
   * State 8 is the state right before B. Clearly alternatives 1 and 2
   * conflict and no amount of further lookahead will separate the two.
   * However, alternative 3 will be able to continue and so we do not stop
   * working on this state. In the previous example, we're concerned with
   * states associated with the conflicting alternatives. Here alt 3 is not
   * associated with the conflicting configs, but since we can continue
   * looking for input reasonably, don't declare the state done.</p>
   *
   * <p><strong>PURE SLL PARSING</strong></p>
   *
   * <p>To handle pure SLL parsing, all we have to do is make sure that we
   * combine stack contexts for configurations that differ only by semantic
   * predicate. From there, we can do the usual SLL termination heuristic.</p>
   *
   * <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>
   *
   * <p>SLL decisions don't evaluate predicates until after they reach DFA stop
   * states because they need to create the DFA cache that works in all
   * semantic situations. In contrast, full LL evaluates predicates collected
   * during start state computation so it can ignore predicates thereafter.
   * This means that SLL termination detection can totally ignore semantic
   * predicates.</p>
   *
   * <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not
   * semantic predicate contexts so we might see two configurations like the
   * following.</p>
   *
   * <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>
   *
   * <p>Before testing these configurations against others, we have to merge
   * {@code x} and {@code x'} (without modifying the existing configurations).
   * For example, we test {@code (x+x')==x''} when looking for conflicts in
   * the following configurations.</p>
   *
   * <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>
   *
   * <p>If the configuration set has predicates (as indicated by
   * {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of
   * the configurations to strip out all of the predicates so that a standard
   * {@link ATNConfigSet} will merge everything ignoring predicates.</p>
   */
  hasSLLConflictTerminatingPrediction: function hasSLLConflictTerminatingPrediction(mode, configs) {
    // Configs in rule stop states indicate reaching the end of the decision
    // rule (local context) or end of start rule (full context). If all
    // configs meet this condition, then none of the configurations is able
    // to match additional input so we terminate prediction.
    //
    if (PredictionMode.allConfigsInRuleStopStates(configs)) {
      return true;
    } // pure SLL mode parsing


    if (mode === PredictionMode.SLL) {
      // Don't bother with combining configs from different semantic
      // contexts if we can fail over to full LL; costs more time
      // since we'll often fail over anyway.
      if (configs.hasSemanticContext) {
        // dup configs, tossing out semantic predicates
        var dup = new _ATNConfigSet.default();

        for (var i = 0; i < configs.items.length; i++) {
          var c = configs.items[i];
          c = new _ATNConfig.default({
            semanticContext: _SemanticContext.default.NONE
          }, c);
          dup.add(c);
        }

        configs = dup;
      } // now we have combined contexts for configs with dissimilar preds

    } // pure SLL or combined SLL+LL mode parsing


    var altsets = PredictionMode.getConflictingAltSubsets(configs);
    return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);
  },

  /**
   * Checks if any configuration in {@code configs} is in a
   * {@link RuleStopState}. Configurations meeting this condition have reached
   * the end of the decision rule (local context) or end of start rule (full
   * context).
   *
   * @param configs the configuration set to test
   * @return {@code true} if any configuration in {@code configs} is in a
   * {@link RuleStopState}, otherwise {@code false}
   */
  hasConfigInRuleStopState: function hasConfigInRuleStopState(configs) {
    for (var i = 0; i < configs.items.length; i++) {
      var c = configs.items[i];

      if (c.state instanceof _RuleStopState.default) {
        return true;
      }
    }

    return false;
  },

  /**
   * Checks if all configurations in {@code configs} are in a
   * {@link RuleStopState}. Configurations meeting this condition have reached
   * the end of the decision rule (local context) or end of start rule (full
   * context).
   *
   * @param configs the configuration set to test
   * @return {@code true} if all configurations in {@code configs} are in a
   * {@link RuleStopState}, otherwise {@code false}
   */
  allConfigsInRuleStopStates: function allConfigsInRuleStopStates(configs) {
    for (var i = 0; i < configs.items.length; i++) {
      var c = configs.items[i];

      if (!(c.state instanceof _RuleStopState.default)) {
        return false;
      }
    }

    return true;
  },

  /**
   *
   * Full LL prediction termination.
   *
   * <p>Can we stop looking ahead during ATN simulation or is there some
   * uncertainty as to which alternative we will ultimately pick, after
   * consuming more input? Even if there are partial conflicts, we might know
   * that everything is going to resolve to the same minimum alternative. That
   * means we can stop since no more lookahead will change that fact. On the
   * other hand, there might be multiple conflicts that resolve to different
   * minimums. That means we need more look ahead to decide which of those
   * alternatives we should predict.</p>
   *
   * <p>The basic idea is to split the set of configurations {@code C}, into
   * conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with
   * non-conflicting configurations. Two configurations conflict if they have
   * identical {@link ATNConfig//state} and {@link ATNConfig//context} values
   * but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}
   * and {@code (s, j, ctx, _)} for {@code i!=j}.</p>
   *
   * <p>Reduce these configuration subsets to the set of possible alternatives.
   * You can compute the alternative subsets in one pass as follows:</p>
   *
   * <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in
   * {@code C} holding {@code s} and {@code ctx} fixed.</p>
   *
   * <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>
   *
   * <pre>
   * map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
   * alt and not pred
   * </pre>
   *
   * <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>
   *
   * <p>If {@code |A_s,ctx|=1} then there is no conflict associated with
   * {@code s} and {@code ctx}.</p>
   *
   * <p>Reduce the subsets to singletons by choosing a minimum of each subset. If
   * the union of these alternative subsets is a singleton, then no amount of
   * more lookahead will help us. We will always pick that alternative. If,
   * however, there is more than one alternative, then we are uncertain which
   * alternative to predict and must continue looking for resolution. We may
   * or may not discover an ambiguity in the future, even if there are no
   * conflicting subsets this round.</p>
   *
   * <p>The biggest sin is to terminate early because it means we've made a
   * decision but were uncertain as to the eventual outcome. We haven't used
   * enough lookahead. On the other hand, announcing a conflict too late is no
   * big deal; you will still have the conflict. It's just inefficient. It
   * might even look until the end of file.</p>
   *
   * <p>No special consideration for semantic predicates is required because
   * predicates are evaluated on-the-fly for full LL prediction, ensuring that
   * no configuration contains a semantic context during the termination
   * check.</p>
   *
   * <p><strong>CONFLICTING CONFIGS</strong></p>
   *
   * <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict
   * when {@code i!=j} but {@code x=x'}. Because we merge all
   * {@code (s, i, _)} configurations together, that means that there are at
   * most {@code n} configurations associated with state {@code s} for
   * {@code n} possible alternatives in the decision. The merged stacks
   * complicate the comparison of configuration contexts {@code x} and
   * {@code x'}. Sam checks to see if one is a subset of the other by calling
   * merge and checking to see if the merged result is either {@code x} or
   * {@code x'}. If the {@code x} associated with lowest alternative {@code i}
   * is the superset, then {@code i} is the only possible prediction since the
   * others resolve to {@code min(i)} as well. However, if {@code x} is
   * associated with {@code j>i} then at least one stack configuration for
   * {@code j} is not in conflict with alternative {@code i}. The algorithm
   * should keep going, looking for more lookahead due to the uncertainty.</p>
   *
   * <p>For simplicity, I'm doing a equality check between {@code x} and
   * {@code x'} that lets the algorithm continue to consume lookahead longer
   * than necessary. The reason I like the equality is of course the
   * simplicity but also because that is the test you need to detect the
   * alternatives that are actually in conflict.</p>
   *
   * <p><strong>CONTINUE/STOP RULE</strong></p>
   *
   * <p>Continue if union of resolved alternative sets from non-conflicting and
   * conflicting alternative subsets has more than one alternative. We are
   * uncertain about which alternative to predict.</p>
   *
   * <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which
   * alternatives are still in the running for the amount of input we've
   * consumed at this point. The conflicting sets let us to strip away
   * configurations that won't lead to more states because we resolve
   * conflicts to the configuration with a minimum alternate for the
   * conflicting set.</p>
   *
   * <p><strong>CASES</strong></p>
   *
   * <ul>
   *
   * <li>no conflicts and more than 1 alternative in set =&gt; continue</li>
   *
   * <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},
   * {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set
   * {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
   * {@code {1,3}} =&gt; continue
   * </li>
   *
   * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
   * {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set
   * {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
   * {@code {1}} =&gt; stop and predict 1</li>
   *
   * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
   * {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U
   * {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce
   * ambiguity {@code {1,2}}</li>
   *
   * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},
   * {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U
   * {@code {2}} = {@code {1,2}} =&gt; continue</li>
   *
   * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},
   * {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U
   * {@code {3}} = {@code {1,3}} =&gt; continue</li>
   *
   * </ul>
   *
   * <p><strong>EXACT AMBIGUITY DETECTION</strong></p>
   *
   * <p>If all states report the same conflicting set of alternatives, then we
   * know we have the exact ambiguity set.</p>
   *
   * <p><code>|A_<em>i</em>|&gt;1</code> and
   * <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>
   *
   * <p>In other words, we continue examining lookahead until all {@code A_i}
   * have more than one alternative and all {@code A_i} are the same. If
   * {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate
   * because the resolved set is {@code {1}}. To determine what the real
   * ambiguity is, we have to know whether the ambiguity is between one and
   * two or one and three so we keep going. We can only stop prediction when
   * we need exact ambiguity detection when the sets look like
   * {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>
   */
  resolvesToJustOneViableAlt: function resolvesToJustOneViableAlt(altsets) {
    return PredictionMode.getSingleViableAlt(altsets);
  },

  /**
   * Determines if every alternative subset in {@code altsets} contains more
   * than one alternative.
   *
   * @param altsets a collection of alternative subsets
   * @return {@code true} if every {@link BitSet} in {@code altsets} has
   * {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
   */
  allSubsetsConflict: function allSubsetsConflict(altsets) {
    return !PredictionMode.hasNonConflictingAltSet(altsets);
  },

  /**
   * Determines if any single alternative subset in {@code altsets} contains
   * exactly one alternative.
   *
   * @param altsets a collection of alternative subsets
   * @return {@code true} if {@code altsets} contains a {@link BitSet} with
   * {@link BitSet//cardinality cardinality} 1, otherwise {@code false}
   */
  hasNonConflictingAltSet: function hasNonConflictingAltSet(altsets) {
    for (var i = 0; i < altsets.length; i++) {
      var alts = altsets[i];

      if (alts.length === 1) {
        return true;
      }
    }

    return false;
  },

  /**
   * Determines if any single alternative subset in {@code altsets} contains
   * more than one alternative.
   *
   * @param altsets a collection of alternative subsets
   * @return {@code true} if {@code altsets} contains a {@link BitSet} with
   * {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
   */
  hasConflictingAltSet: function hasConflictingAltSet(altsets) {
    for (var i = 0; i < altsets.length; i++) {
      var alts = altsets[i];

      if (alts.length > 1) {
        return true;
      }
    }

    return false;
  },

  /**
   * Determines if every alternative subset in {@code altsets} is equivalent.
   *
   * @param altsets a collection of alternative subsets
   * @return {@code true} if every member of {@code altsets} is equal to the
   * others, otherwise {@code false}
   */
  allSubsetsEqual: function allSubsetsEqual(altsets) {
    var first = null;

    for (var i = 0; i < altsets.length; i++) {
      var alts = altsets[i];

      if (first === null) {
        first = alts;
      } else if (alts !== first) {
        return false;
      }
    }

    return true;
  },

  /**
   * Returns the unique alternative predicted by all alternative subsets in
   * {@code altsets}. If no such alternative exists, this method returns
   * {@link ATN//INVALID_ALT_NUMBER}.
   *
   * @param altsets a collection of alternative subsets
   */
  getUniqueAlt: function getUniqueAlt(altsets) {
    var all = PredictionMode.getAlts(altsets);

    if (all.length === 1) {
      return all.minValue();
    } else {
      return _ATN.default.INVALID_ALT_NUMBER;
    }
  },

  /**
   * Gets the complete set of represented alternatives for a collection of
   * alternative subsets. This method returns the union of each {@link BitSet}
   * in {@code altsets}.
   *
   * @param altsets a collection of alternative subsets
   * @return the set of represented alternatives in {@code altsets}
   */
  getAlts: function getAlts(altsets) {
    var all = new _BitSet.default();
    altsets.map(function (alts) {
      all.or(alts);
    });
    return all;
  },

  /**
   * This function gets the conflicting alt subsets from a configuration set.
   * For each configuration {@code c} in {@code configs}:
   *
   * <pre>
   * map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
   * alt and not pred
   * </pre>
   */
  getConflictingAltSubsets: function getConflictingAltSubsets(configs) {
    var configToAlts = new _HashMap.default();

    configToAlts.hashFunction = function (cfg) {
      _HashCode.default.hashStuff(cfg.state.stateNumber, cfg.context);
    };

    configToAlts.equalsFunction = function (c1, c2) {
      return c1.state.stateNumber === c2.state.stateNumber && c1.context.equals(c2.context);
    };

    configs.items.map(function (cfg) {
      var alts = configToAlts.get(cfg);

      if (alts === null) {
        alts = new _BitSet.default();
        configToAlts.set(cfg, alts);
      }

      alts.add(cfg.alt);
    });
    return configToAlts.getValues();
  },

  /**
   * Get a map from state to alt subset from a configuration set. For each
   * configuration {@code c} in {@code configs}:
   *
   * <pre>
   * map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}
   * </pre>
   */
  getStateToAltMap: function getStateToAltMap(configs) {
    var m = new _AltDict.default();
    configs.items.map(function (c) {
      var alts = m.get(c.state);

      if (alts === null) {
        alts = new _BitSet.default();
        m.set(c.state, alts);
      }

      alts.add(c.alt);
    });
    return m;
  },
  hasStateAssociatedWithOneAlt: function hasStateAssociatedWithOneAlt(configs) {
    var values = PredictionMode.getStateToAltMap(configs).values();

    for (var i = 0; i < values.length; i++) {
      if (values[i].length === 1) {
        return true;
      }
    }

    return false;
  },
  getSingleViableAlt: function getSingleViableAlt(altsets) {
    var result = null;

    for (var i = 0; i < altsets.length; i++) {
      var alts = altsets[i];
      var minAlt = alts.minValue();

      if (result === null) {
        result = minAlt;
      } else if (result !== minAlt) {
        // more than 1 viable alt
        return _ATN.default.INVALID_ALT_NUMBER;
      }
    }

    return result;
  }
};
var _default = PredictionMode;
exports.default = _default;
},{"./ATN.js":"VSBa","../state/RuleStopState.js":"WskT","./ATNConfigSet.js":"gGEg","./ATNConfig.js":"vzuf","./SemanticContext.js":"fWJV","../misc/BitSet.js":"krtX","../misc/AltDict.js":"hlJ3","../misc/HashCode.js":"JXAn","../misc/HashMap.js":"TPpe"}],"zWmB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _RecognitionException2 = _interopRequireDefault(require("./RecognitionException.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Indicates that the parser could not decide which of two or more paths
 * to take based upon the remaining input. It tracks the starting token
 * of the offending input and also knows where the parser was
 * in the various paths when the error. Reported by reportNoViableAlternative()
 */
var NoViableAltException = /*#__PURE__*/function (_RecognitionException) {
  _inherits(NoViableAltException, _RecognitionException);

  var _super = _createSuper(NoViableAltException);

  function NoViableAltException(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {
    var _this;

    _classCallCheck(this, NoViableAltException);

    ctx = ctx || recognizer._ctx;
    offendingToken = offendingToken || recognizer.getCurrentToken();
    startToken = startToken || recognizer.getCurrentToken();
    input = input || recognizer.getInputStream();
    _this = _super.call(this, {
      message: "",
      recognizer: recognizer,
      input: input,
      ctx: ctx
    }); // Which configurations did we try at input.index() that couldn't match
    // input.LT(1)?//

    _this.deadEndConfigs = deadEndConfigs; // The token object at the start index; the input stream might
    // not be buffering tokens so get a reference to it. (At the
    // time the error occurred, of course the stream needs to keep a
    // buffer all of the tokens but later we might not have access to those.)

    _this.startToken = startToken;
    _this.offendingToken = offendingToken;
    return _this;
  }

  return _createClass(NoViableAltException);
}(_RecognitionException2.default);

exports.default = NoViableAltException;
},{"./RecognitionException.js":"pFqq"}],"l46J":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _HashMap = _interopRequireDefault(require("../misc/HashMap.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var DoubleDict = /*#__PURE__*/function () {
  function DoubleDict(defaultMapCtor) {
    _classCallCheck(this, DoubleDict);

    this.defaultMapCtor = defaultMapCtor || _HashMap.default;
    this.cacheMap = new this.defaultMapCtor();
  }

  _createClass(DoubleDict, [{
    key: "get",
    value: function get(a, b) {
      var d = this.cacheMap.get(a) || null;
      return d === null ? null : d.get(b) || null;
    }
  }, {
    key: "set",
    value: function set(a, b, o) {
      var d = this.cacheMap.get(a) || null;

      if (d === null) {
        d = new this.defaultMapCtor();
        this.cacheMap.set(a, d);
      }

      d.set(b, o);
    }
  }]);

  return DoubleDict;
}();

exports.default = DoubleDict;
},{"../misc/HashMap.js":"TPpe"}],"dhlF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ATN = _interopRequireDefault(require("./ATN.js"));

var _ATNState = _interopRequireDefault(require("../state/ATNState.js"));

var _RuleStopState = _interopRequireDefault(require("../state/RuleStopState.js"));

var _ATNConfig = _interopRequireDefault(require("./ATNConfig.js"));

var _ATNConfigSet = _interopRequireDefault(require("./ATNConfigSet.js"));

var _Token = _interopRequireDefault(require("../Token.js"));

var _DFAState = _interopRequireDefault(require("../dfa/DFAState.js"));

var _PredPrediction = _interopRequireDefault(require("../dfa/PredPrediction.js"));

var _ATNSimulator2 = _interopRequireDefault(require("./ATNSimulator.js"));

var _PredictionMode = _interopRequireDefault(require("./PredictionMode.js"));

var _RuleContext = _interopRequireDefault(require("../context/RuleContext.js"));

var _SemanticContext = _interopRequireDefault(require("./SemanticContext.js"));

var _PredictionContext = _interopRequireDefault(require("../context/PredictionContext.js"));

var _Interval = _interopRequireDefault(require("../misc/Interval.js"));

var _Transition = _interopRequireDefault(require("../transition/Transition.js"));

var _SetTransition = _interopRequireDefault(require("../transition/SetTransition.js"));

var _NotSetTransition = _interopRequireDefault(require("../transition/NotSetTransition.js"));

var _RuleTransition = _interopRequireDefault(require("../transition/RuleTransition.js"));

var _ActionTransition = _interopRequireDefault(require("../transition/ActionTransition.js"));

var _NoViableAltException = _interopRequireDefault(require("../error/NoViableAltException.js"));

var _SingletonPredictionContext = _interopRequireDefault(require("../context/SingletonPredictionContext.js"));

var _PredictionContextUtils = require("../context/PredictionContextUtils.js");

var _AtomTransition = _interopRequireDefault(require("../transition/AtomTransition.js"));

var _arrayToString = _interopRequireDefault(require("../utils/arrayToString.js"));

var _BitSet = _interopRequireDefault(require("../misc/BitSet.js"));

var _DoubleDict = _interopRequireDefault(require("../utils/DoubleDict.js"));

var _HashSet = _interopRequireDefault(require("../misc/HashSet.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * The embodiment of the adaptive LL(*), ALL(*), parsing strategy.
 *
 * <p>
 * The basic complexity of the adaptive strategy makes it harder to understand.
 * We begin with ATN simulation to build paths in a DFA. Subsequent prediction
 * requests go through the DFA first. If they reach a state without an edge for
 * the current symbol, the algorithm fails over to the ATN simulation to
 * complete the DFA path for the current input (until it finds a conflict state
 * or uniquely predicting state).</p>
 *
 * <p>
 * All of that is done without using the outer context because we want to create
 * a DFA that is not dependent upon the rule invocation stack when we do a
 * prediction. One DFA works in all contexts. We avoid using context not
 * necessarily because it's slower, although it can be, but because of the DFA
 * caching problem. The closure routine only considers the rule invocation stack
 * created during prediction beginning in the decision rule. For example, if
 * prediction occurs without invoking another rule's ATN, there are no context
 * stacks in the configurations. When lack of context leads to a conflict, we
 * don't know if it's an ambiguity or a weakness in the strong LL(*) parsing
 * strategy (versus full LL(*)).</p>
 *
 * <p>
 * When SLL yields a configuration set with conflict, we rewind the input and
 * retry the ATN simulation, this time using full outer context without adding
 * to the DFA. Configuration context stacks will be the full invocation stacks
 * from the start rule. If we get a conflict using full context, then we can
 * definitively say we have a true ambiguity for that input sequence. If we
 * don't get a conflict, it implies that the decision is sensitive to the outer
 * context. (It is not context-sensitive in the sense of context-sensitive
 * grammars.)</p>
 *
 * <p>
 * The next time we reach this DFA state with an SLL conflict, through DFA
 * simulation, we will again retry the ATN simulation using full context mode.
 * This is slow because we can't save the results and have to "interpret" the
 * ATN each time we get that input.</p>
 *
 * <p>
 * <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>
 *
 * <p>
 * We could cache results from full context to predicted alternative easily and
 * that saves a lot of time but doesn't work in presence of predicates. The set
 * of visible predicates from the ATN start state changes depending on the
 * context, because closure can fall off the end of a rule. I tried to cache
 * tuples (stack context, semantic context, predicted alt) but it was slower
 * than interpreting and much more complicated. Also required a huge amount of
 * memory. The goal is not to create the world's fastest parser anyway. I'd like
 * to keep this algorithm simple. By launching multiple threads, we can improve
 * the speed of parsing across a large number of files.</p>
 *
 * <p>
 * There is no strict ordering between the amount of input used by SLL vs LL,
 * which makes it really hard to build a cache for full context. Let's say that
 * we have input A B C that leads to an SLL conflict with full context X. That
 * implies that using X we might only use A B but we could also use A B C D to
 * resolve conflict. Input A B C D could predict alternative 1 in one position
 * in the input and A B C E could predict alternative 2 in another position in
 * input. The conflicting SLL configurations could still be non-unique in the
 * full context prediction, which would lead us to requiring more input than the
 * original A B C.	To make a	prediction cache work, we have to track	the exact
 * input	used during the previous prediction. That amounts to a cache that maps
 * X to a specific DFA for that context.</p>
 *
 * <p>
 * Something should be done for left-recursive expression predictions. They are
 * likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry
 * with full LL thing Sam does.</p>
 *
 * <p>
 * <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>
 *
 * <p>
 * We avoid doing full context retry when the outer context is empty, we did not
 * dip into the outer context by falling off the end of the decision state rule,
 * or when we force SLL mode.</p>
 *
 * <p>
 * As an example of the not dip into outer context case, consider as super
 * constructor calls versus function calls. One grammar might look like
 * this:</p>
 *
 * <pre>
 * ctorBody
 *   : '{' superCall? stat* '}'
 *   ;
 * </pre>
 *
 * <p>
 * Or, you might see something like</p>
 *
 * <pre>
 * stat
 *   : superCall ';'
 *   | expression ';'
 *   | ...
 *   ;
 * </pre>
 *
 * <p>
 * In both cases I believe that no closure operations will dip into the outer
 * context. In the first case ctorBody in the worst case will stop at the '}'.
 * In the 2nd case it should stop at the ';'. Both cases should stay within the
 * entry rule and not dip into the outer context.</p>
 *
 * <p>
 * <strong>PREDICATES</strong></p>
 *
 * <p>
 * Predicates are always evaluated if present in either SLL or LL both. SLL and
 * LL simulation deals with predicates differently. SLL collects predicates as
 * it performs closure operations like ANTLR v3 did. It delays predicate
 * evaluation until it reaches and accept state. This allows us to cache the SLL
 * ATN simulation whereas, if we had evaluated predicates on-the-fly during
 * closure, the DFA state configuration sets would be different and we couldn't
 * build up a suitable DFA.</p>
 *
 * <p>
 * When building a DFA accept state during ATN simulation, we evaluate any
 * predicates and return the sole semantically valid alternative. If there is
 * more than 1 alternative, we report an ambiguity. If there are 0 alternatives,
 * we throw an exception. Alternatives without predicates act like they have
 * true predicates. The simple way to think about it is to strip away all
 * alternatives with false predicates and choose the minimum alternative that
 * remains.</p>
 *
 * <p>
 * When we start in the DFA and reach an accept state that's predicated, we test
 * those and return the minimum semantically viable alternative. If no
 * alternatives are viable, we throw an exception.</p>
 *
 * <p>
 * During full LL ATN simulation, closure always evaluates predicates and
 * on-the-fly. This is crucial to reducing the configuration set size during
 * closure. It hits a landmine when parsing with the Java grammar, for example,
 * without this on-the-fly evaluation.</p>
 *
 * <p>
 * <strong>SHARING DFA</strong></p>
 *
 * <p>
 * All instances of the same parser share the same decision DFAs through a
 * static field. Each instance gets its own ATN simulator but they share the
 * same {@link //decisionToDFA} field. They also share a
 * {@link PredictionContextCache} object that makes sure that all
 * {@link PredictionContext} objects are shared among the DFA states. This makes
 * a big size difference.</p>
 *
 * <p>
 * <strong>THREAD SAFETY</strong></p>
 *
 * <p>
 * The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when
 * it adds a new DFA object to that array. {@link //addDFAEdge}
 * locks on the DFA for the current decision when setting the
 * {@link DFAState//edges} field. {@link //addDFAState} locks on
 * the DFA for the current decision when looking up a DFA state to see if it
 * already exists. We must make sure that all requests to add DFA states that
 * are equivalent result in the same shared DFA object. This is because lots of
 * threads will be trying to update the DFA at once. The
 * {@link //addDFAState} method also locks inside the DFA lock
 * but this time on the shared context cache when it rebuilds the
 * configurations' {@link PredictionContext} objects using cached
 * subgraphs/nodes. No other locking occurs, even during DFA simulation. This is
 * safe as long as we can guarantee that all threads referencing
 * {@code s.edge[t]} get the same physical target {@link DFAState}, or
 * {@code null}. Once into the DFA, the DFA simulation does not reference the
 * {@link DFA//states} map. It follows the {@link DFAState//edges} field to new
 * targets. The DFA simulator will either find {@link DFAState//edges} to be
 * {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or
 * {@code dfa.edges[t]} to be non-null. The
 * {@link //addDFAEdge} method could be racing to set the field
 * but in either case the DFA simulator works; if {@code null}, and requests ATN
 * simulation. It could also race trying to get {@code dfa.edges[t]}, but either
 * way it will work because it's not doing a test and set operation.</p>
 *
 * <p>
 * <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage
 * Parsing)</strong></p>
 *
 * <p>
 * Sam pointed out that if SLL does not give a syntax error, then there is no
 * point in doing full LL, which is slower. We only have to try LL if we get a
 * syntax error. For maximum speed, Sam starts the parser set to pure SLL
 * mode with the {@link BailErrorStrategy}:</p>
 *
 * <pre>
 * parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};
 * parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());
 * </pre>
 *
 * <p>
 * If it does not get a syntax error, then we're done. If it does get a syntax
 * error, we need to retry with the combined SLL/LL strategy.</p>
 *
 * <p>
 * The reason this works is as follows. If there are no SLL conflicts, then the
 * grammar is SLL (at least for that input set). If there is an SLL conflict,
 * the full LL analysis must yield a set of viable alternatives which is a
 * subset of the alternatives reported by SLL. If the LL set is a singleton,
 * then the grammar is LL but not SLL. If the LL set is the same size as the SLL
 * set, the decision is SLL. If the LL set has size &gt; 1, then that decision
 * is truly ambiguous on the current input. If the LL set is smaller, then the
 * SLL conflict resolution might choose an alternative that the full LL would
 * rule out as a possibility based upon better context information. If that's
 * the case, then the SLL parse will definitely get an error because the full LL
 * analysis says it's not viable. If SLL conflict resolution chooses an
 * alternative within the LL set, them both SLL and LL would choose the same
 * alternative because they both choose the minimum of multiple conflicting
 * alternatives.</p>
 *
 * <p>
 * Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and
 * a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL
 * parsing will get an error because SLL will pursue alternative 1. If
 * <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will
 * choose the same alternative because alternative one is the minimum of either
 * set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax
 * error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>
 *
 * <p>
 * Of course, if the input is invalid, then we will get an error for sure in
 * both SLL and LL parsing. Erroneous input will therefore require 2 passes over
 * the input.</p>
 */
var ParserATNSimulator = /*#__PURE__*/function (_ATNSimulator) {
  _inherits(ParserATNSimulator, _ATNSimulator);

  var _super = _createSuper(ParserATNSimulator);

  function ParserATNSimulator(parser, atn, decisionToDFA, sharedContextCache) {
    var _this;

    _classCallCheck(this, ParserATNSimulator);

    _this = _super.call(this, atn, sharedContextCache);
    _this.parser = parser;
    _this.decisionToDFA = decisionToDFA; // SLL, LL, or LL + exact ambig detection?//

    _this.predictionMode = _PredictionMode.default.LL; // LAME globals to avoid parameters!!!!! I need these down deep in predTransition

    _this._input = null;
    _this._startIndex = 0;
    _this._outerContext = null;
    _this._dfa = null;
    /**
     * Each prediction operation uses a cache for merge of prediction contexts.
     *  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap
     *  isn't synchronized but we're ok since two threads shouldn't reuse same
     *  parser/atnsim object because it can only handle one input at a time.
     *  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid
     *  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should
     *  also be examined during cache lookup.
     */

    _this.mergeCache = null;
    _this.debug = false;
    _this.debug_closure = false;
    _this.debug_add = false;
    _this.debug_list_atn_decisions = false;
    _this.dfa_debug = false;
    _this.retry_debug = false;
    return _this;
  }

  _createClass(ParserATNSimulator, [{
    key: "reset",
    value: function reset() {}
  }, {
    key: "adaptivePredict",
    value: function adaptivePredict(input, decision, outerContext) {
      if (this.debug || this.debug_list_atn_decisions) {
        console.log("adaptivePredict decision " + decision + " exec LA(1)==" + this.getLookaheadName(input) + " line " + input.LT(1).line + ":" + input.LT(1).column);
      }

      this._input = input;
      this._startIndex = input.index;
      this._outerContext = outerContext;
      var dfa = this.decisionToDFA[decision];
      this._dfa = dfa;
      var m = input.mark();
      var index = input.index; // Now we are certain to have a specific decision's DFA
      // But, do we still need an initial state?

      try {
        var s0;

        if (dfa.precedenceDfa) {
          // the start state for a precedence DFA depends on the current
          // parser precedence, and is provided by a DFA method.
          s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());
        } else {
          // the start state for a "regular" DFA is just s0
          s0 = dfa.s0;
        }

        if (s0 === null) {
          if (outerContext === null) {
            outerContext = _RuleContext.default.EMPTY;
          }

          if (this.debug || this.debug_list_atn_decisions) {
            console.log("predictATN decision " + dfa.decision + " exec LA(1)==" + this.getLookaheadName(input) + ", outerContext=" + outerContext.toString(this.parser.ruleNames));
          }

          var fullCtx = false;
          var s0_closure = this.computeStartState(dfa.atnStartState, _RuleContext.default.EMPTY, fullCtx);

          if (dfa.precedenceDfa) {
            // If this is a precedence DFA, we use applyPrecedenceFilter
            // to convert the computed start state to a precedence start
            // state. We then use DFA.setPrecedenceStartState to set the
            // appropriate start state for the precedence level rather
            // than simply setting DFA.s0.
            //
            dfa.s0.configs = s0_closure; // not used for prediction but useful to know start configs anyway

            s0_closure = this.applyPrecedenceFilter(s0_closure);
            s0 = this.addDFAState(dfa, new _DFAState.default(null, s0_closure));
            dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);
          } else {
            s0 = this.addDFAState(dfa, new _DFAState.default(null, s0_closure));
            dfa.s0 = s0;
          }
        }

        var alt = this.execATN(dfa, s0, input, index, outerContext);

        if (this.debug) {
          console.log("DFA after predictATN: " + dfa.toString(this.parser.literalNames, this.parser.symbolicNames));
        }

        return alt;
      } finally {
        this._dfa = null;
        this.mergeCache = null; // wack cache after each prediction

        input.seek(index);
        input.release(m);
      }
    }
    /**
     * Performs ATN simulation to compute a predicted alternative based
     *  upon the remaining input, but also updates the DFA cache to avoid
     *  having to traverse the ATN again for the same input sequence.
     *
     * There are some key conditions we're looking for after computing a new
     * set of ATN configs (proposed DFA state):
     *       if the set is empty, there is no viable alternative for current symbol
     *       does the state uniquely predict an alternative?
     *       does the state have a conflict that would prevent us from
     *         putting it on the work list?
     *
     * We also have some key operations to do:
     *       add an edge from previous DFA state to potentially new DFA state, D,
     *         upon current symbol but only if adding to work list, which means in all
     *         cases except no viable alternative (and possibly non-greedy decisions?)
     *       collecting predicates and adding semantic context to DFA accept states
     *       adding rule context to context-sensitive DFA accept states
     *       consuming an input symbol
     *       reporting a conflict
     *       reporting an ambiguity
     *       reporting a context sensitivity
     *       reporting insufficient predicates
     *
     * cover these cases:
     *    dead end
     *    single alt
     *    single alt + preds
     *    conflict
     *    conflict + preds
     *
     */

  }, {
    key: "execATN",
    value: function execATN(dfa, s0, input, startIndex, outerContext) {
      if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATN decision " + dfa.decision + " exec LA(1)==" + this.getLookaheadName(input) + " line " + input.LT(1).line + ":" + input.LT(1).column);
      }

      var alt;
      var previousD = s0;

      if (this.debug) {
        console.log("s0 = " + s0);
      }

      var t = input.LA(1);

      for (;;) {
        // while more work
        var D = this.getExistingTargetState(previousD, t);

        if (D === null) {
          D = this.computeTargetState(dfa, previousD, t);
        }

        if (D === _ATNSimulator2.default.ERROR) {
          // if any configs in previous dipped into outer context, that
          // means that input up to t actually finished entry rule
          // at least for SLL decision. Full LL doesn't dip into outer
          // so don't need special case.
          // We will get an error no matter what so delay until after
          // decision; better error message. Also, no reachable target
          // ATN states in SLL implies LL will also get nowhere.
          // If conflict in states that dip out, choose min since we
          // will get error no matter what.
          var e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);
          input.seek(startIndex);
          alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);

          if (alt !== _ATN.default.INVALID_ALT_NUMBER) {
            return alt;
          } else {
            throw e;
          }
        }

        if (D.requiresFullContext && this.predictionMode !== _PredictionMode.default.SLL) {
          // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)
          var conflictingAlts = null;

          if (D.predicates !== null) {
            if (this.debug) {
              console.log("DFA state has preds in DFA sim LL failover");
            }

            var conflictIndex = input.index;

            if (conflictIndex !== startIndex) {
              input.seek(startIndex);
            }

            conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);

            if (conflictingAlts.length === 1) {
              if (this.debug) {
                console.log("Full LL avoided");
              }

              return conflictingAlts.minValue();
            }

            if (conflictIndex !== startIndex) {
              // restore the index so reporting the fallback to full
              // context occurs with the index at the correct spot
              input.seek(conflictIndex);
            }
          }

          if (this.dfa_debug) {
            console.log("ctx sensitive state " + outerContext + " in " + D);
          }

          var fullCtx = true;
          var s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);
          this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);
          alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);
          return alt;
        }

        if (D.isAcceptState) {
          if (D.predicates === null) {
            return D.prediction;
          }

          var stopIndex = input.index;
          input.seek(startIndex);
          var alts = this.evalSemanticContext(D.predicates, outerContext, true);

          if (alts.length === 0) {
            throw this.noViableAlt(input, outerContext, D.configs, startIndex);
          } else if (alts.length === 1) {
            return alts.minValue();
          } else {
            // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.
            this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);
            return alts.minValue();
          }
        }

        previousD = D;

        if (t !== _Token.default.EOF) {
          input.consume();
          t = input.LA(1);
        }
      }
    }
    /**
     * Get an existing target state for an edge in the DFA. If the target state
     * for the edge has not yet been computed or is otherwise not available,
     * this method returns {@code null}.
     *
     * @param previousD The current DFA state
     * @param t The next input symbol
     * @return The existing target DFA state for the given input symbol
     * {@code t}, or {@code null} if the target state for this edge is not
     * already cached
     */

  }, {
    key: "getExistingTargetState",
    value: function getExistingTargetState(previousD, t) {
      var edges = previousD.edges;

      if (edges === null) {
        return null;
      } else {
        return edges[t + 1] || null;
      }
    }
    /**
     * Compute a target state for an edge in the DFA, and attempt to add the
     * computed state and corresponding edge to the DFA.
     *
     * @param dfa The DFA
     * @param previousD The current DFA state
     * @param t The next input symbol
     *
     * @return The computed target DFA state for the given input symbol
     * {@code t}. If {@code t} does not lead to a valid DFA state, this method
     * returns {@link //ERROR
     */

  }, {
    key: "computeTargetState",
    value: function computeTargetState(dfa, previousD, t) {
      var reach = this.computeReachSet(previousD.configs, t, false);

      if (reach === null) {
        this.addDFAEdge(dfa, previousD, t, _ATNSimulator2.default.ERROR);
        return _ATNSimulator2.default.ERROR;
      } // create new target state; we'll add to DFA after it's complete


      var D = new _DFAState.default(null, reach);
      var predictedAlt = this.getUniqueAlt(reach);

      if (this.debug) {
        var altSubSets = _PredictionMode.default.getConflictingAltSubsets(reach);

        console.log("SLL altSubSets=" + (0, _arrayToString.default)(altSubSets) +
        /*", previous=" + previousD.configs + */
        ", configs=" + reach + ", predict=" + predictedAlt + ", allSubsetsConflict=" + _PredictionMode.default.allSubsetsConflict(altSubSets) + ", conflictingAlts=" + this.getConflictingAlts(reach));
      }

      if (predictedAlt !== _ATN.default.INVALID_ALT_NUMBER) {
        // NO CONFLICT, UNIQUELY PREDICTED ALT
        D.isAcceptState = true;
        D.configs.uniqueAlt = predictedAlt;
        D.prediction = predictedAlt;
      } else if (_PredictionMode.default.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {
        // MORE THAN ONE VIABLE ALTERNATIVE
        D.configs.conflictingAlts = this.getConflictingAlts(reach);
        D.requiresFullContext = true; // in SLL-only mode, we will stop at this state and return the minimum alt

        D.isAcceptState = true;
        D.prediction = D.configs.conflictingAlts.minValue();
      }

      if (D.isAcceptState && D.configs.hasSemanticContext) {
        this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));

        if (D.predicates !== null) {
          D.prediction = _ATN.default.INVALID_ALT_NUMBER;
        }
      } // all adds to dfa are done after we've created full D state


      D = this.addDFAEdge(dfa, previousD, t, D);
      return D;
    }
  }, {
    key: "predicateDFAState",
    value: function predicateDFAState(dfaState, decisionState) {
      // We need to test all predicates, even in DFA states that
      // uniquely predict alternative.
      var nalts = decisionState.transitions.length; // Update DFA so reach becomes accept state with (predicate,alt)
      // pairs if preds found for conflicting alts

      var altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);
      var altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);

      if (altToPred !== null) {
        dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);
        dfaState.prediction = _ATN.default.INVALID_ALT_NUMBER; // make sure we use preds
      } else {
        // There are preds in configs but they might go away
        // when OR'd together like {p}? || NONE == NONE. If neither
        // alt has preds, resolve to min alt
        dfaState.prediction = altsToCollectPredsFrom.minValue();
      }
    } // comes back with reach.uniqueAlt set to a valid alt

  }, {
    key: "execATNWithFullContext",
    value: function execATNWithFullContext(dfa, D, // how far we got before failing over
    s0, input, startIndex, outerContext) {
      if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATNWithFullContext " + s0);
      }

      var fullCtx = true;
      var foundExactAmbig = false;
      var reach;
      var previous = s0;
      input.seek(startIndex);
      var t = input.LA(1);
      var predictedAlt = -1;

      for (;;) {
        // while more work
        reach = this.computeReachSet(previous, t, fullCtx);

        if (reach === null) {
          // if any configs in previous dipped into outer context, that
          // means that input up to t actually finished entry rule
          // at least for LL decision. Full LL doesn't dip into outer
          // so don't need special case.
          // We will get an error no matter what so delay until after
          // decision; better error message. Also, no reachable target
          // ATN states in SLL implies LL will also get nowhere.
          // If conflict in states that dip out, choose min since we
          // will get error no matter what.
          var e = this.noViableAlt(input, outerContext, previous, startIndex);
          input.seek(startIndex);
          var alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);

          if (alt !== _ATN.default.INVALID_ALT_NUMBER) {
            return alt;
          } else {
            throw e;
          }
        }

        var altSubSets = _PredictionMode.default.getConflictingAltSubsets(reach);

        if (this.debug) {
          console.log("LL altSubSets=" + altSubSets + ", predict=" + _PredictionMode.default.getUniqueAlt(altSubSets) + ", resolvesToJustOneViableAlt=" + _PredictionMode.default.resolvesToJustOneViableAlt(altSubSets));
        }

        reach.uniqueAlt = this.getUniqueAlt(reach); // unique prediction?

        if (reach.uniqueAlt !== _ATN.default.INVALID_ALT_NUMBER) {
          predictedAlt = reach.uniqueAlt;
          break;
        } else if (this.predictionMode !== _PredictionMode.default.LL_EXACT_AMBIG_DETECTION) {
          predictedAlt = _PredictionMode.default.resolvesToJustOneViableAlt(altSubSets);

          if (predictedAlt !== _ATN.default.INVALID_ALT_NUMBER) {
            break;
          }
        } else {
          // In exact ambiguity mode, we never try to terminate early.
          // Just keeps scarfing until we know what the conflict is
          if (_PredictionMode.default.allSubsetsConflict(altSubSets) && _PredictionMode.default.allSubsetsEqual(altSubSets)) {
            foundExactAmbig = true;
            predictedAlt = _PredictionMode.default.getSingleViableAlt(altSubSets);
            break;
          } // else there are multiple non-conflicting subsets or
          // we're not sure what the ambiguity is yet.
          // So, keep going.

        }

        previous = reach;

        if (t !== _Token.default.EOF) {
          input.consume();
          t = input.LA(1);
        }
      } // If the configuration set uniquely predicts an alternative,
      // without conflict, then we know that it's a full LL decision
      // not SLL.


      if (reach.uniqueAlt !== _ATN.default.INVALID_ALT_NUMBER) {
        this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);
        return predictedAlt;
      } // We do not check predicates here because we have checked them
      // on-the-fly when doing full context prediction.
      //
      // In non-exact ambiguity detection mode, we might	actually be able to
      // detect an exact ambiguity, but I'm not going to spend the cycles
      // needed to check. We only emit ambiguity warnings in exact ambiguity
      // mode.
      //
      // For example, we might know that we have conflicting configurations.
      // But, that does not mean that there is no way forward without a
      // conflict. It's possible to have nonconflicting alt subsets as in:
      // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]
      // from
      //
      //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),
      //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]
      //
      // In this case, (17,1,[5 $]) indicates there is some next sequence that
      // would resolve this without conflict to alternative 1. Any other viable
      // next sequence, however, is associated with a conflict.  We stop
      // looking for input because no amount of further lookahead will alter
      // the fact that we should predict alternative 1.  We just can't say for
      // sure that there is an ambiguity without looking further.


      this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);
      return predictedAlt;
    }
  }, {
    key: "computeReachSet",
    value: function computeReachSet(closure, t, fullCtx) {
      if (this.debug) {
        console.log("in computeReachSet, starting closure: " + closure);
      }

      if (this.mergeCache === null) {
        this.mergeCache = new _DoubleDict.default();
      }

      var intermediate = new _ATNConfigSet.default(fullCtx); // Configurations already in a rule stop state indicate reaching the end
      // of the decision rule (local context) or end of the start rule (full
      // context). Once reached, these configurations are never updated by a
      // closure operation, so they are handled separately for the performance
      // advantage of having a smaller intermediate set when calling closure.
      //
      // For full-context reach operations, separate handling is required to
      // ensure that the alternative matching the longest overall sequence is
      // chosen when multiple such configurations can match the input.

      var skippedStopStates = null; // First figure out where we can reach on input t

      for (var i = 0; i < closure.items.length; i++) {
        var c = closure.items[i];

        if (this.debug) {
          console.log("testing " + this.getTokenName(t) + " at " + c);
        }

        if (c.state instanceof _RuleStopState.default) {
          if (fullCtx || t === _Token.default.EOF) {
            if (skippedStopStates === null) {
              skippedStopStates = [];
            }

            skippedStopStates.push(c);

            if (this.debug_add) {
              console.log("added " + c + " to skippedStopStates");
            }
          }

          continue;
        }

        for (var j = 0; j < c.state.transitions.length; j++) {
          var trans = c.state.transitions[j];
          var target = this.getReachableTarget(trans, t);

          if (target !== null) {
            var cfg = new _ATNConfig.default({
              state: target
            }, c);
            intermediate.add(cfg, this.mergeCache);

            if (this.debug_add) {
              console.log("added " + cfg + " to intermediate");
            }
          }
        }
      } // Now figure out where the reach operation can take us...


      var reach = null; // This block optimizes the reach operation for intermediate sets which
      // trivially indicate a termination state for the overall
      // adaptivePredict operation.
      //
      // The conditions assume that intermediate
      // contains all configurations relevant to the reach set, but this
      // condition is not true when one or more configurations have been
      // withheld in skippedStopStates, or when the current symbol is EOF.
      //

      if (skippedStopStates === null && t !== _Token.default.EOF) {
        if (intermediate.items.length === 1) {
          // Don't pursue the closure if there is just one state.
          // It can only have one alternative; just add to result
          // Also don't pursue the closure if there is unique alternative
          // among the configurations.
          reach = intermediate;
        } else if (this.getUniqueAlt(intermediate) !== _ATN.default.INVALID_ALT_NUMBER) {
          // Also don't pursue the closure if there is unique alternative
          // among the configurations.
          reach = intermediate;
        }
      } // If the reach set could not be trivially determined, perform a closure
      // operation on the intermediate set to compute its initial value.
      //


      if (reach === null) {
        reach = new _ATNConfigSet.default(fullCtx);
        var closureBusy = new _HashSet.default();
        var treatEofAsEpsilon = t === _Token.default.EOF;

        for (var k = 0; k < intermediate.items.length; k++) {
          this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);
        }
      }

      if (t === _Token.default.EOF) {
        // After consuming EOF no additional input is possible, so we are
        // only interested in configurations which reached the end of the
        // decision rule (local context) or end of the start rule (full
        // context). Update reach to contain only these configurations. This
        // handles both explicit EOF transitions in the grammar and implicit
        // EOF transitions following the end of the decision or start rule.
        //
        // When reach==intermediate, no closure operation was performed. In
        // this case, removeAllConfigsNotInRuleStopState needs to check for
        // reachable rule stop states as well as configurations already in
        // a rule stop state.
        //
        // This is handled before the configurations in skippedStopStates,
        // because any configurations potentially added from that list are
        // already guaranteed to meet this condition whether or not it's
        // required.
        //
        reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);
      } // If skippedStopStates!==null, then it contains at least one
      // configuration. For full-context reach operations, these
      // configurations reached the end of the start rule, in which case we
      // only add them back to reach if no configuration during the current
      // closure operation reached such a state. This ensures adaptivePredict
      // chooses an alternative matching the longest overall sequence when
      // multiple alternatives are viable.
      //


      if (skippedStopStates !== null && (!fullCtx || !_PredictionMode.default.hasConfigInRuleStopState(reach))) {
        for (var l = 0; l < skippedStopStates.length; l++) {
          reach.add(skippedStopStates[l], this.mergeCache);
        }
      }

      if (reach.items.length === 0) {
        return null;
      } else {
        return reach;
      }
    }
    /**
     * Return a configuration set containing only the configurations from
     * {@code configs} which are in a {@link RuleStopState}. If all
     * configurations in {@code configs} are already in a rule stop state, this
     * method simply returns {@code configs}.
     *
     * <p>When {@code lookToEndOfRule} is true, this method uses
     * {@link ATN//nextTokens} for each configuration in {@code configs} which is
     * not already in a rule stop state to see if a rule stop state is reachable
     * from the configuration via epsilon-only transitions.</p>
     *
     * @param configs the configuration set to update
     * @param lookToEndOfRule when true, this method checks for rule stop states
     * reachable by epsilon-only transitions from each configuration in
     * {@code configs}.
     *
     * @return {@code configs} if all configurations in {@code configs} are in a
     * rule stop state, otherwise return a new configuration set containing only
     * the configurations from {@code configs} which are in a rule stop state
     */

  }, {
    key: "removeAllConfigsNotInRuleStopState",
    value: function removeAllConfigsNotInRuleStopState(configs, lookToEndOfRule) {
      if (_PredictionMode.default.allConfigsInRuleStopStates(configs)) {
        return configs;
      }

      var result = new _ATNConfigSet.default(configs.fullCtx);

      for (var i = 0; i < configs.items.length; i++) {
        var config = configs.items[i];

        if (config.state instanceof _RuleStopState.default) {
          result.add(config, this.mergeCache);
          continue;
        }

        if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {
          var nextTokens = this.atn.nextTokens(config.state);

          if (nextTokens.contains(_Token.default.EPSILON)) {
            var endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];
            result.add(new _ATNConfig.default({
              state: endOfRuleState
            }, config), this.mergeCache);
          }
        }
      }

      return result;
    }
  }, {
    key: "computeStartState",
    value: function computeStartState(p, ctx, fullCtx) {
      // always at least the implicit call to start rule
      var initialContext = (0, _PredictionContextUtils.predictionContextFromRuleContext)(this.atn, ctx);
      var configs = new _ATNConfigSet.default(fullCtx);

      for (var i = 0; i < p.transitions.length; i++) {
        var target = p.transitions[i].target;
        var c = new _ATNConfig.default({
          state: target,
          alt: i + 1,
          context: initialContext
        }, null);
        var closureBusy = new _HashSet.default();
        this.closure(c, configs, closureBusy, true, fullCtx, false);
      }

      return configs;
    }
    /**
     * This method transforms the start state computed by
     * {@link //computeStartState} to the special start state used by a
     * precedence DFA for a particular precedence value. The transformation
     * process applies the following changes to the start state's configuration
     * set.
     *
     * <ol>
     * <li>Evaluate the precedence predicates for each configuration using
     * {@link SemanticContext//evalPrecedence}.</li>
     * <li>Remove all configurations which predict an alternative greater than
     * 1, for which another configuration that predicts alternative 1 is in the
     * same ATN state with the same prediction context. This transformation is
     * valid for the following reasons:
     * <ul>
     * <li>The closure block cannot contain any epsilon transitions which bypass
     * the body of the closure, so all states reachable via alternative 1 are
     * part of the precedence alternatives of the transformed left-recursive
     * rule.</li>
     * <li>The "primary" portion of a left recursive rule cannot contain an
     * epsilon transition, so the only way an alternative other than 1 can exist
     * in a state that is also reachable via alternative 1 is by nesting calls
     * to the left-recursive rule, with the outer calls not being at the
     * preferred precedence level.</li>
     * </ul>
     * </li>
     * </ol>
     *
     * <p>
     * The prediction context must be considered by this filter to address
     * situations like the following.
     * </p>
     * <code>
     * <pre>
     * grammar TA;
     * prog: statement* EOF;
     * statement: letterA | statement letterA 'b' ;
     * letterA: 'a';
     * </pre>
     * </code>
     * <p>
     * If the above grammar, the ATN state immediately before the token
     * reference {@code 'a'} in {@code letterA} is reachable from the left edge
     * of both the primary and closure blocks of the left-recursive rule
     * {@code statement}. The prediction context associated with each of these
     * configurations distinguishes between them, and prevents the alternative
     * which stepped out to {@code prog} (and then back in to {@code statement}
     * from being eliminated by the filter.
     * </p>
     *
     * @param configs The configuration set computed by
     * {@link //computeStartState} as the start state for the DFA.
     * @return The transformed configuration set representing the start state
     * for a precedence DFA at a particular precedence level (determined by
     * calling {@link Parser//getPrecedence})
     */

  }, {
    key: "applyPrecedenceFilter",
    value: function applyPrecedenceFilter(configs) {
      var config;
      var statesFromAlt1 = [];
      var configSet = new _ATNConfigSet.default(configs.fullCtx);

      for (var i = 0; i < configs.items.length; i++) {
        config = configs.items[i]; // handle alt 1 first

        if (config.alt !== 1) {
          continue;
        }

        var updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);

        if (updatedContext === null) {
          // the configuration was eliminated
          continue;
        }

        statesFromAlt1[config.state.stateNumber] = config.context;

        if (updatedContext !== config.semanticContext) {
          configSet.add(new _ATNConfig.default({
            semanticContext: updatedContext
          }, config), this.mergeCache);
        } else {
          configSet.add(config, this.mergeCache);
        }
      }

      for (var _i = 0; _i < configs.items.length; _i++) {
        config = configs.items[_i];

        if (config.alt === 1) {
          // already handled
          continue;
        } // In the future, this elimination step could be updated to also
        // filter the prediction context for alternatives predicting alt>1
        // (basically a graph subtraction algorithm).


        if (!config.precedenceFilterSuppressed) {
          var context = statesFromAlt1[config.state.stateNumber] || null;

          if (context !== null && context.equals(config.context)) {
            // eliminated
            continue;
          }
        }

        configSet.add(config, this.mergeCache);
      }

      return configSet;
    }
  }, {
    key: "getReachableTarget",
    value: function getReachableTarget(trans, ttype) {
      if (trans.matches(ttype, 0, this.atn.maxTokenType)) {
        return trans.target;
      } else {
        return null;
      }
    }
  }, {
    key: "getPredsForAmbigAlts",
    value: function getPredsForAmbigAlts(ambigAlts, configs, nalts) {
      // REACH=[1|1|[]|0:0, 1|2|[]|0:1]
      // altToPred starts as an array of all null contexts. The entry at index i
      // corresponds to alternative i. altToPred[i] may have one of three values:
      //   1. null: no ATNConfig c is found such that c.alt==i
      //   2. SemanticContext.NONE: At least one ATNConfig c exists such that
      //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,
      //      alt i has at least one unpredicated config.
      //   3. Non-NONE Semantic Context: There exists at least one, and for all
      //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.
      //
      // From this, it is clear that NONE||anything==NONE.
      //
      var altToPred = [];

      for (var i = 0; i < configs.items.length; i++) {
        var c = configs.items[i];

        if (ambigAlts.has(c.alt)) {
          altToPred[c.alt] = _SemanticContext.default.orContext(altToPred[c.alt] || null, c.semanticContext);
        }
      }

      var nPredAlts = 0;

      for (var _i2 = 1; _i2 < nalts + 1; _i2++) {
        var pred = altToPred[_i2] || null;

        if (pred === null) {
          altToPred[_i2] = _SemanticContext.default.NONE;
        } else if (pred !== _SemanticContext.default.NONE) {
          nPredAlts += 1;
        }
      } // nonambig alts are null in altToPred


      if (nPredAlts === 0) {
        altToPred = null;
      }

      if (this.debug) {
        console.log("getPredsForAmbigAlts result " + (0, _arrayToString.default)(altToPred));
      }

      return altToPred;
    }
  }, {
    key: "getPredicatePredictions",
    value: function getPredicatePredictions(ambigAlts, altToPred) {
      var pairs = [];
      var containsPredicate = false;

      for (var i = 1; i < altToPred.length; i++) {
        var pred = altToPred[i]; // unpredicated is indicated by SemanticContext.NONE

        if (ambigAlts !== null && ambigAlts.has(i)) {
          pairs.push(new _PredPrediction.default(pred, i));
        }

        if (pred !== _SemanticContext.default.NONE) {
          containsPredicate = true;
        }
      }

      if (!containsPredicate) {
        return null;
      }

      return pairs;
    }
    /**
     * This method is used to improve the localization of error messages by
     * choosing an alternative rather than throwing a
     * {@link NoViableAltException} in particular prediction scenarios where the
     * {@link //ERROR} state was reached during ATN simulation.
     *
     * <p>
     * The default implementation of this method uses the following
     * algorithm to identify an ATN configuration which successfully parsed the
     * decision entry rule. Choosing such an alternative ensures that the
     * {@link ParserRuleContext} returned by the calling rule will be complete
     * and valid, and the syntax error will be reported later at a more
     * localized location.</p>
     *
     * <ul>
     * <li>If a syntactically valid path or paths reach the end of the decision rule and
     * they are semantically valid if predicated, return the min associated alt.</li>
     * <li>Else, if a semantically invalid but syntactically valid path exist
     * or paths exist, return the minimum associated alt.
     * </li>
     * <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>
     * </ul>
     *
     * <p>
     * In some scenarios, the algorithm described above could predict an
     * alternative which will result in a {@link FailedPredicateException} in
     * the parser. Specifically, this could occur if the <em>only</em> configuration
     * capable of successfully parsing to the end of the decision rule is
     * blocked by a semantic predicate. By choosing this alternative within
     * {@link //adaptivePredict} instead of throwing a
     * {@link NoViableAltException}, the resulting
     * {@link FailedPredicateException} in the parser will identify the specific
     * predicate which is preventing the parser from successfully parsing the
     * decision rule, which helps developers identify and correct logic errors
     * in semantic predicates.
     * </p>
     *
     * @param configs The ATN configurations which were valid immediately before
     * the {@link //ERROR} state was reached
     * @param outerContext The is the \gamma_0 initial parser context from the paper
     * or the parser stack at the instant before prediction commences.
     *
     * @return The value to return from {@link //adaptivePredict}, or
     * {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not
     * identified and {@link //adaptivePredict} should report an error instead
     */

  }, {
    key: "getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule",
    value: function getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(configs, outerContext) {
      var cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);
      var semValidConfigs = cfgs[0];
      var semInvalidConfigs = cfgs[1];
      var alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);

      if (alt !== _ATN.default.INVALID_ALT_NUMBER) {
        // semantically/syntactically viable path exists
        return alt;
      } // Is there a syntactically valid path with a failed pred?


      if (semInvalidConfigs.items.length > 0) {
        alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);

        if (alt !== _ATN.default.INVALID_ALT_NUMBER) {
          // syntactically viable path exists
          return alt;
        }
      }

      return _ATN.default.INVALID_ALT_NUMBER;
    }
  }, {
    key: "getAltThatFinishedDecisionEntryRule",
    value: function getAltThatFinishedDecisionEntryRule(configs) {
      var alts = [];

      for (var i = 0; i < configs.items.length; i++) {
        var c = configs.items[i];

        if (c.reachesIntoOuterContext > 0 || c.state instanceof _RuleStopState.default && c.context.hasEmptyPath()) {
          if (alts.indexOf(c.alt) < 0) {
            alts.push(c.alt);
          }
        }
      }

      if (alts.length === 0) {
        return _ATN.default.INVALID_ALT_NUMBER;
      } else {
        return Math.min.apply(null, alts);
      }
    }
    /**
     * Walk the list of configurations and split them according to
     * those that have preds evaluating to true/false.  If no pred, assume
     * true pred and include in succeeded set.  Returns Pair of sets.
     *
     * Create a new set so as not to alter the incoming parameter.
     *
     * Assumption: the input stream has been restored to the starting point
     * prediction, which is where predicates need to evaluate.*/

  }, {
    key: "splitAccordingToSemanticValidity",
    value: function splitAccordingToSemanticValidity(configs, outerContext) {
      var succeeded = new _ATNConfigSet.default(configs.fullCtx);
      var failed = new _ATNConfigSet.default(configs.fullCtx);

      for (var i = 0; i < configs.items.length; i++) {
        var c = configs.items[i];

        if (c.semanticContext !== _SemanticContext.default.NONE) {
          var predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);

          if (predicateEvaluationResult) {
            succeeded.add(c);
          } else {
            failed.add(c);
          }
        } else {
          succeeded.add(c);
        }
      }

      return [succeeded, failed];
    }
    /**
     * Look through a list of predicate/alt pairs, returning alts for the
     * pairs that win. A {@code NONE} predicate indicates an alt containing an
     * unpredicated config which behaves as "always true." If !complete
     * then we stop at the first predicate that evaluates to true. This
     * includes pairs with null predicates.
     */

  }, {
    key: "evalSemanticContext",
    value: function evalSemanticContext(predPredictions, outerContext, complete) {
      var predictions = new _BitSet.default();

      for (var i = 0; i < predPredictions.length; i++) {
        var pair = predPredictions[i];

        if (pair.pred === _SemanticContext.default.NONE) {
          predictions.add(pair.alt);

          if (!complete) {
            break;
          }

          continue;
        }

        var predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);

        if (this.debug || this.dfa_debug) {
          console.log("eval pred " + pair + "=" + predicateEvaluationResult);
        }

        if (predicateEvaluationResult) {
          if (this.debug || this.dfa_debug) {
            console.log("PREDICT " + pair.alt);
          }

          predictions.add(pair.alt);

          if (!complete) {
            break;
          }
        }
      }

      return predictions;
    } // TODO: If we are doing predicates, there is no point in pursuing
    //     closure operations if we reach a DFA state that uniquely predicts
    //     alternative. We will not be caching that DFA state and it is a
    //     waste to pursue the closure. Might have to advance when we do
    //     ambig detection thought :(
    //

  }, {
    key: "closure",
    value: function closure(config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {
      var initialDepth = 0;
      this.closureCheckingStopState(config, configs, closureBusy, collectPredicates, fullCtx, initialDepth, treatEofAsEpsilon);
    }
  }, {
    key: "closureCheckingStopState",
    value: function closureCheckingStopState(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
      if (this.debug || this.debug_closure) {
        console.log("closure(" + config.toString(this.parser, true) + ")"); // console.log("configs(" + configs.toString() + ")");

        if (config.reachesIntoOuterContext > 50) {
          throw "problem";
        }
      }

      if (config.state instanceof _RuleStopState.default) {
        // We hit rule end. If we have context info, use it
        // run thru all possible stack tops in ctx
        if (!config.context.isEmpty()) {
          for (var i = 0; i < config.context.length; i++) {
            if (config.context.getReturnState(i) === _PredictionContext.default.EMPTY_RETURN_STATE) {
              if (fullCtx) {
                configs.add(new _ATNConfig.default({
                  state: config.state,
                  context: _PredictionContext.default.EMPTY
                }, config), this.mergeCache);
                continue;
              } else {
                // we have no context info, just chase follow links (if greedy)
                if (this.debug) {
                  console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
                }

                this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);
              }

              continue;
            }

            var returnState = this.atn.states[config.context.getReturnState(i)];
            var newContext = config.context.getParent(i); // "pop" return state

            var parms = {
              state: returnState,
              alt: config.alt,
              context: newContext,
              semanticContext: config.semanticContext
            };
            var c = new _ATNConfig.default(parms, null); // While we have context to pop back from, we may have
            // gotten that context AFTER having falling off a rule.
            // Make sure we track that we are now out of context.

            c.reachesIntoOuterContext = config.reachesIntoOuterContext;
            this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);
          }

          return;
        } else if (fullCtx) {
          // reached end of start rule
          configs.add(config, this.mergeCache);
          return;
        } else {
          // else if we have no context info, just chase follow links (if greedy)
          if (this.debug) {
            console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
          }
        }
      }

      this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);
    } // Do the actual work of walking epsilon edges//

  }, {
    key: "closure_",
    value: function closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
      var p = config.state; // optimization

      if (!p.epsilonOnlyTransitions) {
        configs.add(config, this.mergeCache); // make sure to not return here, because EOF transitions can act as
        // both epsilon transitions and non-epsilon transitions.
      }

      for (var i = 0; i < p.transitions.length; i++) {
        if (i === 0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config)) continue;
        var t = p.transitions[i];
        var continueCollecting = collectPredicates && !(t instanceof _ActionTransition.default);
        var c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);

        if (c !== null) {
          var newDepth = depth;

          if (config.state instanceof _RuleStopState.default) {
            // target fell off end of rule; mark resulting c as having dipped into outer context
            // We can't get here if incoming config was rule stop and we had context
            // track how far we dip into outer context.  Might
            // come in handy and we avoid evaluating context dependent
            // preds if this is > 0.
            if (this._dfa !== null && this._dfa.precedenceDfa) {
              if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {
                c.precedenceFilterSuppressed = true;
              }
            }

            c.reachesIntoOuterContext += 1;

            if (closureBusy.add(c) !== c) {
              // avoid infinite recursion for right-recursive rules
              continue;
            }

            configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method

            newDepth -= 1;

            if (this.debug) {
              console.log("dips into outer ctx: " + c);
            }
          } else {
            if (!t.isEpsilon && closureBusy.add(c) !== c) {
              // avoid infinite recursion for EOF* and EOF+
              continue;
            }

            if (t instanceof _RuleTransition.default) {
              // latch when newDepth goes negative - once we step out of the entry context we can't return
              if (newDepth >= 0) {
                newDepth += 1;
              }
            }
          }

          this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);
        }
      }
    }
  }, {
    key: "canDropLoopEntryEdgeInLeftRecursiveRule",
    value: function canDropLoopEntryEdgeInLeftRecursiveRule(config) {
      // return False
      var p = config.state; // First check to see if we are in StarLoopEntryState generated during
      // left-recursion elimination. For efficiency, also check if
      // the context has an empty stack case. If so, it would mean
      // global FOLLOW so we can't perform optimization
      // Are we the special loop entry/exit state? or SLL wildcard

      if (p.stateType !== _ATNState.default.STAR_LOOP_ENTRY) return false;
      if (p.stateType !== _ATNState.default.STAR_LOOP_ENTRY || !p.isPrecedenceDecision || config.context.isEmpty() || config.context.hasEmptyPath()) return false; // Require all return states to return back to the same rule that p is in.

      var numCtxs = config.context.length;

      for (var i = 0; i < numCtxs; i++) {
        // for each stack context
        var returnState = this.atn.states[config.context.getReturnState(i)];
        if (returnState.ruleIndex !== p.ruleIndex) return false;
      }

      var decisionStartState = p.transitions[0].target;
      var blockEndStateNum = decisionStartState.endState.stateNumber;
      var blockEndState = this.atn.states[blockEndStateNum]; // Verify that the top of each stack context leads to loop entry/exit
      // state through epsilon edges and w/o leaving rule.

      for (var _i3 = 0; _i3 < numCtxs; _i3++) {
        // for each stack context
        var returnStateNumber = config.context.getReturnState(_i3);
        var _returnState = this.atn.states[returnStateNumber]; // all states must have single outgoing epsilon edge

        if (_returnState.transitions.length !== 1 || !_returnState.transitions[0].isEpsilon) return false; // Look for prefix op case like 'not expr', (' type ')' expr

        var returnStateTarget = _returnState.transitions[0].target;
        if (_returnState.stateType === _ATNState.default.BLOCK_END && returnStateTarget === p) continue; // Look for 'expr op expr' or case where expr's return state is block end
        // of (...)* internal block; the block end points to loop back
        // which points to p but we don't need to check that

        if (_returnState === blockEndState) continue; // Look for ternary expr ? expr : expr. The return state points at block end,
        // which points at loop entry state

        if (returnStateTarget === blockEndState) continue; // Look for complex prefix 'between expr and expr' case where 2nd expr's
        // return state points at block end state of (...)* internal block

        if (returnStateTarget.stateType === _ATNState.default.BLOCK_END && returnStateTarget.transitions.length === 1 && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target === p) continue; // anything else ain't conforming

        return false;
      }

      return true;
    }
  }, {
    key: "getRuleName",
    value: function getRuleName(index) {
      if (this.parser !== null && index >= 0) {
        return this.parser.ruleNames[index];
      } else {
        return "<rule " + index + ">";
      }
    }
  }, {
    key: "getEpsilonTarget",
    value: function getEpsilonTarget(config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {
      switch (t.serializationType) {
        case _Transition.default.RULE:
          return this.ruleTransition(config, t);

        case _Transition.default.PRECEDENCE:
          return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);

        case _Transition.default.PREDICATE:
          return this.predTransition(config, t, collectPredicates, inContext, fullCtx);

        case _Transition.default.ACTION:
          return this.actionTransition(config, t);

        case _Transition.default.EPSILON:
          return new _ATNConfig.default({
            state: t.target
          }, config);

        case _Transition.default.ATOM:
        case _Transition.default.RANGE:
        case _Transition.default.SET:
          // EOF transitions act like epsilon transitions after the first EOF
          // transition is traversed
          if (treatEofAsEpsilon) {
            if (t.matches(_Token.default.EOF, 0, 1)) {
              return new _ATNConfig.default({
                state: t.target
              }, config);
            }
          }

          return null;

        default:
          return null;
      }
    }
  }, {
    key: "actionTransition",
    value: function actionTransition(config, t) {
      if (this.debug) {
        var index = t.actionIndex === -1 ? 65535 : t.actionIndex;
        console.log("ACTION edge " + t.ruleIndex + ":" + index);
      }

      return new _ATNConfig.default({
        state: t.target
      }, config);
    }
  }, {
    key: "precedenceTransition",
    value: function precedenceTransition(config, pt, collectPredicates, inContext, fullCtx) {
      if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " + pt.precedence + ">=_p, ctx dependent=true");

        if (this.parser !== null) {
          console.log("context surrounding pred is " + (0, _arrayToString.default)(this.parser.getRuleInvocationStack()));
        }
      }

      var c = null;

      if (collectPredicates && inContext) {
        if (fullCtx) {
          // In full context mode, we can evaluate predicates on-the-fly
          // during closure, which dramatically reduces the size of
          // the config sets. It also obviates the need to test predicates
          // later during conflict resolution.
          var currentPosition = this._input.index;

          this._input.seek(this._startIndex);

          var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);

          this._input.seek(currentPosition);

          if (predSucceeds) {
            c = new _ATNConfig.default({
              state: pt.target
            }, config); // no pred context
          }
        } else {
          var newSemCtx = _SemanticContext.default.andContext(config.semanticContext, pt.getPredicate());

          c = new _ATNConfig.default({
            state: pt.target,
            semanticContext: newSemCtx
          }, config);
        }
      } else {
        c = new _ATNConfig.default({
          state: pt.target
        }, config);
      }

      if (this.debug) {
        console.log("config from pred transition=" + c);
      }

      return c;
    }
  }, {
    key: "predTransition",
    value: function predTransition(config, pt, collectPredicates, inContext, fullCtx) {
      if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " + pt.ruleIndex + ":" + pt.predIndex + ", ctx dependent=" + pt.isCtxDependent);

        if (this.parser !== null) {
          console.log("context surrounding pred is " + (0, _arrayToString.default)(this.parser.getRuleInvocationStack()));
        }
      }

      var c = null;

      if (collectPredicates && (pt.isCtxDependent && inContext || !pt.isCtxDependent)) {
        if (fullCtx) {
          // In full context mode, we can evaluate predicates on-the-fly
          // during closure, which dramatically reduces the size of
          // the config sets. It also obviates the need to test predicates
          // later during conflict resolution.
          var currentPosition = this._input.index;

          this._input.seek(this._startIndex);

          var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);

          this._input.seek(currentPosition);

          if (predSucceeds) {
            c = new _ATNConfig.default({
              state: pt.target
            }, config); // no pred context
          }
        } else {
          var newSemCtx = _SemanticContext.default.andContext(config.semanticContext, pt.getPredicate());

          c = new _ATNConfig.default({
            state: pt.target,
            semanticContext: newSemCtx
          }, config);
        }
      } else {
        c = new _ATNConfig.default({
          state: pt.target
        }, config);
      }

      if (this.debug) {
        console.log("config from pred transition=" + c);
      }

      return c;
    }
  }, {
    key: "ruleTransition",
    value: function ruleTransition(config, t) {
      if (this.debug) {
        console.log("CALL rule " + this.getRuleName(t.target.ruleIndex) + ", ctx=" + config.context);
      }

      var returnState = t.followState;

      var newContext = _SingletonPredictionContext.default.create(config.context, returnState.stateNumber);

      return new _ATNConfig.default({
        state: t.target,
        context: newContext
      }, config);
    }
  }, {
    key: "getConflictingAlts",
    value: function getConflictingAlts(configs) {
      var altsets = _PredictionMode.default.getConflictingAltSubsets(configs);

      return _PredictionMode.default.getAlts(altsets);
    }
    /**
     * Sam pointed out a problem with the previous definition, v3, of
     * ambiguous states. If we have another state associated with conflicting
     * alternatives, we should keep going. For example, the following grammar
     *
     * s : (ID | ID ID?) ';' ;
     *
     * When the ATN simulation reaches the state before ';', it has a DFA
     * state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally
     * 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node
     * because alternative to has another way to continue, via [6|2|[]].
     * The key is that we have a single state that has config's only associated
     * with a single alternative, 2, and crucially the state transitions
     * among the configurations are all non-epsilon transitions. That means
     * we don't consider any conflicts that include alternative 2. So, we
     * ignore the conflict between alts 1 and 2. We ignore a set of
     * conflicting alts when there is an intersection with an alternative
     * associated with a single alt state in the state&rarr;config-list map.
     *
     * It's also the case that we might have two conflicting configurations but
     * also a 3rd nonconflicting configuration for a different alternative:
     * [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:
     *
     * a : A | A | A B ;
     *
     * After matching input A, we reach the stop state for rule A, state 1.
     * State 8 is the state right before B. Clearly alternatives 1 and 2
     * conflict and no amount of further lookahead will separate the two.
     * However, alternative 3 will be able to continue and so we do not
     * stop working on this state. In the previous example, we're concerned
     * with states associated with the conflicting alternatives. Here alt
     * 3 is not associated with the conflicting configs, but since we can continue
     * looking for input reasonably, I don't declare the state done. We
     * ignore a set of conflicting alts when we have an alternative
     * that we still need to pursue
     */

  }, {
    key: "getConflictingAltsOrUniqueAlt",
    value: function getConflictingAltsOrUniqueAlt(configs) {
      var conflictingAlts = null;

      if (configs.uniqueAlt !== _ATN.default.INVALID_ALT_NUMBER) {
        conflictingAlts = new _BitSet.default();
        conflictingAlts.add(configs.uniqueAlt);
      } else {
        conflictingAlts = configs.conflictingAlts;
      }

      return conflictingAlts;
    }
  }, {
    key: "getTokenName",
    value: function getTokenName(t) {
      if (t === _Token.default.EOF) {
        return "EOF";
      }

      if (this.parser !== null && this.parser.literalNames !== null) {
        if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {
          console.log("" + t + " ttype out of range: " + this.parser.literalNames);
          console.log("" + this.parser.getInputStream().getTokens());
        } else {
          var name = this.parser.literalNames[t] || this.parser.symbolicNames[t];
          return name + "<" + t + ">";
        }
      }

      return "" + t;
    }
  }, {
    key: "getLookaheadName",
    value: function getLookaheadName(input) {
      return this.getTokenName(input.LA(1));
    }
    /**
     * Used for debugging in adaptivePredict around execATN but I cut
     * it out for clarity now that alg. works well. We can leave this
     * "dead" code for a bit
     */

  }, {
    key: "dumpDeadEndConfigs",
    value: function dumpDeadEndConfigs(nvae) {
      console.log("dead end configs: ");
      var decs = nvae.getDeadEndConfigs();

      for (var i = 0; i < decs.length; i++) {
        var c = decs[i];
        var trans = "no edges";

        if (c.state.transitions.length > 0) {
          var t = c.state.transitions[0];

          if (t instanceof _AtomTransition.default) {
            trans = "Atom " + this.getTokenName(t.label);
          } else if (t instanceof _SetTransition.default) {
            var neg = t instanceof _NotSetTransition.default;
            trans = (neg ? "~" : "") + "Set " + t.set;
          }
        }

        console.error(c.toString(this.parser, true) + ":" + trans);
      }
    }
  }, {
    key: "noViableAlt",
    value: function noViableAlt(input, outerContext, configs, startIndex) {
      return new _NoViableAltException.default(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);
    }
  }, {
    key: "getUniqueAlt",
    value: function getUniqueAlt(configs) {
      var alt = _ATN.default.INVALID_ALT_NUMBER;

      for (var i = 0; i < configs.items.length; i++) {
        var c = configs.items[i];

        if (alt === _ATN.default.INVALID_ALT_NUMBER) {
          alt = c.alt; // found first alt
        } else if (c.alt !== alt) {
          return _ATN.default.INVALID_ALT_NUMBER;
        }
      }

      return alt;
    }
    /**
     * Add an edge to the DFA, if possible. This method calls
     * {@link //addDFAState} to ensure the {@code to} state is present in the
     * DFA. If {@code from} is {@code null}, or if {@code t} is outside the
     * range of edges that can be represented in the DFA tables, this method
     * returns without adding the edge to the DFA.
     *
     * <p>If {@code to} is {@code null}, this method returns {@code null}.
     * Otherwise, this method returns the {@link DFAState} returned by calling
     * {@link //addDFAState} for the {@code to} state.</p>
     *
     * @param dfa The DFA
     * @param from_ The source state for the edge
     * @param t The input symbol
     * @param to The target state for the edge
     *
     * @return If {@code to} is {@code null}, this method returns {@code null};
     * otherwise this method returns the result of calling {@link //addDFAState}
     * on {@code to}
     */

  }, {
    key: "addDFAEdge",
    value: function addDFAEdge(dfa, from_, t, to) {
      if (this.debug) {
        console.log("EDGE " + from_ + " -> " + to + " upon " + this.getTokenName(t));
      }

      if (to === null) {
        return null;
      }

      to = this.addDFAState(dfa, to); // used existing if possible not incoming

      if (from_ === null || t < -1 || t > this.atn.maxTokenType) {
        return to;
      }

      if (from_.edges === null) {
        from_.edges = [];
      }

      from_.edges[t + 1] = to; // connect

      if (this.debug) {
        var literalNames = this.parser === null ? null : this.parser.literalNames;
        var symbolicNames = this.parser === null ? null : this.parser.symbolicNames;
        console.log("DFA=\n" + dfa.toString(literalNames, symbolicNames));
      }

      return to;
    }
    /**
     * Add state {@code D} to the DFA if it is not already present, and return
     * the actual instance stored in the DFA. If a state equivalent to {@code D}
     * is already in the DFA, the existing state is returned. Otherwise this
     * method returns {@code D} after adding it to the DFA.
     *
     * <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and
     * does not change the DFA.</p>
     *
     * @param dfa The dfa
     * @param D The DFA state to add
     * @return The state stored in the DFA. This will be either the existing
     * state if {@code D} is already in the DFA, or {@code D} itself if the
     * state was not already present
     */

  }, {
    key: "addDFAState",
    value: function addDFAState(dfa, D) {
      if (D === _ATNSimulator2.default.ERROR) {
        return D;
      }

      var existing = dfa.states.get(D);

      if (existing !== null) {
        return existing;
      }

      D.stateNumber = dfa.states.length;

      if (!D.configs.readOnly) {
        D.configs.optimizeConfigs(this);
        D.configs.setReadonly(true);
      }

      dfa.states.add(D);

      if (this.debug) {
        console.log("adding new DFA state: " + D);
      }

      return D;
    }
  }, {
    key: "reportAttemptingFullContext",
    value: function reportAttemptingFullContext(dfa, conflictingAlts, configs, startIndex, stopIndex) {
      if (this.debug || this.retry_debug) {
        var interval = new _Interval.default(startIndex, stopIndex + 1);
        console.log("reportAttemptingFullContext decision=" + dfa.decision + ":" + configs + ", input=" + this.parser.getTokenStream().getText(interval));
      }

      if (this.parser !== null) {
        this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);
      }
    }
  }, {
    key: "reportContextSensitivity",
    value: function reportContextSensitivity(dfa, prediction, configs, startIndex, stopIndex) {
      if (this.debug || this.retry_debug) {
        var interval = new _Interval.default(startIndex, stopIndex + 1);
        console.log("reportContextSensitivity decision=" + dfa.decision + ":" + configs + ", input=" + this.parser.getTokenStream().getText(interval));
      }

      if (this.parser !== null) {
        this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);
      }
    } // If context sensitive parsing, we know it's ambiguity not conflict//

  }, {
    key: "reportAmbiguity",
    value: function reportAmbiguity(dfa, D, startIndex, stopIndex, exact, ambigAlts, configs) {
      if (this.debug || this.retry_debug) {
        var interval = new _Interval.default(startIndex, stopIndex + 1);
        console.log("reportAmbiguity " + ambigAlts + ":" + configs + ", input=" + this.parser.getTokenStream().getText(interval));
      }

      if (this.parser !== null) {
        this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
      }
    }
  }]);

  return ParserATNSimulator;
}(_ATNSimulator2.default);

exports.default = ParserATNSimulator;
},{"./ATN.js":"VSBa","../state/ATNState.js":"BwnW","../state/RuleStopState.js":"WskT","./ATNConfig.js":"vzuf","./ATNConfigSet.js":"gGEg","../Token.js":"tczR","../dfa/DFAState.js":"PVAv","../dfa/PredPrediction.js":"cT9s","./ATNSimulator.js":"cOEd","./PredictionMode.js":"W7HO","../context/RuleContext.js":"WP8O","./SemanticContext.js":"fWJV","../context/PredictionContext.js":"QQ7c","../misc/Interval.js":"JCiE","../transition/Transition.js":"M4hi","../transition/SetTransition.js":"csAp","../transition/NotSetTransition.js":"kgAb","../transition/RuleTransition.js":"VKr2","../transition/ActionTransition.js":"KNa5","../error/NoViableAltException.js":"zWmB","../context/SingletonPredictionContext.js":"rrYw","../context/PredictionContextUtils.js":"D05O","../transition/AtomTransition.js":"EaJI","../utils/arrayToString.js":"oS3b","../misc/BitSet.js":"krtX","../utils/DoubleDict.js":"l46J","../misc/HashSet.js":"hSGu"}],"xE1o":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ATN = _interopRequireDefault(require("./ATN.js"));

var _ATNDeserializer = _interopRequireDefault(require("./ATNDeserializer.js"));

var _LexerATNSimulator = _interopRequireDefault(require("./LexerATNSimulator.js"));

var _ParserATNSimulator = _interopRequireDefault(require("./ParserATNSimulator.js"));

var _PredictionMode = _interopRequireDefault(require("./PredictionMode.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
var _default = {
  ATN: _ATN.default,
  ATNDeserializer: _ATNDeserializer.default,
  LexerATNSimulator: _LexerATNSimulator.default,
  ParserATNSimulator: _ParserATNSimulator.default,
  PredictionMode: _PredictionMode.default
};
exports.default = _default;
},{"./ATN.js":"VSBa","./ATNDeserializer.js":"qCvY","./LexerATNSimulator.js":"iM8L","./ParserATNSimulator.js":"dhlF","./PredictionMode.js":"W7HO"}],"qcea":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _arrayToString = _interopRequireDefault(require("../utils/arrayToString.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * A DFA walker that knows how to dump them to serialized strings.
 */
var DFASerializer = /*#__PURE__*/function () {
  function DFASerializer(dfa, literalNames, symbolicNames) {
    _classCallCheck(this, DFASerializer);

    this.dfa = dfa;
    this.literalNames = literalNames || [];
    this.symbolicNames = symbolicNames || [];
  }

  _createClass(DFASerializer, [{
    key: "toString",
    value: function toString() {
      if (this.dfa.s0 === null) {
        return null;
      }

      var buf = "";
      var states = this.dfa.sortedStates();

      for (var i = 0; i < states.length; i++) {
        var s = states[i];

        if (s.edges !== null) {
          var n = s.edges.length;

          for (var j = 0; j < n; j++) {
            var t = s.edges[j] || null;

            if (t !== null && t.stateNumber !== 0x7FFFFFFF) {
              buf = buf.concat(this.getStateString(s));
              buf = buf.concat("-");
              buf = buf.concat(this.getEdgeLabel(j));
              buf = buf.concat("->");
              buf = buf.concat(this.getStateString(t));
              buf = buf.concat('\n');
            }
          }
        }
      }

      return buf.length === 0 ? null : buf;
    }
  }, {
    key: "getEdgeLabel",
    value: function getEdgeLabel(i) {
      if (i === 0) {
        return "EOF";
      } else if (this.literalNames !== null || this.symbolicNames !== null) {
        return this.literalNames[i - 1] || this.symbolicNames[i - 1];
      } else {
        return String.fromCharCode(i - 1);
      }
    }
  }, {
    key: "getStateString",
    value: function getStateString(s) {
      var baseStateStr = (s.isAcceptState ? ":" : "") + "s" + s.stateNumber + (s.requiresFullContext ? "^" : "");

      if (s.isAcceptState) {
        if (s.predicates !== null) {
          return baseStateStr + "=>" + (0, _arrayToString.default)(s.predicates);
        } else {
          return baseStateStr + "=>" + s.prediction.toString();
        }
      } else {
        return baseStateStr;
      }
    }
  }]);

  return DFASerializer;
}();

exports.default = DFASerializer;
},{"../utils/arrayToString.js":"oS3b"}],"Q8ai":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _DFASerializer2 = _interopRequireDefault(require("./DFASerializer.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var LexerDFASerializer = /*#__PURE__*/function (_DFASerializer) {
  _inherits(LexerDFASerializer, _DFASerializer);

  var _super = _createSuper(LexerDFASerializer);

  function LexerDFASerializer(dfa) {
    _classCallCheck(this, LexerDFASerializer);

    return _super.call(this, dfa, null);
  }

  _createClass(LexerDFASerializer, [{
    key: "getEdgeLabel",
    value: function getEdgeLabel(i) {
      return "'" + String.fromCharCode(i) + "'";
    }
  }]);

  return LexerDFASerializer;
}(_DFASerializer2.default);

exports.default = LexerDFASerializer;
},{"./DFASerializer.js":"qcea"}],"oLMo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _DFAState = _interopRequireDefault(require("./DFAState.js"));

var _StarLoopEntryState = _interopRequireDefault(require("../state/StarLoopEntryState.js"));

var _ATNConfigSet = _interopRequireDefault(require("./../atn/ATNConfigSet.js"));

var _DFASerializer = _interopRequireDefault(require("./DFASerializer.js"));

var _LexerDFASerializer = _interopRequireDefault(require("./LexerDFASerializer.js"));

var _HashSet = _interopRequireDefault(require("../misc/HashSet.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var DFA = /*#__PURE__*/function () {
  function DFA(atnStartState, decision) {
    _classCallCheck(this, DFA);

    if (decision === undefined) {
      decision = 0;
    }
    /**
     * From which ATN state did we create this DFA?
     */


    this.atnStartState = atnStartState;
    this.decision = decision;
    /**
     * A set of all DFA states. Use {@link Map} so we can get old state back
     * ({@link Set} only allows you to see if it's there).
     */

    this._states = new _HashSet.default();
    this.s0 = null;
    /**
     * {@code true} if this DFA is for a precedence decision; otherwise,
     * {@code false}. This is the backing field for {@link //isPrecedenceDfa},
     * {@link //setPrecedenceDfa}
     */

    this.precedenceDfa = false;

    if (atnStartState instanceof _StarLoopEntryState.default) {
      if (atnStartState.isPrecedenceDecision) {
        this.precedenceDfa = true;
        var precedenceState = new _DFAState.default(null, new _ATNConfigSet.default());
        precedenceState.edges = [];
        precedenceState.isAcceptState = false;
        precedenceState.requiresFullContext = false;
        this.s0 = precedenceState;
      }
    }
  }
  /**
   * Get the start state for a specific precedence value.
   *
   * @param precedence The current precedence.
   * @return The start state corresponding to the specified precedence, or
   * {@code null} if no start state exists for the specified precedence.
   *
   * @throws IllegalStateException if this is not a precedence DFA.
   * @see //isPrecedenceDfa()
   */


  _createClass(DFA, [{
    key: "getPrecedenceStartState",
    value: function getPrecedenceStartState(precedence) {
      if (!this.precedenceDfa) {
        throw "Only precedence DFAs may contain a precedence start state.";
      } // s0.edges is never null for a precedence DFA


      if (precedence < 0 || precedence >= this.s0.edges.length) {
        return null;
      }

      return this.s0.edges[precedence] || null;
    }
    /**
     * Set the start state for a specific precedence value.
     *
     * @param precedence The current precedence.
     * @param startState The start state corresponding to the specified
     * precedence.
     *
     * @throws IllegalStateException if this is not a precedence DFA.
     * @see //isPrecedenceDfa()
     */

  }, {
    key: "setPrecedenceStartState",
    value: function setPrecedenceStartState(precedence, startState) {
      if (!this.precedenceDfa) {
        throw "Only precedence DFAs may contain a precedence start state.";
      }

      if (precedence < 0) {
        return;
      }
      /**
       * synchronization on s0 here is ok. when the DFA is turned into a
       * precedence DFA, s0 will be initialized once and not updated again
       * s0.edges is never null for a precedence DFA
       */


      this.s0.edges[precedence] = startState;
    }
    /**
     * Sets whether this is a precedence DFA. If the specified value differs
     * from the current DFA configuration, the following actions are taken;
     * otherwise no changes are made to the current DFA.
     *
     * <ul>
     * <li>The {@link //states} map is cleared</li>
     * <li>If {@code precedenceDfa} is {@code false}, the initial state
     * {@link //s0} is set to {@code null}; otherwise, it is initialized to a new
     * {@link DFAState} with an empty outgoing {@link DFAState//edges} array to
     * store the start states for individual precedence values.</li>
     * <li>The {@link //precedenceDfa} field is updated</li>
     * </ul>
     *
     * @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,
     * {@code false}
     */

  }, {
    key: "setPrecedenceDfa",
    value: function setPrecedenceDfa(precedenceDfa) {
      if (this.precedenceDfa !== precedenceDfa) {
        this._states = new _HashSet.default();

        if (precedenceDfa) {
          var precedenceState = new _DFAState.default(null, new _ATNConfigSet.default());
          precedenceState.edges = [];
          precedenceState.isAcceptState = false;
          precedenceState.requiresFullContext = false;
          this.s0 = precedenceState;
        } else {
          this.s0 = null;
        }

        this.precedenceDfa = precedenceDfa;
      }
    }
    /**
     * Return a list of all states in this DFA, ordered by state number.
     */

  }, {
    key: "sortedStates",
    value: function sortedStates() {
      var list = this._states.values();

      return list.sort(function (a, b) {
        return a.stateNumber - b.stateNumber;
      });
    }
  }, {
    key: "toString",
    value: function toString(literalNames, symbolicNames) {
      literalNames = literalNames || null;
      symbolicNames = symbolicNames || null;

      if (this.s0 === null) {
        return "";
      }

      var serializer = new _DFASerializer.default(this, literalNames, symbolicNames);
      return serializer.toString();
    }
  }, {
    key: "toLexerString",
    value: function toLexerString() {
      if (this.s0 === null) {
        return "";
      }

      var serializer = new _LexerDFASerializer.default(this);
      return serializer.toString();
    }
  }, {
    key: "states",
    get: function get() {
      return this._states;
    }
  }]);

  return DFA;
}();

exports.default = DFA;
},{"./DFAState.js":"PVAv","../state/StarLoopEntryState.js":"SMF9","./../atn/ATNConfigSet.js":"gGEg","./DFASerializer.js":"qcea","./LexerDFASerializer.js":"Q8ai","../misc/HashSet.js":"hSGu"}],"QEQl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _DFA = _interopRequireDefault(require("./DFA.js"));

var _DFASerializer = _interopRequireDefault(require("./DFASerializer.js"));

var _LexerDFASerializer = _interopRequireDefault(require("./LexerDFASerializer.js"));

var _PredPrediction = _interopRequireDefault(require("./PredPrediction.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
var _default = {
  DFA: _DFA.default,
  DFASerializer: _DFASerializer.default,
  LexerDFASerializer: _LexerDFASerializer.default,
  PredPrediction: _PredPrediction.default
};
exports.default = _default;
},{"./DFA.js":"oLMo","./DFASerializer.js":"qcea","./LexerDFASerializer.js":"Q8ai","./PredPrediction.js":"cT9s"}],"tbi1":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.
 * Use is of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
var ParseTreeListener = /*#__PURE__*/function () {
  function ParseTreeListener() {
    _classCallCheck(this, ParseTreeListener);
  }

  _createClass(ParseTreeListener, [{
    key: "visitTerminal",
    value: function visitTerminal(node) {}
  }, {
    key: "visitErrorNode",
    value: function visitErrorNode(node) {}
  }, {
    key: "enterEveryRule",
    value: function enterEveryRule(node) {}
  }, {
    key: "exitEveryRule",
    value: function exitEveryRule(node) {}
  }]);

  return ParseTreeListener;
}();

exports.default = ParseTreeListener;
},{}],"iM0A":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.
 * Use is of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
var ParseTreeVisitor = /*#__PURE__*/function () {
  function ParseTreeVisitor() {
    _classCallCheck(this, ParseTreeVisitor);
  }

  _createClass(ParseTreeVisitor, [{
    key: "visit",
    value: function visit(ctx) {
      if (Array.isArray(ctx)) {
        return ctx.map(function (child) {
          return child.accept(this);
        }, this);
      } else {
        return ctx.accept(this);
      }
    }
  }, {
    key: "visitChildren",
    value: function visitChildren(ctx) {
      if (ctx.children) {
        return this.visit(ctx.children);
      } else {
        return null;
      }
    }
  }, {
    key: "visitTerminal",
    value: function visitTerminal(node) {}
  }, {
    key: "visitErrorNode",
    value: function visitErrorNode(node) {}
  }]);

  return ParseTreeVisitor;
}();

exports.default = ParseTreeVisitor;
},{}],"pw9v":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _TerminalNode = _interopRequireDefault(require("./TerminalNode.js"));

var _ErrorNode = _interopRequireDefault(require("./ErrorNode.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var ParseTreeWalker = /*#__PURE__*/function () {
  function ParseTreeWalker() {
    _classCallCheck(this, ParseTreeWalker);
  }

  _createClass(ParseTreeWalker, [{
    key: "walk",
    value:
    /**
     * Performs a walk on the given parse tree starting at the root and going down recursively
     * with depth-first search. On each node, {@link ParseTreeWalker//enterRule} is called before
     * recursively walking down into child nodes, then
     * {@link ParseTreeWalker//exitRule} is called after the recursive call to wind up.
     * @param listener The listener used by the walker to process grammar rules
     * @param t The parse tree to be walked on
     */
    function walk(listener, t) {
      var errorNode = t instanceof _ErrorNode.default || t.isErrorNode !== undefined && t.isErrorNode();

      if (errorNode) {
        listener.visitErrorNode(t);
      } else if (t instanceof _TerminalNode.default) {
        listener.visitTerminal(t);
      } else {
        this.enterRule(listener, t);

        for (var i = 0; i < t.getChildCount(); i++) {
          var child = t.getChild(i);
          this.walk(listener, child);
        }

        this.exitRule(listener, t);
      }
    }
    /**
     * Enters a grammar rule by first triggering the generic event {@link ParseTreeListener//enterEveryRule}
     * then by triggering the event specific to the given parse tree node
     * @param listener The listener responding to the trigger events
     * @param r The grammar rule containing the rule context
     */

  }, {
    key: "enterRule",
    value: function enterRule(listener, r) {
      var ctx = r.getRuleContext();
      listener.enterEveryRule(ctx);
      ctx.enterRule(listener);
    }
    /**
     * Exits a grammar rule by first triggering the event specific to the given parse tree node
     * then by triggering the generic event {@link ParseTreeListener//exitEveryRule}
     * @param listener The listener responding to the trigger events
     * @param r The grammar rule containing the rule context
     */

  }, {
    key: "exitRule",
    value: function exitRule(listener, r) {
      var ctx = r.getRuleContext();
      ctx.exitRule(listener);
      listener.exitEveryRule(ctx);
    }
  }]);

  return ParseTreeWalker;
}();

exports.default = ParseTreeWalker;
ParseTreeWalker.DEFAULT = new ParseTreeWalker();
},{"./TerminalNode.js":"GZ6H","./ErrorNode.js":"UIKP"}],"WBG3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _RuleNode = _interopRequireDefault(require("./RuleNode.js"));

var _ErrorNode = _interopRequireDefault(require("./ErrorNode.js"));

var _TerminalNode = _interopRequireDefault(require("./TerminalNode.js"));

var _ParseTreeListener = _interopRequireDefault(require("./ParseTreeListener.js"));

var _ParseTreeVisitor = _interopRequireDefault(require("./ParseTreeVisitor.js"));

var _ParseTreeWalker = _interopRequireDefault(require("./ParseTreeWalker.js"));

var _Trees = _interopRequireDefault(require("./Trees.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
var _default = {
  Trees: _Trees.default,
  RuleNode: _RuleNode.default,
  ErrorNode: _ErrorNode.default,
  TerminalNode: _TerminalNode.default,
  ParseTreeListener: _ParseTreeListener.default,
  ParseTreeVisitor: _ParseTreeVisitor.default,
  ParseTreeWalker: _ParseTreeWalker.default
};
exports.default = _default;
},{"./RuleNode.js":"AQV4","./ErrorNode.js":"UIKP","./TerminalNode.js":"GZ6H","./ParseTreeListener.js":"tbi1","./ParseTreeVisitor.js":"iM0A","./ParseTreeWalker.js":"pw9v","./Trees.js":"gLxX"}],"OZzw":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _RecognitionException2 = _interopRequireDefault(require("./RecognitionException.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * This signifies any kind of mismatched input exceptions such as
 * when the current input does not match the expected token.
 */
var InputMismatchException = /*#__PURE__*/function (_RecognitionException) {
  _inherits(InputMismatchException, _RecognitionException);

  var _super = _createSuper(InputMismatchException);

  function InputMismatchException(recognizer) {
    var _this;

    _classCallCheck(this, InputMismatchException);

    _this = _super.call(this, {
      message: "",
      recognizer: recognizer,
      input: recognizer.getInputStream(),
      ctx: recognizer._ctx
    });
    _this.offendingToken = recognizer.getCurrentToken();
    return _this;
  }

  return _createClass(InputMismatchException);
}(_RecognitionException2.default);

exports.default = InputMismatchException;
},{"./RecognitionException.js":"pFqq"}],"XnkP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _PredicateTransition = _interopRequireDefault(require("../transition/PredicateTransition.js"));

var _RecognitionException2 = _interopRequireDefault(require("./RecognitionException.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * A semantic predicate failed during validation. Validation of predicates
 * occurs when normally parsing the alternative just like matching a token.
 * Disambiguating predicate evaluation occurs when we test a predicate during
 * prediction.
 */
var FailedPredicateException = /*#__PURE__*/function (_RecognitionException) {
  _inherits(FailedPredicateException, _RecognitionException);

  var _super = _createSuper(FailedPredicateException);

  function FailedPredicateException(recognizer, predicate, message) {
    var _this;

    _classCallCheck(this, FailedPredicateException);

    _this = _super.call(this, {
      message: formatMessage(predicate, message || null),
      recognizer: recognizer,
      input: recognizer.getInputStream(),
      ctx: recognizer._ctx
    });
    var s = recognizer._interp.atn.states[recognizer.state];
    var trans = s.transitions[0];

    if (trans instanceof _PredicateTransition.default) {
      _this.ruleIndex = trans.ruleIndex;
      _this.predicateIndex = trans.predIndex;
    } else {
      _this.ruleIndex = 0;
      _this.predicateIndex = 0;
    }

    _this.predicate = predicate;
    _this.offendingToken = recognizer.getCurrentToken();
    return _this;
  }

  return _createClass(FailedPredicateException);
}(_RecognitionException2.default);

exports.default = FailedPredicateException;

function formatMessage(predicate, message) {
  if (message !== null) {
    return message;
  } else {
    return "failed predicate: {" + predicate + "}?";
  }
}
},{"../transition/PredicateTransition.js":"Umms","./RecognitionException.js":"pFqq"}],"FFkc":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ErrorListener2 = _interopRequireDefault(require("./ErrorListener.js"));

var _Interval = _interopRequireDefault(require("../misc/Interval.js"));

var _BitSet = _interopRequireDefault(require("../misc/BitSet.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * This implementation of {@link ANTLRErrorListener} can be used to identify
 *  certain potential correctness and performance problems in grammars. "Reports"
 *  are made by calling {@link Parser//notifyErrorListeners} with the appropriate
 *  message.
 *
 *  <ul>
 *  <li><b>Ambiguities</b>: These are cases where more than one path through the
 *  grammar can match the input.</li>
 *  <li><b>Weak context sensitivity</b>: These are cases where full-context
 *  prediction resolved an SLL conflict to a unique alternative which equaled the
 *  minimum alternative of the SLL conflict.</li>
 *  <li><b>Strong (forced) context sensitivity</b>: These are cases where the
 *  full-context prediction resolved an SLL conflict to a unique alternative,
 *  <em>and</em> the minimum alternative of the SLL conflict was found to not be
 *  a truly viable alternative. Two-stage parsing cannot be used for inputs where
 *  this situation occurs.</li>
 *  </ul>
 */
var DiagnosticErrorListener = /*#__PURE__*/function (_ErrorListener) {
  _inherits(DiagnosticErrorListener, _ErrorListener);

  var _super = _createSuper(DiagnosticErrorListener);

  function DiagnosticErrorListener(exactOnly) {
    var _this;

    _classCallCheck(this, DiagnosticErrorListener);

    _this = _super.call(this);
    exactOnly = exactOnly || true; // whether all ambiguities or only exact ambiguities are reported.

    _this.exactOnly = exactOnly;
    return _this;
  }

  _createClass(DiagnosticErrorListener, [{
    key: "reportAmbiguity",
    value: function reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
      if (this.exactOnly && !exact) {
        return;
      }

      var msg = "reportAmbiguity d=" + this.getDecisionDescription(recognizer, dfa) + ": ambigAlts=" + this.getConflictingAlts(ambigAlts, configs) + ", input='" + recognizer.getTokenStream().getText(new _Interval.default(startIndex, stopIndex)) + "'";
      recognizer.notifyErrorListeners(msg);
    }
  }, {
    key: "reportAttemptingFullContext",
    value: function reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
      var msg = "reportAttemptingFullContext d=" + this.getDecisionDescription(recognizer, dfa) + ", input='" + recognizer.getTokenStream().getText(new _Interval.default(startIndex, stopIndex)) + "'";
      recognizer.notifyErrorListeners(msg);
    }
  }, {
    key: "reportContextSensitivity",
    value: function reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
      var msg = "reportContextSensitivity d=" + this.getDecisionDescription(recognizer, dfa) + ", input='" + recognizer.getTokenStream().getText(new _Interval.default(startIndex, stopIndex)) + "'";
      recognizer.notifyErrorListeners(msg);
    }
  }, {
    key: "getDecisionDescription",
    value: function getDecisionDescription(recognizer, dfa) {
      var decision = dfa.decision;
      var ruleIndex = dfa.atnStartState.ruleIndex;
      var ruleNames = recognizer.ruleNames;

      if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {
        return "" + decision;
      }

      var ruleName = ruleNames[ruleIndex] || null;

      if (ruleName === null || ruleName.length === 0) {
        return "" + decision;
      }

      return "".concat(decision, " (").concat(ruleName, ")");
    }
    /**
     * Computes the set of conflicting or ambiguous alternatives from a
     * configuration set, if that information was not already provided by the
     * parser.
     *
     * @param reportedAlts The set of conflicting or ambiguous alternatives, as
     * reported by the parser.
     * @param configs The conflicting or ambiguous configuration set.
     * @return Returns {@code reportedAlts} if it is not {@code null}, otherwise
     * returns the set of alternatives represented in {@code configs}.
        */

  }, {
    key: "getConflictingAlts",
    value: function getConflictingAlts(reportedAlts, configs) {
      if (reportedAlts !== null) {
        return reportedAlts;
      }

      var result = new _BitSet.default();

      for (var i = 0; i < configs.items.length; i++) {
        result.add(configs.items[i].alt);
      }

      return "{".concat(result.values().join(", "), "}");
    }
  }]);

  return DiagnosticErrorListener;
}(_ErrorListener2.default);

exports.default = DiagnosticErrorListener;
},{"./ErrorListener.js":"Ov3t","../misc/Interval.js":"JCiE","../misc/BitSet.js":"krtX"}],"CwOG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.
 * Use is of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
var ParseCancellationException = /*#__PURE__*/function (_Error) {
  _inherits(ParseCancellationException, _Error);

  var _super = _createSuper(ParseCancellationException);

  function ParseCancellationException() {
    var _this;

    _classCallCheck(this, ParseCancellationException);

    _this = _super.call(this);
    Error.captureStackTrace(_assertThisInitialized(_this), ParseCancellationException);
    return _this;
  }

  return _createClass(ParseCancellationException);
}( /*#__PURE__*/_wrapNativeSuper(Error));

exports.default = ParseCancellationException;
},{}],"QVxP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
var ErrorStrategy = /*#__PURE__*/function () {
  function ErrorStrategy() {
    _classCallCheck(this, ErrorStrategy);
  }

  _createClass(ErrorStrategy, [{
    key: "reset",
    value: function reset(recognizer) {}
  }, {
    key: "recoverInline",
    value: function recoverInline(recognizer) {}
  }, {
    key: "recover",
    value: function recover(recognizer, e) {}
  }, {
    key: "sync",
    value: function sync(recognizer) {}
  }, {
    key: "inErrorRecoveryMode",
    value: function inErrorRecoveryMode(recognizer) {}
  }, {
    key: "reportError",
    value: function reportError(recognizer) {}
  }]);

  return ErrorStrategy;
}();

exports.default = ErrorStrategy;
},{}],"sSlT":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _FailedPredicateException = _interopRequireDefault(require("./FailedPredicateException.js"));

var _InputMismatchException = _interopRequireDefault(require("./InputMismatchException.js"));

var _NoViableAltException = _interopRequireDefault(require("./NoViableAltException.js"));

var _ATNState = _interopRequireDefault(require("../state/ATNState.js"));

var _Token = _interopRequireDefault(require("../Token.js"));

var _Interval = _interopRequireDefault(require("../misc/Interval.js"));

var _IntervalSet = _interopRequireDefault(require("../misc/IntervalSet.js"));

var _ErrorStrategy2 = _interopRequireDefault(require("./ErrorStrategy.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * This is the default implementation of {@link ANTLRErrorStrategy} used for
 * error reporting and recovery in ANTLR parsers.
 */
var DefaultErrorStrategy = /*#__PURE__*/function (_ErrorStrategy) {
  _inherits(DefaultErrorStrategy, _ErrorStrategy);

  var _super = _createSuper(DefaultErrorStrategy);

  function DefaultErrorStrategy() {
    var _this;

    _classCallCheck(this, DefaultErrorStrategy);

    _this = _super.call(this);
    /**
     * Indicates whether the error strategy is currently "recovering from an
     * error". This is used to suppress reporting multiple error messages while
     * attempting to recover from a detected syntax error.
     *
     * @see //inErrorRecoveryMode
     */

    _this.errorRecoveryMode = false;
    /**
     * The index into the input stream where the last error occurred.
     * This is used to prevent infinite loops where an error is found
     * but no token is consumed during recovery...another error is found,
     * ad nauseum. This is a failsafe mechanism to guarantee that at least
     * one token/tree node is consumed for two errors.
     */

    _this.lastErrorIndex = -1;
    _this.lastErrorStates = null;
    _this.nextTokensContext = null;
    _this.nextTokenState = 0;
    return _this;
  }
  /**
   * <p>The default implementation simply calls {@link //endErrorCondition} to
   * ensure that the handler is not in error recovery mode.</p>
   */


  _createClass(DefaultErrorStrategy, [{
    key: "reset",
    value: function reset(recognizer) {
      this.endErrorCondition(recognizer);
    }
    /**
     * This method is called to enter error recovery mode when a recognition
     * exception is reported.
     *
     * @param recognizer the parser instance
     */

  }, {
    key: "beginErrorCondition",
    value: function beginErrorCondition(recognizer) {
      this.errorRecoveryMode = true;
    }
  }, {
    key: "inErrorRecoveryMode",
    value: function inErrorRecoveryMode(recognizer) {
      return this.errorRecoveryMode;
    }
    /**
     * This method is called to leave error recovery mode after recovering from
     * a recognition exception.
     * @param recognizer
     */

  }, {
    key: "endErrorCondition",
    value: function endErrorCondition(recognizer) {
      this.errorRecoveryMode = false;
      this.lastErrorStates = null;
      this.lastErrorIndex = -1;
    }
    /**
     * {@inheritDoc}
     * <p>The default implementation simply calls {@link //endErrorCondition}.</p>
     */

  }, {
    key: "reportMatch",
    value: function reportMatch(recognizer) {
      this.endErrorCondition(recognizer);
    }
    /**
     * {@inheritDoc}
     *
     * <p>The default implementation returns immediately if the handler is already
     * in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}
     * and dispatches the reporting task based on the runtime type of {@code e}
     * according to the following table.</p>
     *
     * <ul>
     * <li>{@link NoViableAltException}: Dispatches the call to
     * {@link //reportNoViableAlternative}</li>
     * <li>{@link InputMismatchException}: Dispatches the call to
     * {@link //reportInputMismatch}</li>
     * <li>{@link FailedPredicateException}: Dispatches the call to
     * {@link //reportFailedPredicate}</li>
     * <li>All other types: calls {@link Parser//notifyErrorListeners} to report
     * the exception</li>
     * </ul>
     */

  }, {
    key: "reportError",
    value: function reportError(recognizer, e) {
      // if we've already reported an error and have not matched a token
      // yet successfully, don't report any errors.
      if (this.inErrorRecoveryMode(recognizer)) {
        return; // don't report spurious errors
      }

      this.beginErrorCondition(recognizer);

      if (e instanceof _NoViableAltException.default) {
        this.reportNoViableAlternative(recognizer, e);
      } else if (e instanceof _InputMismatchException.default) {
        this.reportInputMismatch(recognizer, e);
      } else if (e instanceof _FailedPredicateException.default) {
        this.reportFailedPredicate(recognizer, e);
      } else {
        console.log("unknown recognition error type: " + e.constructor.name);
        console.log(e.stack);
        recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);
      }
    }
    /**
     *
     * {@inheritDoc}
     *
     * <p>The default implementation resynchronizes the parser by consuming tokens
     * until we find one in the resynchronization set--loosely the set of tokens
     * that can follow the current rule.</p>
     *
     */

  }, {
    key: "recover",
    value: function recover(recognizer, e) {
      if (this.lastErrorIndex === recognizer.getInputStream().index && this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state) >= 0) {
        // uh oh, another error at same token index and previously-visited
        // state in ATN; must be a case where LT(1) is in the recovery
        // token set so nothing got consumed. Consume a single token
        // at least to prevent an infinite loop; this is a failsafe.
        recognizer.consume();
      }

      this.lastErrorIndex = recognizer._input.index;

      if (this.lastErrorStates === null) {
        this.lastErrorStates = [];
      }

      this.lastErrorStates.push(recognizer.state);
      var followSet = this.getErrorRecoverySet(recognizer);
      this.consumeUntil(recognizer, followSet);
    }
    /**
     * The default implementation of {@link ANTLRErrorStrategy//sync} makes sure
     * that the current lookahead symbol is consistent with what were expecting
     * at this point in the ATN. You can call this anytime but ANTLR only
     * generates code to check before subrules/loops and each iteration.
     *
     * <p>Implements Jim Idle's magic sync mechanism in closures and optional
     * subrules. E.g.,</p>
     *
     * <pre>
     * a : sync ( stuff sync )* ;
     * sync : {consume to what can follow sync} ;
     * </pre>
     *
     * At the start of a sub rule upon error, {@link //sync} performs single
     * token deletion, if possible. If it can't do that, it bails on the current
     * rule and uses the default error recovery, which consumes until the
     * resynchronization set of the current rule.
     *
     * <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block
     * with an empty alternative), then the expected set includes what follows
     * the subrule.</p>
     *
     * <p>During loop iteration, it consumes until it sees a token that can start a
     * sub rule or what follows loop. Yes, that is pretty aggressive. We opt to
     * stay in the loop as long as possible.</p>
     *
     * <p><strong>ORIGINS</strong></p>
     *
     * <p>Previous versions of ANTLR did a poor job of their recovery within loops.
     * A single mismatch token or missing token would force the parser to bail
     * out of the entire rules surrounding the loop. So, for rule</p>
     *
     * <pre>
     * classDef : 'class' ID '{' member* '}'
     * </pre>
     *
     * input with an extra token between members would force the parser to
     * consume until it found the next class definition rather than the next
     * member definition of the current class.
     *
     * <p>This functionality cost a little bit of effort because the parser has to
     * compare token set at the start of the loop and at each iteration. If for
     * some reason speed is suffering for you, you can turn off this
     * functionality by simply overriding this method as a blank { }.</p>
     *
     */

  }, {
    key: "sync",
    value: function sync(recognizer) {
      // If already recovering, don't try to sync
      if (this.inErrorRecoveryMode(recognizer)) {
        return;
      }

      var s = recognizer._interp.atn.states[recognizer.state];
      var la = recognizer.getTokenStream().LA(1); // try cheaper subset first; might get lucky. seems to shave a wee bit off

      var nextTokens = recognizer.atn.nextTokens(s);

      if (nextTokens.contains(la)) {
        this.nextTokensContext = null;
        this.nextTokenState = _ATNState.default.INVALID_STATE_NUMBER;
        return;
      } else if (nextTokens.contains(_Token.default.EPSILON)) {
        if (this.nextTokensContext === null) {
          // It's possible the next token won't match information tracked
          // by sync is restricted for performance.
          this.nextTokensContext = recognizer._ctx;
          this.nextTokensState = recognizer._stateNumber;
        }

        return;
      }

      switch (s.stateType) {
        case _ATNState.default.BLOCK_START:
        case _ATNState.default.STAR_BLOCK_START:
        case _ATNState.default.PLUS_BLOCK_START:
        case _ATNState.default.STAR_LOOP_ENTRY:
          // report error and recover if possible
          if (this.singleTokenDeletion(recognizer) !== null) {
            return;
          } else {
            throw new _InputMismatchException.default(recognizer);
          }

        case _ATNState.default.PLUS_LOOP_BACK:
        case _ATNState.default.STAR_LOOP_BACK:
          {
            this.reportUnwantedToken(recognizer);
            var expecting = new _IntervalSet.default();
            expecting.addSet(recognizer.getExpectedTokens());
            var whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer));
            this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);
          }
          break;

        default: // do nothing if we can't identify the exact kind of ATN state

      }
    }
    /**
     * This is called by {@link //reportError} when the exception is a
     * {@link NoViableAltException}.
     *
     * @see //reportError
     *
     * @param recognizer the parser instance
     * @param e the recognition exception
     */

  }, {
    key: "reportNoViableAlternative",
    value: function reportNoViableAlternative(recognizer, e) {
      var tokens = recognizer.getTokenStream();
      var input;

      if (tokens !== null) {
        if (e.startToken.type === _Token.default.EOF) {
          input = "<EOF>";
        } else {
          input = tokens.getText(new _Interval.default(e.startToken.tokenIndex, e.offendingToken.tokenIndex));
        }
      } else {
        input = "<unknown input>";
      }

      var msg = "no viable alternative at input " + this.escapeWSAndQuote(input);
      recognizer.notifyErrorListeners(msg, e.offendingToken, e);
    }
    /**
     * This is called by {@link //reportError} when the exception is an
     * {@link InputMismatchException}.
     *
     * @see //reportError
     *
     * @param recognizer the parser instance
     * @param e the recognition exception
     */

  }, {
    key: "reportInputMismatch",
    value: function reportInputMismatch(recognizer, e) {
      var msg = "mismatched input " + this.getTokenErrorDisplay(e.offendingToken) + " expecting " + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames);
      recognizer.notifyErrorListeners(msg, e.offendingToken, e);
    }
    /**
     * This is called by {@link //reportError} when the exception is a
     * {@link FailedPredicateException}.
     *
     * @see //reportError
     *
     * @param recognizer the parser instance
     * @param e the recognition exception
     */

  }, {
    key: "reportFailedPredicate",
    value: function reportFailedPredicate(recognizer, e) {
      var ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex];
      var msg = "rule " + ruleName + " " + e.message;
      recognizer.notifyErrorListeners(msg, e.offendingToken, e);
    }
    /**
     * This method is called to report a syntax error which requires the removal
     * of a token from the input stream. At the time this method is called, the
     * erroneous symbol is current {@code LT(1)} symbol and has not yet been
     * removed from the input stream. When this method returns,
     * {@code recognizer} is in error recovery mode.
     *
     * <p>This method is called when {@link //singleTokenDeletion} identifies
     * single-token deletion as a viable recovery strategy for a mismatched
     * input error.</p>
     *
     * <p>The default implementation simply returns if the handler is already in
     * error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
     * enter error recovery mode, followed by calling
     * {@link Parser//notifyErrorListeners}.</p>
     *
     * @param recognizer the parser instance
     *
     */

  }, {
    key: "reportUnwantedToken",
    value: function reportUnwantedToken(recognizer) {
      if (this.inErrorRecoveryMode(recognizer)) {
        return;
      }

      this.beginErrorCondition(recognizer);
      var t = recognizer.getCurrentToken();
      var tokenName = this.getTokenErrorDisplay(t);
      var expecting = this.getExpectedTokens(recognizer);
      var msg = "extraneous input " + tokenName + " expecting " + expecting.toString(recognizer.literalNames, recognizer.symbolicNames);
      recognizer.notifyErrorListeners(msg, t, null);
    }
    /**
     * This method is called to report a syntax error which requires the
     * insertion of a missing token into the input stream. At the time this
     * method is called, the missing token has not yet been inserted. When this
     * method returns, {@code recognizer} is in error recovery mode.
     *
     * <p>This method is called when {@link //singleTokenInsertion} identifies
     * single-token insertion as a viable recovery strategy for a mismatched
     * input error.</p>
     *
     * <p>The default implementation simply returns if the handler is already in
     * error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
     * enter error recovery mode, followed by calling
     * {@link Parser//notifyErrorListeners}.</p>
     *
     * @param recognizer the parser instance
     */

  }, {
    key: "reportMissingToken",
    value: function reportMissingToken(recognizer) {
      if (this.inErrorRecoveryMode(recognizer)) {
        return;
      }

      this.beginErrorCondition(recognizer);
      var t = recognizer.getCurrentToken();
      var expecting = this.getExpectedTokens(recognizer);
      var msg = "missing " + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) + " at " + this.getTokenErrorDisplay(t);
      recognizer.notifyErrorListeners(msg, t, null);
    }
    /**
     * <p>The default implementation attempts to recover from the mismatched input
     * by using single token insertion and deletion as described below. If the
     * recovery attempt fails, this method throws an
     * {@link InputMismatchException}.</p>
     *
     * <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>
     *
     * <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the
     * right token, however, then assume {@code LA(1)} is some extra spurious
     * token and delete it. Then consume and return the next token (which was
     * the {@code LA(2)} token) as the successful result of the match operation.</p>
     *
     * <p>This recovery strategy is implemented by {@link
        * //singleTokenDeletion}.</p>
     *
     * <p><strong>MISSING TOKEN</strong> (single token insertion)</p>
     *
     * <p>If current token (at {@code LA(1)}) is consistent with what could come
     * after the expected {@code LA(1)} token, then assume the token is missing
     * and use the parser's {@link TokenFactory} to create it on the fly. The
     * "insertion" is performed by returning the created token as the successful
     * result of the match operation.</p>
     *
     * <p>This recovery strategy is implemented by {@link
        * //singleTokenInsertion}.</p>
     *
     * <p><strong>EXAMPLE</strong></p>
     *
     * <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When
     * the parser returns from the nested call to {@code expr}, it will have
     * call chain:</p>
     *
     * <pre>
     * stat &rarr; expr &rarr; atom
     * </pre>
     *
     * and it will be trying to match the {@code ')'} at this point in the
     * derivation:
     *
     * <pre>
     * =&gt; ID '=' '(' INT ')' ('+' atom)* ';'
     * ^
     * </pre>
     *
     * The attempt to match {@code ')'} will fail when it sees {@code ';'} and
     * call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}
     * is in the set of tokens that can follow the {@code ')'} token reference
     * in rule {@code atom}. It can assume that you forgot the {@code ')'}.
     */

  }, {
    key: "recoverInline",
    value: function recoverInline(recognizer) {
      // SINGLE TOKEN DELETION
      var matchedSymbol = this.singleTokenDeletion(recognizer);

      if (matchedSymbol !== null) {
        // we have deleted the extra token.
        // now, move past ttype token as if all were ok
        recognizer.consume();
        return matchedSymbol;
      } // SINGLE TOKEN INSERTION


      if (this.singleTokenInsertion(recognizer)) {
        return this.getMissingSymbol(recognizer);
      } // even that didn't work; must throw the exception


      throw new _InputMismatchException.default(recognizer);
    }
    /**
     * This method implements the single-token insertion inline error recovery
     * strategy. It is called by {@link //recoverInline} if the single-token
     * deletion strategy fails to recover from the mismatched input. If this
     * method returns {@code true}, {@code recognizer} will be in error recovery
     * mode.
     *
     * <p>This method determines whether or not single-token insertion is viable by
     * checking if the {@code LA(1)} input symbol could be successfully matched
     * if it were instead the {@code LA(2)} symbol. If this method returns
     * {@code true}, the caller is responsible for creating and inserting a
     * token with the correct type to produce this behavior.</p>
     *
     * @param recognizer the parser instance
     * @return {@code true} if single-token insertion is a viable recovery
     * strategy for the current mismatched input, otherwise {@code false}
     */

  }, {
    key: "singleTokenInsertion",
    value: function singleTokenInsertion(recognizer) {
      var currentSymbolType = recognizer.getTokenStream().LA(1); // if current token is consistent with what could come after current
      // ATN state, then we know we're missing a token; error recovery
      // is free to conjure up and insert the missing token

      var atn = recognizer._interp.atn;
      var currentState = atn.states[recognizer.state];
      var next = currentState.transitions[0].target;
      var expectingAtLL2 = atn.nextTokens(next, recognizer._ctx);

      if (expectingAtLL2.contains(currentSymbolType)) {
        this.reportMissingToken(recognizer);
        return true;
      } else {
        return false;
      }
    }
    /**
     * This method implements the single-token deletion inline error recovery
     * strategy. It is called by {@link //recoverInline} to attempt to recover
     * from mismatched input. If this method returns null, the parser and error
     * handler state will not have changed. If this method returns non-null,
     * {@code recognizer} will <em>not</em> be in error recovery mode since the
     * returned token was a successful match.
     *
     * <p>If the single-token deletion is successful, this method calls
     * {@link //reportUnwantedToken} to report the error, followed by
     * {@link Parser//consume} to actually "delete" the extraneous token. Then,
     * before returning {@link //reportMatch} is called to signal a successful
     * match.</p>
     *
     * @param recognizer the parser instance
     * @return the successfully matched {@link Token} instance if single-token
     * deletion successfully recovers from the mismatched input, otherwise
     * {@code null}
     */

  }, {
    key: "singleTokenDeletion",
    value: function singleTokenDeletion(recognizer) {
      var nextTokenType = recognizer.getTokenStream().LA(2);
      var expecting = this.getExpectedTokens(recognizer);

      if (expecting.contains(nextTokenType)) {
        this.reportUnwantedToken(recognizer); // print("recoverFromMismatchedToken deleting " \
        // + str(recognizer.getTokenStream().LT(1)) \
        // + " since " + str(recognizer.getTokenStream().LT(2)) \
        // + " is what we want", file=sys.stderr)

        recognizer.consume(); // simply delete extra token
        // we want to return the token we're actually matching

        var matchedSymbol = recognizer.getCurrentToken();
        this.reportMatch(recognizer); // we know current token is correct

        return matchedSymbol;
      } else {
        return null;
      }
    }
    /**
     * Conjure up a missing token during error recovery.
     *
     * The recognizer attempts to recover from single missing
     * symbols. But, actions might refer to that missing symbol.
     * For example, x=ID {f($x);}. The action clearly assumes
     * that there has been an identifier matched previously and that
     * $x points at that token. If that token is missing, but
     * the next token in the stream is what we want we assume that
     * this token is missing and we keep going. Because we
     * have to return some token to replace the missing token,
     * we have to conjure one up. This method gives the user control
     * over the tokens returned for missing tokens. Mostly,
     * you will want to create something special for identifier
     * tokens. For literals such as '{' and ',', the default
     * action in the parser or tree parser works. It simply creates
     * a CommonToken of the appropriate type. The text will be the token.
     * If you change what tokens must be created by the lexer,
     * override this method to create the appropriate tokens.
     *
     */

  }, {
    key: "getMissingSymbol",
    value: function getMissingSymbol(recognizer) {
      var currentSymbol = recognizer.getCurrentToken();
      var expecting = this.getExpectedTokens(recognizer);
      var expectedTokenType = expecting.first(); // get any element

      var tokenText;

      if (expectedTokenType === _Token.default.EOF) {
        tokenText = "<missing EOF>";
      } else {
        tokenText = "<missing " + recognizer.literalNames[expectedTokenType] + ">";
      }

      var current = currentSymbol;
      var lookback = recognizer.getTokenStream().LT(-1);

      if (current.type === _Token.default.EOF && lookback !== null) {
        current = lookback;
      }

      return recognizer.getTokenFactory().create(current.source, expectedTokenType, tokenText, _Token.default.DEFAULT_CHANNEL, -1, -1, current.line, current.column);
    }
  }, {
    key: "getExpectedTokens",
    value: function getExpectedTokens(recognizer) {
      return recognizer.getExpectedTokens();
    }
    /**
     * How should a token be displayed in an error message? The default
     * is to display just the text, but during development you might
     * want to have a lot of information spit out. Override in that case
     * to use t.toString() (which, for CommonToken, dumps everything about
     * the token). This is better than forcing you to override a method in
     * your token objects because you don't have to go modify your lexer
     * so that it creates a new Java type.
     */

  }, {
    key: "getTokenErrorDisplay",
    value: function getTokenErrorDisplay(t) {
      if (t === null) {
        return "<no token>";
      }

      var s = t.text;

      if (s === null) {
        if (t.type === _Token.default.EOF) {
          s = "<EOF>";
        } else {
          s = "<" + t.type + ">";
        }
      }

      return this.escapeWSAndQuote(s);
    }
  }, {
    key: "escapeWSAndQuote",
    value: function escapeWSAndQuote(s) {
      s = s.replace(/\n/g, "\\n");
      s = s.replace(/\r/g, "\\r");
      s = s.replace(/\t/g, "\\t");
      return "'" + s + "'";
    }
    /**
     * Compute the error recovery set for the current rule. During
     * rule invocation, the parser pushes the set of tokens that can
     * follow that rule reference on the stack; this amounts to
     * computing FIRST of what follows the rule reference in the
     * enclosing rule. See LinearApproximator.FIRST().
     * This local follow set only includes tokens
     * from within the rule; i.e., the FIRST computation done by
     * ANTLR stops at the end of a rule.
     *
     * EXAMPLE
     *
     * When you find a "no viable alt exception", the input is not
     * consistent with any of the alternatives for rule r. The best
     * thing to do is to consume tokens until you see something that
     * can legally follow a call to r//or* any rule that called r.
     * You don't want the exact set of viable next tokens because the
     * input might just be missing a token--you might consume the
     * rest of the input looking for one of the missing tokens.
     *
     * Consider grammar:
     *
     * a : '[' b ']'
     * | '(' b ')'
     * ;
     * b : c '^' INT ;
     * c : ID
     * | INT
     * ;
     *
     * At each rule invocation, the set of tokens that could follow
     * that rule is pushed on a stack. Here are the various
     * context-sensitive follow sets:
     *
     * FOLLOW(b1_in_a) = FIRST(']') = ']'
     * FOLLOW(b2_in_a) = FIRST(')') = ')'
     * FOLLOW(c_in_b) = FIRST('^') = '^'
     *
     * Upon erroneous input "[]", the call chain is
     *
     * a -> b -> c
     *
     * and, hence, the follow context stack is:
     *
     * depth follow set start of rule execution
     * 0 <EOF> a (from main())
     * 1 ']' b
     * 2 '^' c
     *
     * Notice that ')' is not included, because b would have to have
     * been called from a different context in rule a for ')' to be
     * included.
     *
     * For error recovery, we cannot consider FOLLOW(c)
     * (context-sensitive or otherwise). We need the combined set of
     * all context-sensitive FOLLOW sets--the set of all tokens that
     * could follow any reference in the call chain. We need to
     * resync to one of those tokens. Note that FOLLOW(c)='^' and if
     * we resync'd to that token, we'd consume until EOF. We need to
     * sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.
     * In this case, for input "[]", LA(1) is ']' and in the set, so we would
     * not consume anything. After printing an error, rule c would
     * return normally. Rule b would not find the required '^' though.
     * At this point, it gets a mismatched token error and throws an
     * exception (since LA(1) is not in the viable following token
     * set). The rule exception handler tries to recover, but finds
     * the same recovery set and doesn't consume anything. Rule b
     * exits normally returning to rule a. Now it finds the ']' (and
     * with the successful match exits errorRecovery mode).
     *
     * So, you can see that the parser walks up the call chain looking
     * for the token that was a member of the recovery set.
     *
     * Errors are not generated in errorRecovery mode.
     *
     * ANTLR's error recovery mechanism is based upon original ideas:
     *
     * "Algorithms + Data Structures = Programs" by Niklaus Wirth
     *
     * and
     *
     * "A note on error recovery in recursive descent parsers":
     * http://portal.acm.org/citation.cfm?id=947902.947905
     *
     * Later, Josef Grosch had some good ideas:
     *
     * "Efficient and Comfortable Error Recovery in Recursive Descent
     * Parsers":
     * ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip
     *
     * Like Grosch I implement context-sensitive FOLLOW sets that are combined
     * at run-time upon error to avoid overhead during parsing.
     */

  }, {
    key: "getErrorRecoverySet",
    value: function getErrorRecoverySet(recognizer) {
      var atn = recognizer._interp.atn;
      var ctx = recognizer._ctx;
      var recoverSet = new _IntervalSet.default();

      while (ctx !== null && ctx.invokingState >= 0) {
        // compute what follows who invoked us
        var invokingState = atn.states[ctx.invokingState];
        var rt = invokingState.transitions[0];
        var follow = atn.nextTokens(rt.followState);
        recoverSet.addSet(follow);
        ctx = ctx.parentCtx;
      }

      recoverSet.removeOne(_Token.default.EPSILON);
      return recoverSet;
    } // Consume tokens until one matches the given token set.//

  }, {
    key: "consumeUntil",
    value: function consumeUntil(recognizer, set) {
      var ttype = recognizer.getTokenStream().LA(1);

      while (ttype !== _Token.default.EOF && !set.contains(ttype)) {
        recognizer.consume();
        ttype = recognizer.getTokenStream().LA(1);
      }
    }
  }]);

  return DefaultErrorStrategy;
}(_ErrorStrategy2.default);

exports.default = DefaultErrorStrategy;
},{"./FailedPredicateException.js":"XnkP","./InputMismatchException.js":"OZzw","./NoViableAltException.js":"zWmB","../state/ATNState.js":"BwnW","../Token.js":"tczR","../misc/Interval.js":"JCiE","../misc/IntervalSet.js":"lP1U","./ErrorStrategy.js":"QVxP"}],"KiKz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _InputMismatchException = _interopRequireDefault(require("./InputMismatchException.js"));

var _ParseCancellationException = _interopRequireDefault(require("./ParseCancellationException.js"));

var _DefaultErrorStrategy2 = _interopRequireDefault(require("./DefaultErrorStrategy.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * This implementation of {@link ANTLRErrorStrategy} responds to syntax errors
 * by immediately canceling the parse operation with a
 * {@link ParseCancellationException}. The implementation ensures that the
 * {@link ParserRuleContext//exception} field is set for all parse tree nodes
 * that were not completed prior to encountering the error.
 *
 * <p>
 * This error strategy is useful in the following scenarios.</p>
 *
 * <ul>
 * <li><strong>Two-stage parsing:</strong> This error strategy allows the first
 * stage of two-stage parsing to immediately terminate if an error is
 * encountered, and immediately fall back to the second stage. In addition to
 * avoiding wasted work by attempting to recover from errors here, the empty
 * implementation of {@link BailErrorStrategy//sync} improves the performance of
 * the first stage.</li>
 * <li><strong>Silent validation:</strong> When syntax errors are not being
 * reported or logged, and the parse result is simply ignored if errors occur,
 * the {@link BailErrorStrategy} avoids wasting work on recovering from errors
 * when the result will be ignored either way.</li>
 * </ul>
 *
 * <p>
 * {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>
 *
 * @see Parser//setErrorHandler(ANTLRErrorStrategy)
 * */
var BailErrorStrategy = /*#__PURE__*/function (_DefaultErrorStrategy) {
  _inherits(BailErrorStrategy, _DefaultErrorStrategy);

  var _super = _createSuper(BailErrorStrategy);

  function BailErrorStrategy() {
    _classCallCheck(this, BailErrorStrategy);

    return _super.call(this);
  }
  /**
   * Instead of recovering from exception {@code e}, re-throw it wrapped
   * in a {@link ParseCancellationException} so it is not caught by the
   * rule function catches. Use {@link Exception//getCause()} to get the
   * original {@link RecognitionException}.
   */


  _createClass(BailErrorStrategy, [{
    key: "recover",
    value: function recover(recognizer, e) {
      var context = recognizer._ctx;

      while (context !== null) {
        context.exception = e;
        context = context.parentCtx;
      }

      throw new _ParseCancellationException.default(e);
    }
    /**
     * Make sure we don't attempt to recover inline; if the parser
     * successfully recovers, it won't throw an exception.
     */

  }, {
    key: "recoverInline",
    value: function recoverInline(recognizer) {
      this.recover(recognizer, new _InputMismatchException.default(recognizer));
    } // Make sure we don't attempt to recover from problems in subrules.//

  }, {
    key: "sync",
    value: function sync(recognizer) {// pass
    }
  }]);

  return BailErrorStrategy;
}(_DefaultErrorStrategy2.default);

exports.default = BailErrorStrategy;
},{"./InputMismatchException.js":"OZzw","./ParseCancellationException.js":"CwOG","./DefaultErrorStrategy.js":"sSlT"}],"swac":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _RecognitionException = _interopRequireDefault(require("./RecognitionException.js"));

var _NoViableAltException = _interopRequireDefault(require("./NoViableAltException.js"));

var _LexerNoViableAltException = _interopRequireDefault(require("./LexerNoViableAltException.js"));

var _InputMismatchException = _interopRequireDefault(require("./InputMismatchException.js"));

var _FailedPredicateException = _interopRequireDefault(require("./FailedPredicateException.js"));

var _DiagnosticErrorListener = _interopRequireDefault(require("./DiagnosticErrorListener.js"));

var _BailErrorStrategy = _interopRequireDefault(require("./BailErrorStrategy.js"));

var _DefaultErrorStrategy = _interopRequireDefault(require("./DefaultErrorStrategy.js"));

var _ErrorListener = _interopRequireDefault(require("./ErrorListener.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
var _default = {
  RecognitionException: _RecognitionException.default,
  NoViableAltException: _NoViableAltException.default,
  LexerNoViableAltException: _LexerNoViableAltException.default,
  InputMismatchException: _InputMismatchException.default,
  FailedPredicateException: _FailedPredicateException.default,
  DiagnosticErrorListener: _DiagnosticErrorListener.default,
  BailErrorStrategy: _BailErrorStrategy.default,
  DefaultErrorStrategy: _DefaultErrorStrategy.default,
  ErrorListener: _ErrorListener.default
};
exports.default = _default;
},{"./RecognitionException.js":"pFqq","./NoViableAltException.js":"zWmB","./LexerNoViableAltException.js":"oFa5","./InputMismatchException.js":"OZzw","./FailedPredicateException.js":"XnkP","./DiagnosticErrorListener.js":"FFkc","./BailErrorStrategy.js":"KiKz","./DefaultErrorStrategy.js":"sSlT","./ErrorListener.js":"Ov3t"}],"Tf2N":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Token = _interopRequireDefault(require("./Token.js"));

require("./polyfills/codepointat.js");

require("./polyfills/fromcodepoint.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * If decodeToUnicodeCodePoints is true, the input is treated
 * as a series of Unicode code points.
 *
 * Otherwise, the input is treated as a series of 16-bit UTF-16 code
 * units.
 */
var InputStream = /*#__PURE__*/function () {
  function InputStream(data, decodeToUnicodeCodePoints) {
    _classCallCheck(this, InputStream);

    this.name = "<empty>";
    this.strdata = data;
    this.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false; // _loadString - Vacuum all input from a string and then treat it like a buffer.

    this._index = 0;
    this.data = [];

    if (this.decodeToUnicodeCodePoints) {
      for (var i = 0; i < this.strdata.length;) {
        var codePoint = this.strdata.codePointAt(i);
        this.data.push(codePoint);
        i += codePoint <= 0xFFFF ? 1 : 2;
      }
    } else {
      this.data = new Array(this.strdata.length);

      for (var _i = 0; _i < this.strdata.length; _i++) {
        var codeUnit = this.strdata.charCodeAt(_i);
        this.data[_i] = codeUnit;
      }
    }

    this._size = this.data.length;
  }
  /**
   * Reset the stream so that it's in the same state it was
   * when the object was created *except* the data array is not
   * touched.
   */


  _createClass(InputStream, [{
    key: "reset",
    value: function reset() {
      this._index = 0;
    }
  }, {
    key: "consume",
    value: function consume() {
      if (this._index >= this._size) {
        // assert this.LA(1) == Token.EOF
        throw "cannot consume EOF";
      }

      this._index += 1;
    }
  }, {
    key: "LA",
    value: function LA(offset) {
      if (offset === 0) {
        return 0; // undefined
      }

      if (offset < 0) {
        offset += 1; // e.g., translate LA(-1) to use offset=0
      }

      var pos = this._index + offset - 1;

      if (pos < 0 || pos >= this._size) {
        // invalid
        return _Token.default.EOF;
      }

      return this.data[pos];
    }
  }, {
    key: "LT",
    value: function LT(offset) {
      return this.LA(offset);
    } // mark/release do nothing; we have entire buffer

  }, {
    key: "mark",
    value: function mark() {
      return -1;
    }
  }, {
    key: "release",
    value: function release(marker) {}
    /**
     * consume() ahead until p==_index; can't just set p=_index as we must
     * update line and column. If we seek backwards, just set p
     */

  }, {
    key: "seek",
    value: function seek(_index) {
      if (_index <= this._index) {
        this._index = _index; // just jump; don't update stream state (line,
        // ...)

        return;
      } // seek forward


      this._index = Math.min(_index, this._size);
    }
  }, {
    key: "getText",
    value: function getText(start, stop) {
      if (stop >= this._size) {
        stop = this._size - 1;
      }

      if (start >= this._size) {
        return "";
      } else {
        if (this.decodeToUnicodeCodePoints) {
          var result = "";

          for (var i = start; i <= stop; i++) {
            result += String.fromCodePoint(this.data[i]);
          }

          return result;
        } else {
          return this.strdata.slice(start, stop + 1);
        }
      }
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.strdata;
    }
  }, {
    key: "index",
    get: function get() {
      return this._index;
    }
  }, {
    key: "size",
    get: function get() {
      return this._size;
    }
  }]);

  return InputStream;
}();

exports.default = InputStream;
},{"./Token.js":"tczR","./polyfills/codepointat.js":"ghVe","./polyfills/fromcodepoint.js":"HvJh"}],"oZAK":[function(require,module,exports) {

},{}],"OD4z":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _InputStream = _interopRequireDefault(require("./InputStream.js"));

var _fs = _interopRequireDefault(require("fs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/**
 * Utility functions to create InputStreams from various sources.
 *
 * All returned InputStreams support the full range of Unicode
 * up to U+10FFFF (the default behavior of InputStream only supports
 * code points up to U+FFFF).
 */
var _default = {
  // Creates an InputStream from a string.
  fromString: function fromString(str) {
    return new _InputStream.default(str, true);
  },

  /**
   * Asynchronously creates an InputStream from a blob given the
   * encoding of the bytes in that blob (defaults to 'utf8' if
   * encoding is null).
   *
   * Invokes onLoad(result) on success, onError(error) on
   * failure.
   */
  fromBlob: function fromBlob(blob, encoding, onLoad, onError) {
    var reader = new window.FileReader();

    reader.onload = function (e) {
      var is = new _InputStream.default(e.target.result, true);
      onLoad(is);
    };

    reader.onerror = onError;
    reader.readAsText(blob, encoding);
  },

  /**
   * Creates an InputStream from a Buffer given the
   * encoding of the bytes in that buffer (defaults to 'utf8' if
   * encoding is null).
   */
  fromBuffer: function fromBuffer(buffer, encoding) {
    return new _InputStream.default(buffer.toString(encoding), true);
  },

  /** Asynchronously creates an InputStream from a file on disk given
   * the encoding of the bytes in that file (defaults to 'utf8' if
   * encoding is null).
   *
   * Invokes callback(error, result) on completion.
   */
  fromPath: function fromPath(path, encoding, callback) {
    _fs.default.readFile(path, encoding, function (err, data) {
      var is = null;

      if (data !== null) {
        is = new _InputStream.default(data, true);
      }

      callback(err, is);
    });
  },

  /**
   * Synchronously creates an InputStream given a path to a file
   * on disk and the encoding of the bytes in that file (defaults to
   * 'utf8' if encoding is null).
   */
  fromPathSync: function fromPathSync(path, encoding) {
    var data = _fs.default.readFileSync(path, encoding);

    return new _InputStream.default(data, true);
  }
};
exports.default = _default;
},{"./InputStream.js":"Tf2N","fs":"oZAK"}],"qqAn":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _InputStream2 = _interopRequireDefault(require("./InputStream.js"));

var _fs = _interopRequireDefault(require("fs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * This is an InputStream that is loaded from a file all at once
 * when you construct the object.
 */
var FileStream = /*#__PURE__*/function (_InputStream) {
  _inherits(FileStream, _InputStream);

  var _super = _createSuper(FileStream);

  function FileStream(fileName, decodeToUnicodeCodePoints) {
    var _this;

    _classCallCheck(this, FileStream);

    var data = _fs.default.readFileSync(fileName, "utf8");

    _this = _super.call(this, data, decodeToUnicodeCodePoints);
    _this.fileName = fileName;
    return _this;
  }

  return _createClass(FileStream);
}(_InputStream2.default);

exports.default = FileStream;
},{"./InputStream.js":"Tf2N","fs":"oZAK"}],"RqIP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.
 * Use is of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
// this is just to keep meaningful parameter types to Parser
var TokenStream = /*#__PURE__*/_createClass(function TokenStream() {
  _classCallCheck(this, TokenStream);
});

exports.default = TokenStream;
},{}],"NH4e":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Token = _interopRequireDefault(require("./Token.js"));

var _Lexer = _interopRequireDefault(require("./Lexer.js"));

var _Interval = _interopRequireDefault(require("./misc/Interval.js"));

var _TokenStream2 = _interopRequireDefault(require("./TokenStream.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * This implementation of {@link TokenStream} loads tokens from a
 * {@link TokenSource} on-demand, and places the tokens in a buffer to provide
 * access to any previous token by index.
 *
 * <p>
 * This token stream ignores the value of {@link Token//getChannel}. If your
 * parser requires the token stream filter tokens to only those on a particular
 * channel, such as {@link Token//DEFAULT_CHANNEL} or
 * {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a
 * {@link CommonTokenStream}.</p>
 */
var BufferedTokenStream = /*#__PURE__*/function (_TokenStream) {
  _inherits(BufferedTokenStream, _TokenStream);

  var _super = _createSuper(BufferedTokenStream);

  function BufferedTokenStream(tokenSource) {
    var _this;

    _classCallCheck(this, BufferedTokenStream);

    _this = _super.call(this); // The {@link TokenSource} from which tokens for this stream are fetched.

    _this.tokenSource = tokenSource;
    /**
     * A collection of all tokens fetched from the token source. The list is
     * considered a complete view of the input once {@link //fetchedEOF} is set
     * to {@code true}.
     */

    _this.tokens = [];
    /**
     * The index into {@link //tokens} of the current token (next token to
     * {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should
     * be
     * {@link //LT LT(1)}.
     *
     * <p>This field is set to -1 when the stream is first constructed or when
     * {@link //setTokenSource} is called, indicating that the first token has
     * not yet been fetched from the token source. For additional information,
     * see the documentation of {@link IntStream} for a description of
     * Initializing Methods.</p>
     */

    _this.index = -1;
    /**
     * Indicates whether the {@link Token//EOF} token has been fetched from
     * {@link //tokenSource} and added to {@link //tokens}. This field improves
     * performance for the following cases:
     *
     * <ul>
     * <li>{@link //consume}: The lookahead check in {@link //consume} to
     * prevent
     * consuming the EOF symbol is optimized by checking the values of
     * {@link //fetchedEOF} and {@link //p} instead of calling {@link
     * //LA}.</li>
     * <li>{@link //fetch}: The check to prevent adding multiple EOF symbols
     * into
     * {@link //tokens} is trivial with this field.</li>
     * <ul>
     */

    _this.fetchedEOF = false;
    return _this;
  }

  _createClass(BufferedTokenStream, [{
    key: "mark",
    value: function mark() {
      return 0;
    }
  }, {
    key: "release",
    value: function release(marker) {// no resources to release
    }
  }, {
    key: "reset",
    value: function reset() {
      this.seek(0);
    }
  }, {
    key: "seek",
    value: function seek(index) {
      this.lazyInit();
      this.index = this.adjustSeekIndex(index);
    }
  }, {
    key: "get",
    value: function get(index) {
      this.lazyInit();
      return this.tokens[index];
    }
  }, {
    key: "consume",
    value: function consume() {
      var skipEofCheck = false;

      if (this.index >= 0) {
        if (this.fetchedEOF) {
          // the last token in tokens is EOF. skip check if p indexes any
          // fetched token except the last.
          skipEofCheck = this.index < this.tokens.length - 1;
        } else {
          // no EOF token in tokens. skip check if p indexes a fetched token.
          skipEofCheck = this.index < this.tokens.length;
        }
      } else {
        // not yet initialized
        skipEofCheck = false;
      }

      if (!skipEofCheck && this.LA(1) === _Token.default.EOF) {
        throw "cannot consume EOF";
      }

      if (this.sync(this.index + 1)) {
        this.index = this.adjustSeekIndex(this.index + 1);
      }
    }
    /**
     * Make sure index {@code i} in tokens has a token.
     *
     * @return {Boolean} {@code true} if a token is located at index {@code i}, otherwise
     * {@code false}.
     * @see //get(int i)
     */

  }, {
    key: "sync",
    value: function sync(i) {
      var n = i - this.tokens.length + 1; // how many more elements we need?

      if (n > 0) {
        var fetched = this.fetch(n);
        return fetched >= n;
      }

      return true;
    }
    /**
     * Add {@code n} elements to buffer.
     *
     * @return {Number} The actual number of elements added to the buffer.
     */

  }, {
    key: "fetch",
    value: function fetch(n) {
      if (this.fetchedEOF) {
        return 0;
      }

      for (var i = 0; i < n; i++) {
        var t = this.tokenSource.nextToken();
        t.tokenIndex = this.tokens.length;
        this.tokens.push(t);

        if (t.type === _Token.default.EOF) {
          this.fetchedEOF = true;
          return i + 1;
        }
      }

      return n;
    } // Get all tokens from start..stop inclusively///

  }, {
    key: "getTokens",
    value: function getTokens(start, stop, types) {
      if (types === undefined) {
        types = null;
      }

      if (start < 0 || stop < 0) {
        return null;
      }

      this.lazyInit();
      var subset = [];

      if (stop >= this.tokens.length) {
        stop = this.tokens.length - 1;
      }

      for (var i = start; i < stop; i++) {
        var t = this.tokens[i];

        if (t.type === _Token.default.EOF) {
          break;
        }

        if (types === null || types.contains(t.type)) {
          subset.push(t);
        }
      }

      return subset;
    }
  }, {
    key: "LA",
    value: function LA(i) {
      return this.LT(i).type;
    }
  }, {
    key: "LB",
    value: function LB(k) {
      if (this.index - k < 0) {
        return null;
      }

      return this.tokens[this.index - k];
    }
  }, {
    key: "LT",
    value: function LT(k) {
      this.lazyInit();

      if (k === 0) {
        return null;
      }

      if (k < 0) {
        return this.LB(-k);
      }

      var i = this.index + k - 1;
      this.sync(i);

      if (i >= this.tokens.length) {
        // return EOF token
        // EOF must be last token
        return this.tokens[this.tokens.length - 1];
      }

      return this.tokens[i];
    }
    /**
     * Allowed derived classes to modify the behavior of operations which change
     * the current stream position by adjusting the target token index of a seek
     * operation. The default implementation simply returns {@code i}. If an
     * exception is thrown in this method, the current stream index should not be
     * changed.
     *
     * <p>For example, {@link CommonTokenStream} overrides this method to ensure
     * that
     * the seek target is always an on-channel token.</p>
     *
     * @param {Number} i The target token index.
     * @return {Number} The adjusted target token index.
     */

  }, {
    key: "adjustSeekIndex",
    value: function adjustSeekIndex(i) {
      return i;
    }
  }, {
    key: "lazyInit",
    value: function lazyInit() {
      if (this.index === -1) {
        this.setup();
      }
    }
  }, {
    key: "setup",
    value: function setup() {
      this.sync(0);
      this.index = this.adjustSeekIndex(0);
    } // Reset this token stream by setting its token source.///

  }, {
    key: "setTokenSource",
    value: function setTokenSource(tokenSource) {
      this.tokenSource = tokenSource;
      this.tokens = [];
      this.index = -1;
      this.fetchedEOF = false;
    }
    /**
     * Given a starting index, return the index of the next token on channel.
     * Return i if tokens[i] is on channel. Return -1 if there are no tokens
     * on channel between i and EOF.
     */

  }, {
    key: "nextTokenOnChannel",
    value: function nextTokenOnChannel(i, channel) {
      this.sync(i);

      if (i >= this.tokens.length) {
        return -1;
      }

      var token = this.tokens[i];

      while (token.channel !== this.channel) {
        if (token.type === _Token.default.EOF) {
          return -1;
        }

        i += 1;
        this.sync(i);
        token = this.tokens[i];
      }

      return i;
    }
    /**
     * Given a starting index, return the index of the previous token on channel.
     * Return i if tokens[i] is on channel. Return -1 if there are no tokens
     * on channel between i and 0.
     */

  }, {
    key: "previousTokenOnChannel",
    value: function previousTokenOnChannel(i, channel) {
      while (i >= 0 && this.tokens[i].channel !== channel) {
        i -= 1;
      }

      return i;
    }
    /**
     * Collect all tokens on specified channel to the right of
     * the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or
     * EOF. If channel is -1, find any non default channel token.
     */

  }, {
    key: "getHiddenTokensToRight",
    value: function getHiddenTokensToRight(tokenIndex, channel) {
      if (channel === undefined) {
        channel = -1;
      }

      this.lazyInit();

      if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
        throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
      }

      var nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, _Lexer.default.DEFAULT_TOKEN_CHANNEL);
      var from_ = tokenIndex + 1; // if none onchannel to right, nextOnChannel=-1 so set to = last token

      var to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;
      return this.filterForChannel(from_, to, channel);
    }
    /**
     * Collect all tokens on specified channel to the left of
     * the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.
     * If channel is -1, find any non default channel token.
     */

  }, {
    key: "getHiddenTokensToLeft",
    value: function getHiddenTokensToLeft(tokenIndex, channel) {
      if (channel === undefined) {
        channel = -1;
      }

      this.lazyInit();

      if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
        throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
      }

      var prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, _Lexer.default.DEFAULT_TOKEN_CHANNEL);

      if (prevOnChannel === tokenIndex - 1) {
        return null;
      } // if none on channel to left, prevOnChannel=-1 then from=0


      var from_ = prevOnChannel + 1;
      var to = tokenIndex - 1;
      return this.filterForChannel(from_, to, channel);
    }
  }, {
    key: "filterForChannel",
    value: function filterForChannel(left, right, channel) {
      var hidden = [];

      for (var i = left; i < right + 1; i++) {
        var t = this.tokens[i];

        if (channel === -1) {
          if (t.channel !== _Lexer.default.DEFAULT_TOKEN_CHANNEL) {
            hidden.push(t);
          }
        } else if (t.channel === channel) {
          hidden.push(t);
        }
      }

      if (hidden.length === 0) {
        return null;
      }

      return hidden;
    }
  }, {
    key: "getSourceName",
    value: function getSourceName() {
      return this.tokenSource.getSourceName();
    } // Get the text of all tokens in this buffer.///

  }, {
    key: "getText",
    value: function getText(interval) {
      this.lazyInit();
      this.fill();

      if (interval === undefined || interval === null) {
        interval = new _Interval.default(0, this.tokens.length - 1);
      }

      var start = interval.start;

      if (start instanceof _Token.default) {
        start = start.tokenIndex;
      }

      var stop = interval.stop;

      if (stop instanceof _Token.default) {
        stop = stop.tokenIndex;
      }

      if (start === null || stop === null || start < 0 || stop < 0) {
        return "";
      }

      if (stop >= this.tokens.length) {
        stop = this.tokens.length - 1;
      }

      var s = "";

      for (var i = start; i < stop + 1; i++) {
        var t = this.tokens[i];

        if (t.type === _Token.default.EOF) {
          break;
        }

        s = s + t.text;
      }

      return s;
    } // Get all tokens from lexer until EOF///

  }, {
    key: "fill",
    value: function fill() {
      this.lazyInit();

      while (this.fetch(1000) === 1000) {
        continue;
      }
    }
  }]);

  return BufferedTokenStream;
}(_TokenStream2.default);

exports.default = BufferedTokenStream;
},{"./Token.js":"tczR","./Lexer.js":"FKtu","./misc/Interval.js":"JCiE","./TokenStream.js":"RqIP"}],"g0Jg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Token = _interopRequireDefault(require("./Token.js"));

var _BufferedTokenStream2 = _interopRequireDefault(require("./BufferedTokenStream.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * This class extends {@link BufferedTokenStream} with functionality to filter
 * token streams to tokens on a particular channel (tokens where
 * {@link Token//getChannel} returns a particular value).
 *
 * <p>
 * This token stream provides access to all tokens by index or when calling
 * methods like {@link //getText}. The channel filtering is only used for code
 * accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and
 * {@link //LB}.</p>
 *
 * <p>
 * By default, tokens are placed on the default channel
 * ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the
 * {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to
 * call {@link Lexer//setChannel}.
 * </p>
 *
 * <p>
 * Note: lexer rules which use the {@code ->skip} lexer command or call
 * {@link Lexer//skip} do not produce tokens at all, so input text matched by
 * such a rule will not be available as part of the token stream, regardless of
 * channel.</p>
 */
var CommonTokenStream = /*#__PURE__*/function (_BufferedTokenStream) {
  _inherits(CommonTokenStream, _BufferedTokenStream);

  var _super = _createSuper(CommonTokenStream);

  function CommonTokenStream(lexer, channel) {
    var _this;

    _classCallCheck(this, CommonTokenStream);

    _this = _super.call(this, lexer);
    _this.channel = channel === undefined ? _Token.default.DEFAULT_CHANNEL : channel;
    return _this;
  }

  _createClass(CommonTokenStream, [{
    key: "adjustSeekIndex",
    value: function adjustSeekIndex(i) {
      return this.nextTokenOnChannel(i, this.channel);
    }
  }, {
    key: "LB",
    value: function LB(k) {
      if (k === 0 || this.index - k < 0) {
        return null;
      }

      var i = this.index;
      var n = 1; // find k good tokens looking backwards

      while (n <= k) {
        // skip off-channel tokens
        i = this.previousTokenOnChannel(i - 1, this.channel);
        n += 1;
      }

      if (i < 0) {
        return null;
      }

      return this.tokens[i];
    }
  }, {
    key: "LT",
    value: function LT(k) {
      this.lazyInit();

      if (k === 0) {
        return null;
      }

      if (k < 0) {
        return this.LB(-k);
      }

      var i = this.index;
      var n = 1; // we know tokens[pos] is a good one
      // find k good tokens

      while (n < k) {
        // skip off-channel tokens, but make sure to not look past EOF
        if (this.sync(i + 1)) {
          i = this.nextTokenOnChannel(i + 1, this.channel);
        }

        n += 1;
      }

      return this.tokens[i];
    } // Count EOF just once.

  }, {
    key: "getNumberOfOnChannelTokens",
    value: function getNumberOfOnChannelTokens() {
      var n = 0;
      this.fill();

      for (var i = 0; i < this.tokens.length; i++) {
        var t = this.tokens[i];

        if (t.channel === this.channel) {
          n += 1;
        }

        if (t.type === _Token.default.EOF) {
          break;
        }
      }

      return n;
    }
  }]);

  return CommonTokenStream;
}(_BufferedTokenStream2.default);

exports.default = CommonTokenStream;
},{"./Token.js":"tczR","./BufferedTokenStream.js":"NH4e"}],"T5dz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ParseTreeListener2 = _interopRequireDefault(require("./tree/ParseTreeListener.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var TraceListener = /*#__PURE__*/function (_ParseTreeListener) {
  _inherits(TraceListener, _ParseTreeListener);

  var _super = _createSuper(TraceListener);

  function TraceListener(parser) {
    var _this;

    _classCallCheck(this, TraceListener);

    _this = _super.call(this);
    _this.parser = parser;
    return _this;
  }

  _createClass(TraceListener, [{
    key: "enterEveryRule",
    value: function enterEveryRule(ctx) {
      console.log("enter   " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
    }
  }, {
    key: "visitTerminal",
    value: function visitTerminal(node) {
      console.log("consume " + node.symbol + " rule " + this.parser.ruleNames[this.parser._ctx.ruleIndex]);
    }
  }, {
    key: "exitEveryRule",
    value: function exitEveryRule(ctx) {
      console.log("exit    " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
    }
  }]);

  return TraceListener;
}(_ParseTreeListener2.default);

exports.default = TraceListener;
},{"./tree/ParseTreeListener.js":"tbi1"}],"b1E4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Token = _interopRequireDefault(require("./Token.js"));

var _TerminalNode = _interopRequireDefault(require("./tree/TerminalNode.js"));

var _ErrorNode = _interopRequireDefault(require("./tree/ErrorNode.js"));

var _Recognizer2 = _interopRequireDefault(require("./Recognizer.js"));

var _DefaultErrorStrategy = _interopRequireDefault(require("./error/DefaultErrorStrategy.js"));

var _ATNDeserializer = _interopRequireDefault(require("./atn/ATNDeserializer.js"));

var _ATNDeserializationOptions = _interopRequireDefault(require("./atn/ATNDeserializationOptions.js"));

var _TraceListener = _interopRequireDefault(require("./TraceListener.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Parser = /*#__PURE__*/function (_Recognizer) {
  _inherits(Parser, _Recognizer);

  var _super = _createSuper(Parser);

  /**
   * this is all the parsing support code essentially; most of it is error
   * recovery stuff.
   */
  function Parser(input) {
    var _this;

    _classCallCheck(this, Parser);

    _this = _super.call(this); // The input stream.

    _this._input = null;
    /**
     * The error handling strategy for the parser. The default value is a new
     * instance of {@link DefaultErrorStrategy}.
     */

    _this._errHandler = new _DefaultErrorStrategy.default();
    _this._precedenceStack = [];

    _this._precedenceStack.push(0);
    /**
     * The {@link ParserRuleContext} object for the currently executing rule.
     * this is always non-null during the parsing process.
     */


    _this._ctx = null;
    /**
     * Specifies whether or not the parser should construct a parse tree during
     * the parsing process. The default value is {@code true}.
     */

    _this.buildParseTrees = true;
    /**
     * When {@link //setTrace}{@code (true)} is called, a reference to the
     * {@link TraceListener} is stored here so it can be easily removed in a
     * later call to {@link //setTrace}{@code (false)}. The listener itself is
     * implemented as a parser listener so this field is not directly used by
     * other parser methods.
     */

    _this._tracer = null;
    /**
     * The list of {@link ParseTreeListener} listeners registered to receive
     * events during the parse.
     */

    _this._parseListeners = null;
    /**
     * The number of syntax errors reported during parsing. this value is
     * incremented each time {@link //notifyErrorListeners} is called.
     */

    _this._syntaxErrors = 0;

    _this.setInputStream(input);

    return _this;
  } // reset the parser's state


  _createClass(Parser, [{
    key: "reset",
    value: function reset() {
      if (this._input !== null) {
        this._input.seek(0);
      }

      this._errHandler.reset(this);

      this._ctx = null;
      this._syntaxErrors = 0;
      this.setTrace(false);
      this._precedenceStack = [];

      this._precedenceStack.push(0);

      if (this._interp !== null) {
        this._interp.reset();
      }
    }
    /**
     * Match current input symbol against {@code ttype}. If the symbol type
     * matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are
     * called to complete the match process.
     *
     * <p>If the symbol type does not match,
     * {@link ANTLRErrorStrategy//recoverInline} is called on the current error
     * strategy to attempt recovery. If {@link //getBuildParseTree} is
     * {@code true} and the token index of the symbol returned by
     * {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
     * the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
     *
     * @param ttype the token type to match
     * @return the matched symbol
     * @throws RecognitionException if the current input symbol did not match
     * {@code ttype} and the error strategy could not recover from the
     * mismatched symbol
     */

  }, {
    key: "match",
    value: function match(ttype) {
      var t = this.getCurrentToken();

      if (t.type === ttype) {
        this._errHandler.reportMatch(this);

        this.consume();
      } else {
        t = this._errHandler.recoverInline(this);

        if (this.buildParseTrees && t.tokenIndex === -1) {
          // we must have conjured up a new token during single token
          // insertion
          // if it's not the current symbol
          this._ctx.addErrorNode(t);
        }
      }

      return t;
    }
    /**
     * Match current input symbol as a wildcard. If the symbol type matches
     * (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}
     * and {@link //consume} are called to complete the match process.
     *
     * <p>If the symbol type does not match,
     * {@link ANTLRErrorStrategy//recoverInline} is called on the current error
     * strategy to attempt recovery. If {@link //getBuildParseTree} is
     * {@code true} and the token index of the symbol returned by
     * {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
     * the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
     *
     * @return the matched symbol
     * @throws RecognitionException if the current input symbol did not match
     * a wildcard and the error strategy could not recover from the mismatched
     * symbol
     */

  }, {
    key: "matchWildcard",
    value: function matchWildcard() {
      var t = this.getCurrentToken();

      if (t.type > 0) {
        this._errHandler.reportMatch(this);

        this.consume();
      } else {
        t = this._errHandler.recoverInline(this);

        if (this._buildParseTrees && t.tokenIndex === -1) {
          // we must have conjured up a new token during single token
          // insertion
          // if it's not the current symbol
          this._ctx.addErrorNode(t);
        }
      }

      return t;
    }
  }, {
    key: "getParseListeners",
    value: function getParseListeners() {
      return this._parseListeners || [];
    }
    /**
     * Registers {@code listener} to receive events during the parsing process.
     *
     * <p>To support output-preserving grammar transformations (including but not
     * limited to left-recursion removal, automated left-factoring, and
     * optimized code generation), calls to listener methods during the parse
     * may differ substantially from calls made by
     * {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In
     * particular, rule entry and exit events may occur in a different order
     * during the parse than after the parser. In addition, calls to certain
     * rule entry methods may be omitted.</p>
     *
     * <p>With the following specific exceptions, calls to listener events are
     * <em>deterministic</em>, i.e. for identical input the calls to listener
     * methods will be the same.</p>
     *
     * <ul>
     * <li>Alterations to the grammar used to generate code may change the
     * behavior of the listener calls.</li>
     * <li>Alterations to the command line options passed to ANTLR 4 when
     * generating the parser may change the behavior of the listener calls.</li>
     * <li>Changing the version of the ANTLR Tool used to generate the parser
     * may change the behavior of the listener calls.</li>
     * </ul>
     *
     * @param listener the listener to add
     *
     * @throws NullPointerException if {@code} listener is {@code null}
     */

  }, {
    key: "addParseListener",
    value: function addParseListener(listener) {
      if (listener === null) {
        throw "listener";
      }

      if (this._parseListeners === null) {
        this._parseListeners = [];
      }

      this._parseListeners.push(listener);
    }
    /**
     * Remove {@code listener} from the list of parse listeners.
     *
     * <p>If {@code listener} is {@code null} or has not been added as a parse
     * listener, this method does nothing.</p>
     * @param listener the listener to remove
     */

  }, {
    key: "removeParseListener",
    value: function removeParseListener(listener) {
      if (this._parseListeners !== null) {
        var idx = this._parseListeners.indexOf(listener);

        if (idx >= 0) {
          this._parseListeners.splice(idx, 1);
        }

        if (this._parseListeners.length === 0) {
          this._parseListeners = null;
        }
      }
    } // Remove all parse listeners.

  }, {
    key: "removeParseListeners",
    value: function removeParseListeners() {
      this._parseListeners = null;
    } // Notify any parse listeners of an enter rule event.

  }, {
    key: "triggerEnterRuleEvent",
    value: function triggerEnterRuleEvent() {
      if (this._parseListeners !== null) {
        var ctx = this._ctx;

        this._parseListeners.forEach(function (listener) {
          listener.enterEveryRule(ctx);
          ctx.enterRule(listener);
        });
      }
    }
    /**
     * Notify any parse listeners of an exit rule event.
     * @see //addParseListener
     */

  }, {
    key: "triggerExitRuleEvent",
    value: function triggerExitRuleEvent() {
      if (this._parseListeners !== null) {
        // reverse order walk of listeners
        var ctx = this._ctx;

        this._parseListeners.slice(0).reverse().forEach(function (listener) {
          ctx.exitRule(listener);
          listener.exitEveryRule(ctx);
        });
      }
    }
  }, {
    key: "getTokenFactory",
    value: function getTokenFactory() {
      return this._input.tokenSource._factory;
    } // Tell our token source and error strategy about a new way to create tokens.

  }, {
    key: "setTokenFactory",
    value: function setTokenFactory(factory) {
      this._input.tokenSource._factory = factory;
    }
    /**
     * The ATN with bypass alternatives is expensive to create so we create it
     * lazily.
     *
     * @throws UnsupportedOperationException if the current parser does not
     * implement the {@link //getSerializedATN()} method.
     */

  }, {
    key: "getATNWithBypassAlts",
    value: function getATNWithBypassAlts() {
      var serializedAtn = this.getSerializedATN();

      if (serializedAtn === null) {
        throw "The current parser does not support an ATN with bypass alternatives.";
      }

      var result = this.bypassAltsAtnCache[serializedAtn];

      if (result === null) {
        var deserializationOptions = new _ATNDeserializationOptions.default();
        deserializationOptions.generateRuleBypassTransitions = true;
        result = new _ATNDeserializer.default(deserializationOptions).deserialize(serializedAtn);
        this.bypassAltsAtnCache[serializedAtn] = result;
      }

      return result;
    }
  }, {
    key: "getInputStream",
    value: function getInputStream() {
      return this.getTokenStream();
    }
  }, {
    key: "setInputStream",
    value: function setInputStream(input) {
      this.setTokenStream(input);
    }
  }, {
    key: "getTokenStream",
    value: function getTokenStream() {
      return this._input;
    } // Set the token stream and reset the parser.

  }, {
    key: "setTokenStream",
    value: function setTokenStream(input) {
      this._input = null;
      this.reset();
      this._input = input;
    }
    /**
     * Match needs to return the current input symbol, which gets put
     * into the label for the associated token ref; e.g., x=ID.
     */

  }, {
    key: "getCurrentToken",
    value: function getCurrentToken() {
      return this._input.LT(1);
    }
  }, {
    key: "notifyErrorListeners",
    value: function notifyErrorListeners(msg, offendingToken, err) {
      offendingToken = offendingToken || null;
      err = err || null;

      if (offendingToken === null) {
        offendingToken = this.getCurrentToken();
      }

      this._syntaxErrors += 1;
      var line = offendingToken.line;
      var column = offendingToken.column;
      var listener = this.getErrorListenerDispatch();
      listener.syntaxError(this, offendingToken, line, column, msg, err);
    }
    /**
     * Consume and return the {@linkplain //getCurrentToken current symbol}.
     *
     * <p>E.g., given the following input with {@code A} being the current
     * lookahead symbol, this function moves the cursor to {@code B} and returns
     * {@code A}.</p>
     *
     * <pre>
     * A B
     * ^
     * </pre>
     *
     * If the parser is not in error recovery mode, the consumed symbol is added
     * to the parse tree using {@link ParserRuleContext//addChild(Token)}, and
     * {@link ParseTreeListener//visitTerminal} is called on any parse listeners.
     * If the parser <em>is</em> in error recovery mode, the consumed symbol is
     * added to the parse tree using
     * {@link ParserRuleContext//addErrorNode(Token)}, and
     * {@link ParseTreeListener//visitErrorNode} is called on any parse
     * listeners.
     */

  }, {
    key: "consume",
    value: function consume() {
      var o = this.getCurrentToken();

      if (o.type !== _Token.default.EOF) {
        this.getInputStream().consume();
      }

      var hasListener = this._parseListeners !== null && this._parseListeners.length > 0;

      if (this.buildParseTrees || hasListener) {
        var node;

        if (this._errHandler.inErrorRecoveryMode(this)) {
          node = this._ctx.addErrorNode(o);
        } else {
          node = this._ctx.addTokenNode(o);
        }

        node.invokingState = this.state;

        if (hasListener) {
          this._parseListeners.forEach(function (listener) {
            if (node instanceof _ErrorNode.default || node.isErrorNode !== undefined && node.isErrorNode()) {
              listener.visitErrorNode(node);
            } else if (node instanceof _TerminalNode.default) {
              listener.visitTerminal(node);
            }
          });
        }
      }

      return o;
    }
  }, {
    key: "addContextToParseTree",
    value: function addContextToParseTree() {
      // add current context to parent if we have a parent
      if (this._ctx.parentCtx !== null) {
        this._ctx.parentCtx.addChild(this._ctx);
      }
    }
    /**
     * Always called by generated parsers upon entry to a rule. Access field
     * {@link //_ctx} get the current context.
     */

  }, {
    key: "enterRule",
    value: function enterRule(localctx, state, ruleIndex) {
      this.state = state;
      this._ctx = localctx;
      this._ctx.start = this._input.LT(1);

      if (this.buildParseTrees) {
        this.addContextToParseTree();
      }

      this.triggerEnterRuleEvent();
    }
  }, {
    key: "exitRule",
    value: function exitRule() {
      this._ctx.stop = this._input.LT(-1); // trigger event on _ctx, before it reverts to parent

      this.triggerExitRuleEvent();
      this.state = this._ctx.invokingState;
      this._ctx = this._ctx.parentCtx;
    }
  }, {
    key: "enterOuterAlt",
    value: function enterOuterAlt(localctx, altNum) {
      localctx.setAltNumber(altNum); // if we have new localctx, make sure we replace existing ctx
      // that is previous child of parse tree

      if (this.buildParseTrees && this._ctx !== localctx) {
        if (this._ctx.parentCtx !== null) {
          this._ctx.parentCtx.removeLastChild();

          this._ctx.parentCtx.addChild(localctx);
        }
      }

      this._ctx = localctx;
    }
    /**
     * Get the precedence level for the top-most precedence rule.
     *
     * @return The precedence level for the top-most precedence rule, or -1 if
     * the parser context is not nested within a precedence rule.
     */

  }, {
    key: "getPrecedence",
    value: function getPrecedence() {
      if (this._precedenceStack.length === 0) {
        return -1;
      } else {
        return this._precedenceStack[this._precedenceStack.length - 1];
      }
    }
  }, {
    key: "enterRecursionRule",
    value: function enterRecursionRule(localctx, state, ruleIndex, precedence) {
      this.state = state;

      this._precedenceStack.push(precedence);

      this._ctx = localctx;
      this._ctx.start = this._input.LT(1);
      this.triggerEnterRuleEvent(); // simulates rule entry for left-recursive rules
    } // Like {@link //enterRule} but for recursive rules.

  }, {
    key: "pushNewRecursionContext",
    value: function pushNewRecursionContext(localctx, state, ruleIndex) {
      var previous = this._ctx;
      previous.parentCtx = localctx;
      previous.invokingState = state;
      previous.stop = this._input.LT(-1);
      this._ctx = localctx;
      this._ctx.start = previous.start;

      if (this.buildParseTrees) {
        this._ctx.addChild(previous);
      }

      this.triggerEnterRuleEvent(); // simulates rule entry for left-recursive rules
    }
  }, {
    key: "unrollRecursionContexts",
    value: function unrollRecursionContexts(parentCtx) {
      this._precedenceStack.pop();

      this._ctx.stop = this._input.LT(-1);
      var retCtx = this._ctx; // save current ctx (return value)
      // unroll so _ctx is as it was before call to recursive method

      var parseListeners = this.getParseListeners();

      if (parseListeners !== null && parseListeners.length > 0) {
        while (this._ctx !== parentCtx) {
          this.triggerExitRuleEvent();
          this._ctx = this._ctx.parentCtx;
        }
      } else {
        this._ctx = parentCtx;
      } // hook into tree


      retCtx.parentCtx = parentCtx;

      if (this.buildParseTrees && parentCtx !== null) {
        // add return ctx into invoking rule's tree
        parentCtx.addChild(retCtx);
      }
    }
  }, {
    key: "getInvokingContext",
    value: function getInvokingContext(ruleIndex) {
      var ctx = this._ctx;

      while (ctx !== null) {
        if (ctx.ruleIndex === ruleIndex) {
          return ctx;
        }

        ctx = ctx.parentCtx;
      }

      return null;
    }
  }, {
    key: "precpred",
    value: function precpred(localctx, precedence) {
      return precedence >= this._precedenceStack[this._precedenceStack.length - 1];
    }
  }, {
    key: "inContext",
    value: function inContext(context) {
      // TODO: useful in parser?
      return false;
    }
    /**
     * Checks whether or not {@code symbol} can follow the current state in the
     * ATN. The behavior of this method is equivalent to the following, but is
     * implemented such that the complete context-sensitive follow set does not
     * need to be explicitly constructed.
     *
     * <pre>
     * return getExpectedTokens().contains(symbol);
     * </pre>
     *
     * @param symbol the symbol type to check
     * @return {@code true} if {@code symbol} can follow the current state in
     * the ATN, otherwise {@code false}.
     */

  }, {
    key: "isExpectedToken",
    value: function isExpectedToken(symbol) {
      var atn = this._interp.atn;
      var ctx = this._ctx;
      var s = atn.states[this.state];
      var following = atn.nextTokens(s);

      if (following.contains(symbol)) {
        return true;
      }

      if (!following.contains(_Token.default.EPSILON)) {
        return false;
      }

      while (ctx !== null && ctx.invokingState >= 0 && following.contains(_Token.default.EPSILON)) {
        var invokingState = atn.states[ctx.invokingState];
        var rt = invokingState.transitions[0];
        following = atn.nextTokens(rt.followState);

        if (following.contains(symbol)) {
          return true;
        }

        ctx = ctx.parentCtx;
      }

      if (following.contains(_Token.default.EPSILON) && symbol === _Token.default.EOF) {
        return true;
      } else {
        return false;
      }
    }
    /**
     * Computes the set of input symbols which could follow the current parser
     * state and context, as given by {@link //getState} and {@link //getContext},
     * respectively.
     *
     * @see ATN//getExpectedTokens(int, RuleContext)
     */

  }, {
    key: "getExpectedTokens",
    value: function getExpectedTokens() {
      return this._interp.atn.getExpectedTokens(this.state, this._ctx);
    }
  }, {
    key: "getExpectedTokensWithinCurrentRule",
    value: function getExpectedTokensWithinCurrentRule() {
      var atn = this._interp.atn;
      var s = atn.states[this.state];
      return atn.nextTokens(s);
    } // Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.

  }, {
    key: "getRuleIndex",
    value: function getRuleIndex(ruleName) {
      var ruleIndex = this.getRuleIndexMap()[ruleName];

      if (ruleIndex !== null) {
        return ruleIndex;
      } else {
        return -1;
      }
    }
    /**
     * Return List&lt;String&gt; of the rule names in your parser instance
     * leading up to a call to the current rule. You could override if
     * you want more details such as the file/line info of where
     * in the ATN a rule is invoked.
     *
     * this is very useful for error messages.
     */

  }, {
    key: "getRuleInvocationStack",
    value: function getRuleInvocationStack(p) {
      p = p || null;

      if (p === null) {
        p = this._ctx;
      }

      var stack = [];

      while (p !== null) {
        // compute what follows who invoked us
        var ruleIndex = p.ruleIndex;

        if (ruleIndex < 0) {
          stack.push("n/a");
        } else {
          stack.push(this.ruleNames[ruleIndex]);
        }

        p = p.parentCtx;
      }

      return stack;
    } // For debugging and other purposes.

  }, {
    key: "getDFAStrings",
    value: function getDFAStrings() {
      return this._interp.decisionToDFA.toString();
    } // For debugging and other purposes.

  }, {
    key: "dumpDFA",
    value: function dumpDFA() {
      var seenOne = false;

      for (var i = 0; i < this._interp.decisionToDFA.length; i++) {
        var dfa = this._interp.decisionToDFA[i];

        if (dfa.states.length > 0) {
          if (seenOne) {
            console.log();
          }

          this.printer.println("Decision " + dfa.decision + ":");
          this.printer.print(dfa.toString(this.literalNames, this.symbolicNames));
          seenOne = true;
        }
      }
    }
    /*
        "			printer = function() {\r\n" +
        "				this.println = function(s) { document.getElementById('output') += s + '\\n'; }\r\n" +
        "				this.print = function(s) { document.getElementById('output') += s; }\r\n" +
        "			};\r\n" +
        */

  }, {
    key: "getSourceName",
    value: function getSourceName() {
      return this._input.sourceName;
    }
    /**
     * During a parse is sometimes useful to listen in on the rule entry and exit
     * events as well as token matches. this is for quick and dirty debugging.
     */

  }, {
    key: "setTrace",
    value: function setTrace(trace) {
      if (!trace) {
        this.removeParseListener(this._tracer);
        this._tracer = null;
      } else {
        if (this._tracer !== null) {
          this.removeParseListener(this._tracer);
        }

        this._tracer = new _TraceListener.default(this);
        this.addParseListener(this._tracer);
      }
    }
  }]);

  return Parser;
}(_Recognizer2.default);
/**
 * this field maps from the serialized ATN string to the deserialized {@link
    * ATN} with
 * bypass alternatives.
 *
 * @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()
 */


exports.default = Parser;
Parser.bypassAltsAtnCache = {};
},{"./Token.js":"tczR","./tree/TerminalNode.js":"GZ6H","./tree/ErrorNode.js":"UIKP","./Recognizer.js":"Vp1s","./error/DefaultErrorStrategy.js":"sSlT","./atn/ATNDeserializer.js":"qCvY","./atn/ATNDeserializationOptions.js":"w0lY","./TraceListener.js":"T5dz"}],"PsqE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _PredictionContext = _interopRequireDefault(require("../context/PredictionContext.js"));

var _HashMap = _interopRequireDefault(require("../misc/HashMap.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * Used to cache {@link PredictionContext} objects. Its used for the shared
 * context cash associated with contexts in DFA states. This cache
 * can be used for both lexers and parsers.
 */
var PredictionContextCache = /*#__PURE__*/function () {
  function PredictionContextCache() {
    _classCallCheck(this, PredictionContextCache);

    this.cache = new _HashMap.default();
  }
  /**
   * Add a context to the cache and return it. If the context already exists,
   * return that one instead and do not add a new context to the cache.
   * Protect shared cache from unsafe thread access.
   */


  _createClass(PredictionContextCache, [{
    key: "add",
    value: function add(ctx) {
      if (ctx === _PredictionContext.default.EMPTY) {
        return _PredictionContext.default.EMPTY;
      }

      var existing = this.cache.get(ctx) || null;

      if (existing !== null) {
        return existing;
      }

      this.cache.set(ctx, ctx);
      return ctx;
    }
  }, {
    key: "get",
    value: function get(ctx) {
      return this.cache.get(ctx) || null;
    }
  }, {
    key: "length",
    get: function get() {
      return this.cache.length;
    }
  }]);

  return PredictionContextCache;
}();

exports.default = PredictionContextCache;
},{"../context/PredictionContext.js":"QQ7c","../misc/HashMap.js":"TPpe"}],"gmFN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Interval = _interopRequireDefault(require("../misc/Interval.js"));

var _Token = _interopRequireDefault(require("../Token.js"));

var _TerminalNode2 = _interopRequireDefault(require("./TerminalNode.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var TerminalNodeImpl = /*#__PURE__*/function (_TerminalNode) {
  _inherits(TerminalNodeImpl, _TerminalNode);

  var _super = _createSuper(TerminalNodeImpl);

  function TerminalNodeImpl(symbol) {
    var _this;

    _classCallCheck(this, TerminalNodeImpl);

    _this = _super.call(this);
    _this.parentCtx = null;
    _this.symbol = symbol;
    return _this;
  }

  _createClass(TerminalNodeImpl, [{
    key: "getChild",
    value: function getChild(i) {
      return null;
    }
  }, {
    key: "getSymbol",
    value: function getSymbol() {
      return this.symbol;
    }
  }, {
    key: "getParent",
    value: function getParent() {
      return this.parentCtx;
    }
  }, {
    key: "getPayload",
    value: function getPayload() {
      return this.symbol;
    }
  }, {
    key: "getSourceInterval",
    value: function getSourceInterval() {
      if (this.symbol === null) {
        return _Interval.default.INVALID_INTERVAL;
      }

      var tokenIndex = this.symbol.tokenIndex;
      return new _Interval.default(tokenIndex, tokenIndex);
    }
  }, {
    key: "getChildCount",
    value: function getChildCount() {
      return 0;
    }
  }, {
    key: "accept",
    value: function accept(visitor) {
      return visitor.visitTerminal(this);
    }
  }, {
    key: "getText",
    value: function getText() {
      return this.symbol.text;
    }
  }, {
    key: "toString",
    value: function toString() {
      if (this.symbol.type === _Token.default.EOF) {
        return "<EOF>";
      } else {
        return this.symbol.text;
      }
    }
  }]);

  return TerminalNodeImpl;
}(_TerminalNode2.default);

exports.default = TerminalNodeImpl;
},{"../misc/Interval.js":"JCiE","../Token.js":"tczR","./TerminalNode.js":"GZ6H"}],"A344":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _TerminalNodeImpl2 = _interopRequireDefault(require("./TerminalNodeImpl.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ErrorNodeImpl = /*#__PURE__*/function (_TerminalNodeImpl) {
  _inherits(ErrorNodeImpl, _TerminalNodeImpl);

  var _super = _createSuper(ErrorNodeImpl);

  function ErrorNodeImpl(token) {
    _classCallCheck(this, ErrorNodeImpl);

    return _super.call(this, token);
  }

  _createClass(ErrorNodeImpl, [{
    key: "isErrorNode",
    value: function isErrorNode() {
      return true;
    }
  }, {
    key: "accept",
    value: function accept(visitor) {
      return visitor.visitErrorNode(this);
    }
  }]);

  return ErrorNodeImpl;
}(_TerminalNodeImpl2.default);

exports.default = ErrorNodeImpl;
},{"./TerminalNodeImpl.js":"gmFN"}],"KXUV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _RuleContext2 = _interopRequireDefault(require("./RuleContext.js"));

var _TerminalNode = _interopRequireDefault(require("../tree/TerminalNode.js"));

var _TerminalNodeImpl = _interopRequireDefault(require("../tree/TerminalNodeImpl.js"));

var _ErrorNodeImpl = _interopRequireDefault(require("../tree/ErrorNodeImpl.js"));

var _Interval = _interopRequireDefault(require("../misc/Interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * A rule invocation record for parsing.
 *
 *  Contains all of the information about the current rule not stored in the
 *  RuleContext. It handles parse tree children list, Any ATN state
 *  tracing, and the default values available for rule indications:
 *  start, stop, rule index, current alt number, current
 *  ATN state.
 *
 *  Subclasses made for each rule and grammar track the parameters,
 *  return values, locals, and labels specific to that rule. These
 *  are the objects that are returned from rules.
 *
 *  Note text is not an actual field of a rule return value; it is computed
 *  from start and stop using the input stream's toString() method.  I
 *  could add a ctor to this so that we can pass in and store the input
 *  stream, but I'm not sure we want to do that.  It would seem to be undefined
 *  to get the .text property anyway if the rule matches tokens from multiple
 *  input streams.
 *
 *  I do not use getters for fields of objects that are used simply to
 *  group values such as this aggregate.  The getters/setters are there to
 *  satisfy the superclass interface.
 */
var ParserRuleContext = /*#__PURE__*/function (_RuleContext) {
  _inherits(ParserRuleContext, _RuleContext);

  var _super = _createSuper(ParserRuleContext);

  function ParserRuleContext(parent, invokingStateNumber) {
    var _this;

    _classCallCheck(this, ParserRuleContext);

    parent = parent || null;
    invokingStateNumber = invokingStateNumber || null;
    _this = _super.call(this, parent, invokingStateNumber);
    _this.ruleIndex = -1;
    /**
     * If we are debugging or building a parse tree for a visitor,
     * we need to track all of the tokens and rule invocations associated
     * with this rule's context. This is empty for parsing w/o tree constr.
     * operation because we don't the need to track the details about
     * how we parse this rule.
     */

    _this.children = null;
    _this.start = null;
    _this.stop = null;
    /**
     * The exception that forced this rule to return. If the rule successfully
     * completed, this is {@code null}.
     */

    _this.exception = null;
    return _this;
  } // COPY a ctx (I'm deliberately not using copy constructor)


  _createClass(ParserRuleContext, [{
    key: "copyFrom",
    value: function copyFrom(ctx) {
      // from RuleContext
      this.parentCtx = ctx.parentCtx;
      this.invokingState = ctx.invokingState;
      this.children = null;
      this.start = ctx.start;
      this.stop = ctx.stop; // copy any error nodes to alt label node

      if (ctx.children) {
        this.children = []; // reset parent pointer for any error nodes

        ctx.children.map(function (child) {
          if (child instanceof _ErrorNodeImpl.default) {
            this.children.push(child);
            child.parentCtx = this;
          }
        }, this);
      }
    } // Double dispatch methods for listeners

  }, {
    key: "enterRule",
    value: function enterRule(listener) {}
  }, {
    key: "exitRule",
    value: function exitRule(listener) {} // Does not set parent link; other add methods do that

  }, {
    key: "addChild",
    value: function addChild(child) {
      if (this.children === null) {
        this.children = [];
      }

      this.children.push(child);
      return child;
    }
    /** Used by enterOuterAlt to toss out a RuleContext previously added as
     * we entered a rule. If we have // label, we will need to remove
     * generic ruleContext object.
     */

  }, {
    key: "removeLastChild",
    value: function removeLastChild() {
      if (this.children !== null) {
        this.children.pop();
      }
    }
  }, {
    key: "addTokenNode",
    value: function addTokenNode(token) {
      var node = new _TerminalNodeImpl.default(token);
      this.addChild(node);
      node.parentCtx = this;
      return node;
    }
  }, {
    key: "addErrorNode",
    value: function addErrorNode(badToken) {
      var node = new _ErrorNodeImpl.default(badToken);
      this.addChild(node);
      node.parentCtx = this;
      return node;
    }
  }, {
    key: "getChild",
    value: function getChild(i, type) {
      type = type || null;

      if (this.children === null || i < 0 || i >= this.children.length) {
        return null;
      }

      if (type === null) {
        return this.children[i];
      } else {
        for (var j = 0; j < this.children.length; j++) {
          var child = this.children[j];

          if (child instanceof type) {
            if (i === 0) {
              return child;
            } else {
              i -= 1;
            }
          }
        }

        return null;
      }
    }
  }, {
    key: "getToken",
    value: function getToken(ttype, i) {
      if (this.children === null || i < 0 || i >= this.children.length) {
        return null;
      }

      for (var j = 0; j < this.children.length; j++) {
        var child = this.children[j];

        if (child instanceof _TerminalNode.default) {
          if (child.symbol.type === ttype) {
            if (i === 0) {
              return child;
            } else {
              i -= 1;
            }
          }
        }
      }

      return null;
    }
  }, {
    key: "getTokens",
    value: function getTokens(ttype) {
      if (this.children === null) {
        return [];
      } else {
        var tokens = [];

        for (var j = 0; j < this.children.length; j++) {
          var child = this.children[j];

          if (child instanceof _TerminalNode.default) {
            if (child.symbol.type === ttype) {
              tokens.push(child);
            }
          }
        }

        return tokens;
      }
    }
  }, {
    key: "getTypedRuleContext",
    value: function getTypedRuleContext(ctxType, i) {
      return this.getChild(i, ctxType);
    }
  }, {
    key: "getTypedRuleContexts",
    value: function getTypedRuleContexts(ctxType) {
      if (this.children === null) {
        return [];
      } else {
        var contexts = [];

        for (var j = 0; j < this.children.length; j++) {
          var child = this.children[j];

          if (child instanceof ctxType) {
            contexts.push(child);
          }
        }

        return contexts;
      }
    }
  }, {
    key: "getChildCount",
    value: function getChildCount() {
      if (this.children === null) {
        return 0;
      } else {
        return this.children.length;
      }
    }
  }, {
    key: "getSourceInterval",
    value: function getSourceInterval() {
      if (this.start === null || this.stop === null) {
        return _Interval.default.INVALID_INTERVAL;
      } else {
        return new _Interval.default(this.start.tokenIndex, this.stop.tokenIndex);
      }
    }
  }]);

  return ParserRuleContext;
}(_RuleContext2.default);

exports.default = ParserRuleContext;
_RuleContext2.default.EMPTY = new ParserRuleContext();
},{"./RuleContext.js":"WP8O","../tree/TerminalNode.js":"GZ6H","../tree/TerminalNodeImpl.js":"gmFN","../tree/ErrorNodeImpl.js":"A344","../misc/Interval.js":"JCiE"}],"g8ct":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _arrayToString = _interopRequireDefault(require("../utils/arrayToString.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.
 * Use is of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
var _default = {
  arrayToString: _arrayToString.default
};
exports.default = _default;
},{"../utils/arrayToString.js":"oS3b"}],"pb0F":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("./utils/stringHashCode.js");

require("./polyfills/codepointat.js");

require("./polyfills/fromcodepoint.js");

var _index = _interopRequireDefault(require("./atn/index.js"));

var _index2 = _interopRequireDefault(require("./dfa/index.js"));

var _index3 = _interopRequireDefault(require("./tree/index.js"));

var _index4 = _interopRequireDefault(require("./error/index.js"));

var _Token = _interopRequireDefault(require("./Token.js"));

var _CommonToken = _interopRequireDefault(require("./CommonToken.js"));

var _CharStreams = _interopRequireDefault(require("./CharStreams.js"));

var _InputStream = _interopRequireDefault(require("./InputStream.js"));

var _FileStream = _interopRequireDefault(require("./FileStream.js"));

var _CommonTokenStream = _interopRequireDefault(require("./CommonTokenStream.js"));

var _Lexer = _interopRequireDefault(require("./Lexer.js"));

var _Parser = _interopRequireDefault(require("./Parser.js"));

var _PredictionContextCache = _interopRequireDefault(require("./atn/PredictionContextCache.js"));

var _ParserRuleContext = _interopRequireDefault(require("./context/ParserRuleContext.js"));

var _Interval = _interopRequireDefault(require("./misc/Interval.js"));

var _IntervalSet = _interopRequireDefault(require("./misc/IntervalSet.js"));

var _LL1Analyzer = _interopRequireDefault(require("./atn/LL1Analyzer.js"));

var _index5 = _interopRequireDefault(require("./utils/index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
var antlr4 = {
  atn: _index.default,
  dfa: _index2.default,
  tree: _index3.default,
  error: _index4.default,
  Token: _Token.default,
  CommonToken: _CommonToken.default,
  CharStreams: _CharStreams.default,
  InputStream: _InputStream.default,
  FileStream: _FileStream.default,
  CommonTokenStream: _CommonTokenStream.default,
  Lexer: _Lexer.default,
  Parser: _Parser.default,
  PredictionContextCache: _PredictionContextCache.default,
  ParserRuleContext: _ParserRuleContext.default,
  Interval: _Interval.default,
  IntervalSet: _IntervalSet.default,
  LL1Analyzer: _LL1Analyzer.default,
  Utils: _index5.default
};
var _default = antlr4;
exports.default = _default;
},{"./utils/stringHashCode.js":"Nizs","./polyfills/codepointat.js":"ghVe","./polyfills/fromcodepoint.js":"HvJh","./atn/index.js":"xE1o","./dfa/index.js":"QEQl","./tree/index.js":"WBG3","./error/index.js":"swac","./Token.js":"tczR","./CommonToken.js":"YTV7","./CharStreams.js":"OD4z","./InputStream.js":"Tf2N","./FileStream.js":"qqAn","./CommonTokenStream.js":"g0Jg","./Lexer.js":"FKtu","./Parser.js":"b1E4","./atn/PredictionContextCache.js":"PsqE","./context/ParserRuleContext.js":"KXUV","./misc/Interval.js":"JCiE","./misc/IntervalSet.js":"lP1U","./atn/LL1Analyzer.js":"qekX","./utils/index.js":"g8ct"}],"LUvD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var serializedATN = [4, 0, 24, 177, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 1, 0, 1, 0, 1, 0, 1, 0, 5, 0, 54, 8, 0, 10, 0, 12, 0, 57, 9, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 5, 19, 157, 8, 19, 10, 19, 12, 19, 160, 9, 19, 1, 20, 1, 20, 1, 21, 4, 21, 165, 8, 21, 11, 21, 12, 21, 166, 1, 22, 1, 22, 1, 23, 4, 23, 172, 8, 23, 11, 23, 12, 23, 173, 1, 23, 1, 23, 0, 0, 24, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41, 21, 43, 22, 45, 23, 47, 24, 1, 0, 4, 2, 0, 10, 10, 13, 13, 3, 0, 65, 90, 97, 122, 1040, 1103, 1, 0, 48, 57, 3, 0, 9, 10, 13, 13, 32, 32, 181, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 1, 49, 1, 0, 0, 0, 3, 60, 1, 0, 0, 0, 5, 66, 1, 0, 0, 0, 7, 71, 1, 0, 0, 0, 9, 77, 1, 0, 0, 0, 11, 84, 1, 0, 0, 0, 13, 91, 1, 0, 0, 0, 15, 94, 1, 0, 0, 0, 17, 100, 1, 0, 0, 0, 19, 106, 1, 0, 0, 0, 21, 114, 1, 0, 0, 0, 23, 119, 1, 0, 0, 0, 25, 125, 1, 0, 0, 0, 27, 127, 1, 0, 0, 0, 29, 129, 1, 0, 0, 0, 31, 134, 1, 0, 0, 0, 33, 137, 1, 0, 0, 0, 35, 143, 1, 0, 0, 0, 37, 147, 1, 0, 0, 0, 39, 153, 1, 0, 0, 0, 41, 161, 1, 0, 0, 0, 43, 164, 1, 0, 0, 0, 45, 168, 1, 0, 0, 0, 47, 171, 1, 0, 0, 0, 49, 50, 5, 47, 0, 0, 50, 51, 5, 47, 0, 0, 51, 55, 1, 0, 0, 0, 52, 54, 8, 0, 0, 0, 53, 52, 1, 0, 0, 0, 54, 57, 1, 0, 0, 0, 55, 53, 1, 0, 0, 0, 55, 56, 1, 0, 0, 0, 56, 58, 1, 0, 0, 0, 57, 55, 1, 0, 0, 0, 58, 59, 6, 0, 0, 0, 59, 2, 1, 0, 0, 0, 60, 61, 5, 1042, 0, 0, 61, 62, 5, 1042, 0, 0, 62, 63, 5, 1045, 0, 0, 63, 64, 5, 1056, 0, 0, 64, 65, 5, 1061, 0, 0, 65, 4, 1, 0, 0, 0, 66, 67, 5, 1042, 0, 0, 67, 68, 5, 1053, 0, 0, 68, 69, 5, 1048, 0, 0, 69, 70, 5, 1047, 0, 0, 70, 6, 1, 0, 0, 0, 71, 72, 5, 1042, 0, 0, 72, 73, 5, 1051, 0, 0, 73, 74, 5, 1045, 0, 0, 74, 75, 5, 1042, 0, 0, 75, 76, 5, 1054, 0, 0, 76, 8, 1, 0, 0, 0, 77, 78, 5, 1042, 0, 0, 78, 79, 5, 1055, 0, 0, 79, 80, 5, 1056, 0, 0, 80, 81, 5, 1040, 0, 0, 81, 82, 5, 1042, 0, 0, 82, 83, 5, 1054, 0, 0, 83, 10, 1, 0, 0, 0, 84, 85, 5, 1057, 0, 0, 85, 86, 5, 1058, 0, 0, 86, 87, 5, 1054, 0, 0, 87, 88, 5, 1071, 0, 0, 88, 89, 5, 1058, 0, 0, 89, 90, 5, 1068, 0, 0, 90, 12, 1, 0, 0, 0, 91, 92, 5, 1053, 0, 0, 92, 93, 5, 1045, 0, 0, 93, 14, 1, 0, 0, 0, 94, 95, 5, 1055, 0, 0, 95, 96, 5, 1059, 0, 0, 96, 97, 5, 1057, 0, 0, 97, 98, 5, 1058, 0, 0, 98, 99, 5, 1054, 0, 0, 99, 16, 1, 0, 0, 0, 100, 101, 5, 1062, 0, 0, 101, 102, 5, 1048, 0, 0, 102, 103, 5, 1060, 0, 0, 103, 104, 5, 1056, 0, 0, 104, 105, 5, 1040, 0, 0, 105, 18, 1, 0, 0, 0, 106, 107, 5, 1055, 0, 0, 107, 108, 5, 1054, 0, 0, 108, 109, 5, 1042, 0, 0, 109, 110, 5, 1058, 0, 0, 110, 111, 5, 1054, 0, 0, 111, 112, 5, 1056, 0, 0, 112, 113, 5, 1048, 0, 0, 113, 20, 1, 0, 0, 0, 114, 115, 5, 1055, 0, 0, 115, 116, 5, 1054, 0, 0, 116, 117, 5, 1050, 0, 0, 117, 118, 5, 1040, 0, 0, 118, 22, 1, 0, 0, 0, 119, 120, 5, 1041, 0, 0, 120, 121, 5, 1059, 0, 0, 121, 122, 5, 1050, 0, 0, 122, 123, 5, 1042, 0, 0, 123, 124, 5, 1040, 0, 0, 124, 24, 1, 0, 0, 0, 125, 126, 5, 123, 0, 0, 126, 26, 1, 0, 0, 0, 127, 128, 5, 125, 0, 0, 128, 28, 1, 0, 0, 0, 129, 130, 5, 1045, 0, 0, 130, 131, 5, 1057, 0, 0, 131, 132, 5, 1051, 0, 0, 132, 133, 5, 1048, 0, 0, 133, 30, 1, 0, 0, 0, 134, 135, 5, 1058, 0, 0, 135, 136, 5, 1054, 0, 0, 136, 32, 1, 0, 0, 0, 137, 138, 5, 1048, 0, 0, 138, 139, 5, 1053, 0, 0, 139, 140, 5, 1040, 0, 0, 140, 141, 5, 1063, 0, 0, 141, 142, 5, 1045, 0, 0, 142, 34, 1, 0, 0, 0, 143, 144, 5, 1069, 0, 0, 144, 145, 5, 1058, 0, 0, 145, 146, 5, 1054, 0, 0, 146, 36, 1, 0, 0, 0, 147, 148, 5, 1050, 0, 0, 148, 149, 5, 1054, 0, 0, 149, 150, 5, 1053, 0, 0, 150, 151, 5, 1045, 0, 0, 151, 152, 5, 1062, 0, 0, 152, 38, 1, 0, 0, 0, 153, 158, 3, 41, 20, 0, 154, 157, 3, 41, 20, 0, 155, 157, 3, 45, 22, 0, 156, 154, 1, 0, 0, 0, 156, 155, 1, 0, 0, 0, 157, 160, 1, 0, 0, 0, 158, 156, 1, 0, 0, 0, 158, 159, 1, 0, 0, 0, 159, 40, 1, 0, 0, 0, 160, 158, 1, 0, 0, 0, 161, 162, 7, 1, 0, 0, 162, 42, 1, 0, 0, 0, 163, 165, 3, 45, 22, 0, 164, 163, 1, 0, 0, 0, 165, 166, 1, 0, 0, 0, 166, 164, 1, 0, 0, 0, 166, 167, 1, 0, 0, 0, 167, 44, 1, 0, 0, 0, 168, 169, 7, 2, 0, 0, 169, 46, 1, 0, 0, 0, 170, 172, 7, 3, 0, 0, 171, 170, 1, 0, 0, 0, 172, 173, 1, 0, 0, 0, 173, 171, 1, 0, 0, 0, 173, 174, 1, 0, 0, 0, 174, 175, 1, 0, 0, 0, 175, 176, 6, 23, 0, 0, 176, 48, 1, 0, 0, 0, 6, 0, 55, 156, 158, 166, 173, 1, 6, 0, 0];
var atn = new _antlr.default.atn.ATNDeserializer().deserialize(serializedATN);
var decisionsToDFA = atn.decisionToState.map(function (ds, index) {
  return new _antlr.default.dfa.DFA(ds, index);
});

var CockroachLexer = /*#__PURE__*/function (_antlr4$Lexer) {
  _inherits(CockroachLexer, _antlr4$Lexer);

  var _super = _createSuper(CockroachLexer);

  function CockroachLexer(input) {
    var _this;

    _classCallCheck(this, CockroachLexer);

    _this = _super.call(this, input);
    _this._interp = new _antlr.default.atn.LexerATNSimulator(_assertThisInitialized(_this), atn, decisionsToDFA, new _antlr.default.PredictionContextCache());
    return _this;
  }

  _createClass(CockroachLexer, [{
    key: "atn",
    get: function get() {
      return atn;
    }
  }]);

  return CockroachLexer;
}(_antlr.default.Lexer);

exports.default = CockroachLexer;

_defineProperty(CockroachLexer, "grammarFileName", "Cockroach.g4");

_defineProperty(CockroachLexer, "channelNames", ["DEFAULT_TOKEN_CHANNEL", "HIDDEN"]);

_defineProperty(CockroachLexer, "modeNames", ["DEFAULT_MODE"]);

_defineProperty(CockroachLexer, "literalNames", [null, null, "'\\u0412\\u0412\\u0415\\u0420\\u0425'", "'\\u0412\\u041D\\u0418\\u0417'", "'\\u0412\\u041B\\u0415\\u0412\\u041E'", "'\\u0412\\u041F\\u0420\\u0410\\u0412\\u041E'", "'\\u0421\\u0422\\u041E\\u042F\\u0422\\u042C'", "'\\u041D\\u0415'", "'\\u041F\\u0423\\u0421\\u0422\\u041E'", "'\\u0426\\u0418\\u0424\\u0420\\u0410'", "'\\u041F\\u041E\\u0412\\u0422\\u041E\\u0420\\u0418'", "'\\u041F\\u041E\\u041A\\u0410'", "'\\u0411\\u0423\\u041A\\u0412\\u0410'", "'{'", "'}'", "'\\u0415\\u0421\\u041B\\u0418'", "'\\u0422\\u041E'", "'\\u0418\\u041D\\u0410\\u0427\\u0415'", "'\\u042D\\u0422\\u041E'", "'\\u041A\\u041E\\u041D\\u0415\\u0426'"]);

_defineProperty(CockroachLexer, "symbolicNames", [null, "LINE_COMMENT", "UP", "DOWN", "LEFT", "RIGHT", "STAY", "NOT", "EMPTY", "NUMBER", "REPEAT", "WHILE", "CHAR", "OPEN_BRACKET", "CLOSE_BRACKET", "IF", "THEN", "ELSE", "THIS", "END", "ID", "LETTER", "NUM", "DIGIT", "SPACE"]);

_defineProperty(CockroachLexer, "ruleNames", ["LINE_COMMENT", "UP", "DOWN", "LEFT", "RIGHT", "STAY", "NOT", "EMPTY", "NUMBER", "REPEAT", "WHILE", "CHAR", "OPEN_BRACKET", "CLOSE_BRACKET", "IF", "THEN", "ELSE", "THIS", "END", "ID", "LETTER", "NUM", "DIGIT", "SPACE"]);

CockroachLexer.EOF = _antlr.default.Token.EOF;
CockroachLexer.LINE_COMMENT = 1;
CockroachLexer.UP = 2;
CockroachLexer.DOWN = 3;
CockroachLexer.LEFT = 4;
CockroachLexer.RIGHT = 5;
CockroachLexer.STAY = 6;
CockroachLexer.NOT = 7;
CockroachLexer.EMPTY = 8;
CockroachLexer.NUMBER = 9;
CockroachLexer.REPEAT = 10;
CockroachLexer.WHILE = 11;
CockroachLexer.CHAR = 12;
CockroachLexer.OPEN_BRACKET = 13;
CockroachLexer.CLOSE_BRACKET = 14;
CockroachLexer.IF = 15;
CockroachLexer.THEN = 16;
CockroachLexer.ELSE = 17;
CockroachLexer.THIS = 18;
CockroachLexer.END = 19;
CockroachLexer.ID = 20;
CockroachLexer.LETTER = 21;
CockroachLexer.NUM = 22;
CockroachLexer.DIGIT = 23;
CockroachLexer.SPACE = 24;
},{"antlr4":"pb0F"}],"IYi4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

// This class defines a complete listener for a parse tree produced by CockroachParser.
var CockroachListener = /*#__PURE__*/function (_antlr4$tree$ParseTre) {
  _inherits(CockroachListener, _antlr4$tree$ParseTre);

  var _super = _createSuper(CockroachListener);

  function CockroachListener() {
    _classCallCheck(this, CockroachListener);

    return _super.apply(this, arguments);
  }

  _createClass(CockroachListener, [{
    key: "enterProg",
    value: // Enter a parse tree produced by CockroachParser#prog.
    function enterProg(ctx) {} // Exit a parse tree produced by CockroachParser#prog.

  }, {
    key: "exitProg",
    value: function exitProg(ctx) {} // Enter a parse tree produced by CockroachParser#exprs.

  }, {
    key: "enterExprs",
    value: function enterExprs(ctx) {} // Exit a parse tree produced by CockroachParser#exprs.

  }, {
    key: "exitExprs",
    value: function exitExprs(ctx) {} // Enter a parse tree produced by CockroachParser#expr.

  }, {
    key: "enterExpr",
    value: function enterExpr(ctx) {} // Exit a parse tree produced by CockroachParser#expr.

  }, {
    key: "exitExpr",
    value: function exitExpr(ctx) {} // Enter a parse tree produced by CockroachParser#statement.

  }, {
    key: "enterStatement",
    value: function enterStatement(ctx) {} // Exit a parse tree produced by CockroachParser#statement.

  }, {
    key: "exitStatement",
    value: function exitStatement(ctx) {} // Enter a parse tree produced by CockroachParser#repeat.

  }, {
    key: "enterRepeat",
    value: function enterRepeat(ctx) {} // Exit a parse tree produced by CockroachParser#repeat.

  }, {
    key: "exitRepeat",
    value: function exitRepeat(ctx) {} // Enter a parse tree produced by CockroachParser#while.

  }, {
    key: "enterWhile",
    value: function enterWhile(ctx) {} // Exit a parse tree produced by CockroachParser#while.

  }, {
    key: "exitWhile",
    value: function exitWhile(ctx) {} // Enter a parse tree produced by CockroachParser#group.

  }, {
    key: "enterGroup",
    value: function enterGroup(ctx) {} // Exit a parse tree produced by CockroachParser#group.

  }, {
    key: "exitGroup",
    value: function exitGroup(ctx) {} // Enter a parse tree produced by CockroachParser#if.

  }, {
    key: "enterIf",
    value: function enterIf(ctx) {} // Exit a parse tree produced by CockroachParser#if.

  }, {
    key: "exitIf",
    value: function exitIf(ctx) {} // Enter a parse tree produced by CockroachParser#proc.

  }, {
    key: "enterProc",
    value: function enterProc(ctx) {} // Exit a parse tree produced by CockroachParser#proc.

  }, {
    key: "exitProc",
    value: function exitProc(ctx) {} // Enter a parse tree produced by CockroachParser#condition.

  }, {
    key: "enterCondition",
    value: function enterCondition(ctx) {} // Exit a parse tree produced by CockroachParser#condition.

  }, {
    key: "exitCondition",
    value: function exitCondition(ctx) {} // Enter a parse tree produced by CockroachParser#id.

  }, {
    key: "enterId",
    value: function enterId(ctx) {} // Exit a parse tree produced by CockroachParser#id.

  }, {
    key: "exitId",
    value: function exitId(ctx) {}
  }]);

  return CockroachListener;
}(_antlr.default.tree.ParseTreeListener);

exports.default = CockroachListener;
},{"antlr4":"pb0F"}],"tMpX":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

var _CockroachListener = _interopRequireDefault(require("./CockroachListener.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var serializedATN = [4, 1, 24, 89, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 1, 0, 1, 0, 1, 0, 1, 1, 4, 1, 27, 8, 1, 11, 1, 12, 1, 28, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 38, 8, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 46, 8, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 3, 7, 66, 8, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 3, 9, 74, 8, 9, 1, 9, 1, 9, 3, 9, 78, 8, 9, 1, 9, 1, 9, 3, 9, 82, 8, 9, 1, 9, 3, 9, 85, 8, 9, 1, 10, 1, 10, 1, 10, 0, 0, 11, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 0, 0, 95, 0, 22, 1, 0, 0, 0, 2, 26, 1, 0, 0, 0, 4, 37, 1, 0, 0, 0, 6, 45, 1, 0, 0, 0, 8, 47, 1, 0, 0, 0, 10, 51, 1, 0, 0, 0, 12, 55, 1, 0, 0, 0, 14, 59, 1, 0, 0, 0, 16, 67, 1, 0, 0, 0, 18, 84, 1, 0, 0, 0, 20, 86, 1, 0, 0, 0, 22, 23, 3, 2, 1, 0, 23, 24, 5, 0, 0, 1, 24, 1, 1, 0, 0, 0, 25, 27, 3, 4, 2, 0, 26, 25, 1, 0, 0, 0, 27, 28, 1, 0, 0, 0, 28, 26, 1, 0, 0, 0, 28, 29, 1, 0, 0, 0, 29, 3, 1, 0, 0, 0, 30, 38, 3, 6, 3, 0, 31, 38, 3, 8, 4, 0, 32, 38, 3, 10, 5, 0, 33, 38, 3, 14, 7, 0, 34, 38, 3, 16, 8, 0, 35, 38, 3, 20, 10, 0, 36, 38, 5, 1, 0, 0, 37, 30, 1, 0, 0, 0, 37, 31, 1, 0, 0, 0, 37, 32, 1, 0, 0, 0, 37, 33, 1, 0, 0, 0, 37, 34, 1, 0, 0, 0, 37, 35, 1, 0, 0, 0, 37, 36, 1, 0, 0, 0, 38, 5, 1, 0, 0, 0, 39, 46, 5, 2, 0, 0, 40, 46, 5, 3, 0, 0, 41, 46, 5, 4, 0, 0, 42, 46, 5, 5, 0, 0, 43, 46, 5, 6, 0, 0, 44, 46, 3, 12, 6, 0, 45, 39, 1, 0, 0, 0, 45, 40, 1, 0, 0, 0, 45, 41, 1, 0, 0, 0, 45, 42, 1, 0, 0, 0, 45, 43, 1, 0, 0, 0, 45, 44, 1, 0, 0, 0, 46, 7, 1, 0, 0, 0, 47, 48, 5, 10, 0, 0, 48, 49, 5, 22, 0, 0, 49, 50, 3, 4, 2, 0, 50, 9, 1, 0, 0, 0, 51, 52, 5, 11, 0, 0, 52, 53, 3, 18, 9, 0, 53, 54, 3, 4, 2, 0, 54, 11, 1, 0, 0, 0, 55, 56, 5, 13, 0, 0, 56, 57, 3, 2, 1, 0, 57, 58, 5, 14, 0, 0, 58, 13, 1, 0, 0, 0, 59, 60, 5, 15, 0, 0, 60, 61, 3, 18, 9, 0, 61, 62, 5, 16, 0, 0, 62, 65, 3, 6, 3, 0, 63, 64, 5, 17, 0, 0, 64, 66, 3, 6, 3, 0, 65, 63, 1, 0, 0, 0, 65, 66, 1, 0, 0, 0, 66, 15, 1, 0, 0, 0, 67, 68, 5, 18, 0, 0, 68, 69, 3, 20, 10, 0, 69, 70, 3, 2, 1, 0, 70, 71, 5, 19, 0, 0, 71, 17, 1, 0, 0, 0, 72, 74, 5, 7, 0, 0, 73, 72, 1, 0, 0, 0, 73, 74, 1, 0, 0, 0, 74, 75, 1, 0, 0, 0, 75, 85, 3, 20, 10, 0, 76, 78, 5, 7, 0, 0, 77, 76, 1, 0, 0, 0, 77, 78, 1, 0, 0, 0, 78, 79, 1, 0, 0, 0, 79, 85, 5, 8, 0, 0, 80, 82, 5, 7, 0, 0, 81, 80, 1, 0, 0, 0, 81, 82, 1, 0, 0, 0, 82, 83, 1, 0, 0, 0, 83, 85, 5, 9, 0, 0, 84, 73, 1, 0, 0, 0, 84, 77, 1, 0, 0, 0, 84, 81, 1, 0, 0, 0, 85, 19, 1, 0, 0, 0, 86, 87, 5, 20, 0, 0, 87, 21, 1, 0, 0, 0, 8, 28, 37, 45, 65, 73, 77, 81, 84];
var atn = new _antlr.default.atn.ATNDeserializer().deserialize(serializedATN);
var decisionsToDFA = atn.decisionToState.map(function (ds, index) {
  return new _antlr.default.dfa.DFA(ds, index);
});
var sharedContextCache = new _antlr.default.PredictionContextCache();

var CockroachParser = /*#__PURE__*/function (_antlr4$Parser) {
  _inherits(CockroachParser, _antlr4$Parser);

  var _super = _createSuper(CockroachParser);

  function CockroachParser(input) {
    var _this;

    _classCallCheck(this, CockroachParser);

    _this = _super.call(this, input);
    _this._interp = new _antlr.default.atn.ParserATNSimulator(_assertThisInitialized(_this), atn, decisionsToDFA, sharedContextCache);
    _this.ruleNames = CockroachParser.ruleNames;
    _this.literalNames = CockroachParser.literalNames;
    _this.symbolicNames = CockroachParser.symbolicNames;
    return _this;
  }

  _createClass(CockroachParser, [{
    key: "atn",
    get: function get() {
      return atn;
    }
  }, {
    key: "prog",
    value: function prog() {
      var localctx = new ProgContext(this, this._ctx, this.state);
      this.enterRule(localctx, 0, CockroachParser.RULE_prog);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 22;
        this.exprs();
        this.state = 23;
        this.match(CockroachParser.EOF);
      } catch (re) {
        if (re instanceof _antlr.default.error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "exprs",
    value: function exprs() {
      var localctx = new ExprsContext(this, this._ctx, this.state);
      this.enterRule(localctx, 2, CockroachParser.RULE_exprs);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 26;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        do {
          this.state = 25;
          this.expr();
          this.state = 28;

          this._errHandler.sync(this);

          _la = this._input.LA(1);
        } while ((_la & ~0x1f) == 0 && (1 << _la & (1 << CockroachParser.LINE_COMMENT | 1 << CockroachParser.UP | 1 << CockroachParser.DOWN | 1 << CockroachParser.LEFT | 1 << CockroachParser.RIGHT | 1 << CockroachParser.STAY | 1 << CockroachParser.REPEAT | 1 << CockroachParser.WHILE | 1 << CockroachParser.OPEN_BRACKET | 1 << CockroachParser.IF | 1 << CockroachParser.THIS | 1 << CockroachParser.ID)) !== 0);
      } catch (re) {
        if (re instanceof _antlr.default.error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "expr",
    value: function expr() {
      var localctx = new ExprContext(this, this._ctx, this.state);
      this.enterRule(localctx, 4, CockroachParser.RULE_expr);

      try {
        this.state = 37;

        this._errHandler.sync(this);

        switch (this._input.LA(1)) {
          case CockroachParser.UP:
          case CockroachParser.DOWN:
          case CockroachParser.LEFT:
          case CockroachParser.RIGHT:
          case CockroachParser.STAY:
          case CockroachParser.OPEN_BRACKET:
            this.enterOuterAlt(localctx, 1);
            this.state = 30;
            this.statement();
            break;

          case CockroachParser.REPEAT:
            this.enterOuterAlt(localctx, 2);
            this.state = 31;
            this.repeat();
            break;

          case CockroachParser.WHILE:
            this.enterOuterAlt(localctx, 3);
            this.state = 32;
            this.while_();
            break;

          case CockroachParser.IF:
            this.enterOuterAlt(localctx, 4);
            this.state = 33;
            this.if_();
            break;

          case CockroachParser.THIS:
            this.enterOuterAlt(localctx, 5);
            this.state = 34;
            this.proc();
            break;

          case CockroachParser.ID:
            this.enterOuterAlt(localctx, 6);
            this.state = 35;
            this.id();
            break;

          case CockroachParser.LINE_COMMENT:
            this.enterOuterAlt(localctx, 7);
            this.state = 36;
            this.match(CockroachParser.LINE_COMMENT);
            break;

          default:
            throw new _antlr.default.error.NoViableAltException(this);
        }
      } catch (re) {
        if (re instanceof _antlr.default.error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "statement",
    value: function statement() {
      var localctx = new StatementContext(this, this._ctx, this.state);
      this.enterRule(localctx, 6, CockroachParser.RULE_statement);

      try {
        this.state = 45;

        this._errHandler.sync(this);

        switch (this._input.LA(1)) {
          case CockroachParser.UP:
            this.enterOuterAlt(localctx, 1);
            this.state = 39;
            this.match(CockroachParser.UP);
            break;

          case CockroachParser.DOWN:
            this.enterOuterAlt(localctx, 2);
            this.state = 40;
            this.match(CockroachParser.DOWN);
            break;

          case CockroachParser.LEFT:
            this.enterOuterAlt(localctx, 3);
            this.state = 41;
            this.match(CockroachParser.LEFT);
            break;

          case CockroachParser.RIGHT:
            this.enterOuterAlt(localctx, 4);
            this.state = 42;
            this.match(CockroachParser.RIGHT);
            break;

          case CockroachParser.STAY:
            this.enterOuterAlt(localctx, 5);
            this.state = 43;
            this.match(CockroachParser.STAY);
            break;

          case CockroachParser.OPEN_BRACKET:
            this.enterOuterAlt(localctx, 6);
            this.state = 44;
            this.group();
            break;

          default:
            throw new _antlr.default.error.NoViableAltException(this);
        }
      } catch (re) {
        if (re instanceof _antlr.default.error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "repeat",
    value: function repeat() {
      var localctx = new RepeatContext(this, this._ctx, this.state);
      this.enterRule(localctx, 8, CockroachParser.RULE_repeat);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 47;
        this.match(CockroachParser.REPEAT);
        this.state = 48;
        this.match(CockroachParser.NUM);
        this.state = 49;
        this.expr();
      } catch (re) {
        if (re instanceof _antlr.default.error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "while_",
    value: function while_() {
      var localctx = new WhileContext(this, this._ctx, this.state);
      this.enterRule(localctx, 10, CockroachParser.RULE_while);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 51;
        this.match(CockroachParser.WHILE);
        this.state = 52;
        this.condition();
        this.state = 53;
        this.expr();
      } catch (re) {
        if (re instanceof _antlr.default.error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "group",
    value: function group() {
      var localctx = new GroupContext(this, this._ctx, this.state);
      this.enterRule(localctx, 12, CockroachParser.RULE_group);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 55;
        this.match(CockroachParser.OPEN_BRACKET);
        this.state = 56;
        this.exprs();
        this.state = 57;
        this.match(CockroachParser.CLOSE_BRACKET);
      } catch (re) {
        if (re instanceof _antlr.default.error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "if_",
    value: function if_() {
      var localctx = new IfContext(this, this._ctx, this.state);
      this.enterRule(localctx, 14, CockroachParser.RULE_if);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 59;
        this.match(CockroachParser.IF);
        this.state = 60;
        this.condition();
        this.state = 61;
        this.match(CockroachParser.THEN);
        this.state = 62;
        this.statement();
        this.state = 65;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CockroachParser.ELSE) {
          this.state = 63;
          this.match(CockroachParser.ELSE);
          this.state = 64;
          this.statement();
        }
      } catch (re) {
        if (re instanceof _antlr.default.error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "proc",
    value: function proc() {
      var localctx = new ProcContext(this, this._ctx, this.state);
      this.enterRule(localctx, 16, CockroachParser.RULE_proc);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 67;
        this.match(CockroachParser.THIS);
        this.state = 68;
        this.id();
        this.state = 69;
        this.exprs();
        this.state = 70;
        this.match(CockroachParser.END);
      } catch (re) {
        if (re instanceof _antlr.default.error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "condition",
    value: function condition() {
      var localctx = new ConditionContext(this, this._ctx, this.state);
      this.enterRule(localctx, 18, CockroachParser.RULE_condition);
      var _la = 0; // Token type

      try {
        this.state = 84;

        this._errHandler.sync(this);

        var la_ = this._interp.adaptivePredict(this._input, 7, this._ctx);

        switch (la_) {
          case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 73;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if (_la === CockroachParser.NOT) {
              this.state = 72;
              this.match(CockroachParser.NOT);
            }

            this.state = 75;
            this.id();
            break;

          case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 77;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if (_la === CockroachParser.NOT) {
              this.state = 76;
              this.match(CockroachParser.NOT);
            }

            this.state = 79;
            this.match(CockroachParser.EMPTY);
            break;

          case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 81;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if (_la === CockroachParser.NOT) {
              this.state = 80;
              this.match(CockroachParser.NOT);
            }

            this.state = 83;
            this.match(CockroachParser.NUMBER);
            break;
        }
      } catch (re) {
        if (re instanceof _antlr.default.error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "id",
    value: function id() {
      var localctx = new IdContext(this, this._ctx, this.state);
      this.enterRule(localctx, 20, CockroachParser.RULE_id);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 86;
        this.match(CockroachParser.ID);
      } catch (re) {
        if (re instanceof _antlr.default.error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }]);

  return CockroachParser;
}(_antlr.default.Parser);

exports.default = CockroachParser;

_defineProperty(CockroachParser, "grammarFileName", "Cockroach.g4");

_defineProperty(CockroachParser, "literalNames", [null, null, "'\\u0412\\u0412\\u0415\\u0420\\u0425'", "'\\u0412\\u041D\\u0418\\u0417'", "'\\u0412\\u041B\\u0415\\u0412\\u041E'", "'\\u0412\\u041F\\u0420\\u0410\\u0412\\u041E'", "'\\u0421\\u0422\\u041E\\u042F\\u0422\\u042C'", "'\\u041D\\u0415'", "'\\u041F\\u0423\\u0421\\u0422\\u041E'", "'\\u0426\\u0418\\u0424\\u0420\\u0410'", "'\\u041F\\u041E\\u0412\\u0422\\u041E\\u0420\\u0418'", "'\\u041F\\u041E\\u041A\\u0410'", "'\\u0411\\u0423\\u041A\\u0412\\u0410'", "'{'", "'}'", "'\\u0415\\u0421\\u041B\\u0418'", "'\\u0422\\u041E'", "'\\u0418\\u041D\\u0410\\u0427\\u0415'", "'\\u042D\\u0422\\u041E'", "'\\u041A\\u041E\\u041D\\u0415\\u0426'"]);

_defineProperty(CockroachParser, "symbolicNames", [null, "LINE_COMMENT", "UP", "DOWN", "LEFT", "RIGHT", "STAY", "NOT", "EMPTY", "NUMBER", "REPEAT", "WHILE", "CHAR", "OPEN_BRACKET", "CLOSE_BRACKET", "IF", "THEN", "ELSE", "THIS", "END", "ID", "LETTER", "NUM", "DIGIT", "SPACE"]);

_defineProperty(CockroachParser, "ruleNames", ["prog", "exprs", "expr", "statement", "repeat", "while", "group", "if", "proc", "condition", "id"]);

CockroachParser.EOF = _antlr.default.Token.EOF;
CockroachParser.LINE_COMMENT = 1;
CockroachParser.UP = 2;
CockroachParser.DOWN = 3;
CockroachParser.LEFT = 4;
CockroachParser.RIGHT = 5;
CockroachParser.STAY = 6;
CockroachParser.NOT = 7;
CockroachParser.EMPTY = 8;
CockroachParser.NUMBER = 9;
CockroachParser.REPEAT = 10;
CockroachParser.WHILE = 11;
CockroachParser.CHAR = 12;
CockroachParser.OPEN_BRACKET = 13;
CockroachParser.CLOSE_BRACKET = 14;
CockroachParser.IF = 15;
CockroachParser.THEN = 16;
CockroachParser.ELSE = 17;
CockroachParser.THIS = 18;
CockroachParser.END = 19;
CockroachParser.ID = 20;
CockroachParser.LETTER = 21;
CockroachParser.NUM = 22;
CockroachParser.DIGIT = 23;
CockroachParser.SPACE = 24;
CockroachParser.RULE_prog = 0;
CockroachParser.RULE_exprs = 1;
CockroachParser.RULE_expr = 2;
CockroachParser.RULE_statement = 3;
CockroachParser.RULE_repeat = 4;
CockroachParser.RULE_while = 5;
CockroachParser.RULE_group = 6;
CockroachParser.RULE_if = 7;
CockroachParser.RULE_proc = 8;
CockroachParser.RULE_condition = 9;
CockroachParser.RULE_id = 10;

var ProgContext = /*#__PURE__*/function (_antlr4$ParserRuleCon) {
  _inherits(ProgContext, _antlr4$ParserRuleCon);

  var _super2 = _createSuper(ProgContext);

  function ProgContext(parser, parent, invokingState) {
    var _this2;

    _classCallCheck(this, ProgContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this2 = _super2.call(this, parent, invokingState);
    _this2.parser = parser;
    _this2.ruleIndex = CockroachParser.RULE_prog;
    return _this2;
  }

  _createClass(ProgContext, [{
    key: "exprs",
    value: function exprs() {
      return this.getTypedRuleContext(ExprsContext, 0);
    }
  }, {
    key: "EOF",
    value: function EOF() {
      return this.getToken(CockroachParser.EOF, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _CockroachListener.default) {
        listener.enterProg(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _CockroachListener.default) {
        listener.exitProg(this);
      }
    }
  }]);

  return ProgContext;
}(_antlr.default.ParserRuleContext);

var ExprsContext = /*#__PURE__*/function (_antlr4$ParserRuleCon2) {
  _inherits(ExprsContext, _antlr4$ParserRuleCon2);

  var _super3 = _createSuper(ExprsContext);

  function ExprsContext(parser, parent, invokingState) {
    var _this3;

    _classCallCheck(this, ExprsContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this3 = _super3.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this3), "expr", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(ExprContext);
      } else {
        return this.getTypedRuleContext(ExprContext, i);
      }
    });

    _this3.parser = parser;
    _this3.ruleIndex = CockroachParser.RULE_exprs;
    return _this3;
  }

  _createClass(ExprsContext, [{
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _CockroachListener.default) {
        listener.enterExprs(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _CockroachListener.default) {
        listener.exitExprs(this);
      }
    }
  }]);

  return ExprsContext;
}(_antlr.default.ParserRuleContext);

var ExprContext = /*#__PURE__*/function (_antlr4$ParserRuleCon3) {
  _inherits(ExprContext, _antlr4$ParserRuleCon3);

  var _super4 = _createSuper(ExprContext);

  function ExprContext(parser, parent, invokingState) {
    var _this4;

    _classCallCheck(this, ExprContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this4 = _super4.call(this, parent, invokingState);
    _this4.parser = parser;
    _this4.ruleIndex = CockroachParser.RULE_expr;
    return _this4;
  }

  _createClass(ExprContext, [{
    key: "statement",
    value: function statement() {
      return this.getTypedRuleContext(StatementContext, 0);
    }
  }, {
    key: "repeat",
    value: function repeat() {
      return this.getTypedRuleContext(RepeatContext, 0);
    }
  }, {
    key: "while_",
    value: function while_() {
      return this.getTypedRuleContext(WhileContext, 0);
    }
  }, {
    key: "if_",
    value: function if_() {
      return this.getTypedRuleContext(IfContext, 0);
    }
  }, {
    key: "proc",
    value: function proc() {
      return this.getTypedRuleContext(ProcContext, 0);
    }
  }, {
    key: "id",
    value: function id() {
      return this.getTypedRuleContext(IdContext, 0);
    }
  }, {
    key: "LINE_COMMENT",
    value: function LINE_COMMENT() {
      return this.getToken(CockroachParser.LINE_COMMENT, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _CockroachListener.default) {
        listener.enterExpr(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _CockroachListener.default) {
        listener.exitExpr(this);
      }
    }
  }]);

  return ExprContext;
}(_antlr.default.ParserRuleContext);

var StatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon4) {
  _inherits(StatementContext, _antlr4$ParserRuleCon4);

  var _super5 = _createSuper(StatementContext);

  function StatementContext(parser, parent, invokingState) {
    var _this5;

    _classCallCheck(this, StatementContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this5 = _super5.call(this, parent, invokingState);
    _this5.parser = parser;
    _this5.ruleIndex = CockroachParser.RULE_statement;
    return _this5;
  }

  _createClass(StatementContext, [{
    key: "UP",
    value: function UP() {
      return this.getToken(CockroachParser.UP, 0);
    }
  }, {
    key: "DOWN",
    value: function DOWN() {
      return this.getToken(CockroachParser.DOWN, 0);
    }
  }, {
    key: "LEFT",
    value: function LEFT() {
      return this.getToken(CockroachParser.LEFT, 0);
    }
  }, {
    key: "RIGHT",
    value: function RIGHT() {
      return this.getToken(CockroachParser.RIGHT, 0);
    }
  }, {
    key: "STAY",
    value: function STAY() {
      return this.getToken(CockroachParser.STAY, 0);
    }
  }, {
    key: "group",
    value: function group() {
      return this.getTypedRuleContext(GroupContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _CockroachListener.default) {
        listener.enterStatement(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _CockroachListener.default) {
        listener.exitStatement(this);
      }
    }
  }]);

  return StatementContext;
}(_antlr.default.ParserRuleContext);

var RepeatContext = /*#__PURE__*/function (_antlr4$ParserRuleCon5) {
  _inherits(RepeatContext, _antlr4$ParserRuleCon5);

  var _super6 = _createSuper(RepeatContext);

  function RepeatContext(parser, parent, invokingState) {
    var _this6;

    _classCallCheck(this, RepeatContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this6 = _super6.call(this, parent, invokingState);
    _this6.parser = parser;
    _this6.ruleIndex = CockroachParser.RULE_repeat;
    return _this6;
  }

  _createClass(RepeatContext, [{
    key: "REPEAT",
    value: function REPEAT() {
      return this.getToken(CockroachParser.REPEAT, 0);
    }
  }, {
    key: "NUM",
    value: function NUM() {
      return this.getToken(CockroachParser.NUM, 0);
    }
  }, {
    key: "expr",
    value: function expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _CockroachListener.default) {
        listener.enterRepeat(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _CockroachListener.default) {
        listener.exitRepeat(this);
      }
    }
  }]);

  return RepeatContext;
}(_antlr.default.ParserRuleContext);

var WhileContext = /*#__PURE__*/function (_antlr4$ParserRuleCon6) {
  _inherits(WhileContext, _antlr4$ParserRuleCon6);

  var _super7 = _createSuper(WhileContext);

  function WhileContext(parser, parent, invokingState) {
    var _this7;

    _classCallCheck(this, WhileContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this7 = _super7.call(this, parent, invokingState);
    _this7.parser = parser;
    _this7.ruleIndex = CockroachParser.RULE_while;
    return _this7;
  }

  _createClass(WhileContext, [{
    key: "WHILE",
    value: function WHILE() {
      return this.getToken(CockroachParser.WHILE, 0);
    }
  }, {
    key: "condition",
    value: function condition() {
      return this.getTypedRuleContext(ConditionContext, 0);
    }
  }, {
    key: "expr",
    value: function expr() {
      return this.getTypedRuleContext(ExprContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _CockroachListener.default) {
        listener.enterWhile(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _CockroachListener.default) {
        listener.exitWhile(this);
      }
    }
  }]);

  return WhileContext;
}(_antlr.default.ParserRuleContext);

var GroupContext = /*#__PURE__*/function (_antlr4$ParserRuleCon7) {
  _inherits(GroupContext, _antlr4$ParserRuleCon7);

  var _super8 = _createSuper(GroupContext);

  function GroupContext(parser, parent, invokingState) {
    var _this8;

    _classCallCheck(this, GroupContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this8 = _super8.call(this, parent, invokingState);
    _this8.parser = parser;
    _this8.ruleIndex = CockroachParser.RULE_group;
    return _this8;
  }

  _createClass(GroupContext, [{
    key: "OPEN_BRACKET",
    value: function OPEN_BRACKET() {
      return this.getToken(CockroachParser.OPEN_BRACKET, 0);
    }
  }, {
    key: "exprs",
    value: function exprs() {
      return this.getTypedRuleContext(ExprsContext, 0);
    }
  }, {
    key: "CLOSE_BRACKET",
    value: function CLOSE_BRACKET() {
      return this.getToken(CockroachParser.CLOSE_BRACKET, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _CockroachListener.default) {
        listener.enterGroup(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _CockroachListener.default) {
        listener.exitGroup(this);
      }
    }
  }]);

  return GroupContext;
}(_antlr.default.ParserRuleContext);

var IfContext = /*#__PURE__*/function (_antlr4$ParserRuleCon8) {
  _inherits(IfContext, _antlr4$ParserRuleCon8);

  var _super9 = _createSuper(IfContext);

  function IfContext(parser, parent, invokingState) {
    var _this9;

    _classCallCheck(this, IfContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this9 = _super9.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this9), "statement", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(StatementContext);
      } else {
        return this.getTypedRuleContext(StatementContext, i);
      }
    });

    _this9.parser = parser;
    _this9.ruleIndex = CockroachParser.RULE_if;
    return _this9;
  }

  _createClass(IfContext, [{
    key: "IF",
    value: function IF() {
      return this.getToken(CockroachParser.IF, 0);
    }
  }, {
    key: "condition",
    value: function condition() {
      return this.getTypedRuleContext(ConditionContext, 0);
    }
  }, {
    key: "THEN",
    value: function THEN() {
      return this.getToken(CockroachParser.THEN, 0);
    }
  }, {
    key: "ELSE",
    value: function ELSE() {
      return this.getToken(CockroachParser.ELSE, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _CockroachListener.default) {
        listener.enterIf(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _CockroachListener.default) {
        listener.exitIf(this);
      }
    }
  }]);

  return IfContext;
}(_antlr.default.ParserRuleContext);

var ProcContext = /*#__PURE__*/function (_antlr4$ParserRuleCon9) {
  _inherits(ProcContext, _antlr4$ParserRuleCon9);

  var _super10 = _createSuper(ProcContext);

  function ProcContext(parser, parent, invokingState) {
    var _this10;

    _classCallCheck(this, ProcContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this10 = _super10.call(this, parent, invokingState);
    _this10.parser = parser;
    _this10.ruleIndex = CockroachParser.RULE_proc;
    return _this10;
  }

  _createClass(ProcContext, [{
    key: "THIS",
    value: function THIS() {
      return this.getToken(CockroachParser.THIS, 0);
    }
  }, {
    key: "id",
    value: function id() {
      return this.getTypedRuleContext(IdContext, 0);
    }
  }, {
    key: "exprs",
    value: function exprs() {
      return this.getTypedRuleContext(ExprsContext, 0);
    }
  }, {
    key: "END",
    value: function END() {
      return this.getToken(CockroachParser.END, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _CockroachListener.default) {
        listener.enterProc(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _CockroachListener.default) {
        listener.exitProc(this);
      }
    }
  }]);

  return ProcContext;
}(_antlr.default.ParserRuleContext);

var ConditionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon10) {
  _inherits(ConditionContext, _antlr4$ParserRuleCon10);

  var _super11 = _createSuper(ConditionContext);

  function ConditionContext(parser, parent, invokingState) {
    var _this11;

    _classCallCheck(this, ConditionContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this11 = _super11.call(this, parent, invokingState);
    _this11.parser = parser;
    _this11.ruleIndex = CockroachParser.RULE_condition;
    return _this11;
  }

  _createClass(ConditionContext, [{
    key: "id",
    value: function id() {
      return this.getTypedRuleContext(IdContext, 0);
    }
  }, {
    key: "NOT",
    value: function NOT() {
      return this.getToken(CockroachParser.NOT, 0);
    }
  }, {
    key: "EMPTY",
    value: function EMPTY() {
      return this.getToken(CockroachParser.EMPTY, 0);
    }
  }, {
    key: "NUMBER",
    value: function NUMBER() {
      return this.getToken(CockroachParser.NUMBER, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _CockroachListener.default) {
        listener.enterCondition(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _CockroachListener.default) {
        listener.exitCondition(this);
      }
    }
  }]);

  return ConditionContext;
}(_antlr.default.ParserRuleContext);

var IdContext = /*#__PURE__*/function (_antlr4$ParserRuleCon11) {
  _inherits(IdContext, _antlr4$ParserRuleCon11);

  var _super12 = _createSuper(IdContext);

  function IdContext(parser, parent, invokingState) {
    var _this12;

    _classCallCheck(this, IdContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this12 = _super12.call(this, parent, invokingState);
    _this12.parser = parser;
    _this12.ruleIndex = CockroachParser.RULE_id;
    return _this12;
  }

  _createClass(IdContext, [{
    key: "ID",
    value: function ID() {
      return this.getToken(CockroachParser.ID, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _CockroachListener.default) {
        listener.enterId(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _CockroachListener.default) {
        listener.exitId(this);
      }
    }
  }]);

  return IdContext;
}(_antlr.default.ParserRuleContext);

CockroachParser.ProgContext = ProgContext;
CockroachParser.ExprsContext = ExprsContext;
CockroachParser.ExprContext = ExprContext;
CockroachParser.StatementContext = StatementContext;
CockroachParser.RepeatContext = RepeatContext;
CockroachParser.WhileContext = WhileContext;
CockroachParser.GroupContext = GroupContext;
CockroachParser.IfContext = IfContext;
CockroachParser.ProcContext = ProcContext;
CockroachParser.ConditionContext = ConditionContext;
CockroachParser.IdContext = IdContext;
},{"antlr4":"pb0F","./CockroachListener.js":"IYi4"}],"ucK2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProgRunner = void 0;

var _CockroachLexer = _interopRequireDefault(require("./CockroachLexer.js"));

var _CockroachParser = _interopRequireDefault(require("./CockroachParser.js"));

var _InputStream = _interopRequireDefault(require("antlr4/src/antlr4/InputStream.js"));

var _CommonTokenStream = _interopRequireDefault(require("antlr4/src/antlr4/CommonTokenStream.js"));

var _field = require("./field.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var ProgRunner = /*#__PURE__*/function () {
  function ProgRunner(fld, prog, debug) {
    _classCallCheck(this, ProgRunner);

    this.fld = fld;
    this.prog = prog;
    this.procs = {};
    this.prev = null;
    this.next = null;
    this.delay = 500;
    this.debug = debug;
  }

  _createClass(ProgRunner, [{
    key: "run",
    value: function run() {
      var lexer = new _CockroachLexer.default(new _InputStream.default(this.prog));
      var parser = new _CockroachParser.default(new _CommonTokenStream.default(lexer));
      return this.invokeExprs(parser.prog().exprs());
    }
  }, {
    key: "invokeExprs",
    value: function invokeExprs(exprs) {
      var runner = this;
      var cnt = exprs.expr().length;
      var idx = 1;
      var runner = this;
      var promise = runner.invokeExpr(exprs.expr(0));

      for (var i = 1; i < exprs.expr().length; i++) {
        promise = promise.then(function () {
          var expr = exprs.expr(idx);
          idx++;
          return runner.invokeExpr(expr);
        });
      }

      return promise;
    }
  }, {
    key: "invokeExpr",
    value: function invokeExpr(expr) {
      if (expr.statement()) return this.invokeStatement(expr.statement());else if (expr.repeat() != null) {
        var rctx = expr.repeat();
        var cnt = parseInt(rctx.NUM().getText());
        if (cnt == 0) return this.withDelay(function () {}, 0);
        var runner = this;
        var promise = runner.invokeExpr(rctx.expr());

        for (var i = 1; i < cnt; i++) {
          promise = promise.then(function () {
            return runner.invokeExpr(rctx.expr());
          });
        }

        return promise;
      } else if (expr.while_() != null) {
        var wctx = expr.while_();
        var runner = this;

        var continuation = function continuation() {
          var res = runner.eval(wctx.condition());
          var res_is_promise = res.then && typeof res.then === 'function';
          if (res_is_promise) return res;else if (res) return runner.invokeExpr(wctx.expr()).then(continuation);
          return runner.withDelay(function () {}, 0);
        };

        return continuation();
      } else if (expr.if_() != null) {
        var ictx = expr.if_();
        var res = this.eval(ictx.condition());
        var res_is_promise = res.then && typeof res.then === 'function';
        if (res_is_promise) return res;else if (res) return this.invokeStatement(ictx.statement(0));else return this.invokeStatement(ictx.statement(1));
      } else if (expr.proc() != null) {
        var runner = this;
        return this.withDelay(function () {
          runner.procs[expr.proc().id().getText()] = expr.proc();
        }, 0);
      } else if (expr.id() != null) {
        var name = expr.id().getText();
        var pctx = this.procs[name];
        if (pctx == null) return Promise.reject({
          msg: 'Unknown procedure[name=' + name + ']',
          token: expr
        });
        return this.invokeExprs(pctx.exprs());
      } else return Promise.reject({
        msg: "Unknown expression[expr=" + expr.getText() + ']',
        token: expr
      });
    }
  }, {
    key: "invokeStatement",
    value: function invokeStatement(statement) {
      var _this = this;

      if (statement.group() != null) {
        return this.invokeExprs(statement.group().exprs());
      } else {
        return this.withDelay(function () {
          _this.prev = _this.next;
          _this.next = statement;
          var tt = statement.start.type;
          if (tt == _CockroachParser.default.UP) return _this.fld.up();else if (tt == _CockroachParser.default.DOWN) return _this.fld.down();else if (tt == _CockroachParser.default.LEFT) return _this.fld.left();else if (tt == _CockroachParser.default.RIGHT) return _this.fld.right();else if (tt == _CockroachParser.default.STAY) return _this.fld.stay();else return Promise.reject({
            msg: "Unknown function[" + "type=" + tt + ", text=" + statement.getText() + ']',
            token: statement
          });
        });
      }
    }
  }, {
    key: "eval",
    value: function _eval(condition) {
      var res;
      if (condition.EMPTY() != null) res = this.fld.last == _field.EMPTY;else if (condition.id() != null) {
        var filter = condition.id().getText();
        if (filter.length > 1) throw "Only one letter condition supported";
        res = this.fld.last == filter.charAt(0);
      } else if (condition.NUMBER() != null) res = this.fld.last >= '0' && this.fld.last <= '9';else throw "Unknown condition[ctx=" + condition + ']';
      return condition.NOT() != null ? !res : res;
    }
  }, {
    key: "withDelay",
    value: function withDelay(func, delay) {
      if (!delay) delay = this.delay;
      return new Promise(function (resolve, reject) {
        setTimeout(function () {
          try {
            resolve(func());
          } catch (err) {
            reject({
              msg: err
            });
          }
        }, delay);
      });
    }
  }]);

  return ProgRunner;
}();

exports.ProgRunner = ProgRunner;
},{"./CockroachLexer.js":"LUvD","./CockroachParser.js":"tMpX","antlr4/src/antlr4/InputStream.js":"Tf2N","antlr4/src/antlr4/CommonTokenStream.js":"g0Jg","./field.js":"daBI"}],"YT4N":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TreeFragment = exports.TreeCursor = exports.TreeBuffer = exports.Tree = exports.Parser = exports.NodeWeakMap = exports.NodeType = exports.NodeSet = exports.NodeProp = exports.MountedTree = exports.IterMode = exports.DefaultBufferLength = void 0;
exports.parseMixed = parseMixed;
// FIXME profile adding a per-Tree TreeNode cache, validating it by
// parent pointer
/// The default maximum length of a `TreeBuffer` node.
const DefaultBufferLength = 1024;
exports.DefaultBufferLength = DefaultBufferLength;
let nextPropID = 0;

class Range {
  constructor(from, to) {
    this.from = from;
    this.to = to;
  }

} /// Each [node type](#common.NodeType) or [individual tree](#common.Tree)
/// can have metadata associated with it in props. Instances of this
/// class represent prop names.


class NodeProp {
  /// Create a new node prop type.
  constructor(config = {}) {
    this.id = nextPropID++;
    this.perNode = !!config.perNode;

    this.deserialize = config.deserialize || (() => {
      throw new Error("This node type doesn't define a deserialize function");
    });
  } /// This is meant to be used with
  /// [`NodeSet.extend`](#common.NodeSet.extend) or
  /// [`LRParser.configure`](#lr.ParserConfig.props) to compute
  /// prop values for each node type in the set. Takes a [match
  /// object](#common.NodeType^match) or function that returns undefined
  /// if the node type doesn't get this prop, and the prop's value if
  /// it does.


  add(match) {
    if (this.perNode) throw new RangeError("Can't add per-node props to node types");
    if (typeof match != "function") match = NodeType.match(match);
    return type => {
      let result = match(type);
      return result === undefined ? null : [this, result];
    };
  }

} /// Prop that is used to describe matching delimiters. For opening
/// delimiters, this holds an array of node names (written as a
/// space-separated string when declaring this prop in a grammar)
/// for the node types of closing delimiters that match it.


exports.NodeProp = NodeProp;
NodeProp.closedBy = new NodeProp({
  deserialize: str => str.split(" ")
}); /// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is
/// attached to closing delimiters, holding an array of node names
/// of types of matching opening delimiters.

NodeProp.openedBy = new NodeProp({
  deserialize: str => str.split(" ")
}); /// Used to assign node types to groups (for example, all node
/// types that represent an expression could be tagged with an
/// `"Expression"` group).

NodeProp.group = new NodeProp({
  deserialize: str => str.split(" ")
}); /// The hash of the [context](#lr.ContextTracker.constructor)
/// that the node was parsed in, if any. Used to limit reuse of
/// contextual nodes.

NodeProp.contextHash = new NodeProp({
  perNode: true
}); /// The distance beyond the end of the node that the tokenizer
/// looked ahead for any of the tokens inside the node. (The LR
/// parser only stores this when it is larger than 25, for
/// efficiency reasons.)

NodeProp.lookAhead = new NodeProp({
  perNode: true
}); /// This per-node prop is used to replace a given node, or part of a
/// node, with another tree. This is useful to include trees from
/// different languages in mixed-language parsers.

NodeProp.mounted = new NodeProp({
  perNode: true
}); /// A mounted tree, which can be [stored](#common.NodeProp^mounted) on
/// a tree node to indicate that parts of its content are
/// represented by another tree.

class MountedTree {
  constructor( /// The inner tree.
  tree, /// If this is null, this tree replaces the entire node (it will
  /// be included in the regular iteration instead of its host
  /// node). If not, only the given ranges are considered to be
  /// covered by this tree. This is used for trees that are mixed in
  /// a way that isn't strictly hierarchical. Such mounted trees are
  /// only entered by [`resolveInner`](#common.Tree.resolveInner)
  /// and [`enter`](#common.SyntaxNode.enter).
  overlay, /// The parser used to create this subtree.
  parser) {
    this.tree = tree;
    this.overlay = overlay;
    this.parser = parser;
  }

}

exports.MountedTree = MountedTree;
const noProps = Object.create(null); /// Each node in a syntax tree has a node type associated with it.

class NodeType {
  /// @internal
  constructor( /// The name of the node type. Not necessarily unique, but if the
  /// grammar was written properly, different node types with the
  /// same name within a node set should play the same semantic
  /// role.
  name, /// @internal
  props, /// The id of this node in its set. Corresponds to the term ids
  /// used in the parser.
  id, /// @internal
  flags = 0) {
    this.name = name;
    this.props = props;
    this.id = id;
    this.flags = flags;
  } /// Define a node type.


  static define(spec) {
    let props = spec.props && spec.props.length ? Object.create(null) : noProps;
    let flags = (spec.top ? 1
    /* Top */
    : 0) | (spec.skipped ? 2
    /* Skipped */
    : 0) | (spec.error ? 4
    /* Error */
    : 0) | (spec.name == null ? 8
    /* Anonymous */
    : 0);
    let type = new NodeType(spec.name || "", props, spec.id, flags);
    if (spec.props) for (let src of spec.props) {
      if (!Array.isArray(src)) src = src(type);

      if (src) {
        if (src[0].perNode) throw new RangeError("Can't store a per-node prop on a node type");
        props[src[0].id] = src[1];
      }
    }
    return type;
  } /// Retrieves a node prop for this type. Will return `undefined` if
  /// the prop isn't present on this node.


  prop(prop) {
    return this.props[prop.id];
  } /// True when this is the top node of a grammar.


  get isTop() {
    return (this.flags & 1
    /* Top */
    ) > 0;
  } /// True when this node is produced by a skip rule.


  get isSkipped() {
    return (this.flags & 2
    /* Skipped */
    ) > 0;
  } /// Indicates whether this is an error node.


  get isError() {
    return (this.flags & 4
    /* Error */
    ) > 0;
  } /// When true, this node type doesn't correspond to a user-declared
  /// named node, for example because it is used to cache repetition.


  get isAnonymous() {
    return (this.flags & 8
    /* Anonymous */
    ) > 0;
  } /// Returns true when this node's name or one of its
  /// [groups](#common.NodeProp^group) matches the given string.


  is(name) {
    if (typeof name == 'string') {
      if (this.name == name) return true;
      let group = this.prop(NodeProp.group);
      return group ? group.indexOf(name) > -1 : false;
    }

    return this.id == name;
  } /// Create a function from node types to arbitrary values by
  /// specifying an object whose property names are node or
  /// [group](#common.NodeProp^group) names. Often useful with
  /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple
  /// names, separated by spaces, in a single property name to map
  /// multiple node names to a single value.


  static match(map) {
    let direct = Object.create(null);

    for (let prop in map) for (let name of prop.split(" ")) direct[name] = map[prop];

    return node => {
      for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
        let found = direct[i < 0 ? node.name : groups[i]];
        if (found) return found;
      }
    };
  }

} /// An empty dummy node type to use when no actual type is available.


exports.NodeType = NodeType;
NodeType.none = new NodeType("", Object.create(null), 0, 8
/* Anonymous */
); /// A node set holds a collection of node types. It is used to
/// compactly represent trees by storing their type ids, rather than a
/// full pointer to the type object, in a numeric array. Each parser
/// [has](#lr.LRParser.nodeSet) a node set, and [tree
/// buffers](#common.TreeBuffer) can only store collections of nodes
/// from the same set. A set can have a maximum of 2**16 (65536) node
/// types in it, so that the ids fit into 16-bit typed array slots.

class NodeSet {
  /// Create a set with the given types. The `id` property of each
  /// type should correspond to its position within the array.
  constructor( /// The node types in this set, by id.
  types) {
    this.types = types;

    for (let i = 0; i < types.length; i++) if (types[i].id != i) throw new RangeError("Node type ids should correspond to array positions when creating a node set");
  } /// Create a copy of this set with some node properties added. The
  /// arguments to this method can be created with
  /// [`NodeProp.add`](#common.NodeProp.add).


  extend(...props) {
    let newTypes = [];

    for (let type of this.types) {
      let newProps = null;

      for (let source of props) {
        let add = source(type);

        if (add) {
          if (!newProps) newProps = Object.assign({}, type.props);
          newProps[add[0].id] = add[1];
        }
      }

      newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
    }

    return new NodeSet(newTypes);
  }

}

exports.NodeSet = NodeSet;
const CachedNode = new WeakMap(),
      CachedInnerNode = new WeakMap(); /// Options that control iteration. Can be combined with the `|`
/// operator to enable multiple ones.

var IterMode;
exports.IterMode = IterMode;

(function (IterMode) {
  /// When enabled, iteration will only visit [`Tree`](#common.Tree)
  /// objects, not nodes packed into
  /// [`TreeBuffer`](#common.TreeBuffer)s.
  IterMode[IterMode["ExcludeBuffers"] = 1] = "ExcludeBuffers"; /// Enable this to make iteration include anonymous nodes (such as
  /// the nodes that wrap repeated grammar constructs into a balanced
  /// tree).

  IterMode[IterMode["IncludeAnonymous"] = 2] = "IncludeAnonymous"; /// By default, regular [mounted](#common.NodeProp^mounted) nodes
  /// replace their base node in iteration. Enable this to ignore them
  /// instead.

  IterMode[IterMode["IgnoreMounts"] = 4] = "IgnoreMounts"; /// This option only applies in
  /// [`enter`](#common.SyntaxNode.enter)-style methods. It tells the
  /// library to not enter mounted overlays if one covers the given
  /// position.

  IterMode[IterMode["IgnoreOverlays"] = 8] = "IgnoreOverlays";
})(IterMode || (exports.IterMode = IterMode = {})); /// A piece of syntax tree. There are two ways to approach these
/// trees: the way they are actually stored in memory, and the
/// convenient way.
///
/// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
/// objects. By packing detail information into `TreeBuffer` leaf
/// nodes, the representation is made a lot more memory-efficient.
///
/// However, when you want to actually work with tree nodes, this
/// representation is very awkward, so most client code will want to
/// use the [`TreeCursor`](#common.TreeCursor) or
/// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides
/// a view on some part of this data structure, and can be used to
/// move around to adjacent nodes.


class Tree {
  /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).
  constructor( /// The type of the top node.
  type, /// This node's child nodes.
  children, /// The positions (offsets relative to the start of this tree) of
  /// the children.
  positions, /// The total length of this tree
  length, /// Per-node [node props](#common.NodeProp) to associate with this node.
  props) {
    this.type = type;
    this.children = children;
    this.positions = positions;
    this.length = length; /// @internal

    this.props = null;

    if (props && props.length) {
      this.props = Object.create(null);

      for (let [prop, value] of props) this.props[typeof prop == "number" ? prop : prop.id] = value;
    }
  } /// @internal


  toString() {
    let mounted = this.prop(NodeProp.mounted);
    if (mounted && !mounted.overlay) return mounted.tree.toString();
    let children = "";

    for (let ch of this.children) {
      let str = ch.toString();

      if (str) {
        if (children) children += ",";
        children += str;
      }
    }

    return !this.type.name ? children : (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children.length ? "(" + children + ")" : "");
  } /// Get a [tree cursor](#common.TreeCursor) positioned at the top of
  /// the tree. Mode can be used to [control](#common.IterMode) which
  /// nodes the cursor visits.


  cursor(mode = 0) {
    return new TreeCursor(this.topNode, mode);
  } /// Get a [tree cursor](#common.TreeCursor) pointing into this tree
  /// at the given position and side (see
  /// [`moveTo`](#common.TreeCursor.moveTo).


  cursorAt(pos, side = 0, mode = 0) {
    let scope = CachedNode.get(this) || this.topNode;
    let cursor = new TreeCursor(scope);
    cursor.moveTo(pos, side);
    CachedNode.set(this, cursor._tree);
    return cursor;
  } /// Get a [syntax node](#common.SyntaxNode) object for the top of the
  /// tree.


  get topNode() {
    return new TreeNode(this, 0, 0, null);
  } /// Get the [syntax node](#common.SyntaxNode) at the given position.
  /// If `side` is -1, this will move into nodes that end at the
  /// position. If 1, it'll move into nodes that start at the
  /// position. With 0, it'll only enter nodes that cover the position
  /// from both sides.


  resolve(pos, side = 0) {
    let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
    CachedNode.set(this, node);
    return node;
  } /// Like [`resolve`](#common.Tree.resolve), but will enter
  /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
  /// pointing into the innermost overlaid tree at the given position
  /// (with parent links going through all parent structure, including
  /// the host trees).


  resolveInner(pos, side = 0) {
    let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
    CachedInnerNode.set(this, node);
    return node;
  } /// Iterate over the tree and its children, calling `enter` for any
  /// node that touches the `from`/`to` region (if given) before
  /// running over such a node's children, and `leave` (if given) when
  /// leaving the node. When `enter` returns `false`, that node will
  /// not have its children iterated over (or `leave` called).


  iterate(spec) {
    let {
      enter,
      leave,
      from = 0,
      to = this.length
    } = spec;

    for (let c = this.cursor((spec.mode || 0) | IterMode.IncludeAnonymous);;) {
      let entered = false;

      if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c) !== false)) {
        if (c.firstChild()) continue;
        entered = true;
      }

      for (;;) {
        if (entered && leave && !c.type.isAnonymous) leave(c);
        if (c.nextSibling()) break;
        if (!c.parent()) return;
        entered = true;
      }
    }
  } /// Get the value of the given [node prop](#common.NodeProp) for this
  /// node. Works with both per-node and per-type props.


  prop(prop) {
    return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;
  } /// Returns the node's [per-node props](#common.NodeProp.perNode) in a
  /// format that can be passed to the [`Tree`](#common.Tree)
  /// constructor.


  get propValues() {
    let result = [];
    if (this.props) for (let id in this.props) result.push([+id, this.props[id]]);
    return result;
  } /// Balance the direct children of this tree, producing a copy of
  /// which may have children grouped into subtrees with type
  /// [`NodeType.none`](#common.NodeType^none).


  balance(config = {}) {
    return this.children.length <= 8
    /* BranchFactor */
    ? this : balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));
  } /// Build a tree from a postfix-ordered buffer of node information,
  /// or a cursor over such a buffer.


  static build(data) {
    return buildTree(data);
  }

} /// The empty tree


exports.Tree = Tree;
Tree.empty = new Tree(NodeType.none, [], [], 0);

class FlatBufferCursor {
  constructor(buffer, index) {
    this.buffer = buffer;
    this.index = index;
  }

  get id() {
    return this.buffer[this.index - 4];
  }

  get start() {
    return this.buffer[this.index - 3];
  }

  get end() {
    return this.buffer[this.index - 2];
  }

  get size() {
    return this.buffer[this.index - 1];
  }

  get pos() {
    return this.index;
  }

  next() {
    this.index -= 4;
  }

  fork() {
    return new FlatBufferCursor(this.buffer, this.index);
  }

} /// Tree buffers contain (type, start, end, endIndex) quads for each
/// node. In such a buffer, nodes are stored in prefix order (parents
/// before children, with the endIndex of the parent indicating which
/// children belong to it).


class TreeBuffer {
  /// Create a tree buffer.
  constructor( /// The buffer's content.
  buffer, /// The total length of the group of nodes in the buffer.
  length, /// The node set used in this buffer.
  set) {
    this.buffer = buffer;
    this.length = length;
    this.set = set;
  } /// @internal


  get type() {
    return NodeType.none;
  } /// @internal


  toString() {
    let result = [];

    for (let index = 0; index < this.buffer.length;) {
      result.push(this.childString(index));
      index = this.buffer[index + 3];
    }

    return result.join(",");
  } /// @internal


  childString(index) {
    let id = this.buffer[index],
        endIndex = this.buffer[index + 3];
    let type = this.set.types[id],
        result = type.name;
    if (/\W/.test(result) && !type.isError) result = JSON.stringify(result);
    index += 4;
    if (endIndex == index) return result;
    let children = [];

    while (index < endIndex) {
      children.push(this.childString(index));
      index = this.buffer[index + 3];
    }

    return result + "(" + children.join(",") + ")";
  } /// @internal


  findChild(startIndex, endIndex, dir, pos, side) {
    let {
      buffer
    } = this,
        pick = -1;

    for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
      if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
        pick = i;
        if (dir > 0) break;
      }
    }

    return pick;
  } /// @internal


  slice(startI, endI, from, to) {
    let b = this.buffer;
    let copy = new Uint16Array(endI - startI);

    for (let i = startI, j = 0; i < endI;) {
      copy[j++] = b[i++];
      copy[j++] = b[i++] - from;
      copy[j++] = b[i++] - from;
      copy[j++] = b[i++] - startI;
    }

    return new TreeBuffer(copy, to - from, this.set);
  }

}

exports.TreeBuffer = TreeBuffer;

function checkSide(side, pos, from, to) {
  switch (side) {
    case -2
    /* Before */
    :
      return from < pos;

    case -1
    /* AtOrBefore */
    :
      return to >= pos && from < pos;

    case 0
    /* Around */
    :
      return from < pos && to > pos;

    case 1
    /* AtOrAfter */
    :
      return from <= pos && to > pos;

    case 2
    /* After */
    :
      return to > pos;

    case 4
    /* DontCare */
    :
      return true;
  }
}

function enterUnfinishedNodesBefore(node, pos) {
  let scan = node.childBefore(pos);

  while (scan) {
    let last = scan.lastChild;
    if (!last || last.to != scan.to) break;

    if (last.type.isError && last.from == last.to) {
      node = scan;
      scan = last.prevSibling;
    } else {
      scan = last;
    }
  }

  return node;
}

function resolveNode(node, pos, side, overlays) {
  var _a; // Move up to a node that actually holds the position, if possible


  while (node.from == node.to || (side < 1 ? node.from >= pos : node.from > pos) || (side > -1 ? node.to <= pos : node.to < pos)) {
    let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
    if (!parent) return node;
    node = parent;
  }

  let mode = overlays ? 0 : IterMode.IgnoreOverlays; // Must go up out of overlays when those do not overlap with pos

  if (overlays) for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
    if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from) node = parent;
  }

  for (;;) {
    let inner = node.enter(pos, side, mode);
    if (!inner) return node;
    node = inner;
  }
}

class TreeNode {
  constructor(_tree, from, // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)
  index, _parent) {
    this._tree = _tree;
    this.from = from;
    this.index = index;
    this._parent = _parent;
  }

  get type() {
    return this._tree.type;
  }

  get name() {
    return this._tree.type.name;
  }

  get to() {
    return this.from + this._tree.length;
  }

  nextChild(i, dir, pos, side, mode = 0) {
    for (let parent = this;;) {
      for (let {
        children,
        positions
      } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {
        let next = children[i],
            start = positions[i] + parent.from;
        if (!checkSide(side, pos, start, start + next.length)) continue;

        if (next instanceof TreeBuffer) {
          if (mode & IterMode.ExcludeBuffers) continue;
          let index = next.findChild(0, next.buffer.length, dir, pos - start, side);
          if (index > -1) return new BufferNode(new BufferContext(parent, next, i, start), null, index);
        } else if (mode & IterMode.IncludeAnonymous || !next.type.isAnonymous || hasChild(next)) {
          let mounted;
          if (!(mode & IterMode.IgnoreMounts) && next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay) return new TreeNode(mounted.tree, start, i, parent);
          let inner = new TreeNode(next, start, i, parent);
          return mode & IterMode.IncludeAnonymous || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
        }
      }

      if (mode & IterMode.IncludeAnonymous || !parent.type.isAnonymous) return null;
      if (parent.index >= 0) i = parent.index + dir;else i = dir < 0 ? -1 : parent._parent._tree.children.length;
      parent = parent._parent;
      if (!parent) return null;
    }
  }

  get firstChild() {
    return this.nextChild(0, 1, 0, 4
    /* DontCare */
    );
  }

  get lastChild() {
    return this.nextChild(this._tree.children.length - 1, -1, 0, 4
    /* DontCare */
    );
  }

  childAfter(pos) {
    return this.nextChild(0, 1, pos, 2
    /* After */
    );
  }

  childBefore(pos) {
    return this.nextChild(this._tree.children.length - 1, -1, pos, -2
    /* Before */
    );
  }

  enter(pos, side, mode = 0) {
    let mounted;

    if (!(mode & IterMode.IgnoreOverlays) && (mounted = this._tree.prop(NodeProp.mounted)) && mounted.overlay) {
      let rPos = pos - this.from;

      for (let {
        from,
        to
      } of mounted.overlay) {
        if ((side > 0 ? from <= rPos : from < rPos) && (side < 0 ? to >= rPos : to > rPos)) return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
      }
    }

    return this.nextChild(0, 1, pos, side, mode);
  }

  nextSignificantParent() {
    let val = this;

    while (val.type.isAnonymous && val._parent) val = val._parent;

    return val;
  }

  get parent() {
    return this._parent ? this._parent.nextSignificantParent() : null;
  }

  get nextSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4
    /* DontCare */
    ) : null;
  }

  get prevSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4
    /* DontCare */
    ) : null;
  }

  cursor(mode = 0) {
    return new TreeCursor(this, mode);
  }

  get tree() {
    return this._tree;
  }

  toTree() {
    return this._tree;
  }

  resolve(pos, side = 0) {
    return resolveNode(this, pos, side, false);
  }

  resolveInner(pos, side = 0) {
    return resolveNode(this, pos, side, true);
  }

  enterUnfinishedNodesBefore(pos) {
    return enterUnfinishedNodesBefore(this, pos);
  }

  getChild(type, before = null, after = null) {
    let r = getChildren(this, type, before, after);
    return r.length ? r[0] : null;
  }

  getChildren(type, before = null, after = null) {
    return getChildren(this, type, before, after);
  } /// @internal


  toString() {
    return this._tree.toString();
  }

  get node() {
    return this;
  }

  matchContext(context) {
    return matchNodeContext(this, context);
  }

}

function getChildren(node, type, before, after) {
  let cur = node.cursor(),
      result = [];
  if (!cur.firstChild()) return result;
  if (before != null) while (!cur.type.is(before)) if (!cur.nextSibling()) return result;

  for (;;) {
    if (after != null && cur.type.is(after)) return result;
    if (cur.type.is(type)) result.push(cur.node);
    if (!cur.nextSibling()) return after == null ? result : [];
  }
}

function matchNodeContext(node, context, i = context.length - 1) {
  for (let p = node.parent; i >= 0; p = p.parent) {
    if (!p) return false;

    if (!p.type.isAnonymous) {
      if (context[i] && context[i] != p.name) return false;
      i--;
    }
  }

  return true;
}

class BufferContext {
  constructor(parent, buffer, index, start) {
    this.parent = parent;
    this.buffer = buffer;
    this.index = index;
    this.start = start;
  }

}

class BufferNode {
  constructor(context, _parent, index) {
    this.context = context;
    this._parent = _parent;
    this.index = index;
    this.type = context.buffer.set.types[context.buffer.buffer[index]];
  }

  get name() {
    return this.type.name;
  }

  get from() {
    return this.context.start + this.context.buffer.buffer[this.index + 1];
  }

  get to() {
    return this.context.start + this.context.buffer.buffer[this.index + 2];
  }

  child(dir, pos, side) {
    let {
      buffer
    } = this.context;
    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
    return index < 0 ? null : new BufferNode(this.context, this, index);
  }

  get firstChild() {
    return this.child(1, 0, 4
    /* DontCare */
    );
  }

  get lastChild() {
    return this.child(-1, 0, 4
    /* DontCare */
    );
  }

  childAfter(pos) {
    return this.child(1, pos, 2
    /* After */
    );
  }

  childBefore(pos) {
    return this.child(-1, pos, -2
    /* Before */
    );
  }

  enter(pos, side, mode = 0) {
    if (mode & IterMode.ExcludeBuffers) return null;
    let {
      buffer
    } = this.context;
    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
    return index < 0 ? null : new BufferNode(this.context, this, index);
  }

  get parent() {
    return this._parent || this.context.parent.nextSignificantParent();
  }

  externalSibling(dir) {
    return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4
    /* DontCare */
    );
  }

  get nextSibling() {
    let {
      buffer
    } = this.context;
    let after = buffer.buffer[this.index + 3];
    if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length)) return new BufferNode(this.context, this._parent, after);
    return this.externalSibling(1);
  }

  get prevSibling() {
    let {
      buffer
    } = this.context;
    let parentStart = this._parent ? this._parent.index + 4 : 0;
    if (this.index == parentStart) return this.externalSibling(-1);
    return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4
    /* DontCare */
    ));
  }

  cursor(mode = 0) {
    return new TreeCursor(this, mode);
  }

  get tree() {
    return null;
  }

  toTree() {
    let children = [],
        positions = [];
    let {
      buffer
    } = this.context;
    let startI = this.index + 4,
        endI = buffer.buffer[this.index + 3];

    if (endI > startI) {
      let from = buffer.buffer[this.index + 1],
          to = buffer.buffer[this.index + 2];
      children.push(buffer.slice(startI, endI, from, to));
      positions.push(0);
    }

    return new Tree(this.type, children, positions, this.to - this.from);
  }

  resolve(pos, side = 0) {
    return resolveNode(this, pos, side, false);
  }

  resolveInner(pos, side = 0) {
    return resolveNode(this, pos, side, true);
  }

  enterUnfinishedNodesBefore(pos) {
    return enterUnfinishedNodesBefore(this, pos);
  } /// @internal


  toString() {
    return this.context.buffer.childString(this.index);
  }

  getChild(type, before = null, after = null) {
    let r = getChildren(this, type, before, after);
    return r.length ? r[0] : null;
  }

  getChildren(type, before = null, after = null) {
    return getChildren(this, type, before, after);
  }

  get node() {
    return this;
  }

  matchContext(context) {
    return matchNodeContext(this, context);
  }

} /// A tree cursor object focuses on a given node in a syntax tree, and
/// allows you to move to adjacent nodes.


class TreeCursor {
  /// @internal
  constructor(node, /// @internal
  mode = 0) {
    this.mode = mode; /// @internal

    this.buffer = null;
    this.stack = []; /// @internal

    this.index = 0;
    this.bufferNode = null;

    if (node instanceof TreeNode) {
      this.yieldNode(node);
    } else {
      this._tree = node.context.parent;
      this.buffer = node.context;

      for (let n = node._parent; n; n = n._parent) this.stack.unshift(n.index);

      this.bufferNode = node;
      this.yieldBuf(node.index);
    }
  } /// Shorthand for `.type.name`.


  get name() {
    return this.type.name;
  }

  yieldNode(node) {
    if (!node) return false;
    this._tree = node;
    this.type = node.type;
    this.from = node.from;
    this.to = node.to;
    return true;
  }

  yieldBuf(index, type) {
    this.index = index;
    let {
      start,
      buffer
    } = this.buffer;
    this.type = type || buffer.set.types[buffer.buffer[index]];
    this.from = start + buffer.buffer[index + 1];
    this.to = start + buffer.buffer[index + 2];
    return true;
  }

  yield(node) {
    if (!node) return false;

    if (node instanceof TreeNode) {
      this.buffer = null;
      return this.yieldNode(node);
    }

    this.buffer = node.context;
    return this.yieldBuf(node.index, node.type);
  } /// @internal


  toString() {
    return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
  } /// @internal


  enterChild(dir, pos, side) {
    if (!this.buffer) return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
    let {
      buffer
    } = this.buffer;
    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
    if (index < 0) return false;
    this.stack.push(this.index);
    return this.yieldBuf(index);
  } /// Move the cursor to this node's first child. When this returns
  /// false, the node has no child, and the cursor has not been moved.


  firstChild() {
    return this.enterChild(1, 0, 4
    /* DontCare */
    );
  } /// Move the cursor to this node's last child.


  lastChild() {
    return this.enterChild(-1, 0, 4
    /* DontCare */
    );
  } /// Move the cursor to the first child that ends after `pos`.


  childAfter(pos) {
    return this.enterChild(1, pos, 2
    /* After */
    );
  } /// Move to the last child that starts before `pos`.


  childBefore(pos) {
    return this.enterChild(-1, pos, -2
    /* Before */
    );
  } /// Move the cursor to the child around `pos`. If side is -1 the
  /// child may end at that position, when 1 it may start there. This
  /// will also enter [overlaid](#common.MountedTree.overlay)
  /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is
  /// set to false.


  enter(pos, side, mode = this.mode) {
    if (!this.buffer) return this.yield(this._tree.enter(pos, side, mode));
    return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
  } /// Move to the node's parent node, if this isn't the top node.


  parent() {
    if (!this.buffer) return this.yieldNode(this.mode & IterMode.IncludeAnonymous ? this._tree._parent : this._tree.parent);
    if (this.stack.length) return this.yieldBuf(this.stack.pop());
    let parent = this.mode & IterMode.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
    this.buffer = null;
    return this.yieldNode(parent);
  } /// @internal


  sibling(dir) {
    if (!this.buffer) return !this._tree._parent ? false : this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4
    /* DontCare */
    , this.mode));
    let {
      buffer
    } = this.buffer,
        d = this.stack.length - 1;

    if (dir < 0) {
      let parentStart = d < 0 ? 0 : this.stack[d] + 4;
      if (this.index != parentStart) return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4
      /* DontCare */
      ));
    } else {
      let after = buffer.buffer[this.index + 3];
      if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3])) return this.yieldBuf(after);
    }

    return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4
    /* DontCare */
    , this.mode)) : false;
  } /// Move to this node's next sibling, if any.


  nextSibling() {
    return this.sibling(1);
  } /// Move to this node's previous sibling, if any.


  prevSibling() {
    return this.sibling(-1);
  }

  atLastNode(dir) {
    let index,
        parent,
        {
      buffer
    } = this;

    if (buffer) {
      if (dir > 0) {
        if (this.index < buffer.buffer.buffer.length) return false;
      } else {
        for (let i = 0; i < this.index; i++) if (buffer.buffer.buffer[i + 3] < this.index) return false;
      }

      ({
        index,
        parent
      } = buffer);
    } else {
      ({
        index,
        _parent: parent
      } = this._tree);
    }

    for (; parent; ({
      index,
      _parent: parent
    } = parent)) {
      if (index > -1) for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {
        let child = parent._tree.children[i];
        if (this.mode & IterMode.IncludeAnonymous || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child)) return false;
      }
    }

    return true;
  }

  move(dir, enter) {
    if (enter && this.enterChild(dir, 0, 4
    /* DontCare */
    )) return true;

    for (;;) {
      if (this.sibling(dir)) return true;
      if (this.atLastNode(dir) || !this.parent()) return false;
    }
  } /// Move to the next node in a
  /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))
  /// traversal, going from a node to its first child or, if the
  /// current node is empty or `enter` is false, its next sibling or
  /// the next sibling of the first parent node that has one.


  next(enter = true) {
    return this.move(1, enter);
  } /// Move to the next node in a last-to-first pre-order traveral. A
  /// node is followed by its last child or, if it has none, its
  /// previous sibling or the previous sibling of the first parent
  /// node that has one.


  prev(enter = true) {
    return this.move(-1, enter);
  } /// Move the cursor to the innermost node that covers `pos`. If
  /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,
  /// it will enter nodes that start at `pos`.


  moveTo(pos, side = 0) {
    // Move up to a node that actually holds the position, if possible
    while (this.from == this.to || (side < 1 ? this.from >= pos : this.from > pos) || (side > -1 ? this.to <= pos : this.to < pos)) if (!this.parent()) break; // Then scan down into child nodes as far as possible


    while (this.enterChild(1, pos, side)) {}

    return this;
  } /// Get a [syntax node](#common.SyntaxNode) at the cursor's current
  /// position.


  get node() {
    if (!this.buffer) return this._tree;
    let cache = this.bufferNode,
        result = null,
        depth = 0;

    if (cache && cache.context == this.buffer) {
      scan: for (let index = this.index, d = this.stack.length; d >= 0;) {
        for (let c = cache; c; c = c._parent) if (c.index == index) {
          if (index == this.index) return c;
          result = c;
          depth = d + 1;
          break scan;
        }

        index = this.stack[--d];
      }
    }

    for (let i = depth; i < this.stack.length; i++) result = new BufferNode(this.buffer, result, this.stack[i]);

    return this.bufferNode = new BufferNode(this.buffer, result, this.index);
  } /// Get the [tree](#common.Tree) that represents the current node, if
  /// any. Will return null when the node is in a [tree
  /// buffer](#common.TreeBuffer).


  get tree() {
    return this.buffer ? null : this._tree._tree;
  } /// Iterate over the current node and all its descendants, calling
  /// `enter` when entering a node and `leave`, if given, when leaving
  /// one. When `enter` returns `false`, any children of that node are
  /// skipped, and `leave` isn't called for it.


  iterate(enter, leave) {
    for (let depth = 0;;) {
      let mustLeave = false;

      if (this.type.isAnonymous || enter(this) !== false) {
        if (this.firstChild()) {
          depth++;
          continue;
        }

        if (!this.type.isAnonymous) mustLeave = true;
      }

      for (;;) {
        if (mustLeave && leave) leave(this);
        mustLeave = this.type.isAnonymous;
        if (this.nextSibling()) break;
        if (!depth) return;
        this.parent();
        depth--;
        mustLeave = true;
      }
    }
  } /// Test whether the current node matches a given context—a sequence
  /// of direct parent node names. Empty strings in the context array
  /// are treated as wildcards.


  matchContext(context) {
    if (!this.buffer) return matchNodeContext(this.node, context);
    let {
      buffer
    } = this.buffer,
        {
      types
    } = buffer.set;

    for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {
      if (d < 0) return matchNodeContext(this.node, context, i);
      let type = types[buffer.buffer[this.stack[d]]];

      if (!type.isAnonymous) {
        if (context[i] && context[i] != type.name) return false;
        i--;
      }
    }

    return true;
  }

}

exports.TreeCursor = TreeCursor;

function hasChild(tree) {
  return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
}

function buildTree(data) {
  var _a;

  let {
    buffer,
    nodeSet,
    maxBufferLength = DefaultBufferLength,
    reused = [],
    minRepeatType = nodeSet.types.length
  } = data;
  let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
  let types = nodeSet.types;
  let contextHash = 0,
      lookAhead = 0;

  function takeNode(parentStart, minPos, children, positions, inRepeat) {
    let {
      id,
      start,
      end,
      size
    } = cursor;
    let lookAheadAtStart = lookAhead;

    while (size < 0) {
      cursor.next();

      if (size == -1
      /* Reuse */
      ) {
        let node = reused[id];
        children.push(node);
        positions.push(start - parentStart);
        return;
      } else if (size == -3
      /* ContextChange */
      ) {
        // Context change
        contextHash = id;
        return;
      } else if (size == -4
      /* LookAhead */
      ) {
        lookAhead = id;
        return;
      } else {
        throw new RangeError(`Unrecognized record size: ${size}`);
      }
    }

    let type = types[id],
        node,
        buffer;
    let startPos = start - parentStart;

    if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
      // Small enough for a buffer, and no reused nodes inside
      let data = new Uint16Array(buffer.size - buffer.skip);
      let endPos = cursor.pos - buffer.size,
          index = data.length;

      while (cursor.pos > endPos) index = copyToBuffer(buffer.start, data, index);

      node = new TreeBuffer(data, end - buffer.start, nodeSet);
      startPos = buffer.start - parentStart;
    } else {
      // Make it a node
      let endPos = cursor.pos - size;
      cursor.next();
      let localChildren = [],
          localPositions = [];
      let localInRepeat = id >= minRepeatType ? id : -1;
      let lastGroup = 0,
          lastEnd = end;

      while (cursor.pos > endPos) {
        if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
          if (cursor.end <= lastEnd - maxBufferLength) {
            makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);
            lastGroup = localChildren.length;
            lastEnd = cursor.end;
          }

          cursor.next();
        } else {
          takeNode(start, endPos, localChildren, localPositions, localInRepeat);
        }
      }

      if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length) makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);
      localChildren.reverse();
      localPositions.reverse();

      if (localInRepeat > -1 && lastGroup > 0) {
        let make = makeBalanced(type);
        node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
      } else {
        node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);
      }
    }

    children.push(node);
    positions.push(startPos);
  }

  function makeBalanced(type) {
    return (children, positions, length) => {
      let lookAhead = 0,
          lastI = children.length - 1,
          last,
          lookAheadProp;

      if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {
        if (!lastI && last.type == type && last.length == length) return last;
        if (lookAheadProp = last.prop(NodeProp.lookAhead)) lookAhead = positions[lastI] + last.length + lookAheadProp;
      }

      return makeTree(type, children, positions, length, lookAhead);
    };
  }

  function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {
    let localChildren = [],
        localPositions = [];

    while (children.length > i) {
      localChildren.push(children.pop());
      localPositions.push(positions.pop() + base - from);
    }

    children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));
    positions.push(from - base);
  }

  function makeTree(type, children, positions, length, lookAhead = 0, props) {
    if (contextHash) {
      let pair = [NodeProp.contextHash, contextHash];
      props = props ? [pair].concat(props) : [pair];
    }

    if (lookAhead > 25) {
      let pair = [NodeProp.lookAhead, lookAhead];
      props = props ? [pair].concat(props) : [pair];
    }

    return new Tree(type, children, positions, length, props);
  }

  function findBufferSize(maxSize, inRepeat) {
    // Scan through the buffer to find previous siblings that fit
    // together in a TreeBuffer, and don't contain any reused nodes
    // (which can't be stored in a buffer).
    // If `inRepeat` is > -1, ignore node boundaries of that type for
    // nesting, but make sure the end falls either at the start
    // (`maxSize`) or before such a node.
    let fork = cursor.fork();
    let size = 0,
        start = 0,
        skip = 0,
        minStart = fork.end - maxBufferLength;
    let result = {
      size: 0,
      start: 0,
      skip: 0
    };

    scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {
      let nodeSize = fork.size; // Pretend nested repeat nodes of the same type don't exist

      if (fork.id == inRepeat && nodeSize >= 0) {
        // Except that we store the current state as a valid return
        // value.
        result.size = size;
        result.start = start;
        result.skip = skip;
        skip += 4;
        size += 4;
        fork.next();
        continue;
      }

      let startPos = fork.pos - nodeSize;
      if (nodeSize < 0 || startPos < minPos || fork.start < minStart) break;
      let localSkipped = fork.id >= minRepeatType ? 4 : 0;
      let nodeStart = fork.start;
      fork.next();

      while (fork.pos > startPos) {
        if (fork.size < 0) {
          if (fork.size == -3
          /* ContextChange */
          ) localSkipped += 4;else break scan;
        } else if (fork.id >= minRepeatType) {
          localSkipped += 4;
        }

        fork.next();
      }

      start = nodeStart;
      size += nodeSize;
      skip += localSkipped;
    }

    if (inRepeat < 0 || size == maxSize) {
      result.size = size;
      result.start = start;
      result.skip = skip;
    }

    return result.size > 4 ? result : undefined;
  }

  function copyToBuffer(bufferStart, buffer, index) {
    let {
      id,
      start,
      end,
      size
    } = cursor;
    cursor.next();

    if (size >= 0 && id < minRepeatType) {
      let startIndex = index;

      if (size > 4) {
        let endPos = cursor.pos - (size - 4);

        while (cursor.pos > endPos) index = copyToBuffer(bufferStart, buffer, index);
      }

      buffer[--index] = startIndex;
      buffer[--index] = end - bufferStart;
      buffer[--index] = start - bufferStart;
      buffer[--index] = id;
    } else if (size == -3
    /* ContextChange */
    ) {
      contextHash = id;
    } else if (size == -4
    /* LookAhead */
    ) {
      lookAhead = id;
    }

    return index;
  }

  let children = [],
      positions = [];

  while (cursor.pos > 0) takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);

  let length = (_a = data.length) !== null && _a !== void 0 ? _a : children.length ? positions[0] + children[0].length : 0;
  return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);
}

const nodeSizeCache = new WeakMap();

function nodeSize(balanceType, node) {
  if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType) return 1;
  let size = nodeSizeCache.get(node);

  if (size == null) {
    size = 1;

    for (let child of node.children) {
      if (child.type != balanceType || !(child instanceof Tree)) {
        size = 1;
        break;
      }

      size += nodeSize(balanceType, child);
    }

    nodeSizeCache.set(node, size);
  }

  return size;
}

function balanceRange( // The type the balanced tree's inner nodes.
balanceType, // The direct children and their positions
children, positions, // The index range in children/positions to use
from, to, // The start position of the nodes, relative to their parent.
start, // Length of the outer node
length, // Function to build the top node of the balanced tree
mkTop, // Function to build internal nodes for the balanced tree
mkTree) {
  let total = 0;

  for (let i = from; i < to; i++) total += nodeSize(balanceType, children[i]);

  let maxChild = Math.ceil(total * 1.5 / 8
  /* BranchFactor */
  );
  let localChildren = [],
      localPositions = [];

  function divide(children, positions, from, to, offset) {
    for (let i = from; i < to;) {
      let groupFrom = i,
          groupStart = positions[i],
          groupSize = nodeSize(balanceType, children[i]);
      i++;

      for (; i < to; i++) {
        let nextSize = nodeSize(balanceType, children[i]);
        if (groupSize + nextSize >= maxChild) break;
        groupSize += nextSize;
      }

      if (i == groupFrom + 1) {
        if (groupSize > maxChild) {
          let only = children[groupFrom]; // Only trees can have a size > 1

          divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);
          continue;
        }

        localChildren.push(children[groupFrom]);
      } else {
        let length = positions[i - 1] + children[i - 1].length - groupStart;
        localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));
      }

      localPositions.push(groupStart + offset - start);
    }
  }

  divide(children, positions, from, to, 0);
  return (mkTop || mkTree)(localChildren, localPositions, length);
} /// Provides a way to associate values with pieces of trees. As long
/// as that part of the tree is reused, the associated values can be
/// retrieved from an updated tree.


class NodeWeakMap {
  constructor() {
    this.map = new WeakMap();
  }

  setBuffer(buffer, index, value) {
    let inner = this.map.get(buffer);
    if (!inner) this.map.set(buffer, inner = new Map());
    inner.set(index, value);
  }

  getBuffer(buffer, index) {
    let inner = this.map.get(buffer);
    return inner && inner.get(index);
  } /// Set the value for this syntax node.


  set(node, value) {
    if (node instanceof BufferNode) this.setBuffer(node.context.buffer, node.index, value);else if (node instanceof TreeNode) this.map.set(node.tree, value);
  } /// Retrieve value for this syntax node, if it exists in the map.


  get(node) {
    return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index) : node instanceof TreeNode ? this.map.get(node.tree) : undefined;
  } /// Set the value for the node that a cursor currently points to.


  cursorSet(cursor, value) {
    if (cursor.buffer) this.setBuffer(cursor.buffer.buffer, cursor.index, value);else this.map.set(cursor.tree, value);
  } /// Retrieve the value for the node that a cursor currently points
  /// to.


  cursorGet(cursor) {
    return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);
  }

} /// Tree fragments are used during [incremental
/// parsing](#common.Parser.startParse) to track parts of old trees
/// that can be reused in a new parse. An array of fragments is used
/// to track regions of an old tree whose nodes might be reused in new
/// parses. Use the static
/// [`applyChanges`](#common.TreeFragment^applyChanges) method to
/// update fragments for document changes.


exports.NodeWeakMap = NodeWeakMap;

class TreeFragment {
  /// Construct a tree fragment. You'll usually want to use
  /// [`addTree`](#common.TreeFragment^addTree) and
  /// [`applyChanges`](#common.TreeFragment^applyChanges) instead of
  /// calling this directly.
  constructor( /// The start of the unchanged range pointed to by this fragment.
  /// This refers to an offset in the _updated_ document (as opposed
  /// to the original tree).
  from, /// The end of the unchanged range.
  to, /// The tree that this fragment is based on.
  tree, /// The offset between the fragment's tree and the document that
  /// this fragment can be used against. Add this when going from
  /// document to tree positions, subtract it to go from tree to
  /// document positions.
  offset, openStart = false, openEnd = false) {
    this.from = from;
    this.to = to;
    this.tree = tree;
    this.offset = offset;
    this.open = (openStart ? 1
    /* Start */
    : 0) | (openEnd ? 2
    /* End */
    : 0);
  } /// Whether the start of the fragment represents the start of a
  /// parse, or the end of a change. (In the second case, it may not
  /// be safe to reuse some nodes at the start, depending on the
  /// parsing algorithm.)


  get openStart() {
    return (this.open & 1
    /* Start */
    ) > 0;
  } /// Whether the end of the fragment represents the end of a
  /// full-document parse, or the start of a change.


  get openEnd() {
    return (this.open & 2
    /* End */
    ) > 0;
  } /// Create a set of fragments from a freshly parsed tree, or update
  /// an existing set of fragments by replacing the ones that overlap
  /// with a tree with content from the new tree. When `partial` is
  /// true, the parse is treated as incomplete, and the resulting
  /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
  /// true.


  static addTree(tree, fragments = [], partial = false) {
    let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];

    for (let f of fragments) if (f.to > tree.length) result.push(f);

    return result;
  } /// Apply a set of edits to an array of fragments, removing or
  /// splitting fragments as necessary to remove edited ranges, and
  /// adjusting offsets for fragments that moved.


  static applyChanges(fragments, changes, minGap = 128) {
    if (!changes.length) return fragments;
    let result = [];
    let fI = 1,
        nextF = fragments.length ? fragments[0] : null;

    for (let cI = 0, pos = 0, off = 0;; cI++) {
      let nextC = cI < changes.length ? changes[cI] : null;
      let nextPos = nextC ? nextC.fromA : 1e9;
      if (nextPos - pos >= minGap) while (nextF && nextF.from < nextPos) {
        let cut = nextF;

        if (pos >= cut.from || nextPos <= cut.to || off) {
          let fFrom = Math.max(cut.from, pos) - off,
              fTo = Math.min(cut.to, nextPos) - off;
          cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
        }

        if (cut) result.push(cut);
        if (nextF.to > nextPos) break;
        nextF = fI < fragments.length ? fragments[fI++] : null;
      }
      if (!nextC) break;
      pos = nextC.toA;
      off = nextC.toA - nextC.toB;
    }

    return result;
  }

} /// A superclass that parsers should extend.


exports.TreeFragment = TreeFragment;

class Parser {
  /// Start a parse, returning a [partial parse](#common.PartialParse)
  /// object. [`fragments`](#common.TreeFragment) can be passed in to
  /// make the parse incremental.
  ///
  /// By default, the entire input is parsed. You can pass `ranges`,
  /// which should be a sorted array of non-empty, non-overlapping
  /// ranges, to parse only those ranges. The tree returned in that
  /// case will start at `ranges[0].from`.
  startParse(input, fragments, ranges) {
    if (typeof input == "string") input = new StringInput(input);
    ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];
    return this.createParse(input, fragments || [], ranges);
  } /// Run a full parse, returning the resulting tree.


  parse(input, fragments, ranges) {
    let parse = this.startParse(input, fragments, ranges);

    for (;;) {
      let done = parse.advance();
      if (done) return done;
    }
  }

}

exports.Parser = Parser;

class StringInput {
  constructor(string) {
    this.string = string;
  }

  get length() {
    return this.string.length;
  }

  chunk(from) {
    return this.string.slice(from);
  }

  get lineChunks() {
    return false;
  }

  read(from, to) {
    return this.string.slice(from, to);
  }

} /// Create a parse wrapper that, after the inner parse completes,
/// scans its tree for mixed language regions with the `nest`
/// function, runs the resulting [inner parses](#common.NestedParse),
/// and then [mounts](#common.NodeProp^mounted) their results onto the
/// tree.


function parseMixed(nest) {
  return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);
}

class InnerParse {
  constructor(parser, parse, overlay, target, ranges) {
    this.parser = parser;
    this.parse = parse;
    this.overlay = overlay;
    this.target = target;
    this.ranges = ranges;
  }

}

class ActiveOverlay {
  constructor(parser, predicate, mounts, index, start, target, prev) {
    this.parser = parser;
    this.predicate = predicate;
    this.mounts = mounts;
    this.index = index;
    this.start = start;
    this.target = target;
    this.prev = prev;
    this.depth = 0;
    this.ranges = [];
  }

}

const stoppedInner = new NodeProp({
  perNode: true
});

class MixedParse {
  constructor(base, nest, input, fragments, ranges) {
    this.nest = nest;
    this.input = input;
    this.fragments = fragments;
    this.ranges = ranges;
    this.inner = [];
    this.innerDone = 0;
    this.baseTree = null;
    this.stoppedAt = null;
    this.baseParse = base;
  }

  advance() {
    if (this.baseParse) {
      let done = this.baseParse.advance();
      if (!done) return null;
      this.baseParse = null;
      this.baseTree = done;
      this.startInner();
      if (this.stoppedAt != null) for (let inner of this.inner) inner.parse.stopAt(this.stoppedAt);
    }

    if (this.innerDone == this.inner.length) {
      let result = this.baseTree;
      if (this.stoppedAt != null) result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));
      return result;
    }

    let inner = this.inner[this.innerDone],
        done = inner.parse.advance();

    if (done) {
      this.innerDone++; // This is a somewhat dodgy but super helpful hack where we
      // patch up nodes created by the inner parse (and thus
      // presumably not aliased anywhere else) to hold the information
      // about the inner parse.

      let props = Object.assign(Object.create(null), inner.target.props);
      props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);
      inner.target.props = props;
    }

    return null;
  }

  get parsedPos() {
    if (this.baseParse) return 0;
    let pos = this.input.length;

    for (let i = this.innerDone; i < this.inner.length; i++) {
      if (this.inner[i].ranges[0].from < pos) pos = Math.min(pos, this.inner[i].parse.parsedPos);
    }

    return pos;
  }

  stopAt(pos) {
    this.stoppedAt = pos;
    if (this.baseParse) this.baseParse.stopAt(pos);else for (let i = this.innerDone; i < this.inner.length; i++) this.inner[i].parse.stopAt(pos);
  }

  startInner() {
    let fragmentCursor = new FragmentCursor(this.fragments);
    let overlay = null;
    let covered = null;
    let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);

    scan: for (let nest, isCovered; this.stoppedAt == null || cursor.from < this.stoppedAt;) {
      let enter = true,
          range;

      if (fragmentCursor.hasNode(cursor)) {
        if (overlay) {
          let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);
          if (match) for (let r of match.mount.overlay) {
            let from = r.from + match.pos,
                to = r.to + match.pos;
            if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(r => r.from < to && r.to > from)) overlay.ranges.push({
              from,
              to
            });
          }
        }

        enter = false;
      } else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {
        enter = isCovered != 2
        /* Full */
        ;
      } else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {
        if (!cursor.tree) materialize(cursor);
        let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);

        if (typeof nest.overlay == "function") {
          overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);
        } else {
          let ranges = punchRanges(this.ranges, nest.overlay || [new Range(cursor.from, cursor.to)]);
          if (ranges.length) this.inner.push(new InnerParse(nest.parser, nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges));
          if (!nest.overlay) enter = false;else if (ranges.length) covered = {
            ranges,
            depth: 0,
            prev: covered
          };
        }
      } else if (overlay && (range = overlay.predicate(cursor))) {
        if (range === true) range = new Range(cursor.from, cursor.to);
        if (range.from < range.to) overlay.ranges.push(range);
      }

      if (enter && cursor.firstChild()) {
        if (overlay) overlay.depth++;
        if (covered) covered.depth++;
      } else {
        for (;;) {
          if (cursor.nextSibling()) break;
          if (!cursor.parent()) break scan;

          if (overlay && ! --overlay.depth) {
            let ranges = punchRanges(this.ranges, overlay.ranges);
            if (ranges.length) this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges));
            overlay = overlay.prev;
          }

          if (covered && ! --covered.depth) covered = covered.prev;
        }
      }
    }
  }

}

function checkCover(covered, from, to) {
  for (let range of covered) {
    if (range.from >= to) break;
    if (range.to > from) return range.from <= from && range.to >= to ? 2
    /* Full */
    : 1
    /* Partial */
    ;
  }

  return 0
  /* None */
  ;
} // Take a piece of buffer and convert it into a stand-alone
// TreeBuffer.


function sliceBuf(buf, startI, endI, nodes, positions, off) {
  if (startI < endI) {
    let from = buf.buffer[startI + 1],
        to = buf.buffer[endI - 2];
    nodes.push(buf.slice(startI, endI, from, to));
    positions.push(from - off);
  }
} // This function takes a node that's in a buffer, and converts it, and
// its parent buffer nodes, into a Tree. This is again acting on the
// assumption that the trees and buffers have been constructed by the
// parse that was ran via the mix parser, and thus aren't shared with
// any other code, making violations of the immutability safe.


function materialize(cursor) {
  let {
    node
  } = cursor,
      depth = 0; // Scan up to the nearest tree

  do {
    cursor.parent();
    depth++;
  } while (!cursor.tree); // Find the index of the buffer in that tree


  let i = 0,
      base = cursor.tree,
      off = 0;

  for (;; i++) {
    off = base.positions[i] + cursor.from;
    if (off <= node.from && off + base.children[i].length >= node.to) break;
  }

  let buf = base.children[i],
      b = buf.buffer; // Split a level in the buffer, putting the nodes before and after
  // the child that contains `node` into new buffers.

  function split(startI, endI, type, innerOffset, length) {
    let i = startI;

    while (b[i + 2] + off <= node.from) i = b[i + 3];

    let children = [],
        positions = [];
    sliceBuf(buf, startI, i, children, positions, innerOffset);
    let from = b[i + 1],
        to = b[i + 2];
    let isTarget = from + off == node.from && to + off == node.to && b[i] == node.type.id;
    children.push(isTarget ? node.toTree() : split(i + 4, b[i + 3], buf.set.types[b[i]], from, to - from));
    positions.push(from - innerOffset);
    sliceBuf(buf, b[i + 3], endI, children, positions, innerOffset);
    return new Tree(type, children, positions, length);
  }

  base.children[i] = split(0, b.length, NodeType.none, 0, buf.length); // Move the cursor back to the target node

  for (let d = 0; d <= depth; d++) cursor.childAfter(node.from);
}

class StructureCursor {
  constructor(root, offset) {
    this.offset = offset;
    this.done = false;
    this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);
  } // Move to the first node (in pre-order) that starts at or after `pos`.


  moveTo(pos) {
    let {
      cursor
    } = this,
        p = pos - this.offset;

    while (!this.done && cursor.from < p) {
      if (cursor.to >= pos && cursor.enter(p, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers)) ;else if (!cursor.next(false)) this.done = true;
    }
  }

  hasNode(cursor) {
    this.moveTo(cursor.from);

    if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {
      for (let tree = this.cursor.tree;;) {
        if (tree == cursor.tree) return true;
        if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree) tree = tree.children[0];else break;
      }
    }

    return false;
  }

}

class FragmentCursor {
  constructor(fragments) {
    var _a;

    this.fragments = fragments;
    this.curTo = 0;
    this.fragI = 0;

    if (fragments.length) {
      let first = this.curFrag = fragments[0];
      this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;
      this.inner = new StructureCursor(first.tree, -first.offset);
    } else {
      this.curFrag = this.inner = null;
    }
  }

  hasNode(node) {
    while (this.curFrag && node.from >= this.curTo) this.nextFrag();

    return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);
  }

  nextFrag() {
    var _a;

    this.fragI++;

    if (this.fragI == this.fragments.length) {
      this.curFrag = this.inner = null;
    } else {
      let frag = this.curFrag = this.fragments[this.fragI];
      this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;
      this.inner = new StructureCursor(frag.tree, -frag.offset);
    }
  }

  findMounts(pos, parser) {
    var _a;

    let result = [];

    if (this.inner) {
      this.inner.cursor.moveTo(pos, 1);

      for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {
        let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);

        if (mount && mount.parser == parser) {
          for (let i = this.fragI; i < this.fragments.length; i++) {
            let frag = this.fragments[i];
            if (frag.from >= pos.to) break;
            if (frag.tree == this.curFrag.tree) result.push({
              frag,
              pos: pos.from - frag.offset,
              mount
            });
          }
        }
      }
    }

    return result;
  }

}

function punchRanges(outer, ranges) {
  let copy = null,
      current = ranges;

  for (let i = 1, j = 0; i < outer.length; i++) {
    let gapFrom = outer[i - 1].to,
        gapTo = outer[i].from;

    for (; j < current.length; j++) {
      let r = current[j];
      if (r.from >= gapTo) break;
      if (r.to <= gapFrom) continue;
      if (!copy) current = copy = ranges.slice();

      if (r.from < gapFrom) {
        copy[j] = new Range(r.from, gapFrom);
        if (r.to > gapTo) copy.splice(j + 1, 0, new Range(gapTo, r.to));
      } else if (r.to > gapTo) {
        copy[j--] = new Range(gapTo, r.to);
      } else {
        copy.splice(j--, 1);
      }
    }
  }

  return current;
}

function findCoverChanges(a, b, from, to) {
  let iA = 0,
      iB = 0,
      inA = false,
      inB = false,
      pos = -1e9;
  let result = [];

  for (;;) {
    let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;
    let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;

    if (inA != inB) {
      let start = Math.max(pos, from),
          end = Math.min(nextA, nextB, to);
      if (start < end) result.push(new Range(start, end));
    }

    pos = Math.min(nextA, nextB);
    if (pos == 1e9) break;

    if (nextA == pos) {
      if (!inA) inA = true;else {
        inA = false;
        iA++;
      }
    }

    if (nextB == pos) {
      if (!inB) inB = true;else {
        inB = false;
        iB++;
      }
    }
  }

  return result;
} // Given a number of fragments for the outer tree, and a set of ranges
// to parse, find fragments for inner trees mounted around those
// ranges, if any.


function enterFragments(mounts, ranges) {
  let result = [];

  for (let {
    pos,
    mount,
    frag
  } of mounts) {
    let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0),
        endPos = startPos + mount.tree.length;
    let from = Math.max(frag.from, startPos),
        to = Math.min(frag.to, endPos);

    if (mount.overlay) {
      let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));
      let changes = findCoverChanges(ranges, overlay, from, to);

      for (let i = 0, pos = from;; i++) {
        let last = i == changes.length,
            end = last ? to : changes[i].from;
        if (end > pos) result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos, frag.to <= end));
        if (last) break;
        pos = changes[i].to;
      }
    } else {
      result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos, frag.to <= endPos));
    }
  }

  return result;
}
},{}],"kpD3":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"k5nx":[function(require,module,exports) {
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Stack = exports.LRParser = exports.InputStream = exports.ExternalTokenizer = exports.ContextTracker = void 0;

var _common = require("@lezer/common");

/// A parse stack. These are used internally by the parser to track
/// parsing progress. They also provide some properties and methods
/// that external code such as a tokenizer can use to get information
/// about the parse state.
class Stack {
  /// @internal
  constructor( /// The parse that this stack is part of @internal
  p, /// Holds state, input pos, buffer index triplets for all but the
  /// top state @internal
  stack, /// The current parse state @internal
  state, // The position at which the next reduce should take place. This
  // can be less than `this.pos` when skipped expressions have been
  // added to the stack (which should be moved outside of the next
  // reduction)
  /// @internal
  reducePos, /// The input position up to which this stack has parsed.
  pos, /// The dynamic score of the stack, including dynamic precedence
  /// and error-recovery penalties
  /// @internal
  score, // The output buffer. Holds (type, start, end, size) quads
  // representing nodes created by the parser, where `size` is
  // amount of buffer array entries covered by this node.
  /// @internal
  buffer, // The base offset of the buffer. When stacks are split, the split
  // instance shared the buffer history with its parent up to
  // `bufferBase`, which is the absolute offset (including the
  // offset of previous splits) into the buffer at which this stack
  // starts writing.
  /// @internal
  bufferBase, /// @internal
  curContext, /// @internal
  lookAhead = 0, // A parent stack from which this was split off, if any. This is
  // set up so that it always points to a stack that has some
  // additional buffer content, never to a stack with an equal
  // `bufferBase`.
  /// @internal
  parent) {
    this.p = p;
    this.stack = stack;
    this.state = state;
    this.reducePos = reducePos;
    this.pos = pos;
    this.score = score;
    this.buffer = buffer;
    this.bufferBase = bufferBase;
    this.curContext = curContext;
    this.lookAhead = lookAhead;
    this.parent = parent;
  } /// @internal


  toString() {
    return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
  } // Start an empty stack
  /// @internal


  static start(p, state, pos = 0) {
    let cx = p.parser.context;
    return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);
  } /// The stack's current [context](#lr.ContextTracker) value, if
  /// any. Its type will depend on the context tracker's type
  /// parameter, or it will be `null` if there is no context
  /// tracker.


  get context() {
    return this.curContext ? this.curContext.context : null;
  } // Push a state onto the stack, tracking its start position as well
  // as the buffer base at that point.
  /// @internal


  pushState(state, start) {
    this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
    this.state = state;
  } // Apply a reduce action
  /// @internal


  reduce(action) {
    let depth = action >> 19
    /* ReduceDepthShift */
    ,
        type = action & 65535
    /* ValueMask */
    ;
    let {
      parser
    } = this.p;
    let dPrec = parser.dynamicPrecedence(type);
    if (dPrec) this.score += dPrec;

    if (depth == 0) {
      this.pushState(parser.getGoto(this.state, type, true), this.reducePos); // Zero-depth reductions are a special case—they add stuff to
      // the stack without popping anything off.

      if (type < parser.minRepeatTerm) this.storeNode(type, this.reducePos, this.reducePos, 4, true);
      this.reduceContext(type, this.reducePos);
      return;
    } // Find the base index into `this.stack`, content after which will
    // be dropped. Note that with `StayFlag` reductions we need to
    // consume two extra frames (the dummy parent node for the skipped
    // expression and the state that we'll be staying in, which should
    // be moved to `this.state`).


    let base = this.stack.length - (depth - 1) * 3 - (action & 262144
    /* StayFlag */
    ? 6 : 0);
    let start = this.stack[base - 2];
    let bufferBase = this.stack[base - 1],
        count = this.bufferBase + this.buffer.length - bufferBase; // Store normal terms or `R -> R R` repeat reductions

    if (type < parser.minRepeatTerm || action & 131072
    /* RepeatFlag */
    ) {
      let pos = parser.stateFlag(this.state, 1
      /* Skipped */
      ) ? this.pos : this.reducePos;
      this.storeNode(type, start, pos, count + 4, true);
    }

    if (action & 262144
    /* StayFlag */
    ) {
      this.state = this.stack[base];
    } else {
      let baseStateID = this.stack[base - 3];
      this.state = parser.getGoto(baseStateID, type, true);
    }

    while (this.stack.length > base) this.stack.pop();

    this.reduceContext(type, start);
  } // Shift a value into the buffer
  /// @internal


  storeNode(term, start, end, size = 4, isReduce = false) {
    if (term == 0
    /* Err */
    && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
      // Try to omit/merge adjacent error nodes
      let cur = this,
          top = this.buffer.length;

      if (top == 0 && cur.parent) {
        top = cur.bufferBase - cur.parent.bufferBase;
        cur = cur.parent;
      }

      if (top > 0 && cur.buffer[top - 4] == 0
      /* Err */
      && cur.buffer[top - 1] > -1) {
        if (start == end) return;

        if (cur.buffer[top - 2] >= start) {
          cur.buffer[top - 2] = end;
          return;
        }
      }
    }

    if (!isReduce || this.pos == end) {
      // Simple case, just append
      this.buffer.push(term, start, end, size);
    } else {
      // There may be skipped nodes that have to be moved forward
      let index = this.buffer.length;
      if (index > 0 && this.buffer[index - 4] != 0
      /* Err */
      ) while (index > 0 && this.buffer[index - 2] > end) {
        // Move this record forward
        this.buffer[index] = this.buffer[index - 4];
        this.buffer[index + 1] = this.buffer[index - 3];
        this.buffer[index + 2] = this.buffer[index - 2];
        this.buffer[index + 3] = this.buffer[index - 1];
        index -= 4;
        if (size > 4) size -= 4;
      }
      this.buffer[index] = term;
      this.buffer[index + 1] = start;
      this.buffer[index + 2] = end;
      this.buffer[index + 3] = size;
    }
  } // Apply a shift action
  /// @internal


  shift(action, next, nextEnd) {
    let start = this.pos;

    if (action & 131072
    /* GotoFlag */
    ) {
      this.pushState(action & 65535
      /* ValueMask */
      , this.pos);
    } else if ((action & 262144
    /* StayFlag */
    ) == 0) {
      // Regular shift
      let nextState = action,
          {
        parser
      } = this.p;

      if (nextEnd > this.pos || next <= parser.maxNode) {
        this.pos = nextEnd;
        if (!parser.stateFlag(nextState, 1
        /* Skipped */
        )) this.reducePos = nextEnd;
      }

      this.pushState(nextState, start);
      this.shiftContext(next, start);
      if (next <= parser.maxNode) this.buffer.push(next, start, nextEnd, 4);
    } else {
      // Shift-and-stay, which means this is a skipped token
      this.pos = nextEnd;
      this.shiftContext(next, start);
      if (next <= this.p.parser.maxNode) this.buffer.push(next, start, nextEnd, 4);
    }
  } // Apply an action
  /// @internal


  apply(action, next, nextEnd) {
    if (action & 65536
    /* ReduceFlag */
    ) this.reduce(action);else this.shift(action, next, nextEnd);
  } // Add a prebuilt (reused) node into the buffer.
  /// @internal


  useNode(value, next) {
    let index = this.p.reused.length - 1;

    if (index < 0 || this.p.reused[index] != value) {
      this.p.reused.push(value);
      index++;
    }

    let start = this.pos;
    this.reducePos = this.pos = start + value.length;
    this.pushState(next, start);
    this.buffer.push(index, start, this.reducePos, -1
    /* size == -1 means this is a reused value */
    );
    if (this.curContext) this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
  } // Split the stack. Due to the buffer sharing and the fact
  // that `this.stack` tends to stay quite shallow, this isn't very
  // expensive.
  /// @internal


  split() {
    let parent = this;
    let off = parent.buffer.length; // Because the top of the buffer (after this.pos) may be mutated
    // to reorder reductions and skipped tokens, and shared buffers
    // should be immutable, this copies any outstanding skipped tokens
    // to the new buffer, and puts the base pointer before them.

    while (off > 0 && parent.buffer[off - 2] > parent.reducePos) off -= 4;

    let buffer = parent.buffer.slice(off),
        base = parent.bufferBase + off; // Make sure parent points to an actual parent with content, if there is such a parent.

    while (parent && base == parent.bufferBase) parent = parent.parent;

    return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);
  } // Try to recover from an error by 'deleting' (ignoring) one token.
  /// @internal


  recoverByDelete(next, nextEnd) {
    let isNode = next <= this.p.parser.maxNode;
    if (isNode) this.storeNode(next, this.pos, nextEnd, 4);
    this.storeNode(0
    /* Err */
    , this.pos, nextEnd, isNode ? 8 : 4);
    this.pos = this.reducePos = nextEnd;
    this.score -= 190
    /* Delete */
    ;
  } /// Check if the given term would be able to be shifted (optionally
  /// after some reductions) on this stack. This can be useful for
  /// external tokenizers that want to make sure they only provide a
  /// given token when it applies.


  canShift(term) {
    for (let sim = new SimulatedStack(this);;) {
      let action = this.p.parser.stateSlot(sim.state, 4
      /* DefaultReduce */
      ) || this.p.parser.hasAction(sim.state, term);
      if ((action & 65536
      /* ReduceFlag */
      ) == 0) return true;
      if (action == 0) return false;
      sim.reduce(action);
    }
  } // Apply up to Recover.MaxNext recovery actions that conceptually
  // inserts some missing token or rule.
  /// @internal


  recoverByInsert(next) {
    if (this.stack.length >= 300
    /* MaxInsertStackDepth */
    ) return [];
    let nextStates = this.p.parser.nextStates(this.state);

    if (nextStates.length > 4
    /* MaxNext */
    << 1 || this.stack.length >= 120
    /* DampenInsertStackDepth */
    ) {
      let best = [];

      for (let i = 0, s; i < nextStates.length; i += 2) {
        if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next)) best.push(nextStates[i], s);
      }

      if (this.stack.length < 120
      /* DampenInsertStackDepth */
      ) for (let i = 0; best.length < 4
      /* MaxNext */
      << 1 && i < nextStates.length; i += 2) {
        let s = nextStates[i + 1];
        if (!best.some((v, i) => i & 1 && v == s)) best.push(nextStates[i], s);
      }
      nextStates = best;
    }

    let result = [];

    for (let i = 0; i < nextStates.length && result.length < 4
    /* MaxNext */
    ; i += 2) {
      let s = nextStates[i + 1];
      if (s == this.state) continue;
      let stack = this.split();
      stack.pushState(s, this.pos);
      stack.storeNode(0
      /* Err */
      , stack.pos, stack.pos, 4, true);
      stack.shiftContext(nextStates[i], this.pos);
      stack.score -= 200
      /* Insert */
      ;
      result.push(stack);
    }

    return result;
  } // Force a reduce, if possible. Return false if that can't
  // be done.
  /// @internal


  forceReduce() {
    let reduce = this.p.parser.stateSlot(this.state, 5
    /* ForcedReduce */
    );
    if ((reduce & 65536
    /* ReduceFlag */
    ) == 0) return false;
    let {
      parser
    } = this.p;

    if (!parser.validAction(this.state, reduce)) {
      let depth = reduce >> 19
      /* ReduceDepthShift */
      ,
          term = reduce & 65535
      /* ValueMask */
      ;
      let target = this.stack.length - depth * 3;
      if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) return false;
      this.storeNode(0
      /* Err */
      , this.reducePos, this.reducePos, 4, true);
      this.score -= 100
      /* Reduce */
      ;
    }

    this.reducePos = this.pos;
    this.reduce(reduce);
    return true;
  } /// @internal


  forceAll() {
    while (!this.p.parser.stateFlag(this.state, 2
    /* Accepting */
    )) {
      if (!this.forceReduce()) {
        this.storeNode(0
        /* Err */
        , this.pos, this.pos, 4, true);
        break;
      }
    }

    return this;
  } /// Check whether this state has no further actions (assumed to be a direct descendant of the
  /// top state, since any other states must be able to continue
  /// somehow). @internal


  get deadEnd() {
    if (this.stack.length != 3) return false;
    let {
      parser
    } = this.p;
    return parser.data[parser.stateSlot(this.state, 1
    /* Actions */
    )] == 65535
    /* End */
    && !parser.stateSlot(this.state, 4
    /* DefaultReduce */
    );
  } /// Restart the stack (put it back in its start state). Only safe
  /// when this.stack.length == 3 (state is directly below the top
  /// state). @internal


  restart() {
    this.state = this.stack[0];
    this.stack.length = 0;
  } /// @internal


  sameState(other) {
    if (this.state != other.state || this.stack.length != other.stack.length) return false;

    for (let i = 0; i < this.stack.length; i += 3) if (this.stack[i] != other.stack[i]) return false;

    return true;
  } /// Get the parser used by this stack.


  get parser() {
    return this.p.parser;
  } /// Test whether a given dialect (by numeric ID, as exported from
  /// the terms file) is enabled.


  dialectEnabled(dialectID) {
    return this.p.parser.dialect.flags[dialectID];
  }

  shiftContext(term, start) {
    if (this.curContext) this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
  }

  reduceContext(term, start) {
    if (this.curContext) this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
  } /// @internal


  emitContext() {
    let last = this.buffer.length - 1;
    if (last < 0 || this.buffer[last] != -3) this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);
  } /// @internal


  emitLookAhead() {
    let last = this.buffer.length - 1;
    if (last < 0 || this.buffer[last] != -4) this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);
  }

  updateContext(context) {
    if (context != this.curContext.context) {
      let newCx = new StackContext(this.curContext.tracker, context);
      if (newCx.hash != this.curContext.hash) this.emitContext();
      this.curContext = newCx;
    }
  } /// @internal


  setLookAhead(lookAhead) {
    if (lookAhead > this.lookAhead) {
      this.emitLookAhead();
      this.lookAhead = lookAhead;
    }
  } /// @internal


  close() {
    if (this.curContext && this.curContext.tracker.strict) this.emitContext();
    if (this.lookAhead > 0) this.emitLookAhead();
  }

}

exports.Stack = Stack;

class StackContext {
  constructor(tracker, context) {
    this.tracker = tracker;
    this.context = context;
    this.hash = tracker.strict ? tracker.hash(context) : 0;
  }

}

var Recover;

(function (Recover) {
  Recover[Recover["Insert"] = 200] = "Insert";
  Recover[Recover["Delete"] = 190] = "Delete";
  Recover[Recover["Reduce"] = 100] = "Reduce";
  Recover[Recover["MaxNext"] = 4] = "MaxNext";
  Recover[Recover["MaxInsertStackDepth"] = 300] = "MaxInsertStackDepth";
  Recover[Recover["DampenInsertStackDepth"] = 120] = "DampenInsertStackDepth";
})(Recover || (Recover = {})); // Used to cheaply run some reductions to scan ahead without mutating
// an entire stack


class SimulatedStack {
  constructor(start) {
    this.start = start;
    this.state = start.state;
    this.stack = start.stack;
    this.base = this.stack.length;
  }

  reduce(action) {
    let term = action & 65535
    /* ValueMask */
    ,
        depth = action >> 19
    /* ReduceDepthShift */
    ;

    if (depth == 0) {
      if (this.stack == this.start.stack) this.stack = this.stack.slice();
      this.stack.push(this.state, 0, 0);
      this.base += 3;
    } else {
      this.base -= (depth - 1) * 3;
    }

    let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
    this.state = goto;
  }

} // This is given to `Tree.build` to build a buffer, and encapsulates
// the parent-stack-walking necessary to read the nodes.


class StackBufferCursor {
  constructor(stack, pos, index) {
    this.stack = stack;
    this.pos = pos;
    this.index = index;
    this.buffer = stack.buffer;
    if (this.index == 0) this.maybeNext();
  }

  static create(stack, pos = stack.bufferBase + stack.buffer.length) {
    return new StackBufferCursor(stack, pos, pos - stack.bufferBase);
  }

  maybeNext() {
    let next = this.stack.parent;

    if (next != null) {
      this.index = this.stack.bufferBase - next.bufferBase;
      this.stack = next;
      this.buffer = next.buffer;
    }
  }

  get id() {
    return this.buffer[this.index - 4];
  }

  get start() {
    return this.buffer[this.index - 3];
  }

  get end() {
    return this.buffer[this.index - 2];
  }

  get size() {
    return this.buffer[this.index - 1];
  }

  next() {
    this.index -= 4;
    this.pos -= 4;
    if (this.index == 0) this.maybeNext();
  }

  fork() {
    return new StackBufferCursor(this.stack, this.pos, this.index);
  }

}

class CachedToken {
  constructor() {
    this.start = -1;
    this.value = -1;
    this.end = -1;
    this.extended = -1;
    this.lookAhead = 0;
    this.mask = 0;
    this.context = 0;
  }

}

const nullToken = new CachedToken(); /// [Tokenizers](#lr.ExternalTokenizer) interact with the input
/// through this interface. It presents the input as a stream of
/// characters, tracking lookahead and hiding the complexity of
/// [ranges](#common.Parser.parse^ranges) from tokenizer code.

class InputStream {
  /// @internal
  constructor( /// @internal
  input, /// @internal
  ranges) {
    this.input = input;
    this.ranges = ranges; /// @internal

    this.chunk = ""; /// @internal

    this.chunkOff = 0; /// Backup chunk

    this.chunk2 = "";
    this.chunk2Pos = 0; /// The character code of the next code unit in the input, or -1
    /// when the stream is at the end of the input.

    this.next = -1; /// @internal

    this.token = nullToken;
    this.rangeIndex = 0;
    this.pos = this.chunkPos = ranges[0].from;
    this.range = ranges[0];
    this.end = ranges[ranges.length - 1].to;
    this.readNext();
  } /// @internal


  resolveOffset(offset, assoc) {
    let range = this.range,
        index = this.rangeIndex;
    let pos = this.pos + offset;

    while (pos < range.from) {
      if (!index) return null;
      let next = this.ranges[--index];
      pos -= range.from - next.to;
      range = next;
    }

    while (assoc < 0 ? pos > range.to : pos >= range.to) {
      if (index == this.ranges.length - 1) return null;
      let next = this.ranges[++index];
      pos += next.from - range.to;
      range = next;
    }

    return pos;
  } /// @internal


  clipPos(pos) {
    if (pos >= this.range.from && pos < this.range.to) return pos;

    for (let range of this.ranges) if (range.to > pos) return Math.max(pos, range.from);

    return this.end;
  } /// Look at a code unit near the stream position. `.peek(0)` equals
  /// `.next`, `.peek(-1)` gives you the previous character, and so
  /// on.
  ///
  /// Note that looking around during tokenizing creates dependencies
  /// on potentially far-away content, which may reduce the
  /// effectiveness incremental parsing—when looking forward—or even
  /// cause invalid reparses when looking backward more than 25 code
  /// units, since the library does not track lookbehind.


  peek(offset) {
    let idx = this.chunkOff + offset,
        pos,
        result;

    if (idx >= 0 && idx < this.chunk.length) {
      pos = this.pos + offset;
      result = this.chunk.charCodeAt(idx);
    } else {
      let resolved = this.resolveOffset(offset, 1);
      if (resolved == null) return -1;
      pos = resolved;

      if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
        result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
      } else {
        let i = this.rangeIndex,
            range = this.range;

        while (range.to <= pos) range = this.ranges[++i];

        this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
        if (pos + this.chunk2.length > range.to) this.chunk2 = this.chunk2.slice(0, range.to - pos);
        result = this.chunk2.charCodeAt(0);
      }
    }

    if (pos >= this.token.lookAhead) this.token.lookAhead = pos + 1;
    return result;
  } /// Accept a token. By default, the end of the token is set to the
  /// current stream position, but you can pass an offset (relative to
  /// the stream position) to change that.


  acceptToken(token, endOffset = 0) {
    let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
    if (end == null || end < this.token.start) throw new RangeError("Token end out of bounds");
    this.token.value = token;
    this.token.end = end;
  }

  getChunk() {
    if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
      let {
        chunk,
        chunkPos
      } = this;
      this.chunk = this.chunk2;
      this.chunkPos = this.chunk2Pos;
      this.chunk2 = chunk;
      this.chunk2Pos = chunkPos;
      this.chunkOff = this.pos - this.chunkPos;
    } else {
      this.chunk2 = this.chunk;
      this.chunk2Pos = this.chunkPos;
      let nextChunk = this.input.chunk(this.pos);
      let end = this.pos + nextChunk.length;
      this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
      this.chunkPos = this.pos;
      this.chunkOff = 0;
    }
  }

  readNext() {
    if (this.chunkOff >= this.chunk.length) {
      this.getChunk();
      if (this.chunkOff == this.chunk.length) return this.next = -1;
    }

    return this.next = this.chunk.charCodeAt(this.chunkOff);
  } /// Move the stream forward N (defaults to 1) code units. Returns
  /// the new value of [`next`](#lr.InputStream.next).


  advance(n = 1) {
    this.chunkOff += n;

    while (this.pos + n >= this.range.to) {
      if (this.rangeIndex == this.ranges.length - 1) return this.setDone();
      n -= this.range.to - this.pos;
      this.range = this.ranges[++this.rangeIndex];
      this.pos = this.range.from;
    }

    this.pos += n;
    if (this.pos >= this.token.lookAhead) this.token.lookAhead = this.pos + 1;
    return this.readNext();
  }

  setDone() {
    this.pos = this.chunkPos = this.end;
    this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
    this.chunk = "";
    return this.next = -1;
  } /// @internal


  reset(pos, token) {
    if (token) {
      this.token = token;
      token.start = pos;
      token.lookAhead = pos + 1;
      token.value = token.extended = -1;
    } else {
      this.token = nullToken;
    }

    if (this.pos != pos) {
      this.pos = pos;

      if (pos == this.end) {
        this.setDone();
        return this;
      }

      while (pos < this.range.from) this.range = this.ranges[--this.rangeIndex];

      while (pos >= this.range.to) this.range = this.ranges[++this.rangeIndex];

      if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
        this.chunkOff = pos - this.chunkPos;
      } else {
        this.chunk = "";
        this.chunkOff = 0;
      }

      this.readNext();
    }

    return this;
  } /// @internal


  read(from, to) {
    if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length) return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);
    if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length) return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);
    if (from >= this.range.from && to <= this.range.to) return this.input.read(from, to);
    let result = "";

    for (let r of this.ranges) {
      if (r.from >= to) break;
      if (r.to > from) result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));
    }

    return result;
  }

} /// @internal


exports.InputStream = InputStream;

class TokenGroup {
  constructor(data, id) {
    this.data = data;
    this.id = id;
  }

  token(input, stack) {
    readToken(this.data, input, stack, this.id);
  }

}

TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false; /// `@external tokens` declarations in the grammar should resolve to
/// an instance of this class.

class ExternalTokenizer {
  /// Create a tokenizer. The first argument is the function that,
  /// given an input stream, scans for the types of tokens it
  /// recognizes at the stream's position, and calls
  /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds
  /// one.
  constructor( /// @internal
  token, options = {}) {
    this.token = token;
    this.contextual = !!options.contextual;
    this.fallback = !!options.fallback;
    this.extend = !!options.extend;
  }

} // Tokenizer data is stored a big uint16 array containing, for each
// state:
//
//  - A group bitmask, indicating what token groups are reachable from
//    this state, so that paths that can only lead to tokens not in
//    any of the current groups can be cut off early.
//
//  - The position of the end of the state's sequence of accepting
//    tokens
//
//  - The number of outgoing edges for the state
//
//  - The accepting tokens, as (token id, group mask) pairs
//
//  - The outgoing edges, as (start character, end character, state
//    index) triples, with end character being exclusive
//
// This function interprets that data, running through a stream as
// long as new states with the a matching group mask can be reached,
// and updating `input.token` when it matches a token.


exports.ExternalTokenizer = ExternalTokenizer;

function readToken(data, input, stack, group) {
  let state = 0,
      groupMask = 1 << group,
      {
    parser
  } = stack.p,
      {
    dialect
  } = parser;

  scan: for (;;) {
    if ((groupMask & data[state]) == 0) break;
    let accEnd = data[state + 1]; // Check whether this state can lead to a token in the current group
    // Accept tokens in this state, possibly overwriting
    // lower-precedence / shorter tokens

    for (let i = state + 3; i < accEnd; i += 2) if ((data[i + 1] & groupMask) > 0) {
      let term = data[i];

      if (dialect.allows(term) && (input.token.value == -1 || input.token.value == term || parser.overrides(term, input.token.value))) {
        input.acceptToken(term);
        break;
      }
    }

    let next = input.next,
        low = 0,
        high = data[state + 2]; // Special case for EOF

    if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535
    /* End */
    ) {
      state = data[accEnd + high * 3 - 1];
      continue scan;
    } // Do a binary search on the state's edges


    for (; low < high;) {
      let mid = low + high >> 1;
      let index = accEnd + mid + (mid << 1);
      let from = data[index],
          to = data[index + 1];
      if (next < from) high = mid;else if (next >= to) low = mid + 1;else {
        state = data[index + 2];
        input.advance();
        continue scan;
      }
    }

    break;
  }
} // See lezer-generator/src/encode.ts for comments about the encoding
// used here


function decodeArray(input, Type = Uint16Array) {
  if (typeof input != "string") return input;
  let array = null;

  for (let pos = 0, out = 0; pos < input.length;) {
    let value = 0;

    for (;;) {
      let next = input.charCodeAt(pos++),
          stop = false;

      if (next == 126
      /* BigValCode */
      ) {
        value = 65535
        /* BigVal */
        ;
        break;
      }

      if (next >= 92
      /* Gap2 */
      ) next--;
      if (next >= 34
      /* Gap1 */
      ) next--;
      let digit = next - 32
      /* Start */
      ;

      if (digit >= 46
      /* Base */
      ) {
        digit -= 46
        /* Base */
        ;
        stop = true;
      }

      value += digit;
      if (stop) break;
      value *= 46
      /* Base */
      ;
    }

    if (array) array[out++] = value;else array = new Type(value);
  }

  return array;
} // Environment variable used to control console output


const verbose = typeof process != "undefined" && process.env && /\bparse\b/.test(undefined);
let stackIDs = null;
var Safety;

(function (Safety) {
  Safety[Safety["Margin"] = 25] = "Margin";
})(Safety || (Safety = {}));

function cutAt(tree, pos, side) {
  let cursor = tree.cursor(_common.IterMode.IncludeAnonymous);
  cursor.moveTo(pos);

  for (;;) {
    if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos))) for (;;) {
      if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError) return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25
      /* Margin */
      )) : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25
      /* Margin */
      ));
      if (side < 0 ? cursor.prevSibling() : cursor.nextSibling()) break;
      if (!cursor.parent()) return side < 0 ? 0 : tree.length;
    }
  }
}

class FragmentCursor {
  constructor(fragments, nodeSet) {
    this.fragments = fragments;
    this.nodeSet = nodeSet;
    this.i = 0;
    this.fragment = null;
    this.safeFrom = -1;
    this.safeTo = -1;
    this.trees = [];
    this.start = [];
    this.index = [];
    this.nextFragment();
  }

  nextFragment() {
    let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];

    if (fr) {
      this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
      this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;

      while (this.trees.length) {
        this.trees.pop();
        this.start.pop();
        this.index.pop();
      }

      this.trees.push(fr.tree);
      this.start.push(-fr.offset);
      this.index.push(0);
      this.nextStart = this.safeFrom;
    } else {
      this.nextStart = 1e9;
    }
  } // `pos` must be >= any previously given `pos` for this cursor


  nodeAt(pos) {
    if (pos < this.nextStart) return null;

    while (this.fragment && this.safeTo <= pos) this.nextFragment();

    if (!this.fragment) return null;

    for (;;) {
      let last = this.trees.length - 1;

      if (last < 0) {
        // End of tree
        this.nextFragment();
        return null;
      }

      let top = this.trees[last],
          index = this.index[last];

      if (index == top.children.length) {
        this.trees.pop();
        this.start.pop();
        this.index.pop();
        continue;
      }

      let next = top.children[index];
      let start = this.start[last] + top.positions[index];

      if (start > pos) {
        this.nextStart = start;
        return null;
      }

      if (next instanceof _common.Tree) {
        if (start == pos) {
          if (start < this.safeFrom) return null;
          let end = start + next.length;

          if (end <= this.safeTo) {
            let lookAhead = next.prop(_common.NodeProp.lookAhead);
            if (!lookAhead || end + lookAhead < this.fragment.to) return next;
          }
        }

        this.index[last]++;

        if (start + next.length >= Math.max(this.safeFrom, pos)) {
          // Enter this node
          this.trees.push(next);
          this.start.push(start);
          this.index.push(0);
        }
      } else {
        this.index[last]++;
        this.nextStart = start + next.length;
      }
    }
  }

}

class TokenCache {
  constructor(parser, stream) {
    this.stream = stream;
    this.tokens = [];
    this.mainToken = null;
    this.actions = [];
    this.tokens = parser.tokenizers.map(_ => new CachedToken());
  }

  getActions(stack) {
    let actionIndex = 0;
    let main = null;
    let {
      parser
    } = stack.p,
        {
      tokenizers
    } = parser;
    let mask = parser.stateSlot(stack.state, 3
    /* TokenizerMask */
    );
    let context = stack.curContext ? stack.curContext.hash : 0;
    let lookAhead = 0;

    for (let i = 0; i < tokenizers.length; i++) {
      if ((1 << i & mask) == 0) continue;
      let tokenizer = tokenizers[i],
          token = this.tokens[i];
      if (main && !tokenizer.fallback) continue;

      if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
        this.updateCachedToken(token, tokenizer, stack);
        token.mask = mask;
        token.context = context;
      }

      if (token.lookAhead > token.end + 25
      /* Margin */
      ) lookAhead = Math.max(token.lookAhead, lookAhead);

      if (token.value != 0
      /* Err */
      ) {
        let startIndex = actionIndex;
        if (token.extended > -1) actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
        actionIndex = this.addActions(stack, token.value, token.end, actionIndex);

        if (!tokenizer.extend) {
          main = token;
          if (actionIndex > startIndex) break;
        }
      }
    }

    while (this.actions.length > actionIndex) this.actions.pop();

    if (lookAhead) stack.setLookAhead(lookAhead);

    if (!main && stack.pos == this.stream.end) {
      main = new CachedToken();
      main.value = stack.p.parser.eofTerm;
      main.start = main.end = stack.pos;
      actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
    }

    this.mainToken = main;
    return this.actions;
  }

  getMainToken(stack) {
    if (this.mainToken) return this.mainToken;
    let main = new CachedToken(),
        {
      pos,
      p
    } = stack;
    main.start = pos;
    main.end = Math.min(pos + 1, p.stream.end);
    main.value = pos == p.stream.end ? p.parser.eofTerm : 0
    /* Err */
    ;
    return main;
  }

  updateCachedToken(token, tokenizer, stack) {
    let start = this.stream.clipPos(stack.pos);
    tokenizer.token(this.stream.reset(start, token), stack);

    if (token.value > -1) {
      let {
        parser
      } = stack.p;

      for (let i = 0; i < parser.specialized.length; i++) if (parser.specialized[i] == token.value) {
        let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);

        if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
          if ((result & 1) == 0
          /* Specialize */
          ) token.value = result >> 1;else token.extended = result >> 1;
          break;
        }
      }
    } else {
      token.value = 0
      /* Err */
      ;
      token.end = this.stream.clipPos(start + 1);
    }
  }

  putAction(action, token, end, index) {
    // Don't add duplicate actions
    for (let i = 0; i < index; i += 3) if (this.actions[i] == action) return index;

    this.actions[index++] = action;
    this.actions[index++] = token;
    this.actions[index++] = end;
    return index;
  }

  addActions(stack, token, end, index) {
    let {
      state
    } = stack,
        {
      parser
    } = stack.p,
        {
      data
    } = parser;

    for (let set = 0; set < 2; set++) {
      for (let i = parser.stateSlot(state, set ? 2
      /* Skip */
      : 1
      /* Actions */
      );; i += 3) {
        if (data[i] == 65535
        /* End */
        ) {
          if (data[i + 1] == 1
          /* Next */
          ) {
            i = pair(data, i + 2);
          } else {
            if (index == 0 && data[i + 1] == 2
            /* Other */
            ) index = this.putAction(pair(data, i + 2), token, end, index);
            break;
          }
        }

        if (data[i] == token) index = this.putAction(pair(data, i + 1), token, end, index);
      }
    }

    return index;
  }

}

var Rec;

(function (Rec) {
  Rec[Rec["Distance"] = 5] = "Distance";
  Rec[Rec["MaxRemainingPerStep"] = 3] = "MaxRemainingPerStep"; // When two stacks have been running independently long enough to
  // add this many elements to their buffers, prune one.

  Rec[Rec["MinBufferLengthPrune"] = 500] = "MinBufferLengthPrune";
  Rec[Rec["ForceReduceLimit"] = 10] = "ForceReduceLimit"; // Once a stack reaches this depth (in .stack.length) force-reduce
  // it back to CutTo to avoid creating trees that overflow the stack
  // on recursive traversal.

  Rec[Rec["CutDepth"] = 15000] = "CutDepth";
  Rec[Rec["CutTo"] = 9000] = "CutTo";
})(Rec || (Rec = {}));

class Parse {
  constructor(parser, input, fragments, ranges) {
    this.parser = parser;
    this.input = input;
    this.ranges = ranges;
    this.recovering = 0;
    this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧

    this.minStackPos = 0;
    this.reused = [];
    this.stoppedAt = null;
    this.stream = new InputStream(input, ranges);
    this.tokens = new TokenCache(parser, this.stream);
    this.topTerm = parser.top[1];
    let {
      from
    } = ranges[0];
    this.stacks = [Stack.start(this, parser.top[0], from)];
    this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4 ? new FragmentCursor(fragments, parser.nodeSet) : null;
  }

  get parsedPos() {
    return this.minStackPos;
  } // Move the parser forward. This will process all parse stacks at
  // `this.pos` and try to advance them to a further position. If no
  // stack for such a position is found, it'll start error-recovery.
  //
  // When the parse is finished, this will return a syntax tree. When
  // not, it returns `null`.


  advance() {
    let stacks = this.stacks,
        pos = this.minStackPos; // This will hold stacks beyond `pos`.

    let newStacks = this.stacks = [];
    let stopped, stoppedTokens; // Keep advancing any stacks at `pos` until they either move
    // forward or can't be advanced. Gather stacks that can't be
    // advanced further in `stopped`.

    for (let i = 0; i < stacks.length; i++) {
      let stack = stacks[i];

      for (;;) {
        this.tokens.mainToken = null;

        if (stack.pos > pos) {
          newStacks.push(stack);
        } else if (this.advanceStack(stack, newStacks, stacks)) {
          continue;
        } else {
          if (!stopped) {
            stopped = [];
            stoppedTokens = [];
          }

          stopped.push(stack);
          let tok = this.tokens.getMainToken(stack);
          stoppedTokens.push(tok.value, tok.end);
        }

        break;
      }
    }

    if (!newStacks.length) {
      let finished = stopped && findFinished(stopped);
      if (finished) return this.stackToTree(finished);

      if (this.parser.strict) {
        if (verbose && stopped) console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
        throw new SyntaxError("No parse at " + pos);
      }

      if (!this.recovering) this.recovering = 5
      /* Distance */
      ;
    }

    if (this.recovering && stopped) {
      let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0] : this.runRecovery(stopped, stoppedTokens, newStacks);
      if (finished) return this.stackToTree(finished.forceAll());
    }

    if (this.recovering) {
      let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3
      /* MaxRemainingPerStep */
      ;

      if (newStacks.length > maxRemaining) {
        newStacks.sort((a, b) => b.score - a.score);

        while (newStacks.length > maxRemaining) newStacks.pop();
      }

      if (newStacks.some(s => s.reducePos > pos)) this.recovering--;
    } else if (newStacks.length > 1) {
      // Prune stacks that are in the same state, or that have been
      // running without splitting for a while, to avoid getting stuck
      // with multiple successful stacks running endlessly on.
      outer: for (let i = 0; i < newStacks.length - 1; i++) {
        let stack = newStacks[i];

        for (let j = i + 1; j < newStacks.length; j++) {
          let other = newStacks[j];

          if (stack.sameState(other) || stack.buffer.length > 500
          /* MinBufferLengthPrune */
          && other.buffer.length > 500
          /* MinBufferLengthPrune */
          ) {
            if ((stack.score - other.score || stack.buffer.length - other.buffer.length) > 0) {
              newStacks.splice(j--, 1);
            } else {
              newStacks.splice(i--, 1);
              continue outer;
            }
          }
        }
      }
    }

    this.minStackPos = newStacks[0].pos;

    for (let i = 1; i < newStacks.length; i++) if (newStacks[i].pos < this.minStackPos) this.minStackPos = newStacks[i].pos;

    return null;
  }

  stopAt(pos) {
    if (this.stoppedAt != null && this.stoppedAt < pos) throw new RangeError("Can't move stoppedAt forward");
    this.stoppedAt = pos;
  } // Returns an updated version of the given stack, or null if the
  // stack can't advance normally. When `split` and `stacks` are
  // given, stacks split off by ambiguous operations will be pushed to
  // `split`, or added to `stacks` if they move `pos` forward.


  advanceStack(stack, stacks, split) {
    let start = stack.pos,
        {
      parser
    } = this;
    let base = verbose ? this.stackID(stack) + " -> " : "";
    if (this.stoppedAt != null && start > this.stoppedAt) return stack.forceReduce() ? stack : null;

    if (this.fragments) {
      let strictCx = stack.curContext && stack.curContext.tracker.strict,
          cxHash = strictCx ? stack.curContext.hash : 0;

      for (let cached = this.fragments.nodeAt(start); cached;) {
        let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;

        if (match > -1 && cached.length && (!strictCx || (cached.prop(_common.NodeProp.contextHash) || 0) == cxHash)) {
          stack.useNode(cached, match);
          if (verbose) console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);
          return true;
        }

        if (!(cached instanceof _common.Tree) || cached.children.length == 0 || cached.positions[0] > 0) break;
        let inner = cached.children[0];
        if (inner instanceof _common.Tree && cached.positions[0] == 0) cached = inner;else break;
      }
    }

    let defaultReduce = parser.stateSlot(stack.state, 4
    /* DefaultReduce */
    );

    if (defaultReduce > 0) {
      stack.reduce(defaultReduce);
      if (verbose) console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535
      /* ValueMask */
      )})`);
      return true;
    }

    if (stack.stack.length >= 15000
    /* CutDepth */
    ) {
      while (stack.stack.length > 9000
      /* CutTo */
      && stack.forceReduce()) {}
    }

    let actions = this.tokens.getActions(stack);

    for (let i = 0; i < actions.length;) {
      let action = actions[i++],
          term = actions[i++],
          end = actions[i++];
      let last = i == actions.length || !split;
      let localStack = last ? stack : stack.split();
      localStack.apply(action, term, end);
      if (verbose) console.log(base + this.stackID(localStack) + ` (via ${(action & 65536
      /* ReduceFlag */
      ) == 0 ? "shift" : `reduce of ${parser.getName(action & 65535
      /* ValueMask */
      )}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? "" : ", split"})`);
      if (last) return true;else if (localStack.pos > start) stacks.push(localStack);else split.push(localStack);
    }

    return false;
  } // Advance a given stack forward as far as it will go. Returns the
  // (possibly updated) stack if it got stuck, or null if it moved
  // forward and was given to `pushStackDedup`.


  advanceFully(stack, newStacks) {
    let pos = stack.pos;

    for (;;) {
      if (!this.advanceStack(stack, null, null)) return false;

      if (stack.pos > pos) {
        pushStackDedup(stack, newStacks);
        return true;
      }
    }
  }

  runRecovery(stacks, tokens, newStacks) {
    let finished = null,
        restarted = false;

    for (let i = 0; i < stacks.length; i++) {
      let stack = stacks[i],
          token = tokens[i << 1],
          tokenEnd = tokens[(i << 1) + 1];
      let base = verbose ? this.stackID(stack) + " -> " : "";

      if (stack.deadEnd) {
        if (restarted) continue;
        restarted = true;
        stack.restart();
        if (verbose) console.log(base + this.stackID(stack) + " (restarted)");
        let done = this.advanceFully(stack, newStacks);
        if (done) continue;
      }

      let force = stack.split(),
          forceBase = base;

      for (let j = 0; force.forceReduce() && j < 10
      /* ForceReduceLimit */
      ; j++) {
        if (verbose) console.log(forceBase + this.stackID(force) + " (via force-reduce)");
        let done = this.advanceFully(force, newStacks);
        if (done) break;
        if (verbose) forceBase = this.stackID(force) + " -> ";
      }

      for (let insert of stack.recoverByInsert(token)) {
        if (verbose) console.log(base + this.stackID(insert) + " (via recover-insert)");
        this.advanceFully(insert, newStacks);
      }

      if (this.stream.end > stack.pos) {
        if (tokenEnd == stack.pos) {
          tokenEnd++;
          token = 0
          /* Err */
          ;
        }

        stack.recoverByDelete(token, tokenEnd);
        if (verbose) console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);
        pushStackDedup(stack, newStacks);
      } else if (!finished || finished.score < stack.score) {
        finished = stack;
      }
    }

    return finished;
  } // Convert the stack's buffer to a syntax tree.


  stackToTree(stack) {
    stack.close();
    return _common.Tree.build({
      buffer: StackBufferCursor.create(stack),
      nodeSet: this.parser.nodeSet,
      topID: this.topTerm,
      maxBufferLength: this.parser.bufferLength,
      reused: this.reused,
      start: this.ranges[0].from,
      length: stack.pos - this.ranges[0].from,
      minRepeatType: this.parser.minRepeatTerm
    });
  }

  stackID(stack) {
    let id = (stackIDs || (stackIDs = new WeakMap())).get(stack);
    if (!id) stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));
    return id + stack;
  }

}

function pushStackDedup(stack, newStacks) {
  for (let i = 0; i < newStacks.length; i++) {
    let other = newStacks[i];

    if (other.pos == stack.pos && other.sameState(stack)) {
      if (newStacks[i].score < stack.score) newStacks[i] = stack;
      return;
    }
  }

  newStacks.push(stack);
}

class Dialect {
  constructor(source, flags, disabled) {
    this.source = source;
    this.flags = flags;
    this.disabled = disabled;
  }

  allows(term) {
    return !this.disabled || this.disabled[term] == 0;
  }

}

const id = x => x; /// Context trackers are used to track stateful context (such as
/// indentation in the Python grammar, or parent elements in the XML
/// grammar) needed by external tokenizers. You declare them in a
/// grammar file as `@context exportName from "module"`.
///
/// Context values should be immutable, and can be updated (replaced)
/// on shift or reduce actions.
///
/// The export used in a `@context` declaration should be of this
/// type.


class ContextTracker {
  /// Define a context tracker.
  constructor(spec) {
    this.start = spec.start;
    this.shift = spec.shift || id;
    this.reduce = spec.reduce || id;
    this.reuse = spec.reuse || id;

    this.hash = spec.hash || (() => 0);

    this.strict = spec.strict !== false;
  }

} /// Holds the parse tables for a given grammar, as generated by
/// `lezer-generator`, and provides [methods](#common.Parser) to parse
/// content with.


exports.ContextTracker = ContextTracker;

class LRParser extends _common.Parser {
  /// @internal
  constructor(spec) {
    super(); /// @internal

    this.wrappers = [];
    if (spec.version != 14
    /* Version */
    ) throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14
    /* Version */
    })`);
    let nodeNames = spec.nodeNames.split(" ");
    this.minRepeatTerm = nodeNames.length;

    for (let i = 0; i < spec.repeatNodeCount; i++) nodeNames.push("");

    let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);
    let nodeProps = [];

    for (let i = 0; i < nodeNames.length; i++) nodeProps.push([]);

    function setProp(nodeID, prop, value) {
      nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
    }

    if (spec.nodeProps) for (let propSpec of spec.nodeProps) {
      let prop = propSpec[0];
      if (typeof prop == "string") prop = _common.NodeProp[prop];

      for (let i = 1; i < propSpec.length;) {
        let next = propSpec[i++];

        if (next >= 0) {
          setProp(next, prop, propSpec[i++]);
        } else {
          let value = propSpec[i + -next];

          for (let j = -next; j > 0; j--) setProp(propSpec[i++], prop, value);

          i++;
        }
      }
    }
    this.nodeSet = new _common.NodeSet(nodeNames.map((name, i) => _common.NodeType.define({
      name: i >= this.minRepeatTerm ? undefined : name,
      id: i,
      props: nodeProps[i],
      top: topTerms.indexOf(i) > -1,
      error: i == 0,
      skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
    })));
    if (spec.propSources) this.nodeSet = this.nodeSet.extend(...spec.propSources);
    this.strict = false;
    this.bufferLength = _common.DefaultBufferLength;
    let tokenArray = decodeArray(spec.tokenData);
    this.context = spec.context;
    this.specializerSpecs = spec.specialized || [];
    this.specialized = new Uint16Array(this.specializerSpecs.length);

    for (let i = 0; i < this.specializerSpecs.length; i++) this.specialized[i] = this.specializerSpecs[i].term;

    this.specializers = this.specializerSpecs.map(getSpecializer);
    this.states = decodeArray(spec.states, Uint32Array);
    this.data = decodeArray(spec.stateData);
    this.goto = decodeArray(spec.goto);
    this.maxTerm = spec.maxTerm;
    this.tokenizers = spec.tokenizers.map(value => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
    this.topRules = spec.topRules;
    this.dialects = spec.dialects || {};
    this.dynamicPrecedences = spec.dynamicPrecedences || null;
    this.tokenPrecTable = spec.tokenPrec;
    this.termNames = spec.termNames || null;
    this.maxNode = this.nodeSet.types.length - 1;
    this.dialect = this.parseDialect();
    this.top = this.topRules[Object.keys(this.topRules)[0]];
  }

  createParse(input, fragments, ranges) {
    let parse = new Parse(this, input, fragments, ranges);

    for (let w of this.wrappers) parse = w(parse, input, fragments, ranges);

    return parse;
  } /// Get a goto table entry @internal


  getGoto(state, term, loose = false) {
    let table = this.goto;
    if (term >= table[0]) return -1;

    for (let pos = table[term + 1];;) {
      let groupTag = table[pos++],
          last = groupTag & 1;
      let target = table[pos++];
      if (last && loose) return target;

      for (let end = pos + (groupTag >> 1); pos < end; pos++) if (table[pos] == state) return target;

      if (last) return -1;
    }
  } /// Check if this state has an action for a given terminal @internal


  hasAction(state, terminal) {
    let data = this.data;

    for (let set = 0; set < 2; set++) {
      for (let i = this.stateSlot(state, set ? 2
      /* Skip */
      : 1
      /* Actions */
      ), next;; i += 3) {
        if ((next = data[i]) == 65535
        /* End */
        ) {
          if (data[i + 1] == 1
          /* Next */
          ) next = data[i = pair(data, i + 2)];else if (data[i + 1] == 2
          /* Other */
          ) return pair(data, i + 2);else break;
        }

        if (next == terminal || next == 0
        /* Err */
        ) return pair(data, i + 1);
      }
    }

    return 0;
  } /// @internal


  stateSlot(state, slot) {
    return this.states[state * 6
    /* Size */
    + slot];
  } /// @internal


  stateFlag(state, flag) {
    return (this.stateSlot(state, 0
    /* Flags */
    ) & flag) > 0;
  } /// @internal


  validAction(state, action) {
    if (action == this.stateSlot(state, 4
    /* DefaultReduce */
    )) return true;

    for (let i = this.stateSlot(state, 1
    /* Actions */
    );; i += 3) {
      if (this.data[i] == 65535
      /* End */
      ) {
        if (this.data[i + 1] == 1
        /* Next */
        ) i = pair(this.data, i + 2);else return false;
      }

      if (action == pair(this.data, i + 1)) return true;
    }
  } /// Get the states that can follow this one through shift actions or
  /// goto jumps. @internal


  nextStates(state) {
    let result = [];

    for (let i = this.stateSlot(state, 1
    /* Actions */
    );; i += 3) {
      if (this.data[i] == 65535
      /* End */
      ) {
        if (this.data[i + 1] == 1
        /* Next */
        ) i = pair(this.data, i + 2);else break;
      }

      if ((this.data[i + 2] & 65536
      /* ReduceFlag */
      >> 16) == 0) {
        let value = this.data[i + 1];
        if (!result.some((v, i) => i & 1 && v == value)) result.push(this.data[i], value);
      }
    }

    return result;
  } /// @internal


  overrides(token, prev) {
    let iPrev = findOffset(this.data, this.tokenPrecTable, prev);
    return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;
  } /// Configure the parser. Returns a new parser instance that has the
  /// given settings modified. Settings not provided in `config` are
  /// kept from the original parser.


  configure(config) {
    // Hideous reflection-based kludge to make it easy to create a
    // slightly modified copy of a parser.
    let copy = Object.assign(Object.create(LRParser.prototype), this);
    if (config.props) copy.nodeSet = this.nodeSet.extend(...config.props);

    if (config.top) {
      let info = this.topRules[config.top];
      if (!info) throw new RangeError(`Invalid top rule name ${config.top}`);
      copy.top = info;
    }

    if (config.tokenizers) copy.tokenizers = this.tokenizers.map(t => {
      let found = config.tokenizers.find(r => r.from == t);
      return found ? found.to : t;
    });

    if (config.specializers) {
      copy.specializers = this.specializers.slice();
      copy.specializerSpecs = this.specializerSpecs.map((s, i) => {
        let found = config.specializers.find(r => r.from == s.external);
        if (!found) return s;
        let spec = Object.assign(Object.assign({}, s), {
          external: found.to
        });
        copy.specializers[i] = getSpecializer(spec);
        return spec;
      });
    }

    if (config.contextTracker) copy.context = config.contextTracker;
    if (config.dialect) copy.dialect = this.parseDialect(config.dialect);
    if (config.strict != null) copy.strict = config.strict;
    if (config.wrap) copy.wrappers = copy.wrappers.concat(config.wrap);
    if (config.bufferLength != null) copy.bufferLength = config.bufferLength;
    return copy;
  } /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
  /// are registered for this parser.


  hasWrappers() {
    return this.wrappers.length > 0;
  } /// Returns the name associated with a given term. This will only
  /// work for all terms when the parser was generated with the
  /// `--names` option. By default, only the names of tagged terms are
  /// stored.


  getName(term) {
    return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
  } /// The eof term id is always allocated directly after the node
  /// types. @internal


  get eofTerm() {
    return this.maxNode + 1;
  } /// The type of top node produced by the parser.


  get topNode() {
    return this.nodeSet.types[this.top[1]];
  } /// @internal


  dynamicPrecedence(term) {
    let prec = this.dynamicPrecedences;
    return prec == null ? 0 : prec[term] || 0;
  } /// @internal


  parseDialect(dialect) {
    let values = Object.keys(this.dialects),
        flags = values.map(() => false);
    if (dialect) for (let part of dialect.split(" ")) {
      let id = values.indexOf(part);
      if (id >= 0) flags[id] = true;
    }
    let disabled = null;

    for (let i = 0; i < values.length; i++) if (!flags[i]) {
      for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535
      /* End */
      ;) (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;
    }

    return new Dialect(dialect, flags, disabled);
  } /// Used by the output of the parser generator. Not available to
  /// user code.


  static deserialize(spec) {
    return new LRParser(spec);
  }

}

exports.LRParser = LRParser;

function pair(data, off) {
  return data[off] | data[off + 1] << 16;
}

function findOffset(data, start, term) {
  for (let i = start, next; (next = data[i]) != 65535
  /* End */
  ; i++) if (next == term) return i - start;

  return -1;
}

function findFinished(stacks) {
  let best = null;

  for (let stack of stacks) {
    let stopped = stack.p.stoppedAt;
    if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) && stack.p.parser.stateFlag(stack.state, 2
    /* Accepting */
    ) && (!best || best.score < stack.score)) best = stack;
  }

  return best;
}

function getSpecializer(spec) {
  if (spec.external) {
    let mask = spec.extend ? 1
    /* Extend */
    : 0
    /* Specialize */
    ;
    return (value, stack) => spec.external(value, stack) << 1 | mask;
  }

  return spec.get;
}
},{"@lezer/common":"YT4N","process":"kpD3"}],"Fi4p":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parser = void 0;

var _lr = require("@lezer/lr");

// This file was generated by lezer-generator. You probably shouldn't edit it.
var parser = _lr.LRParser.deserialize({
  version: 14,
  states: "$nOYQPOOOYQPO'#CxOOQO'#Cw'#CwO}QQO'#CyO!SQPO'#CzO!SQPO'#C|O!bQPO'#C}OOQO'#Cv'#CvOOQO'#Cs'#CsQYQPOOO!gQPO,59dOYQPO,59eOOQO'#C{'#C{O!nQPO'#C{OYQPO,59fO!yQQO,59hOYQPO,59iOOQO-E6q-E6qOOQO1G/O1G/OOOQO1G/P1G/POOQO,59g,59gOOQO1G/Q1G/QO#OQPO1G/SO#dQPO1G/TO#kQPO7+$nOOQO7+$o7+$oO#OQPO<<HYOOQOAN=tAN=t",
  stateData: "$n~OPOSQOS~OSQOTQOUQOVQOWQOXPOZRO]SO_VObTOeUO~O[ZO~O^]O_[O`[Oa[O~O_`O~OYbO~PYO_dO`dOadO~OcfO~OSQOTQOUQOVQOWQOXPO~OfiO~PYOdjOSpqTpqUpqVpqWpqXpqZpq]pq_pqbpqepqhpqYpqfpq~O_~",
  goto: "#_rPPPPPPPPPPPPPPPPPPPPPPPsPP!R!a!q!}!}#X!}!}QXOQYPUaXYgRg`[WOPXY`gQcZRe^`VOPXYZ^`gQhfRkjeQOPXYZ^`fgjaVOPXYZ^`gQ^SR_T",
  nodeNames: "⚠ SPACE LINE_COMMENT prog UP DOWN LEFT RIGHT STAY OPEN_BRACKET CLOSE_BRACKET REPEAT NUM WHILE NOT ID EMPTY NUMBER IF THEN ELSE THIS END",
  maxTerm: 33,
  skippedNodes: [0, 1, 2],
  repeatNodeCount: 1,
  tokenData: "K_~RpXY#VYZ#V]^#Vpq#V!P!Q#h!Q![#|!c!}$g#R#S$g#T#o$g#o#p%O#q#r%T7l7n$g7n7o%Y7o7q$g7q7r/z7r7t$g7t7u2`7u7v$g7v7w5`7w7y$g7y7z8c7z7{$g7{7|9k7|7}$g7}8OAq8O8PE`8P8S$g8S8TFh8T8Z$g8Z8[Ih8[8^$g8^9O$g~#[SP~XY#VYZ#V]^#Vpq#V~#kP!P!Q#n~#sRQ~OY#nZ]#n^~#nR$TU[Q_P!Q![#|!c!}$g#R#S$g#T#o$g7l8^$g8^9O$gP$lU_P!Q![$g!c!}$g#R#S$g#T#o$g7l8^$g8^9O$g~%TOX~~%YOY~~%_^_P!Q![$g!c!}$g#R#S$g#T#o$g7l7n$g7n7o&Z7o7w$g7w7x(o7x7y$g7y7z+T7z7{$g7{7|,z7|8^$g8^9O$g~&`W_P!Q![$g!c!}$g#R#S$g#T#o$g7l7q$g7q7r&x7r8^$g8^9O$g~&}W_P!Q![$g!c!}$g#R#S$g#T#o$g7l7|$g7|7}'g7}8^$g8^9O$g~'lW_P!Q![$g!c!}$g#R#S$g#T#o$g7l8R$g8R8S(U8S8^$g8^9O$g~(]US~_P!Q![$g!c!}$g#R#S$g#T#o$g7l8^$g8^9O$g~(tW_P!Q![$g!c!}$g#R#S$g#T#o$g7l7q$g7q7r)^7r8^$g8^9O$g~)cW_P!Q![$g!c!}$g#R#S$g#T#o$g7l7n$g7n7o){7o8^$g8^9O$g~*QW_P!Q![$g!c!}$g#R#S$g#T#o$g7l7z$g7z7{*j7{8^$g8^9O$g~*qUU~_P!Q![$g!c!}$g#R#S$g#T#o$g7l8^$g8^9O$g~+YW_P!Q![$g!c!}$g#R#S$g#T#o$g7l7t$g7t7u+r7u8^$g8^9O$g~+wW_P!Q![$g!c!}$g#R#S$g#T#o$g7l7s$g7s7t,a7t8^$g8^9O$g~,hUT~_P!Q![$g!c!}$g#R#S$g#T#o$g7l8^$g8^9O$g~-PW_P!Q![$g!c!}$g#R#S$g#T#o$g7l7|$g7|7}-i7}8^$g8^9O$g~-nV_P!Q![$g!c!}$g#R#S$g#T#o$g7l7m.T7m8^$g8^9O$g~.YW_P!Q![$g!c!}$g#R#S$g#T#o$g7l7n$g7n7o.r7o8^$g8^9O$g~.wW_P!Q![$g!c!}$g#R#S$g#T#o$g7l7z$g7z7{/a7{8^$g8^9O$g~/hUV~_P!Q![$g!c!}$g#R#S$g#T#o$g7l8^$g8^9O$g~0PW_P!Q![$g!c!}$g#R#S$g#T#o$g7l7}$g7}8O0i8O8^$g8^9O$g~0nW_P!Q![$g!c!}$g#R#S$g#T#o$g7l7w$g7w7x1W7x8^$g8^9O$g~1]W_P!Q![$g!c!}$g#R#S$g#T#o$g7l7t$g7t7u1u7u8^$g8^9O$g~1|Ub~_P!Q![$g!c!}$g#R#S$g#T#o$g7l8^$g8^9O$g~2eW_P!Q![$g!c!}$g#R#S$g#T#o$g7l7y$g7y7z2}7z8^$g8^9O$g~3SV_P!Q![$g!c!}$g#R#S$g#T#o$g7l7m3i7m8^$g8^9O$g~3nW_P!Q![$g!c!}$g#R#S$g#T#o$g7l8T$g8T8U4W8U8^$g8^9O$g~4]W_P!Q![$g!c!}$g#R#S$g#T#o$g7l7q$g7q7r4u7r8^$g8^9O$g~4|Ud~_P!Q![$g!c!}$g#R#S$g#T#o$g7l8^$g8^9O$g~5eW_P!Q![$g!c!}$g#R#S$g#T#o$g7l7z$g7z7{5}7{8^$g8^9O$g~6SW_P!Q![$g!c!}$g#R#S$g#T#o$g7l7y$g7y7z6l7z8^$g8^9O$g~6qW_P!Q![$g!c!}$g#R#S$g#T#o$g7l7q$g7q7r7Z7r8^$g8^9O$g~7`W_P!Q![$g!c!}$g#R#S$g#T#o$g7l8S$g8S8T7x8T8^$g8^9O$g~8PUf~_P!Q![$g!c!}$g#R#S$g#T#o$g7l8^$g8^9O$g~8hW_P!Q![$g!c!}$g#R#S$g#T#o$g7l7q$g7q7r9Q7r8^$g8^9O$g~9XU^~_P!Q![$g!c!}$g#R#S$g#T#o$g7l8^$g8^9O$g~9pY_P!Q![$g!c!}$g#R#S$g#T#o$g7l7z$g7z7{:`7{8P$g8P8Q?]8Q8^$g8^9O$g~:eY_P!Q![$g!c!}$g#R#S$g#T#o$g7l7n$g7n7o;T7o7v$g7v7w>W7w8^$g8^9O$g~;YW_P!Q![$g!c!}$g#R#S$g#T#o$g7l8O$g8O8P;r8P8^$g8^9O$g~;wW_P!Q![$g!c!}$g#R#S$g#T#o$g7l7z$g7z7{<a7{8^$g8^9O$g~<fW_P!Q![$g!c!}$g#R#S$g#T#o$g7l7|$g7|7}=O7}8^$g8^9O$g~=TW_P!Q![$g!c!}$g#R#S$g#T#o$g7l7t$g7t7u=m7u8^$g8^9O$g~=tUZ~_P!Q![$g!c!}$g#R#S$g#T#o$g7l8^$g8^9O$g~>]V_P!Q![$g!c!}$g#R#S$g#T#o$g7l7m>r7m8^$g8^9O$g~>yU]~_P!Q![$g!c!}$g#R#S$g#T#o$g7l8^$g8^9O$g~?bW_P!Q![$g!c!}$g#R#S$g#T#o$g7l7}$g7}8O?z8O8^$g8^9O$g~@PW_P!Q![$g!c!}$g#R#S$g#T#o$g7l8O$g8O8P@i8P8^$g8^9O$g~@nW_P!Q![$g!c!}$g#R#S$g#T#o$g7l7z$g7z7{AW7{8^$g8^9O$g~A_U`~_P!Q![$g!c!}$g#R#S$g#T#o$g7l8^$g8^9O$g~AvW_P!Q![$g!c!}$g#R#S$g#T#o$g7l8O$g8O8PB`8P8^$g8^9O$g~BeW_P!Q![$g!c!}$g#R#S$g#T#o$g7l7z$g7z7{B}7{8^$g8^9O$g~CSV_P!Q![$g!c!}$g#R#S$g#T#o$g7l8]$g8]8^Ci8^9O$g~CnW_P!Q![$g!c!}$g#R#S$g#T#o$g7l8O$g8O8PDW8P8^$g8^9O$g~D]W_P!Q![$g!c!}$g#R#S$g#T#o$g7l8Y$g8Y8ZDu8Z8^$g8^9O$g~D|UW~_P!Q![$g!c!}$g#R#S$g#T#o$g7l8^$g8^9O$gREeW_P!Q![$g!c!}$g#R#S$g#T#o$g7l7z$g7z7{E}7{8^$g8^9O$gRFUUcQ_P!Q![$g!c!}$g#R#S$g#T#o$g7l8^$g8^9O$g~FmW_P!Q![$g!c!}$g#R#S$g#T#o$g7l7t$g7t7uGV7u8^$g8^9O$g~G[W_P!Q![$g!c!}$g#R#S$g#T#o$g7l8Q$g8Q8RGt8R8^$g8^9O$g~GyW_P!Q![$g!c!}$g#R#S$g#T#o$g7l7|$g7|7}Hc7}8^$g8^9O$g~HhV_P!Q![$g!c!}$g#R#S$g#T#o$g7l7mH}7m8^$g8^9O$g~IUUa~_P!Q![$g!c!}$g#R#S$g#T#o$g7l8^$g8^9O$g~ImW_P!Q![$g!c!}$g#R#S$g#T#o$g7l8O$g8O8PJV8P8^$g8^9O$g~J[W_P!Q![$g!c!}$g#R#S$g#T#o$g7l7z$g7z7{Jt7{8^$g8^9O$g~J{Ue~_P!Q![$g!c!}$g#R#S$g#T#o$g7l8^$g8^9O$g",
  tokenizers: [0, 1],
  topRules: {
    "prog": [0, 3]
  },
  tokenPrec: 166
});

exports.parser = parser;
},{"@lezer/lr":"k5nx"}],"s5u9":[function(require,module,exports) {
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Transaction = exports.Text = exports.StateField = exports.StateEffectType = exports.StateEffect = exports.SelectionRange = exports.RangeValue = exports.RangeSetBuilder = exports.RangeSet = exports.Range = exports.Prec = exports.MapMode = exports.Line = exports.Facet = exports.EditorState = exports.EditorSelection = exports.Compartment = exports.CharCategory = exports.ChangeSet = exports.ChangeDesc = exports.AnnotationType = exports.Annotation = void 0;
exports.codePointAt = codePointAt;
exports.codePointSize = codePointSize;
exports.combineConfig = combineConfig;
exports.countColumn = countColumn;
exports.findClusterBreak = findClusterBreak;
exports.findColumn = findColumn;
exports.fromCodePoint = fromCodePoint;

/**
The data structure for documents. @nonabstract
*/
class Text {
  /**
  @internal
  */
  constructor() {}
  /**
  Get the line description around the given position.
  */


  lineAt(pos) {
    if (pos < 0 || pos > this.length) throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
    return this.lineInner(pos, false, 1, 0);
  }
  /**
  Get the description for the given (1-based) line number.
  */


  line(n) {
    if (n < 1 || n > this.lines) throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
    return this.lineInner(n, true, 1, 0);
  }
  /**
  Replace a range of the text with the given content.
  */


  replace(from, to, text) {
    let parts = [];
    this.decompose(0, from, parts, 2
    /* To */
    );
    if (text.length) text.decompose(0, text.length, parts, 1
    /* From */
    | 2
    /* To */
    );
    this.decompose(to, this.length, parts, 1
    /* From */
    );
    return TextNode.from(parts, this.length - (to - from) + text.length);
  }
  /**
  Append another document to this one.
  */


  append(other) {
    return this.replace(this.length, this.length, other);
  }
  /**
  Retrieve the text between the given points.
  */


  slice(from, to = this.length) {
    let parts = [];
    this.decompose(from, to, parts, 0);
    return TextNode.from(parts, to - from);
  }
  /**
  Test whether this text is equal to another instance.
  */


  eq(other) {
    if (other == this) return true;
    if (other.length != this.length || other.lines != this.lines) return false;
    let start = this.scanIdentical(other, 1),
        end = this.length - this.scanIdentical(other, -1);
    let a = new RawTextCursor(this),
        b = new RawTextCursor(other);

    for (let skip = start, pos = start;;) {
      a.next(skip);
      b.next(skip);
      skip = 0;
      if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value) return false;
      pos += a.value.length;
      if (a.done || pos >= end) return true;
    }
  }
  /**
  Iterate over the text. When `dir` is `-1`, iteration happens
  from end to start. This will return lines and the breaks between
  them as separate strings.
  */


  iter(dir = 1) {
    return new RawTextCursor(this, dir);
  }
  /**
  Iterate over a range of the text. When `from` > `to`, the
  iterator will run in reverse.
  */


  iterRange(from, to = this.length) {
    return new PartialTextCursor(this, from, to);
  }
  /**
  Return a cursor that iterates over the given range of lines,
  _without_ returning the line breaks between, and yielding empty
  strings for empty lines.
  
  When `from` and `to` are given, they should be 1-based line numbers.
  */


  iterLines(from, to) {
    let inner;

    if (from == null) {
      inner = this.iter();
    } else {
      if (to == null) to = this.lines + 1;
      let start = this.line(from).from;
      inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
    }

    return new LineCursor(inner);
  }
  /**
  @internal
  */


  toString() {
    return this.sliceString(0);
  }
  /**
  Convert the document to an array of lines (which can be
  deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
  */


  toJSON() {
    let lines = [];
    this.flatten(lines);
    return lines;
  }
  /**
  Create a `Text` instance for the given array of lines.
  */


  static of(text) {
    if (text.length == 0) throw new RangeError("A document must have at least one line");
    if (text.length == 1 && !text[0]) return Text.empty;
    return text.length <= 32
    /* Branch */
    ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
  }

} // Leaves store an array of line strings. There are always line breaks
// between these strings. Leaves are limited in size and have to be
// contained in TextNode instances for bigger documents.


exports.Text = Text;

class TextLeaf extends Text {
  constructor(text, length = textLength(text)) {
    super();
    this.text = text;
    this.length = length;
  }

  get lines() {
    return this.text.length;
  }

  get children() {
    return null;
  }

  lineInner(target, isLine, line, offset) {
    for (let i = 0;; i++) {
      let string = this.text[i],
          end = offset + string.length;
      if ((isLine ? line : end) >= target) return new Line(offset, end, line, string);
      offset = end + 1;
      line++;
    }
  }

  decompose(from, to, target, open) {
    let text = from <= 0 && to >= this.length ? this : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));

    if (open & 1
    /* From */
    ) {
      let prev = target.pop();
      let joined = appendText(text.text, prev.text.slice(), 0, text.length);

      if (joined.length <= 32
      /* Branch */
      ) {
        target.push(new TextLeaf(joined, prev.length + text.length));
      } else {
        let mid = joined.length >> 1;
        target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
      }
    } else {
      target.push(text);
    }
  }

  replace(from, to, text) {
    if (!(text instanceof TextLeaf)) return super.replace(from, to, text);
    let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
    let newLen = this.length + text.length - (to - from);
    if (lines.length <= 32
    /* Branch */
    ) return new TextLeaf(lines, newLen);
    return TextNode.from(TextLeaf.split(lines, []), newLen);
  }

  sliceString(from, to = this.length, lineSep = "\n") {
    let result = "";

    for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
      let line = this.text[i],
          end = pos + line.length;
      if (pos > from && i) result += lineSep;
      if (from < end && to > pos) result += line.slice(Math.max(0, from - pos), to - pos);
      pos = end + 1;
    }

    return result;
  }

  flatten(target) {
    for (let line of this.text) target.push(line);
  }

  scanIdentical() {
    return 0;
  }

  static split(text, target) {
    let part = [],
        len = -1;

    for (let line of text) {
      part.push(line);
      len += line.length + 1;

      if (part.length == 32
      /* Branch */
      ) {
        target.push(new TextLeaf(part, len));
        part = [];
        len = -1;
      }
    }

    if (len > -1) target.push(new TextLeaf(part, len));
    return target;
  }

} // Nodes provide the tree structure of the `Text` type. They store a
// number of other nodes or leaves, taking care to balance themselves
// on changes. There are implied line breaks _between_ the children of
// a node (but not before the first or after the last child).


class TextNode extends Text {
  constructor(children, length) {
    super();
    this.children = children;
    this.length = length;
    this.lines = 0;

    for (let child of children) this.lines += child.lines;
  }

  lineInner(target, isLine, line, offset) {
    for (let i = 0;; i++) {
      let child = this.children[i],
          end = offset + child.length,
          endLine = line + child.lines - 1;
      if ((isLine ? endLine : end) >= target) return child.lineInner(target, isLine, line, offset);
      offset = end + 1;
      line = endLine + 1;
    }
  }

  decompose(from, to, target, open) {
    for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
      let child = this.children[i],
          end = pos + child.length;

      if (from <= end && to >= pos) {
        let childOpen = open & ((pos <= from ? 1
        /* From */
        : 0) | (end >= to ? 2
        /* To */
        : 0));
        if (pos >= from && end <= to && !childOpen) target.push(child);else child.decompose(from - pos, to - pos, target, childOpen);
      }

      pos = end + 1;
    }
  }

  replace(from, to, text) {
    if (text.lines < this.lines) for (let i = 0, pos = 0; i < this.children.length; i++) {
      let child = this.children[i],
          end = pos + child.length; // Fast path: if the change only affects one child and the
      // child's size remains in the acceptable range, only update
      // that child

      if (from >= pos && to <= end) {
        let updated = child.replace(from - pos, to - pos, text);
        let totalLines = this.lines - child.lines + updated.lines;

        if (updated.lines < totalLines >> 5
        /* BranchShift */
        - 1 && updated.lines > totalLines >> 5
        /* BranchShift */
        + 1) {
          let copy = this.children.slice();
          copy[i] = updated;
          return new TextNode(copy, this.length - (to - from) + text.length);
        }

        return super.replace(pos, end, updated);
      }

      pos = end + 1;
    }
    return super.replace(from, to, text);
  }

  sliceString(from, to = this.length, lineSep = "\n") {
    let result = "";

    for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
      let child = this.children[i],
          end = pos + child.length;
      if (pos > from && i) result += lineSep;
      if (from < end && to > pos) result += child.sliceString(from - pos, to - pos, lineSep);
      pos = end + 1;
    }

    return result;
  }

  flatten(target) {
    for (let child of this.children) child.flatten(target);
  }

  scanIdentical(other, dir) {
    if (!(other instanceof TextNode)) return 0;
    let length = 0;
    let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length] : [this.children.length - 1, other.children.length - 1, -1, -1];

    for (;; iA += dir, iB += dir) {
      if (iA == eA || iB == eB) return length;
      let chA = this.children[iA],
          chB = other.children[iB];
      if (chA != chB) return length + chA.scanIdentical(chB, dir);
      length += chA.length + 1;
    }
  }

  static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {
    let lines = 0;

    for (let ch of children) lines += ch.lines;

    if (lines < 32
    /* Branch */
    ) {
      let flat = [];

      for (let ch of children) ch.flatten(flat);

      return new TextLeaf(flat, length);
    }

    let chunk = Math.max(32
    /* Branch */
    , lines >> 5
    /* BranchShift */
    ),
        maxChunk = chunk << 1,
        minChunk = chunk >> 1;
    let chunked = [],
        currentLines = 0,
        currentLen = -1,
        currentChunk = [];

    function add(child) {
      let last;

      if (child.lines > maxChunk && child instanceof TextNode) {
        for (let node of child.children) add(node);
      } else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
        flush();
        chunked.push(child);
      } else if (child instanceof TextLeaf && currentLines && (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf && child.lines + last.lines <= 32
      /* Branch */
      ) {
        currentLines += child.lines;
        currentLen += child.length + 1;
        currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
      } else {
        if (currentLines + child.lines > chunk) flush();
        currentLines += child.lines;
        currentLen += child.length + 1;
        currentChunk.push(child);
      }
    }

    function flush() {
      if (currentLines == 0) return;
      chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
      currentLen = -1;
      currentLines = currentChunk.length = 0;
    }

    for (let child of children) add(child);

    flush();
    return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
  }

}

Text.empty = /*@__PURE__*/new TextLeaf([""], 0);

function textLength(text) {
  let length = -1;

  for (let line of text) length += line.length + 1;

  return length;
}

function appendText(text, target, from = 0, to = 1e9) {
  for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
    let line = text[i],
        end = pos + line.length;

    if (end >= from) {
      if (end > to) line = line.slice(0, to - pos);
      if (pos < from) line = line.slice(from - pos);

      if (first) {
        target[target.length - 1] += line;
        first = false;
      } else target.push(line);
    }

    pos = end + 1;
  }

  return target;
}

function sliceText(text, from, to) {
  return appendText(text, [""], from, to);
}

class RawTextCursor {
  constructor(text, dir = 1) {
    this.dir = dir;
    this.done = false;
    this.lineBreak = false;
    this.value = "";
    this.nodes = [text];
    this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
  }

  nextInner(skip, dir) {
    this.done = this.lineBreak = false;

    for (;;) {
      let last = this.nodes.length - 1;
      let top = this.nodes[last],
          offsetValue = this.offsets[last],
          offset = offsetValue >> 1;
      let size = top instanceof TextLeaf ? top.text.length : top.children.length;

      if (offset == (dir > 0 ? size : 0)) {
        if (last == 0) {
          this.done = true;
          this.value = "";
          return this;
        }

        if (dir > 0) this.offsets[last - 1]++;
        this.nodes.pop();
        this.offsets.pop();
      } else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
        this.offsets[last] += dir;

        if (skip == 0) {
          this.lineBreak = true;
          this.value = "\n";
          return this;
        }

        skip--;
      } else if (top instanceof TextLeaf) {
        // Move to the next string
        let next = top.text[offset + (dir < 0 ? -1 : 0)];
        this.offsets[last] += dir;

        if (next.length > Math.max(0, skip)) {
          this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
          return this;
        }

        skip -= next.length;
      } else {
        let next = top.children[offset + (dir < 0 ? -1 : 0)];

        if (skip > next.length) {
          skip -= next.length;
          this.offsets[last] += dir;
        } else {
          if (dir < 0) this.offsets[last]--;
          this.nodes.push(next);
          this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
        }
      }
    }
  }

  next(skip = 0) {
    if (skip < 0) {
      this.nextInner(-skip, -this.dir);
      skip = this.value.length;
    }

    return this.nextInner(skip, this.dir);
  }

}

class PartialTextCursor {
  constructor(text, start, end) {
    this.value = "";
    this.done = false;
    this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
    this.pos = start > end ? text.length : 0;
    this.from = Math.min(start, end);
    this.to = Math.max(start, end);
  }

  nextInner(skip, dir) {
    if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
      this.value = "";
      this.done = true;
      return this;
    }

    skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
    let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
    if (skip > limit) skip = limit;
    limit -= skip;
    let {
      value
    } = this.cursor.next(skip);
    this.pos += (value.length + skip) * dir;
    this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
    this.done = !this.value;
    return this;
  }

  next(skip = 0) {
    if (skip < 0) skip = Math.max(skip, this.from - this.pos);else if (skip > 0) skip = Math.min(skip, this.to - this.pos);
    return this.nextInner(skip, this.cursor.dir);
  }

  get lineBreak() {
    return this.cursor.lineBreak && this.value != "";
  }

}

class LineCursor {
  constructor(inner) {
    this.inner = inner;
    this.afterBreak = true;
    this.value = "";
    this.done = false;
  }

  next(skip = 0) {
    let {
      done,
      lineBreak,
      value
    } = this.inner.next(skip);

    if (done) {
      this.done = true;
      this.value = "";
    } else if (lineBreak) {
      if (this.afterBreak) {
        this.value = "";
      } else {
        this.afterBreak = true;
        this.next();
      }
    } else {
      this.value = value;
      this.afterBreak = false;
    }

    return this;
  }

  get lineBreak() {
    return false;
  }

}

if (typeof Symbol != "undefined") {
  Text.prototype[Symbol.iterator] = function () {
    return this.iter();
  };

  RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] = LineCursor.prototype[Symbol.iterator] = function () {
    return this;
  };
}
/**
This type describes a line in the document. It is created
on-demand when lines are [queried](https://codemirror.net/6/docs/ref/#state.Text.lineAt).
*/


class Line {
  /**
  @internal
  */
  constructor(
  /**
  The position of the start of the line.
  */
  from,
  /**
  The position at the end of the line (_before_ the line break,
  or at the end of document for the last line).
  */
  to,
  /**
  This line's line number (1-based).
  */
  number,
  /**
  The line's content.
  */
  text) {
    this.from = from;
    this.to = to;
    this.number = number;
    this.text = text;
  }
  /**
  The length of the line (not including any line break after it).
  */


  get length() {
    return this.to - this.from;
  }

} // Compressed representation of the Grapheme_Cluster_Break=Extend
// information from
// http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
// Each pair of elements represents a range, as an offet from the
// previous range and a length. Numbers are in base-36, with the empty
// string being a shorthand for 1.


exports.Line = Line;
let extend = /*@__PURE__*/"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(s => s ? parseInt(s, 36) : 1); // Convert offsets into absolute values

for (let i = 1; i < extend.length; i++) extend[i] += extend[i - 1];

function isExtendingChar(code) {
  for (let i = 1; i < extend.length; i += 2) if (extend[i] > code) return extend[i - 1] <= code;

  return false;
}

function isRegionalIndicator(code) {
  return code >= 0x1F1E6 && code <= 0x1F1FF;
}

const ZWJ = 0x200d;
/**
Returns a next grapheme cluster break _after_ (not equal to)
`pos`, if `forward` is true, or before otherwise. Returns `pos`
itself if no further cluster break is available in the string.
Moves across surrogate pairs, extending characters (when
`includeExtending` is true), characters joined with zero-width
joiners, and flag emoji.
*/

function findClusterBreak(str, pos, forward = true, includeExtending = true) {
  return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);
}

function nextClusterBreak(str, pos, includeExtending) {
  if (pos == str.length) return pos; // If pos is in the middle of a surrogate pair, move to its start

  if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1))) pos--;
  let prev = codePointAt(str, pos);
  pos += codePointSize(prev);

  while (pos < str.length) {
    let next = codePointAt(str, pos);

    if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
      pos += codePointSize(next);
      prev = next;
    } else if (isRegionalIndicator(next)) {
      let countBefore = 0,
          i = pos - 2;

      while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {
        countBefore++;
        i -= 2;
      }

      if (countBefore % 2 == 0) break;else pos += 2;
    } else {
      break;
    }
  }

  return pos;
}

function prevClusterBreak(str, pos, includeExtending) {
  while (pos > 0) {
    let found = nextClusterBreak(str, pos - 2, includeExtending);
    if (found < pos) return found;
    pos--;
  }

  return 0;
}

function surrogateLow(ch) {
  return ch >= 0xDC00 && ch < 0xE000;
}

function surrogateHigh(ch) {
  return ch >= 0xD800 && ch < 0xDC00;
}
/**
Find the code point at the given position in a string (like the
[`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
string method).
*/


function codePointAt(str, pos) {
  let code0 = str.charCodeAt(pos);
  if (!surrogateHigh(code0) || pos + 1 == str.length) return code0;
  let code1 = str.charCodeAt(pos + 1);
  if (!surrogateLow(code1)) return code0;
  return (code0 - 0xd800 << 10) + (code1 - 0xdc00) + 0x10000;
}
/**
Given a Unicode codepoint, return the JavaScript string that
respresents it (like
[`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).
*/


function fromCodePoint(code) {
  if (code <= 0xffff) return String.fromCharCode(code);
  code -= 0x10000;
  return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);
}
/**
The amount of positions a character takes up a JavaScript string.
*/


function codePointSize(code) {
  return code < 0x10000 ? 1 : 2;
}

const DefaultSplit = /\r\n?|\n/;
/**
Distinguishes different ways in which positions can be mapped.
*/

var MapMode = /*@__PURE__*/function (MapMode) {
  /**
  Map a position to a valid new position, even when its context
  was deleted.
  */
  MapMode[MapMode["Simple"] = 0] = "Simple";
  /**
  Return null if deletion happens across the position.
  */

  MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
  /**
  Return null if the character _before_ the position is deleted.
  */

  MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
  /**
  Return null if the character _after_ the position is deleted.
  */

  MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
  return MapMode;
}(MapMode || (exports.MapMode = MapMode = {}));
/**
A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
that doesn't store the inserted text. As such, it can't be
applied, but is cheaper to store and manipulate.
*/


exports.MapMode = MapMode;

class ChangeDesc {
  // Sections are encoded as pairs of integers. The first is the
  // length in the current document, and the second is -1 for
  // unaffected sections, and the length of the replacement content
  // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
  // 0), and a replacement two positive numbers.

  /**
  @internal
  */
  constructor(
  /**
  @internal
  */
  sections) {
    this.sections = sections;
  }
  /**
  The length of the document before the change.
  */


  get length() {
    let result = 0;

    for (let i = 0; i < this.sections.length; i += 2) result += this.sections[i];

    return result;
  }
  /**
  The length of the document after the change.
  */


  get newLength() {
    let result = 0;

    for (let i = 0; i < this.sections.length; i += 2) {
      let ins = this.sections[i + 1];
      result += ins < 0 ? this.sections[i] : ins;
    }

    return result;
  }
  /**
  False when there are actual changes in this set.
  */


  get empty() {
    return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
  }
  /**
  Iterate over the unchanged parts left by these changes. `posA`
  provides the position of the range in the old document, `posB`
  the new position in the changed document.
  */


  iterGaps(f) {
    for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {
      let len = this.sections[i++],
          ins = this.sections[i++];

      if (ins < 0) {
        f(posA, posB, len);
        posB += len;
      } else {
        posB += ins;
      }

      posA += len;
    }
  }
  /**
  Iterate over the ranges changed by these changes. (See
  [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
  variant that also provides you with the inserted text.)
  `fromA`/`toA` provides the extent of the change in the starting
  document, `fromB`/`toB` the extent of the replacement in the
  changed document.
  
  When `individual` is true, adjacent changes (which are kept
  separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
  reported separately.
  */


  iterChangedRanges(f, individual = false) {
    iterChanges(this, f, individual);
  }
  /**
  Get a description of the inverted form of these changes.
  */


  get invertedDesc() {
    let sections = [];

    for (let i = 0; i < this.sections.length;) {
      let len = this.sections[i++],
          ins = this.sections[i++];
      if (ins < 0) sections.push(len, ins);else sections.push(ins, len);
    }

    return new ChangeDesc(sections);
  }
  /**
  Compute the combined effect of applying another set of changes
  after this one. The length of the document after this set should
  match the length before `other`.
  */


  composeDesc(other) {
    return this.empty ? other : other.empty ? this : composeSets(this, other);
  }
  /**
  Map this description, which should start with the same document
  as `other`, over another set of changes, so that it can be
  applied after it. When `before` is true, map as if the changes
  in `other` happened before the ones in `this`.
  */


  mapDesc(other, before = false) {
    return other.empty ? this : mapSet(this, other, before);
  }

  mapPos(pos, assoc = -1, mode = MapMode.Simple) {
    let posA = 0,
        posB = 0;

    for (let i = 0; i < this.sections.length;) {
      let len = this.sections[i++],
          ins = this.sections[i++],
          endA = posA + len;

      if (ins < 0) {
        if (endA > pos) return posB + (pos - posA);
        posB += len;
      } else {
        if (mode != MapMode.Simple && endA >= pos && (mode == MapMode.TrackDel && posA < pos && endA > pos || mode == MapMode.TrackBefore && posA < pos || mode == MapMode.TrackAfter && endA > pos)) return null;
        if (endA > pos || endA == pos && assoc < 0 && !len) return pos == posA || assoc < 0 ? posB : posB + ins;
        posB += ins;
      }

      posA = endA;
    }

    if (pos > posA) throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
    return posB;
  }
  /**
  Check whether these changes touch a given range. When one of the
  changes entirely covers the range, the string `"cover"` is
  returned.
  */


  touchesRange(from, to = from) {
    for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {
      let len = this.sections[i++],
          ins = this.sections[i++],
          end = pos + len;
      if (ins >= 0 && pos <= to && end >= from) return pos < from && end > to ? "cover" : true;
      pos = end;
    }

    return false;
  }
  /**
  @internal
  */


  toString() {
    let result = "";

    for (let i = 0; i < this.sections.length;) {
      let len = this.sections[i++],
          ins = this.sections[i++];
      result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
    }

    return result;
  }
  /**
  Serialize this change desc to a JSON-representable value.
  */


  toJSON() {
    return this.sections;
  }
  /**
  Create a change desc from its JSON representation (as produced
  by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
  */


  static fromJSON(json) {
    if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != "number")) throw new RangeError("Invalid JSON representation of ChangeDesc");
    return new ChangeDesc(json);
  }
  /**
  @internal
  */


  static create(sections) {
    return new ChangeDesc(sections);
  }

}
/**
A change set represents a group of modifications to a document. It
stores the document length, and can only be applied to documents
with exactly that length.
*/


exports.ChangeDesc = ChangeDesc;

class ChangeSet extends ChangeDesc {
  constructor(sections,
  /**
  @internal
  */
  inserted) {
    super(sections);
    this.inserted = inserted;
  }
  /**
  Apply the changes to a document, returning the modified
  document.
  */


  apply(doc) {
    if (this.length != doc.length) throw new RangeError("Applying change set to a document with the wrong length");
    iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);
    return doc;
  }

  mapDesc(other, before = false) {
    return mapSet(this, other, before, true);
  }
  /**
  Given the document as it existed _before_ the changes, return a
  change set that represents the inverse of this set, which could
  be used to go from the document created by the changes back to
  the document as it existed before the changes.
  */


  invert(doc) {
    let sections = this.sections.slice(),
        inserted = [];

    for (let i = 0, pos = 0; i < sections.length; i += 2) {
      let len = sections[i],
          ins = sections[i + 1];

      if (ins >= 0) {
        sections[i] = ins;
        sections[i + 1] = len;
        let index = i >> 1;

        while (inserted.length < index) inserted.push(Text.empty);

        inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);
      }

      pos += len;
    }

    return new ChangeSet(sections, inserted);
  }
  /**
  Combine two subsequent change sets into a single set. `other`
  must start in the document produced by `this`. If `this` goes
  `docA` → `docB` and `other` represents `docB` → `docC`, the
  returned value will represent the change `docA` → `docC`.
  */


  compose(other) {
    return this.empty ? other : other.empty ? this : composeSets(this, other, true);
  }
  /**
  Given another change set starting in the same document, maps this
  change set over the other, producing a new change set that can be
  applied to the document produced by applying `other`. When
  `before` is `true`, order changes as if `this` comes before
  `other`, otherwise (the default) treat `other` as coming first.
  
  Given two changes `A` and `B`, `A.compose(B.map(A))` and
  `B.compose(A.map(B, true))` will produce the same document. This
  provides a basic form of [operational
  transformation](https://en.wikipedia.org/wiki/Operational_transformation),
  and can be used for collaborative editing.
  */


  map(other, before = false) {
    return other.empty ? this : mapSet(this, other, before, true);
  }
  /**
  Iterate over the changed ranges in the document, calling `f` for
  each, with the range in the original document (`fromA`-`toA`)
  and the range that replaces it in the new document
  (`fromB`-`toB`).
  
  When `individual` is true, adjacent changes are reported
  separately.
  */


  iterChanges(f, individual = false) {
    iterChanges(this, f, individual);
  }
  /**
  Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
  set.
  */


  get desc() {
    return ChangeDesc.create(this.sections);
  }
  /**
  @internal
  */


  filter(ranges) {
    let resultSections = [],
        resultInserted = [],
        filteredSections = [];
    let iter = new SectionIter(this);

    done: for (let i = 0, pos = 0;;) {
      let next = i == ranges.length ? 1e9 : ranges[i++];

      while (pos < next || pos == next && iter.len == 0) {
        if (iter.done) break done;
        let len = Math.min(iter.len, next - pos);
        addSection(filteredSections, len, -1);
        let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
        addSection(resultSections, len, ins);
        if (ins > 0) addInsert(resultInserted, resultSections, iter.text);
        iter.forward(len);
        pos += len;
      }

      let end = ranges[i++];

      while (pos < end) {
        if (iter.done) break done;
        let len = Math.min(iter.len, end - pos);
        addSection(resultSections, len, -1);
        addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
        iter.forward(len);
        pos += len;
      }
    }

    return {
      changes: new ChangeSet(resultSections, resultInserted),
      filtered: ChangeDesc.create(filteredSections)
    };
  }
  /**
  Serialize this change set to a JSON-representable value.
  */


  toJSON() {
    let parts = [];

    for (let i = 0; i < this.sections.length; i += 2) {
      let len = this.sections[i],
          ins = this.sections[i + 1];
      if (ins < 0) parts.push(len);else if (ins == 0) parts.push([len]);else parts.push([len].concat(this.inserted[i >> 1].toJSON()));
    }

    return parts;
  }
  /**
  Create a change set for the given changes, for a document of the
  given length, using `lineSep` as line separator.
  */


  static of(changes, length, lineSep) {
    let sections = [],
        inserted = [],
        pos = 0;
    let total = null;

    function flush(force = false) {
      if (!force && !sections.length) return;
      if (pos < length) addSection(sections, length - pos, -1);
      let set = new ChangeSet(sections, inserted);
      total = total ? total.compose(set.map(total)) : set;
      sections = [];
      inserted = [];
      pos = 0;
    }

    function process(spec) {
      if (Array.isArray(spec)) {
        for (let sub of spec) process(sub);
      } else if (spec instanceof ChangeSet) {
        if (spec.length != length) throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
        flush();
        total = total ? total.compose(spec.map(total)) : spec;
      } else {
        let {
          from,
          to = from,
          insert
        } = spec;
        if (from > to || from < 0 || to > length) throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
        let insText = !insert ? Text.empty : typeof insert == "string" ? Text.of(insert.split(lineSep || DefaultSplit)) : insert;
        let insLen = insText.length;
        if (from == to && insLen == 0) return;
        if (from < pos) flush();
        if (from > pos) addSection(sections, from - pos, -1);
        addSection(sections, to - from, insLen);
        addInsert(inserted, sections, insText);
        pos = to;
      }
    }

    process(changes);
    flush(!total);
    return total;
  }
  /**
  Create an empty changeset of the given length.
  */


  static empty(length) {
    return new ChangeSet(length ? [length, -1] : [], []);
  }
  /**
  Create a changeset from its JSON representation (as produced by
  [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
  */


  static fromJSON(json) {
    if (!Array.isArray(json)) throw new RangeError("Invalid JSON representation of ChangeSet");
    let sections = [],
        inserted = [];

    for (let i = 0; i < json.length; i++) {
      let part = json[i];

      if (typeof part == "number") {
        sections.push(part, -1);
      } else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i) => i && typeof e != "string")) {
        throw new RangeError("Invalid JSON representation of ChangeSet");
      } else if (part.length == 1) {
        sections.push(part[0], 0);
      } else {
        while (inserted.length < i) inserted.push(Text.empty);

        inserted[i] = Text.of(part.slice(1));
        sections.push(part[0], inserted[i].length);
      }
    }

    return new ChangeSet(sections, inserted);
  }
  /**
  @internal
  */


  static createSet(sections, inserted) {
    return new ChangeSet(sections, inserted);
  }

}

exports.ChangeSet = ChangeSet;

function addSection(sections, len, ins, forceJoin = false) {
  if (len == 0 && ins <= 0) return;
  let last = sections.length - 2;
  if (last >= 0 && ins <= 0 && ins == sections[last + 1]) sections[last] += len;else if (len == 0 && sections[last] == 0) sections[last + 1] += ins;else if (forceJoin) {
    sections[last] += len;
    sections[last + 1] += ins;
  } else sections.push(len, ins);
}

function addInsert(values, sections, value) {
  if (value.length == 0) return;
  let index = sections.length - 2 >> 1;

  if (index < values.length) {
    values[values.length - 1] = values[values.length - 1].append(value);
  } else {
    while (values.length < index) values.push(Text.empty);

    values.push(value);
  }
}

function iterChanges(desc, f, individual) {
  let inserted = desc.inserted;

  for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {
    let len = desc.sections[i++],
        ins = desc.sections[i++];

    if (ins < 0) {
      posA += len;
      posB += len;
    } else {
      let endA = posA,
          endB = posB,
          text = Text.empty;

      for (;;) {
        endA += len;
        endB += ins;
        if (ins && inserted) text = text.append(inserted[i - 2 >> 1]);
        if (individual || i == desc.sections.length || desc.sections[i + 1] < 0) break;
        len = desc.sections[i++];
        ins = desc.sections[i++];
      }

      f(posA, endA, posB, endB, text);
      posA = endA;
      posB = endB;
    }
  }
}

function mapSet(setA, setB, before, mkSet = false) {
  // Produce a copy of setA that applies to the document after setB
  // has been applied (assuming both start at the same document).
  let sections = [],
      insert = mkSet ? [] : null;
  let a = new SectionIter(setA),
      b = new SectionIter(setB); // Iterate over both sets in parallel. inserted tracks, for changes
  // in A that have to be processed piece-by-piece, whether their
  // content has been inserted already, and refers to the section
  // index.

  for (let inserted = -1;;) {
    if (a.ins == -1 && b.ins == -1) {
      // Move across ranges skipped by both sets.
      let len = Math.min(a.len, b.len);
      addSection(sections, len, -1);
      a.forward(len);
      b.forward(len);
    } else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {
      // If there's a change in B that comes before the next change in
      // A (ordered by start pos, then len, then before flag), skip
      // that (and process any changes in A it covers).
      let len = b.len;
      addSection(sections, b.ins, -1);

      while (len) {
        let piece = Math.min(a.len, len);

        if (a.ins >= 0 && inserted < a.i && a.len <= piece) {
          addSection(sections, 0, a.ins);
          if (insert) addInsert(insert, sections, a.text);
          inserted = a.i;
        }

        a.forward(piece);
        len -= piece;
      }

      b.next();
    } else if (a.ins >= 0) {
      // Process the part of a change in A up to the start of the next
      // non-deletion change in B (if overlapping).
      let len = 0,
          left = a.len;

      while (left) {
        if (b.ins == -1) {
          let piece = Math.min(left, b.len);
          len += piece;
          left -= piece;
          b.forward(piece);
        } else if (b.ins == 0 && b.len < left) {
          left -= b.len;
          b.next();
        } else {
          break;
        }
      }

      addSection(sections, len, inserted < a.i ? a.ins : 0);
      if (insert && inserted < a.i) addInsert(insert, sections, a.text);
      inserted = a.i;
      a.forward(a.len - left);
    } else if (a.done && b.done) {
      return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
    } else {
      throw new Error("Mismatched change set lengths");
    }
  }
}

function composeSets(setA, setB, mkSet = false) {
  let sections = [];
  let insert = mkSet ? [] : null;
  let a = new SectionIter(setA),
      b = new SectionIter(setB);

  for (let open = false;;) {
    if (a.done && b.done) {
      return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
    } else if (a.ins == 0) {
      // Deletion in A
      addSection(sections, a.len, 0, open);
      a.next();
    } else if (b.len == 0 && !b.done) {
      // Insertion in B
      addSection(sections, 0, b.ins, open);
      if (insert) addInsert(insert, sections, b.text);
      b.next();
    } else if (a.done || b.done) {
      throw new Error("Mismatched change set lengths");
    } else {
      let len = Math.min(a.len2, b.len),
          sectionLen = sections.length;

      if (a.ins == -1) {
        let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
        addSection(sections, len, insB, open);
        if (insert && insB) addInsert(insert, sections, b.text);
      } else if (b.ins == -1) {
        addSection(sections, a.off ? 0 : a.len, len, open);
        if (insert) addInsert(insert, sections, a.textBit(len));
      } else {
        addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
        if (insert && !b.off) addInsert(insert, sections, b.text);
      }

      open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
      a.forward2(len);
      b.forward(len);
    }
  }
}

class SectionIter {
  constructor(set) {
    this.set = set;
    this.i = 0;
    this.next();
  }

  next() {
    let {
      sections
    } = this.set;

    if (this.i < sections.length) {
      this.len = sections[this.i++];
      this.ins = sections[this.i++];
    } else {
      this.len = 0;
      this.ins = -2;
    }

    this.off = 0;
  }

  get done() {
    return this.ins == -2;
  }

  get len2() {
    return this.ins < 0 ? this.len : this.ins;
  }

  get text() {
    let {
      inserted
    } = this.set,
        index = this.i - 2 >> 1;
    return index >= inserted.length ? Text.empty : inserted[index];
  }

  textBit(len) {
    let {
      inserted
    } = this.set,
        index = this.i - 2 >> 1;
    return index >= inserted.length && !len ? Text.empty : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
  }

  forward(len) {
    if (len == this.len) this.next();else {
      this.len -= len;
      this.off += len;
    }
  }

  forward2(len) {
    if (this.ins == -1) this.forward(len);else if (len == this.ins) this.next();else {
      this.ins -= len;
      this.off += len;
    }
  }

}
/**
A single selection range. When
[`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
multiple ranges. By default, selections hold exactly one range.
*/


class SelectionRange {
  constructor(
  /**
  The lower boundary of the range.
  */
  from,
  /**
  The upper boundary of the range.
  */
  to, flags) {
    this.from = from;
    this.to = to;
    this.flags = flags;
  }
  /**
  The anchor of the range—the side that doesn't move when you
  extend it.
  */


  get anchor() {
    return this.flags & 16
    /* Inverted */
    ? this.to : this.from;
  }
  /**
  The head of the range, which is moved when the range is
  [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
  */


  get head() {
    return this.flags & 16
    /* Inverted */
    ? this.from : this.to;
  }
  /**
  True when `anchor` and `head` are at the same position.
  */


  get empty() {
    return this.from == this.to;
  }
  /**
  If this is a cursor that is explicitly associated with the
  character on one of its sides, this returns the side. -1 means
  the character before its position, 1 the character after, and 0
  means no association.
  */


  get assoc() {
    return this.flags & 4
    /* AssocBefore */
    ? -1 : this.flags & 8
    /* AssocAfter */
    ? 1 : 0;
  }
  /**
  The bidirectional text level associated with this cursor, if
  any.
  */


  get bidiLevel() {
    let level = this.flags & 3
    /* BidiLevelMask */
    ;
    return level == 3 ? null : level;
  }
  /**
  The goal column (stored vertical offset) associated with a
  cursor. This is used to preserve the vertical position when
  [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
  lines of different length.
  */


  get goalColumn() {
    let value = this.flags >> 5
    /* GoalColumnOffset */
    ;
    return value == 33554431
    /* NoGoalColumn */
    ? undefined : value;
  }
  /**
  Map this range through a change, producing a valid range in the
  updated document.
  */


  map(change, assoc = -1) {
    let from, to;

    if (this.empty) {
      from = to = change.mapPos(this.from, assoc);
    } else {
      from = change.mapPos(this.from, 1);
      to = change.mapPos(this.to, -1);
    }

    return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
  }
  /**
  Extend this range to cover at least `from` to `to`.
  */


  extend(from, to = from) {
    if (from <= this.anchor && to >= this.anchor) return EditorSelection.range(from, to);
    let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
    return EditorSelection.range(this.anchor, head);
  }
  /**
  Compare this range to another range.
  */


  eq(other) {
    return this.anchor == other.anchor && this.head == other.head;
  }
  /**
  Return a JSON-serializable object representing the range.
  */


  toJSON() {
    return {
      anchor: this.anchor,
      head: this.head
    };
  }
  /**
  Convert a JSON representation of a range to a `SelectionRange`
  instance.
  */


  static fromJSON(json) {
    if (!json || typeof json.anchor != "number" || typeof json.head != "number") throw new RangeError("Invalid JSON representation for SelectionRange");
    return EditorSelection.range(json.anchor, json.head);
  }
  /**
  @internal
  */


  static create(from, to, flags) {
    return new SelectionRange(from, to, flags);
  }

}
/**
An editor selection holds one or more selection ranges.
*/


exports.SelectionRange = SelectionRange;

class EditorSelection {
  constructor(
  /**
  The ranges in the selection, sorted by position. Ranges cannot
  overlap (but they may touch, if they aren't empty).
  */
  ranges,
  /**
  The index of the _main_ range in the selection (which is
  usually the range that was added last).
  */
  mainIndex) {
    this.ranges = ranges;
    this.mainIndex = mainIndex;
  }
  /**
  Map a selection through a change. Used to adjust the selection
  position for changes.
  */


  map(change, assoc = -1) {
    if (change.empty) return this;
    return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);
  }
  /**
  Compare this selection to another selection.
  */


  eq(other) {
    if (this.ranges.length != other.ranges.length || this.mainIndex != other.mainIndex) return false;

    for (let i = 0; i < this.ranges.length; i++) if (!this.ranges[i].eq(other.ranges[i])) return false;

    return true;
  }
  /**
  Get the primary selection range. Usually, you should make sure
  your code applies to _all_ ranges, by using methods like
  [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
  */


  get main() {
    return this.ranges[this.mainIndex];
  }
  /**
  Make sure the selection only has one range. Returns a selection
  holding only the main range from this selection.
  */


  asSingle() {
    return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);
  }
  /**
  Extend this selection with an extra range.
  */


  addRange(range, main = true) {
    return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
  }
  /**
  Replace a given range with another range, and then normalize the
  selection to merge and sort ranges if necessary.
  */


  replaceRange(range, which = this.mainIndex) {
    let ranges = this.ranges.slice();
    ranges[which] = range;
    return EditorSelection.create(ranges, this.mainIndex);
  }
  /**
  Convert this selection to an object that can be serialized to
  JSON.
  */


  toJSON() {
    return {
      ranges: this.ranges.map(r => r.toJSON()),
      main: this.mainIndex
    };
  }
  /**
  Create a selection from a JSON representation.
  */


  static fromJSON(json) {
    if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length) throw new RangeError("Invalid JSON representation for EditorSelection");
    return new EditorSelection(json.ranges.map(r => SelectionRange.fromJSON(r)), json.main);
  }
  /**
  Create a selection holding a single range.
  */


  static single(anchor, head = anchor) {
    return new EditorSelection([EditorSelection.range(anchor, head)], 0);
  }
  /**
  Sort and merge the given set of ranges, creating a valid
  selection.
  */


  static create(ranges, mainIndex = 0) {
    if (ranges.length == 0) throw new RangeError("A selection needs at least one range");

    for (let pos = 0, i = 0; i < ranges.length; i++) {
      let range = ranges[i];
      if (range.empty ? range.from <= pos : range.from < pos) return EditorSelection.normalized(ranges.slice(), mainIndex);
      pos = range.to;
    }

    return new EditorSelection(ranges, mainIndex);
  }
  /**
  Create a cursor selection range at the given position. You can
  safely ignore the optional arguments in most situations.
  */


  static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
    return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4
    /* AssocBefore */
    : 8
    /* AssocAfter */
    ) | (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) | (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431
    /* NoGoalColumn */
    ) << 5
    /* GoalColumnOffset */
    );
  }
  /**
  Create a selection range.
  */


  static range(anchor, head, goalColumn) {
    let goal = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431
    /* NoGoalColumn */
    ) << 5
    /* GoalColumnOffset */
    ;
    return head < anchor ? SelectionRange.create(head, anchor, 16
    /* Inverted */
    | goal | 8
    /* AssocAfter */
    ) : SelectionRange.create(anchor, head, goal | (head > anchor ? 4
    /* AssocBefore */
    : 0));
  }
  /**
  @internal
  */


  static normalized(ranges, mainIndex = 0) {
    let main = ranges[mainIndex];
    ranges.sort((a, b) => a.from - b.from);
    mainIndex = ranges.indexOf(main);

    for (let i = 1; i < ranges.length; i++) {
      let range = ranges[i],
          prev = ranges[i - 1];

      if (range.empty ? range.from <= prev.to : range.from < prev.to) {
        let from = prev.from,
            to = Math.max(range.to, prev.to);
        if (i <= mainIndex) mainIndex--;
        ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
      }
    }

    return new EditorSelection(ranges, mainIndex);
  }

}

exports.EditorSelection = EditorSelection;

function checkSelection(selection, docLength) {
  for (let range of selection.ranges) if (range.to > docLength) throw new RangeError("Selection points outside of document");
}

let nextID = 0;
/**
A facet is a labeled value that is associated with an editor
state. It takes inputs from any number of extensions, and combines
those into a single output value.

Examples of uses of facets are the [tab
size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize), [editor
attributes](https://codemirror.net/6/docs/ref/#view.EditorView^editorAttributes), and [update
listeners](https://codemirror.net/6/docs/ref/#view.EditorView^updateListener).
*/

class Facet {
  constructor(
  /**
  @internal
  */
  combine,
  /**
  @internal
  */
  compareInput,
  /**
  @internal
  */
  compare, isStatic, enables) {
    this.combine = combine;
    this.compareInput = compareInput;
    this.compare = compare;
    this.isStatic = isStatic;
    /**
    @internal
    */

    this.id = nextID++;
    this.default = combine([]);
    this.extensions = typeof enables == "function" ? enables(this) : enables;
  }
  /**
  Define a new facet.
  */


  static define(config = {}) {
    return new Facet(config.combine || (a => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray : (a, b) => a === b), !!config.static, config.enables);
  }
  /**
  Returns an extension that adds the given value to this facet.
  */


  of(value) {
    return new FacetProvider([], this, 0
    /* Static */
    , value);
  }
  /**
  Create an extension that computes a value for the facet from a
  state. You must take care to declare the parts of the state that
  this value depends on, since your function is only called again
  for a new state when one of those parts changed.
  
  In cases where your value depends only on a single field, you'll
  want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
  */


  compute(deps, get) {
    if (this.isStatic) throw new Error("Can't compute a static facet");
    return new FacetProvider(deps, this, 1
    /* Single */
    , get);
  }
  /**
  Create an extension that computes zero or more values for this
  facet from a state.
  */


  computeN(deps, get) {
    if (this.isStatic) throw new Error("Can't compute a static facet");
    return new FacetProvider(deps, this, 2
    /* Multi */
    , get);
  }

  from(field, get) {
    if (!get) get = x => x;
    return this.compute([field], state => get(state.field(field)));
  }

}

exports.Facet = Facet;

function sameArray(a, b) {
  return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
}

class FacetProvider {
  constructor(dependencies, facet, type, value) {
    this.dependencies = dependencies;
    this.facet = facet;
    this.type = type;
    this.value = value;
    this.id = nextID++;
  }

  dynamicSlot(addresses) {
    var _a;

    let getter = this.value;
    let compare = this.facet.compareInput;
    let id = this.id,
        idx = addresses[id] >> 1,
        multi = this.type == 2
    /* Multi */
    ;
    let depDoc = false,
        depSel = false,
        depAddrs = [];

    for (let dep of this.dependencies) {
      if (dep == "doc") depDoc = true;else if (dep == "selection") depSel = true;else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0) depAddrs.push(addresses[dep.id]);
    }

    return {
      create(state) {
        state.values[idx] = getter(state);
        return 1
        /* Changed */
        ;
      },

      update(state, tr) {
        if (depDoc && tr.docChanged || depSel && (tr.docChanged || tr.selection) || ensureAll(state, depAddrs)) {
          let newVal = getter(state);

          if (multi ? !compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {
            state.values[idx] = newVal;
            return 1
            /* Changed */
            ;
          }
        }

        return 0;
      },

      reconfigure: (state, oldState) => {
        let newVal = getter(state);
        let oldAddr = oldState.config.address[id];

        if (oldAddr != null) {
          let oldVal = getAddr(oldState, oldAddr);

          if (this.dependencies.every(dep => {
            return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) : dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
          }) || (multi ? compareArray(newVal, oldVal, compare) : compare(newVal, oldVal))) {
            state.values[idx] = oldVal;
            return 0;
          }
        }

        state.values[idx] = newVal;
        return 1
        /* Changed */
        ;
      }
    };
  }

}

function compareArray(a, b, compare) {
  if (a.length != b.length) return false;

  for (let i = 0; i < a.length; i++) if (!compare(a[i], b[i])) return false;

  return true;
}

function ensureAll(state, addrs) {
  let changed = false;

  for (let addr of addrs) if (ensureAddr(state, addr) & 1
  /* Changed */
  ) changed = true;

  return changed;
}

function dynamicFacetSlot(addresses, facet, providers) {
  let providerAddrs = providers.map(p => addresses[p.id]);
  let providerTypes = providers.map(p => p.type);
  let dynamic = providerAddrs.filter(p => !(p & 1));
  let idx = addresses[facet.id] >> 1;

  function get(state) {
    let values = [];

    for (let i = 0; i < providerAddrs.length; i++) {
      let value = getAddr(state, providerAddrs[i]);
      if (providerTypes[i] == 2
      /* Multi */
      ) for (let val of value) values.push(val);else values.push(value);
    }

    return facet.combine(values);
  }

  return {
    create(state) {
      for (let addr of providerAddrs) ensureAddr(state, addr);

      state.values[idx] = get(state);
      return 1
      /* Changed */
      ;
    },

    update(state, tr) {
      if (!ensureAll(state, dynamic)) return 0;
      let value = get(state);
      if (facet.compare(value, state.values[idx])) return 0;
      state.values[idx] = value;
      return 1
      /* Changed */
      ;
    },

    reconfigure(state, oldState) {
      let depChanged = ensureAll(state, providerAddrs);
      let oldProviders = oldState.config.facets[facet.id],
          oldValue = oldState.facet(facet);

      if (oldProviders && !depChanged && sameArray(providers, oldProviders)) {
        state.values[idx] = oldValue;
        return 0;
      }

      let value = get(state);

      if (facet.compare(value, oldValue)) {
        state.values[idx] = oldValue;
        return 0;
      }

      state.values[idx] = value;
      return 1
      /* Changed */
      ;
    }

  };
}

const initField = /*@__PURE__*/Facet.define({
  static: true
});
/**
Fields can store additional information in an editor state, and
keep it in sync with the rest of the state.
*/

class StateField {
  constructor(
  /**
  @internal
  */
  id, createF, updateF, compareF,
  /**
  @internal
  */
  spec) {
    this.id = id;
    this.createF = createF;
    this.updateF = updateF;
    this.compareF = compareF;
    this.spec = spec;
    /**
    @internal
    */

    this.provides = undefined;
  }
  /**
  Define a state field.
  */


  static define(config) {
    let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);
    if (config.provide) field.provides = config.provide(field);
    return field;
  }

  create(state) {
    let init = state.facet(initField).find(i => i.field == this);
    return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
  }
  /**
  @internal
  */


  slot(addresses) {
    let idx = addresses[this.id] >> 1;
    return {
      create: state => {
        state.values[idx] = this.create(state);
        return 1
        /* Changed */
        ;
      },
      update: (state, tr) => {
        let oldVal = state.values[idx];
        let value = this.updateF(oldVal, tr);
        if (this.compareF(oldVal, value)) return 0;
        state.values[idx] = value;
        return 1
        /* Changed */
        ;
      },
      reconfigure: (state, oldState) => {
        if (oldState.config.address[this.id] != null) {
          state.values[idx] = oldState.field(this);
          return 0;
        }

        state.values[idx] = this.create(state);
        return 1
        /* Changed */
        ;
      }
    };
  }
  /**
  Returns an extension that enables this field and overrides the
  way it is initialized. Can be useful when you need to provide a
  non-default starting value for the field.
  */


  init(create) {
    return [this, initField.of({
      field: this,
      create
    })];
  }
  /**
  State field instances can be used as
  [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
  given state.
  */


  get extension() {
    return this;
  }

}

exports.StateField = StateField;
const Prec_ = {
  lowest: 4,
  low: 3,
  default: 2,
  high: 1,
  highest: 0
};

function prec(value) {
  return ext => new PrecExtension(ext, value);
}
/**
By default extensions are registered in the order they are found
in the flattened form of nested array that was provided.
Individual extension values can be assigned a precedence to
override this. Extensions that do not have a precedence set get
the precedence of the nearest parent with a precedence, or
[`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
final ordering of extensions is determined by first sorting by
precedence and then by order within each precedence.
*/


const Prec = {
  /**
  The highest precedence level, for extensions that should end up
  near the start of the precedence ordering.
  */
  highest: /*@__PURE__*/prec(Prec_.highest),

  /**
  A higher-than-default precedence, for extensions that should
  come before those with default precedence.
  */
  high: /*@__PURE__*/prec(Prec_.high),

  /**
  The default precedence, which is also used for extensions
  without an explicit precedence.
  */
  default: /*@__PURE__*/prec(Prec_.default),

  /**
  A lower-than-default precedence.
  */
  low: /*@__PURE__*/prec(Prec_.low),

  /**
  The lowest precedence level. Meant for things that should end up
  near the end of the extension order.
  */
  lowest: /*@__PURE__*/prec(Prec_.lowest)
};
exports.Prec = Prec;

class PrecExtension {
  constructor(inner, prec) {
    this.inner = inner;
    this.prec = prec;
  }

}
/**
Extension compartments can be used to make a configuration
dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
configuration in a compartment, you can later
[replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
transaction.
*/


class Compartment {
  /**
  Create an instance of this compartment to add to your [state
  configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
  */
  of(ext) {
    return new CompartmentInstance(this, ext);
  }
  /**
  Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
  reconfigures this compartment.
  */


  reconfigure(content) {
    return Compartment.reconfigure.of({
      compartment: this,
      extension: content
    });
  }
  /**
  Get the current content of the compartment in the state, or
  `undefined` if it isn't present.
  */


  get(state) {
    return state.config.compartments.get(this);
  }

}

exports.Compartment = Compartment;

class CompartmentInstance {
  constructor(compartment, inner) {
    this.compartment = compartment;
    this.inner = inner;
  }

}

class Configuration {
  constructor(base, compartments, dynamicSlots, address, staticValues, facets) {
    this.base = base;
    this.compartments = compartments;
    this.dynamicSlots = dynamicSlots;
    this.address = address;
    this.staticValues = staticValues;
    this.facets = facets;
    this.statusTemplate = [];

    while (this.statusTemplate.length < dynamicSlots.length) this.statusTemplate.push(0
    /* Unresolved */
    );
  }

  staticFacet(facet) {
    let addr = this.address[facet.id];
    return addr == null ? facet.default : this.staticValues[addr >> 1];
  }

  static resolve(base, compartments, oldState) {
    let fields = [];
    let facets = Object.create(null);
    let newCompartments = new Map();

    for (let ext of flatten(base, compartments, newCompartments)) {
      if (ext instanceof StateField) fields.push(ext);else (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
    }

    let address = Object.create(null);
    let staticValues = [];
    let dynamicSlots = [];

    for (let field of fields) {
      address[field.id] = dynamicSlots.length << 1;
      dynamicSlots.push(a => field.slot(a));
    }

    let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;

    for (let id in facets) {
      let providers = facets[id],
          facet = providers[0].facet;
      let oldProviders = oldFacets && oldFacets[id] || [];

      if (providers.every(p => p.type == 0
      /* Static */
      )) {
        address[facet.id] = staticValues.length << 1 | 1;

        if (sameArray(oldProviders, providers)) {
          staticValues.push(oldState.facet(facet));
        } else {
          let value = facet.combine(providers.map(p => p.value));
          staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
        }
      } else {
        for (let p of providers) {
          if (p.type == 0
          /* Static */
          ) {
            address[p.id] = staticValues.length << 1 | 1;
            staticValues.push(p.value);
          } else {
            address[p.id] = dynamicSlots.length << 1;
            dynamicSlots.push(a => p.dynamicSlot(a));
          }
        }

        address[facet.id] = dynamicSlots.length << 1;
        dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));
      }
    }

    let dynamic = dynamicSlots.map(f => f(address));
    return new Configuration(base, newCompartments, dynamic, address, staticValues, facets);
  }

}

function flatten(extension, compartments, newCompartments) {
  let result = [[], [], [], [], []];
  let seen = new Map();

  function inner(ext, prec) {
    let known = seen.get(ext);

    if (known != null) {
      if (known <= prec) return;
      let found = result[known].indexOf(ext);
      if (found > -1) result[known].splice(found, 1);
      if (ext instanceof CompartmentInstance) newCompartments.delete(ext.compartment);
    }

    seen.set(ext, prec);

    if (Array.isArray(ext)) {
      for (let e of ext) inner(e, prec);
    } else if (ext instanceof CompartmentInstance) {
      if (newCompartments.has(ext.compartment)) throw new RangeError(`Duplicate use of compartment in extensions`);
      let content = compartments.get(ext.compartment) || ext.inner;
      newCompartments.set(ext.compartment, content);
      inner(content, prec);
    } else if (ext instanceof PrecExtension) {
      inner(ext.inner, ext.prec);
    } else if (ext instanceof StateField) {
      result[prec].push(ext);
      if (ext.provides) inner(ext.provides, prec);
    } else if (ext instanceof FacetProvider) {
      result[prec].push(ext);
      if (ext.facet.extensions) inner(ext.facet.extensions, Prec_.default);
    } else {
      let content = ext.extension;
      if (!content) throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
      inner(content, prec);
    }
  }

  inner(extension, Prec_.default);
  return result.reduce((a, b) => a.concat(b));
}

function ensureAddr(state, addr) {
  if (addr & 1) return 2
  /* Computed */
  ;
  let idx = addr >> 1;
  let status = state.status[idx];
  if (status == 4
  /* Computing */
  ) throw new Error("Cyclic dependency between fields and/or facets");
  if (status & 2
  /* Computed */
  ) return status;
  state.status[idx] = 4
  /* Computing */
  ;
  let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
  return state.status[idx] = 2
  /* Computed */
  | changed;
}

function getAddr(state, addr) {
  return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
}

const languageData = /*@__PURE__*/Facet.define();
const allowMultipleSelections = /*@__PURE__*/Facet.define({
  combine: values => values.some(v => v),
  static: true
});
const lineSeparator = /*@__PURE__*/Facet.define({
  combine: values => values.length ? values[0] : undefined,
  static: true
});
const changeFilter = /*@__PURE__*/Facet.define();
const transactionFilter = /*@__PURE__*/Facet.define();
const transactionExtender = /*@__PURE__*/Facet.define();
const readOnly = /*@__PURE__*/Facet.define({
  combine: values => values.length ? values[0] : false
});
/**
Annotations are tagged values that are used to add metadata to
transactions in an extensible way. They should be used to model
things that effect the entire transaction (such as its [time
stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
[origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
_alongside_ the other changes made by the transaction, [state
effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
*/

class Annotation {
  /**
  @internal
  */
  constructor(
  /**
  The annotation type.
  */
  type,
  /**
  The value of this annotation.
  */
  value) {
    this.type = type;
    this.value = value;
  }
  /**
  Define a new type of annotation.
  */


  static define() {
    return new AnnotationType();
  }

}
/**
Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
*/


exports.Annotation = Annotation;

class AnnotationType {
  /**
  Create an instance of this annotation.
  */
  of(value) {
    return new Annotation(this, value);
  }

}
/**
Representation of a type of state effect. Defined with
[`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
*/


exports.AnnotationType = AnnotationType;

class StateEffectType {
  /**
  @internal
  */
  constructor( // The `any` types in these function types are there to work
  // around TypeScript issue #37631, where the type guard on
  // `StateEffect.is` mysteriously stops working when these properly
  // have type `Value`.

  /**
  @internal
  */
  map) {
    this.map = map;
  }
  /**
  Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
  type.
  */


  of(value) {
    return new StateEffect(this, value);
  }

}
/**
State effects can be used to represent additional effects
associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
are often useful to model changes to custom [state
fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
document or selection changes.
*/


exports.StateEffectType = StateEffectType;

class StateEffect {
  /**
  @internal
  */
  constructor(
  /**
  @internal
  */
  type,
  /**
  The value of this effect.
  */
  value) {
    this.type = type;
    this.value = value;
  }
  /**
  Map this effect through a position mapping. Will return
  `undefined` when that ends up deleting the effect.
  */


  map(mapping) {
    let mapped = this.type.map(this.value, mapping);
    return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
  }
  /**
  Tells you whether this effect object is of a given
  [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
  */


  is(type) {
    return this.type == type;
  }
  /**
  Define a new effect type. The type parameter indicates the type
  of values that his effect holds.
  */


  static define(spec = {}) {
    return new StateEffectType(spec.map || (v => v));
  }
  /**
  Map an array of effects through a change set.
  */


  static mapEffects(effects, mapping) {
    if (!effects.length) return effects;
    let result = [];

    for (let effect of effects) {
      let mapped = effect.map(mapping);
      if (mapped) result.push(mapped);
    }

    return result;
  }

}
/**
This effect can be used to reconfigure the root extensions of
the editor. Doing this will discard any extensions
[appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
compartments.
*/


exports.StateEffect = StateEffect;
StateEffect.reconfigure = /*@__PURE__*/StateEffect.define();
/**
Append extensions to the top-level configuration of the editor.
*/

StateEffect.appendConfig = /*@__PURE__*/StateEffect.define();
/**
Changes to the editor state are grouped into transactions.
Typically, a user action creates a single transaction, which may
contain any number of document changes, may change the selection,
or have other effects. Create a transaction by calling
[`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update), or immediately
dispatch one by calling
[`EditorView.dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch).
*/

class Transaction {
  constructor(
  /**
  The state from which the transaction starts.
  */
  startState,
  /**
  The document changes made by this transaction.
  */
  changes,
  /**
  The selection set by this transaction, or undefined if it
  doesn't explicitly set a selection.
  */
  selection,
  /**
  The effects added to the transaction.
  */
  effects,
  /**
  @internal
  */
  annotations,
  /**
  Whether the selection should be scrolled into view after this
  transaction is dispatched.
  */
  scrollIntoView) {
    this.startState = startState;
    this.changes = changes;
    this.selection = selection;
    this.effects = effects;
    this.annotations = annotations;
    this.scrollIntoView = scrollIntoView;
    /**
    @internal
    */

    this._doc = null;
    /**
    @internal
    */

    this._state = null;
    if (selection) checkSelection(selection, changes.newLength);
    if (!annotations.some(a => a.type == Transaction.time)) this.annotations = annotations.concat(Transaction.time.of(Date.now()));
  }
  /**
  @internal
  */


  static create(startState, changes, selection, effects, annotations, scrollIntoView) {
    return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView);
  }
  /**
  The new document produced by the transaction. Contrary to
  [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
  force the entire new state to be computed right away, so it is
  recommended that [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
  when they need to look at the new document.
  */


  get newDoc() {
    return this._doc || (this._doc = this.changes.apply(this.startState.doc));
  }
  /**
  The new selection produced by the transaction. If
  [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
  this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
  current selection through the changes made by the transaction.
  */


  get newSelection() {
    return this.selection || this.startState.selection.map(this.changes);
  }
  /**
  The new state created by the transaction. Computed on demand
  (but retained for subsequent access), so it is recommended not to
  access it in [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
  */


  get state() {
    if (!this._state) this.startState.applyTransaction(this);
    return this._state;
  }
  /**
  Get the value of the given annotation type, if any.
  */


  annotation(type) {
    for (let ann of this.annotations) if (ann.type == type) return ann.value;

    return undefined;
  }
  /**
  Indicates whether the transaction changed the document.
  */


  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Indicates whether this transaction reconfigures the state
  (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
  with a top-level configuration
  [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
  */


  get reconfigured() {
    return this.startState.config != this.state.config;
  }
  /**
  Returns true if the transaction has a [user
  event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
  or more specific than `event`. For example, if the transaction
  has `"select.pointer"` as user event, `"select"` and
  `"select.pointer"` will match it.
  */


  isUserEvent(event) {
    let e = this.annotation(Transaction.userEvent);
    return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
  }

}
/**
Annotation used to store transaction timestamps. Automatically
added to every transaction, holding `Date.now()`.
*/


exports.Transaction = Transaction;
Transaction.time = /*@__PURE__*/Annotation.define();
/**
Annotation used to associate a transaction with a user interface
event. Holds a string identifying the event, using a
dot-separated format to support attaching more specific
information. The events used by the core libraries are:

 - `"input"` when content is entered
   - `"input.type"` for typed input
     - `"input.type.compose"` for composition
   - `"input.paste"` for pasted input
   - `"input.drop"` when adding content with drag-and-drop
   - `"input.complete"` when autocompleting
 - `"delete"` when the user deletes content
   - `"delete.selection"` when deleting the selection
   - `"delete.forward"` when deleting forward from the selection
   - `"delete.backward"` when deleting backward from the selection
   - `"delete.cut"` when cutting to the clipboard
 - `"move"` when content is moved
   - `"move.drop"` when content is moved within the editor through drag-and-drop
 - `"select"` when explicitly changing the selection
   - `"select.pointer"` when selecting with a mouse or other pointing device
 - `"undo"` and `"redo"` for history actions

Use [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check
whether the annotation matches a given event.
*/

Transaction.userEvent = /*@__PURE__*/Annotation.define();
/**
Annotation indicating whether a transaction should be added to
the undo history or not.
*/

Transaction.addToHistory = /*@__PURE__*/Annotation.define();
/**
Annotation indicating (when present and true) that a transaction
represents a change made by some other actor, not the user. This
is used, for example, to tag other people's changes in
collaborative editing.
*/

Transaction.remote = /*@__PURE__*/Annotation.define();

function joinRanges(a, b) {
  let result = [];

  for (let iA = 0, iB = 0;;) {
    let from, to;

    if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
      from = a[iA++];
      to = a[iA++];
    } else if (iB < b.length) {
      from = b[iB++];
      to = b[iB++];
    } else return result;

    if (!result.length || result[result.length - 1] < from) result.push(from, to);else if (result[result.length - 1] < to) result[result.length - 1] = to;
  }
}

function mergeTransaction(a, b, sequential) {
  var _a;

  let mapForA, mapForB, changes;

  if (sequential) {
    mapForA = b.changes;
    mapForB = ChangeSet.empty(b.changes.length);
    changes = a.changes.compose(b.changes);
  } else {
    mapForA = b.changes.map(a.changes);
    mapForB = a.changes.mapDesc(b.changes, true);
    changes = a.changes.compose(mapForA);
  }

  return {
    changes,
    selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
    effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
    annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
    scrollIntoView: a.scrollIntoView || b.scrollIntoView
  };
}

function resolveTransactionInner(state, spec, docSize) {
  let sel = spec.selection,
      annotations = asArray(spec.annotations);
  if (spec.userEvent) annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
  return {
    changes: spec.changes instanceof ChangeSet ? spec.changes : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
    selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
    effects: asArray(spec.effects),
    annotations,
    scrollIntoView: !!spec.scrollIntoView
  };
}

function resolveTransaction(state, specs, filter) {
  let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
  if (specs.length && specs[0].filter === false) filter = false;

  for (let i = 1; i < specs.length; i++) {
    if (specs[i].filter === false) filter = false;
    let seq = !!specs[i].sequential;
    s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
  }

  let tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
  return extendTransaction(filter ? filterTransaction(tr) : tr);
} // Finish a transaction by applying filters if necessary.


function filterTransaction(tr) {
  let state = tr.startState; // Change filters

  let result = true;

  for (let filter of state.facet(changeFilter)) {
    let value = filter(tr);

    if (value === false) {
      result = false;
      break;
    }

    if (Array.isArray(value)) result = result === true ? value : joinRanges(result, value);
  }

  if (result !== true) {
    let changes, back;

    if (result === false) {
      back = tr.changes.invertedDesc;
      changes = ChangeSet.empty(state.doc.length);
    } else {
      let filtered = tr.changes.filter(result);
      changes = filtered.changes;
      back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
    }

    tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
  } // Transaction filters


  let filters = state.facet(transactionFilter);

  for (let i = filters.length - 1; i >= 0; i--) {
    let filtered = filters[i](tr);
    if (filtered instanceof Transaction) tr = filtered;else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction) tr = filtered[0];else tr = resolveTransaction(state, asArray(filtered), false);
  }

  return tr;
}

function extendTransaction(tr) {
  let state = tr.startState,
      extenders = state.facet(transactionExtender),
      spec = tr;

  for (let i = extenders.length - 1; i >= 0; i--) {
    let extension = extenders[i](tr);
    if (extension && Object.keys(extension).length) spec = mergeTransaction(tr, resolveTransactionInner(state, extension, tr.changes.newLength), true);
  }

  return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
}

const none = [];

function asArray(value) {
  return value == null ? none : Array.isArray(value) ? value : [value];
}
/**
The categories produced by a [character
categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
do things like selecting by word.
*/


var CharCategory = /*@__PURE__*/function (CharCategory) {
  /**
  Word characters.
  */
  CharCategory[CharCategory["Word"] = 0] = "Word";
  /**
  Whitespace.
  */

  CharCategory[CharCategory["Space"] = 1] = "Space";
  /**
  Anything else.
  */

  CharCategory[CharCategory["Other"] = 2] = "Other";
  return CharCategory;
}(CharCategory || (exports.CharCategory = CharCategory = {}));

exports.CharCategory = CharCategory;
const nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
let wordChar;

try {
  wordChar = /*@__PURE__*/new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
} catch (_) {}

function hasWordChar(str) {
  if (wordChar) return wordChar.test(str);

  for (let i = 0; i < str.length; i++) {
    let ch = str[i];
    if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch))) return true;
  }

  return false;
}

function makeCategorizer(wordChars) {
  return char => {
    if (!/\S/.test(char)) return CharCategory.Space;
    if (hasWordChar(char)) return CharCategory.Word;

    for (let i = 0; i < wordChars.length; i++) if (char.indexOf(wordChars[i]) > -1) return CharCategory.Word;

    return CharCategory.Other;
  };
}
/**
The editor state class is a persistent (immutable) data structure.
To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
[transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
instance, without modifying the original object.

As such, _never_ mutate properties of a state directly. That'll
just break things.
*/


class EditorState {
  constructor(
  /**
  @internal
  */
  config,
  /**
  The current document.
  */
  doc,
  /**
  The current selection.
  */
  selection,
  /**
  @internal
  */
  values, computeSlot, tr) {
    this.config = config;
    this.doc = doc;
    this.selection = selection;
    this.values = values;
    this.status = config.statusTemplate.slice();
    this.computeSlot = computeSlot; // Fill in the computed state immediately, so that further queries
    // for it made during the update return this state

    if (tr) tr._state = this;

    for (let i = 0; i < this.config.dynamicSlots.length; i++) ensureAddr(this, i << 1);

    this.computeSlot = null;
  }

  field(field, require = true) {
    let addr = this.config.address[field.id];

    if (addr == null) {
      if (require) throw new RangeError("Field is not present in this state");
      return undefined;
    }

    ensureAddr(this, addr);
    return getAddr(this, addr);
  }
  /**
  Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
  state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
  can be passed. Unless
  [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
  [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
  are assumed to start in the _current_ document (not the document
  produced by previous specs), and its
  [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
  to the document created by its _own_ changes. The resulting
  transaction contains the combined effect of all the different
  specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
  specs take precedence over earlier ones.
  */


  update(...specs) {
    return resolveTransaction(this, specs, true);
  }
  /**
  @internal
  */


  applyTransaction(tr) {
    let conf = this.config,
        {
      base,
      compartments
    } = conf;

    for (let effect of tr.effects) {
      if (effect.is(Compartment.reconfigure)) {
        if (conf) {
          compartments = new Map();
          conf.compartments.forEach((val, key) => compartments.set(key, val));
          conf = null;
        }

        compartments.set(effect.value.compartment, effect.value.extension);
      } else if (effect.is(StateEffect.reconfigure)) {
        conf = null;
        base = effect.value;
      } else if (effect.is(StateEffect.appendConfig)) {
        conf = null;
        base = asArray(base).concat(effect.value);
      }
    }

    let startValues;

    if (!conf) {
      conf = Configuration.resolve(base, compartments, this);
      let intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
      startValues = intermediateState.values;
    } else {
      startValues = tr.startState.values.slice();
    }

    new EditorState(conf, tr.newDoc, tr.newSelection, startValues, (state, slot) => slot.update(state, tr), tr);
  }
  /**
  Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
  replaces every selection range with the given content.
  */


  replaceSelection(text) {
    if (typeof text == "string") text = this.toText(text);
    return this.changeByRange(range => ({
      changes: {
        from: range.from,
        to: range.to,
        insert: text
      },
      range: EditorSelection.cursor(range.from + text.length)
    }));
  }
  /**
  Create a set of changes and a new selection by running the given
  function for each range in the active selection. The function
  can return an optional set of changes (in the coordinate space
  of the start document), plus an updated range (in the coordinate
  space of the document produced by the call's own changes). This
  method will merge all the changes and ranges into a single
  changeset and selection, and return it as a [transaction
  spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
  [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
  */


  changeByRange(f) {
    let sel = this.selection;
    let result1 = f(sel.ranges[0]);
    let changes = this.changes(result1.changes),
        ranges = [result1.range];
    let effects = asArray(result1.effects);

    for (let i = 1; i < sel.ranges.length; i++) {
      let result = f(sel.ranges[i]);
      let newChanges = this.changes(result.changes),
          newMapped = newChanges.map(changes);

      for (let j = 0; j < i; j++) ranges[j] = ranges[j].map(newMapped);

      let mapBy = changes.mapDesc(newChanges, true);
      ranges.push(result.range.map(mapBy));
      changes = changes.compose(newMapped);
      effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));
    }

    return {
      changes,
      selection: EditorSelection.create(ranges, sel.mainIndex),
      effects
    };
  }
  /**
  Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
  description, taking the state's document length and line
  separator into account.
  */


  changes(spec = []) {
    if (spec instanceof ChangeSet) return spec;
    return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
  }
  /**
  Using the state's [line
  separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
  [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
  */


  toText(string) {
    return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
  }
  /**
  Return the given range of the document as a string.
  */


  sliceDoc(from = 0, to = this.doc.length) {
    return this.doc.sliceString(from, to, this.lineBreak);
  }
  /**
  Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
  */


  facet(facet) {
    let addr = this.config.address[facet.id];
    if (addr == null) return facet.default;
    ensureAddr(this, addr);
    return getAddr(this, addr);
  }
  /**
  Convert this state to a JSON-serializable object. When custom
  fields should be serialized, you can pass them in as an object
  mapping property names (in the resulting object, which should
  not use `doc` or `selection`) to fields.
  */


  toJSON(fields) {
    let result = {
      doc: this.sliceDoc(),
      selection: this.selection.toJSON()
    };
    if (fields) for (let prop in fields) {
      let value = fields[prop];
      if (value instanceof StateField && this.config.address[value.id] != null) result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
    }
    return result;
  }
  /**
  Deserialize a state from its JSON representation. When custom
  fields should be deserialized, pass the same object you passed
  to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
  third argument.
  */


  static fromJSON(json, config = {}, fields) {
    if (!json || typeof json.doc != "string") throw new RangeError("Invalid JSON representation for EditorState");
    let fieldInit = [];
    if (fields) for (let prop in fields) {
      if (Object.prototype.hasOwnProperty.call(json, prop)) {
        let field = fields[prop],
            value = json[prop];
        fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));
      }
    }
    return EditorState.create({
      doc: json.doc,
      selection: EditorSelection.fromJSON(json.selection),
      extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
    });
  }
  /**
  Create a new state. You'll usually only need this when
  initializing an editor—updated states are created by applying
  transactions.
  */


  static create(config = {}) {
    let configuration = Configuration.resolve(config.extensions || [], new Map());
    let doc = config.doc instanceof Text ? config.doc : Text.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
    let selection = !config.selection ? EditorSelection.single(0) : config.selection instanceof EditorSelection ? config.selection : EditorSelection.single(config.selection.anchor, config.selection.head);
    checkSelection(selection, doc.length);
    if (!configuration.staticFacet(allowMultipleSelections)) selection = selection.asSingle();
    return new EditorState(configuration, doc, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
  }
  /**
  The size (in columns) of a tab in the document, determined by
  the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
  */


  get tabSize() {
    return this.facet(EditorState.tabSize);
  }
  /**
  Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
  string for this state.
  */


  get lineBreak() {
    return this.facet(EditorState.lineSeparator) || "\n";
  }
  /**
  Returns true when the editor is
  [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
  */


  get readOnly() {
    return this.facet(readOnly);
  }
  /**
  Look up a translation for the given phrase (via the
  [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
  original string if no translation is found.
  
  If additional arguments are passed, they will be inserted in
  place of markers like `$1` (for the first value) and `$2`, etc.
  A single `$` is equivalent to `$1`, and `$$` will produce a
  literal dollar sign.
  */


  phrase(phrase, ...insert) {
    for (let map of this.facet(EditorState.phrases)) if (Object.prototype.hasOwnProperty.call(map, phrase)) {
      phrase = map[phrase];
      break;
    }

    if (insert.length) phrase = phrase.replace(/\$(\$|\d*)/g, (m, i) => {
      if (i == "$") return "$";
      let n = +(i || 1);
      return !n || n > insert.length ? m : insert[n - 1];
    });
    return phrase;
  }
  /**
  Find the values for a given language data field, provided by the
  the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
  */


  languageDataAt(name, pos, side = -1) {
    let values = [];

    for (let provider of this.facet(languageData)) {
      for (let result of provider(this, pos, side)) {
        if (Object.prototype.hasOwnProperty.call(result, name)) values.push(result[name]);
      }
    }

    return values;
  }
  /**
  Return a function that can categorize strings (expected to
  represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
  into one of:
  
   - Word (contains an alphanumeric character or a character
     explicitly listed in the local language's `"wordChars"`
     language data, which should be a string)
   - Space (contains only whitespace)
   - Other (anything else)
  */


  charCategorizer(at) {
    return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
  }
  /**
  Find the word at the given position, meaning the range
  containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
  around it. If no word characters are adjacent to the position,
  this returns null.
  */


  wordAt(pos) {
    let {
      text,
      from,
      length
    } = this.doc.lineAt(pos);
    let cat = this.charCategorizer(pos);
    let start = pos - from,
        end = pos - from;

    while (start > 0) {
      let prev = findClusterBreak(text, start, false);
      if (cat(text.slice(prev, start)) != CharCategory.Word) break;
      start = prev;
    }

    while (end < length) {
      let next = findClusterBreak(text, end);
      if (cat(text.slice(end, next)) != CharCategory.Word) break;
      end = next;
    }

    return start == end ? null : EditorSelection.range(start + from, end + from);
  }

}
/**
A facet that, when enabled, causes the editor to allow multiple
ranges to be selected. Be careful though, because by default the
editor relies on the native DOM selection, which cannot handle
multiple selections. An extension like
[`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
secondary selections visible to the user.
*/


exports.EditorState = EditorState;
EditorState.allowMultipleSelections = allowMultipleSelections;
/**
Configures the tab size to use in this state. The first
(highest-precedence) value of the facet is used. If no value is
given, this defaults to 4.
*/

EditorState.tabSize = /*@__PURE__*/Facet.define({
  combine: values => values.length ? values[0] : 4
});
/**
The line separator to use. By default, any of `"\n"`, `"\r\n"`
and `"\r"` is treated as a separator when splitting lines, and
lines are joined with `"\n"`.

When you configure a value here, only that precise separator
will be used, allowing you to round-trip documents through the
editor without normalizing line separators.
*/

EditorState.lineSeparator = lineSeparator;
/**
This facet controls the value of the
[`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is
consulted by commands and extensions that implement editing
functionality to determine whether they should apply. It
defaults to false, but when its highest-precedence value is
`true`, such functionality disables itself.

Not to be confused with
[`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which
controls whether the editor's DOM is set to be editable (and
thus focusable).
*/

EditorState.readOnly = readOnly;
/**
Registers translation phrases. The
[`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
all objects registered with this facet to find translations for
its argument.
*/

EditorState.phrases = /*@__PURE__*/Facet.define({
  compare(a, b) {
    let kA = Object.keys(a),
        kB = Object.keys(b);
    return kA.length == kB.length && kA.every(k => a[k] == b[k]);
  }

});
/**
A facet used to register [language
data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
*/

EditorState.languageData = languageData;
/**
Facet used to register change filters, which are called for each
transaction (unless explicitly
[disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
part of the transaction's changes.

Such a function can return `true` to indicate that it doesn't
want to do anything, `false` to completely stop the changes in
the transaction, or a set of ranges in which changes should be
suppressed. Such ranges are represented as an array of numbers,
with each pair of two numbers indicating the start and end of a
range. So for example `[10, 20, 100, 110]` suppresses changes
between 10 and 20, and between 100 and 110.
*/

EditorState.changeFilter = changeFilter;
/**
Facet used to register a hook that gets a chance to update or
replace transaction specs before they are applied. This will
only be applied for transactions that don't have
[`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
can either return a single transaction spec (possibly the input
transaction), or an array of specs (which will be combined in
the same way as the arguments to
[`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).

When possible, it is recommended to avoid accessing
[`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
since it will force creation of a state that will then be
discarded again, if the transaction is actually filtered.

(This functionality should be used with care. Indiscriminately
modifying transaction is likely to break something or degrade
the user experience.)
*/

EditorState.transactionFilter = transactionFilter;
/**
This is a more limited form of
[`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
which can only add
[annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
[effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
of filter runs even if the transaction has disabled regular
[filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
for effects that don't need to touch the changes or selection,
but do want to process every transaction.

Extenders run _after_ filters, when both are present.
*/

EditorState.transactionExtender = transactionExtender;
Compartment.reconfigure = /*@__PURE__*/StateEffect.define();
/**
Utility function for combining behaviors to fill in a config
object from an array of provided configs. `defaults` should hold
default values for all optional fields in `Config`.

The function will, by default, error
when a field gets two values that aren't `===`-equal, but you can
provide combine functions per field to do something else.
*/

function combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that
combine = {}) {
  let result = {};

  for (let config of configs) for (let key of Object.keys(config)) {
    let value = config[key],
        current = result[key];
    if (current === undefined) result[key] = value;else if (current === value || value === undefined) ; // No conflict
    else if (Object.hasOwnProperty.call(combine, key)) result[key] = combine[key](current, value);else throw new Error("Config merge conflict for field " + key);
  }

  for (let key in defaults) if (result[key] === undefined) result[key] = defaults[key];

  return result;
}
/**
Each range is associated with a value, which must inherit from
this class.
*/


class RangeValue {
  /**
  Compare this value with another value. Used when comparing
  rangesets. The default implementation compares by identity.
  Unless you are only creating a fixed number of unique instances
  of your value type, it is a good idea to implement this
  properly.
  */
  eq(other) {
    return this == other;
  }
  /**
  Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
  */


  range(from, to = from) {
    return Range.create(from, to, this);
  }

}

exports.RangeValue = RangeValue;
RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
RangeValue.prototype.point = false;
RangeValue.prototype.mapMode = MapMode.TrackDel;
/**
A range associates a value with a range of positions.
*/

class Range {
  constructor(
  /**
  The range's start position.
  */
  from,
  /**
  Its end position.
  */
  to,
  /**
  The value associated with this range.
  */
  value) {
    this.from = from;
    this.to = to;
    this.value = value;
  }
  /**
  @internal
  */


  static create(from, to, value) {
    return new Range(from, to, value);
  }

}

exports.Range = Range;

function cmpRange(a, b) {
  return a.from - b.from || a.value.startSide - b.value.startSide;
}

class Chunk {
  constructor(from, to, value, // Chunks are marked with the largest point that occurs
  // in them (or -1 for no points), so that scans that are
  // only interested in points (such as the
  // heightmap-related logic) can skip range-only chunks.
  maxPoint) {
    this.from = from;
    this.to = to;
    this.value = value;
    this.maxPoint = maxPoint;
  }

  get length() {
    return this.to[this.to.length - 1];
  } // Find the index of the given position and side. Use the ranges'
  // `from` pos when `end == false`, `to` when `end == true`.


  findIndex(pos, side, end, startAt = 0) {
    let arr = end ? this.to : this.from;

    for (let lo = startAt, hi = arr.length;;) {
      if (lo == hi) return lo;
      let mid = lo + hi >> 1;
      let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
      if (mid == lo) return diff >= 0 ? lo : hi;
      if (diff >= 0) hi = mid;else lo = mid + 1;
    }
  }

  between(offset, from, to, f) {
    for (let i = this.findIndex(from, -1000000000
    /* Far */
    , true), e = this.findIndex(to, 1000000000
    /* Far */
    , false, i); i < e; i++) if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false) return false;
  }

  map(offset, changes) {
    let value = [],
        from = [],
        to = [],
        newPos = -1,
        maxPoint = -1;

    for (let i = 0; i < this.value.length; i++) {
      let val = this.value[i],
          curFrom = this.from[i] + offset,
          curTo = this.to[i] + offset,
          newFrom,
          newTo;

      if (curFrom == curTo) {
        let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
        if (mapped == null) continue;
        newFrom = newTo = mapped;

        if (val.startSide != val.endSide) {
          newTo = changes.mapPos(curFrom, val.endSide);
          if (newTo < newFrom) continue;
        }
      } else {
        newFrom = changes.mapPos(curFrom, val.startSide);
        newTo = changes.mapPos(curTo, val.endSide);
        if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0) continue;
      }

      if ((newTo - newFrom || val.endSide - val.startSide) < 0) continue;
      if (newPos < 0) newPos = newFrom;
      if (val.point) maxPoint = Math.max(maxPoint, newTo - newFrom);
      value.push(val);
      from.push(newFrom - newPos);
      to.push(newTo - newPos);
    }

    return {
      mapped: value.length ? new Chunk(from, to, value, maxPoint) : null,
      pos: newPos
    };
  }

}
/**
A range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#state.Range) in a
way that makes them efficient to [map](https://codemirror.net/6/docs/ref/#state.RangeSet.map) and
[update](https://codemirror.net/6/docs/ref/#state.RangeSet.update). This is an immutable data
structure.
*/


class RangeSet {
  constructor(
  /**
  @internal
  */
  chunkPos,
  /**
  @internal
  */
  chunk,
  /**
  @internal
  */
  nextLayer,
  /**
  @internal
  */
  maxPoint) {
    this.chunkPos = chunkPos;
    this.chunk = chunk;
    this.nextLayer = nextLayer;
    this.maxPoint = maxPoint;
  }
  /**
  @internal
  */


  static create(chunkPos, chunk, nextLayer, maxPoint) {
    return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);
  }
  /**
  @internal
  */


  get length() {
    let last = this.chunk.length - 1;
    return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
  }
  /**
  The number of ranges in the set.
  */


  get size() {
    if (this.isEmpty) return 0;
    let size = this.nextLayer.size;

    for (let chunk of this.chunk) size += chunk.value.length;

    return size;
  }
  /**
  @internal
  */


  chunkEnd(index) {
    return this.chunkPos[index] + this.chunk[index].length;
  }
  /**
  Update the range set, optionally adding new ranges or filtering
  out existing ones.
  
  (Note: The type parameter is just there as a kludge to work
  around TypeScript variance issues that prevented `RangeSet<X>`
  from being a subtype of `RangeSet<Y>` when `X` is a subtype of
  `Y`.)
  */


  update(updateSpec) {
    let {
      add = [],
      sort = false,
      filterFrom = 0,
      filterTo = this.length
    } = updateSpec;
    let filter = updateSpec.filter;
    if (add.length == 0 && !filter) return this;
    if (sort) add = add.slice().sort(cmpRange);
    if (this.isEmpty) return add.length ? RangeSet.of(add) : this;
    let cur = new LayerCursor(this, null, -1).goto(0),
        i = 0,
        spill = [];
    let builder = new RangeSetBuilder();

    while (cur.value || i < add.length) {
      if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
        let range = add[i++];
        if (!builder.addInner(range.from, range.to, range.value)) spill.push(range);
      } else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length && (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) && (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) && builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
        cur.nextChunk();
      } else {
        if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
          if (!builder.addInner(cur.from, cur.to, cur.value)) spill.push(Range.create(cur.from, cur.to, cur.value));
        }

        cur.next();
      }
    }

    return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty : this.nextLayer.update({
      add: spill,
      filter,
      filterFrom,
      filterTo
    }));
  }
  /**
  Map this range set through a set of changes, return the new set.
  */


  map(changes) {
    if (changes.empty || this.isEmpty) return this;
    let chunks = [],
        chunkPos = [],
        maxPoint = -1;

    for (let i = 0; i < this.chunk.length; i++) {
      let start = this.chunkPos[i],
          chunk = this.chunk[i];
      let touch = changes.touchesRange(start, start + chunk.length);

      if (touch === false) {
        maxPoint = Math.max(maxPoint, chunk.maxPoint);
        chunks.push(chunk);
        chunkPos.push(changes.mapPos(start));
      } else if (touch === true) {
        let {
          mapped,
          pos
        } = chunk.map(start, changes);

        if (mapped) {
          maxPoint = Math.max(maxPoint, mapped.maxPoint);
          chunks.push(mapped);
          chunkPos.push(pos);
        }
      }
    }

    let next = this.nextLayer.map(changes);
    return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);
  }
  /**
  Iterate over the ranges that touch the region `from` to `to`,
  calling `f` for each. There is no guarantee that the ranges will
  be reported in any specific order. When the callback returns
  `false`, iteration stops.
  */


  between(from, to, f) {
    if (this.isEmpty) return;

    for (let i = 0; i < this.chunk.length; i++) {
      let start = this.chunkPos[i],
          chunk = this.chunk[i];
      if (to >= start && from <= start + chunk.length && chunk.between(start, from - start, to - start, f) === false) return;
    }

    this.nextLayer.between(from, to, f);
  }
  /**
  Iterate over the ranges in this set, in order, including all
  ranges that end at or after `from`.
  */


  iter(from = 0) {
    return HeapCursor.from([this]).goto(from);
  }
  /**
  @internal
  */


  get isEmpty() {
    return this.nextLayer == this;
  }
  /**
  Iterate over the ranges in a collection of sets, in order,
  starting from `from`.
  */


  static iter(sets, from = 0) {
    return HeapCursor.from(sets).goto(from);
  }
  /**
  Iterate over two groups of sets, calling methods on `comparator`
  to notify it of possible differences.
  */


  static compare(oldSets, newSets,
  /**
  This indicates how the underlying data changed between these
  ranges, and is needed to synchronize the iteration. `from` and
  `to` are coordinates in the _new_ space, after these changes.
  */
  textDiff, comparator,
  /**
  Can be used to ignore all non-point ranges, and points below
  the given size. When -1, all ranges are compared.
  */
  minPointSize = -1) {
    let a = oldSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
    let b = newSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
    let sharedChunks = findSharedChunks(a, b, textDiff);
    let sideA = new SpanCursor(a, sharedChunks, minPointSize);
    let sideB = new SpanCursor(b, sharedChunks, minPointSize);
    textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
    if (textDiff.empty && textDiff.length == 0) compare(sideA, 0, sideB, 0, 0, comparator);
  }
  /**
  Compare the contents of two groups of range sets, returning true
  if they are equivalent in the given range.
  */


  static eq(oldSets, newSets, from = 0, to) {
    if (to == null) to = 1000000000
    /* Far */
    ;
    let a = oldSets.filter(set => !set.isEmpty && newSets.indexOf(set) < 0);
    let b = newSets.filter(set => !set.isEmpty && oldSets.indexOf(set) < 0);
    if (a.length != b.length) return false;
    if (!a.length) return true;
    let sharedChunks = findSharedChunks(a, b);
    let sideA = new SpanCursor(a, sharedChunks, 0).goto(from),
        sideB = new SpanCursor(b, sharedChunks, 0).goto(from);

    for (;;) {
      if (sideA.to != sideB.to || !sameValues(sideA.active, sideB.active) || sideA.point && (!sideB.point || !sideA.point.eq(sideB.point))) return false;
      if (sideA.to > to) return true;
      sideA.next();
      sideB.next();
    }
  }
  /**
  Iterate over a group of range sets at the same time, notifying
  the iterator about the ranges covering every given piece of
  content. Returns the open count (see
  [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
  of the iteration.
  */


  static spans(sets, from, to, iterator,
  /**
  When given and greater than -1, only points of at least this
  size are taken into account.
  */
  minPointSize = -1) {
    let cursor = new SpanCursor(sets, null, minPointSize).goto(from),
        pos = from;
    let open = cursor.openStart;

    for (;;) {
      let curTo = Math.min(cursor.to, to);

      if (cursor.point) {
        iterator.point(pos, curTo, cursor.point, cursor.activeForPoint(cursor.to), open, cursor.pointRank);
        open = cursor.openEnd(curTo) + (cursor.to > curTo ? 1 : 0);
      } else if (curTo > pos) {
        iterator.span(pos, curTo, cursor.active, open);
        open = cursor.openEnd(curTo);
      }

      if (cursor.to > to) break;
      pos = cursor.to;
      cursor.next();
    }

    return open;
  }
  /**
  Create a range set for the given range or array of ranges. By
  default, this expects the ranges to be _sorted_ (by start
  position and, if two start at the same position,
  `value.startSide`). You can pass `true` as second argument to
  cause the method to sort them.
  */


  static of(ranges, sort = false) {
    let build = new RangeSetBuilder();

    for (let range of ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges) build.add(range.from, range.to, range.value);

    return build.finish();
  }

}
/**
The empty set of ranges.
*/


exports.RangeSet = RangeSet;
RangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);

function lazySort(ranges) {
  if (ranges.length > 1) for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
    let cur = ranges[i];
    if (cmpRange(prev, cur) > 0) return ranges.slice().sort(cmpRange);
    prev = cur;
  }
  return ranges;
}

RangeSet.empty.nextLayer = RangeSet.empty;
/**
A range set builder is a data structure that helps build up a
[range set](https://codemirror.net/6/docs/ref/#state.RangeSet) directly, without first allocating
an array of [`Range`](https://codemirror.net/6/docs/ref/#state.Range) objects.
*/

class RangeSetBuilder {
  /**
  Create an empty builder.
  */
  constructor() {
    this.chunks = [];
    this.chunkPos = [];
    this.chunkStart = -1;
    this.last = null;
    this.lastFrom = -1000000000
    /* Far */
    ;
    this.lastTo = -1000000000
    /* Far */
    ;
    this.from = [];
    this.to = [];
    this.value = [];
    this.maxPoint = -1;
    this.setMaxPoint = -1;
    this.nextLayer = null;
  }

  finishChunk(newArrays) {
    this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
    this.chunkPos.push(this.chunkStart);
    this.chunkStart = -1;
    this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
    this.maxPoint = -1;

    if (newArrays) {
      this.from = [];
      this.to = [];
      this.value = [];
    }
  }
  /**
  Add a range. Ranges should be added in sorted (by `from` and
  `value.startSide`) order.
  */


  add(from, to, value) {
    if (!this.addInner(from, to, value)) (this.nextLayer || (this.nextLayer = new RangeSetBuilder())).add(from, to, value);
  }
  /**
  @internal
  */


  addInner(from, to, value) {
    let diff = from - this.lastTo || value.startSide - this.last.endSide;
    if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0) throw new Error("Ranges must be added sorted by `from` position and `startSide`");
    if (diff < 0) return false;
    if (this.from.length == 250
    /* ChunkSize */
    ) this.finishChunk(true);
    if (this.chunkStart < 0) this.chunkStart = from;
    this.from.push(from - this.chunkStart);
    this.to.push(to - this.chunkStart);
    this.last = value;
    this.lastFrom = from;
    this.lastTo = to;
    this.value.push(value);
    if (value.point) this.maxPoint = Math.max(this.maxPoint, to - from);
    return true;
  }
  /**
  @internal
  */


  addChunk(from, chunk) {
    if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0) return false;
    if (this.from.length) this.finishChunk(true);
    this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
    this.chunks.push(chunk);
    this.chunkPos.push(from);
    let last = chunk.value.length - 1;
    this.last = chunk.value[last];
    this.lastFrom = chunk.from[last] + from;
    this.lastTo = chunk.to[last] + from;
    return true;
  }
  /**
  Finish the range set. Returns the new set. The builder can't be
  used anymore after this has been called.
  */


  finish() {
    return this.finishInner(RangeSet.empty);
  }
  /**
  @internal
  */


  finishInner(next) {
    if (this.from.length) this.finishChunk(false);
    if (this.chunks.length == 0) return next;
    let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
    this.from = null; // Make sure further `add` calls produce errors

    return result;
  }

}

exports.RangeSetBuilder = RangeSetBuilder;

function findSharedChunks(a, b, textDiff) {
  let inA = new Map();

  for (let set of a) for (let i = 0; i < set.chunk.length; i++) if (set.chunk[i].maxPoint <= 0) inA.set(set.chunk[i], set.chunkPos[i]);

  let shared = new Set();

  for (let set of b) for (let i = 0; i < set.chunk.length; i++) {
    let known = inA.get(set.chunk[i]);
    if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i] && !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i].length))) shared.add(set.chunk[i]);
  }

  return shared;
}

class LayerCursor {
  constructor(layer, skip, minPoint, rank = 0) {
    this.layer = layer;
    this.skip = skip;
    this.minPoint = minPoint;
    this.rank = rank;
  }

  get startSide() {
    return this.value ? this.value.startSide : 0;
  }

  get endSide() {
    return this.value ? this.value.endSide : 0;
  }

  goto(pos, side = -1000000000
  /* Far */
  ) {
    this.chunkIndex = this.rangeIndex = 0;
    this.gotoInner(pos, side, false);
    return this;
  }

  gotoInner(pos, side, forward) {
    while (this.chunkIndex < this.layer.chunk.length) {
      let next = this.layer.chunk[this.chunkIndex];
      if (!(this.skip && this.skip.has(next) || this.layer.chunkEnd(this.chunkIndex) < pos || next.maxPoint < this.minPoint)) break;
      this.chunkIndex++;
      forward = false;
    }

    if (this.chunkIndex < this.layer.chunk.length) {
      let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
      if (!forward || this.rangeIndex < rangeIndex) this.setRangeIndex(rangeIndex);
    }

    this.next();
  }

  forward(pos, side) {
    if ((this.to - pos || this.endSide - side) < 0) this.gotoInner(pos, side, true);
  }

  next() {
    for (;;) {
      if (this.chunkIndex == this.layer.chunk.length) {
        this.from = this.to = 1000000000
        /* Far */
        ;
        this.value = null;
        break;
      } else {
        let chunkPos = this.layer.chunkPos[this.chunkIndex],
            chunk = this.layer.chunk[this.chunkIndex];
        let from = chunkPos + chunk.from[this.rangeIndex];
        this.from = from;
        this.to = chunkPos + chunk.to[this.rangeIndex];
        this.value = chunk.value[this.rangeIndex];
        this.setRangeIndex(this.rangeIndex + 1);
        if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint) break;
      }
    }
  }

  setRangeIndex(index) {
    if (index == this.layer.chunk[this.chunkIndex].value.length) {
      this.chunkIndex++;

      if (this.skip) {
        while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex])) this.chunkIndex++;
      }

      this.rangeIndex = 0;
    } else {
      this.rangeIndex = index;
    }
  }

  nextChunk() {
    this.chunkIndex++;
    this.rangeIndex = 0;
    this.next();
  }

  compare(other) {
    return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank || this.to - other.to || this.endSide - other.endSide;
  }

}

class HeapCursor {
  constructor(heap) {
    this.heap = heap;
  }

  static from(sets, skip = null, minPoint = -1) {
    let heap = [];

    for (let i = 0; i < sets.length; i++) {
      for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {
        if (cur.maxPoint >= minPoint) heap.push(new LayerCursor(cur, skip, minPoint, i));
      }
    }

    return heap.length == 1 ? heap[0] : new HeapCursor(heap);
  }

  get startSide() {
    return this.value ? this.value.startSide : 0;
  }

  goto(pos, side = -1000000000
  /* Far */
  ) {
    for (let cur of this.heap) cur.goto(pos, side);

    for (let i = this.heap.length >> 1; i >= 0; i--) heapBubble(this.heap, i);

    this.next();
    return this;
  }

  forward(pos, side) {
    for (let cur of this.heap) cur.forward(pos, side);

    for (let i = this.heap.length >> 1; i >= 0; i--) heapBubble(this.heap, i);

    if ((this.to - pos || this.value.endSide - side) < 0) this.next();
  }

  next() {
    if (this.heap.length == 0) {
      this.from = this.to = 1000000000
      /* Far */
      ;
      this.value = null;
      this.rank = -1;
    } else {
      let top = this.heap[0];
      this.from = top.from;
      this.to = top.to;
      this.value = top.value;
      this.rank = top.rank;
      if (top.value) top.next();
      heapBubble(this.heap, 0);
    }
  }

}

function heapBubble(heap, index) {
  for (let cur = heap[index];;) {
    let childIndex = (index << 1) + 1;
    if (childIndex >= heap.length) break;
    let child = heap[childIndex];

    if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
      child = heap[childIndex + 1];
      childIndex++;
    }

    if (cur.compare(child) < 0) break;
    heap[childIndex] = cur;
    heap[index] = child;
    index = childIndex;
  }
}

class SpanCursor {
  constructor(sets, skip, minPoint) {
    this.minPoint = minPoint;
    this.active = [];
    this.activeTo = [];
    this.activeRank = [];
    this.minActive = -1; // A currently active point range, if any

    this.point = null;
    this.pointFrom = 0;
    this.pointRank = 0;
    this.to = -1000000000
    /* Far */
    ;
    this.endSide = 0;
    this.openStart = -1;
    this.cursor = HeapCursor.from(sets, skip, minPoint);
  }

  goto(pos, side = -1000000000
  /* Far */
  ) {
    this.cursor.goto(pos, side);
    this.active.length = this.activeTo.length = this.activeRank.length = 0;
    this.minActive = -1;
    this.to = pos;
    this.endSide = side;
    this.openStart = -1;
    this.next();
    return this;
  }

  forward(pos, side) {
    while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0) this.removeActive(this.minActive);

    this.cursor.forward(pos, side);
  }

  removeActive(index) {
    remove(this.active, index);
    remove(this.activeTo, index);
    remove(this.activeRank, index);
    this.minActive = findMinIndex(this.active, this.activeTo);
  }

  addActive(trackOpen) {
    let i = 0,
        {
      value,
      to,
      rank
    } = this.cursor;

    while (i < this.activeRank.length && this.activeRank[i] <= rank) i++;

    insert(this.active, i, value);
    insert(this.activeTo, i, to);
    insert(this.activeRank, i, rank);
    if (trackOpen) insert(trackOpen, i, this.cursor.from);
    this.minActive = findMinIndex(this.active, this.activeTo);
  } // After calling this, if `this.point` != null, the next range is a
  // point. Otherwise, it's a regular range, covered by `this.active`.


  next() {
    let from = this.to,
        wasPoint = this.point;
    this.point = null;
    let trackOpen = this.openStart < 0 ? [] : null,
        trackExtra = 0;

    for (;;) {
      let a = this.minActive;

      if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
        if (this.activeTo[a] > from) {
          this.to = this.activeTo[a];
          this.endSide = this.active[a].endSide;
          break;
        }

        this.removeActive(a);
        if (trackOpen) remove(trackOpen, a);
      } else if (!this.cursor.value) {
        this.to = this.endSide = 1000000000
        /* Far */
        ;
        break;
      } else if (this.cursor.from > from) {
        this.to = this.cursor.from;
        this.endSide = this.cursor.startSide;
        break;
      } else {
        let nextVal = this.cursor.value;

        if (!nextVal.point) {
          // Opening a range
          this.addActive(trackOpen);
          if (this.cursor.from < from && this.cursor.to > from) trackExtra++;
          this.cursor.next();
        } else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
          // Ignore any non-empty points that end precisely at the end of the prev point
          this.cursor.next();
        } else {
          // New point
          this.point = nextVal;
          this.pointFrom = this.cursor.from;
          this.pointRank = this.cursor.rank;
          this.to = this.cursor.to;
          this.endSide = nextVal.endSide;
          if (this.cursor.from < from) trackExtra = 1;
          this.cursor.next();
          this.forward(this.to, this.endSide);
          break;
        }
      }
    }

    if (trackOpen) {
      let openStart = 0;

      while (openStart < trackOpen.length && trackOpen[openStart] < from) openStart++;

      this.openStart = openStart + trackExtra;
    }
  }

  activeForPoint(to) {
    if (!this.active.length) return this.active;
    let active = [];

    for (let i = this.active.length - 1; i >= 0; i--) {
      if (this.activeRank[i] < this.pointRank) break;
      if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide) active.push(this.active[i]);
    }

    return active.reverse();
  }

  openEnd(to) {
    let open = 0;

    for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--) open++;

    return open;
  }

}

function compare(a, startA, b, startB, length, comparator) {
  a.goto(startA);
  b.goto(startB);
  let endB = startB + length;
  let pos = startB,
      dPos = startB - startA;

  for (;;) {
    let diff = a.to + dPos - b.to || a.endSide - b.endSide;
    let end = diff < 0 ? a.to + dPos : b.to,
        clipEnd = Math.min(end, endB);

    if (a.point || b.point) {
      if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) && sameValues(a.activeForPoint(a.to + dPos), b.activeForPoint(b.to)))) comparator.comparePoint(pos, clipEnd, a.point, b.point);
    } else {
      if (clipEnd > pos && !sameValues(a.active, b.active)) comparator.compareRange(pos, clipEnd, a.active, b.active);
    }

    if (end > endB) break;
    pos = end;
    if (diff <= 0) a.next();
    if (diff >= 0) b.next();
  }
}

function sameValues(a, b) {
  if (a.length != b.length) return false;

  for (let i = 0; i < a.length; i++) if (a[i] != b[i] && !a[i].eq(b[i])) return false;

  return true;
}

function remove(array, index) {
  for (let i = index, e = array.length - 1; i < e; i++) array[i] = array[i + 1];

  array.pop();
}

function insert(array, index, value) {
  for (let i = array.length - 1; i >= index; i--) array[i + 1] = array[i];

  array[index] = value;
}

function findMinIndex(value, array) {
  let found = -1,
      foundPos = 1000000000
  /* Far */
  ;

  for (let i = 0; i < array.length; i++) if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
    found = i;
    foundPos = array[i];
  }

  return found;
}
/**
Count the column position at the given offset into the string,
taking extending characters and tab size into account.
*/


function countColumn(string, tabSize, to = string.length) {
  let n = 0;

  for (let i = 0; i < to;) {
    if (string.charCodeAt(i) == 9) {
      n += tabSize - n % tabSize;
      i++;
    } else {
      n++;
      i = findClusterBreak(string, i);
    }
  }

  return n;
}
/**
Find the offset that corresponds to the given column position in a
string, taking extending characters and tab size into account. By
default, the string length is returned when it is too short to
reach the column. Pass `strict` true to make it return -1 in that
situation.
*/


function findColumn(string, col, tabSize, strict) {
  for (let i = 0, n = 0;;) {
    if (n >= col) return i;
    if (i == string.length) break;
    n += string.charCodeAt(i) == 9 ? tabSize - n % tabSize : 1;
    i = findClusterBreak(string, i);
  }

  return strict === true ? -1 : string.length;
}
},{"process":"kpD3"}],"h8XP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StyleModule = void 0;
const C = "\u037c";
const COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
const SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
const top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {}; // :: - Style modules encapsulate a set of CSS rules defined from
// JavaScript. Their definitions are only available in a given DOM
// root after it has been _mounted_ there with `StyleModule.mount`.
//
// Style modules should be created once and stored somewhere, as
// opposed to re-creating them every time you need them. The amount of
// CSS rules generated for a given DOM root is bounded by the amount
// of style modules that were used. So to avoid leaking rules, don't
// create these dynamically, but treat them as one-time allocations.

class StyleModule {
  // :: (Object<Style>, ?{finish: ?(string) → string})
  // Create a style module from the given spec.
  //
  // When `finish` is given, it is called on regular (non-`@`)
  // selectors (after `&` expansion) to compute the final selector.
  constructor(spec, options) {
    this.rules = [];
    let {
      finish
    } = options || {};

    function splitSelector(selector) {
      return /^@/.test(selector) ? [selector] : selector.split(/,\s*/);
    }

    function render(selectors, spec, target, isKeyframes) {
      let local = [],
          isAt = /^@(\w+)\b/.exec(selectors[0]),
          keyframes = isAt && isAt[1] == "keyframes";
      if (isAt && spec == null) return target.push(selectors[0] + ";");

      for (let prop in spec) {
        let value = spec[prop];

        if (/&/.test(prop)) {
          render(prop.split(/,\s*/).map(part => selectors.map(sel => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)), value, target);
        } else if (value && typeof value == "object") {
          if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.");
          render(splitSelector(prop), value, local, keyframes);
        } else if (value != null) {
          local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, l => "-" + l.toLowerCase()) + ": " + value + ";");
        }
      }

      if (local.length || keyframes) {
        target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") + " {" + local.join(" ") + "}");
      }
    }

    for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules);
  } // :: () → string
  // Returns a string containing the module's CSS rules.


  getRules() {
    return this.rules.join("\n");
  } // :: () → string
  // Generate a new unique CSS class name.


  static newName() {
    let id = top[COUNT] || 1;
    top[COUNT] = id + 1;
    return C + id.toString(36);
  } // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)
  //
  // Mount the given set of modules in the given DOM root, which ensures
  // that the CSS rules defined by the module are available in that
  // context.
  //
  // Rules are only added to the document once per root.
  //
  // Rule order will follow the order of the modules, so that rules from
  // modules later in the array take precedence of those from earlier
  // modules. If you call this function multiple times for the same root
  // in a way that changes the order of already mounted modules, the old
  // order will be changed.


  static mount(root, modules) {
    (root[SET] || new StyleSet(root)).mount(Array.isArray(modules) ? modules : [modules]);
  }

}

exports.StyleModule = StyleModule;
let adoptedSet = null;

class StyleSet {
  constructor(root) {
    if (!root.head && root.adoptedStyleSheets && typeof CSSStyleSheet != "undefined") {
      if (adoptedSet) {
        root.adoptedStyleSheets = [adoptedSet.sheet].concat(root.adoptedStyleSheets);
        return root[SET] = adoptedSet;
      }

      this.sheet = new CSSStyleSheet();
      root.adoptedStyleSheets = [this.sheet].concat(root.adoptedStyleSheets);
      adoptedSet = this;
    } else {
      this.styleTag = (root.ownerDocument || root).createElement("style");
      let target = root.head || root;
      target.insertBefore(this.styleTag, target.firstChild);
    }

    this.modules = [];
    root[SET] = this;
  }

  mount(modules) {
    let sheet = this.sheet;
    let pos = 0
    /* Current rule offset */
    ,
        j = 0;
    /* Index into this.modules */

    for (let i = 0; i < modules.length; i++) {
      let mod = modules[i],
          index = this.modules.indexOf(mod);

      if (index < j && index > -1) {
        // Ordering conflict
        this.modules.splice(index, 1);
        j--;
        index = -1;
      }

      if (index == -1) {
        this.modules.splice(j++, 0, mod);
        if (sheet) for (let k = 0; k < mod.rules.length; k++) sheet.insertRule(mod.rules[k], pos++);
      } else {
        while (j < index) pos += this.modules[j++].rules.length;

        pos += mod.rules.length;
        j++;
      }
    }

    if (!sheet) {
      let text = "";

      for (let i = 0; i < this.modules.length; i++) text += this.modules[i].getRules() + "\n";

      this.styleTag.textContent = text;
    }
  }

} // Style::Object<union<Style,string>>
//
// A style is an object that, in the simple case, maps CSS property
// names to strings holding their values, as in `{color: "red",
// fontWeight: "bold"}`. The property names can be given in
// camel-case—the library will insert a dash before capital letters
// when converting them to CSS.
//
// If you include an underscore in a property name, it and everything
// after it will be removed from the output, which can be useful when
// providing a property multiple times, for browser compatibility
// reasons.
//
// A property in a style object can also be a sub-selector, which
// extends the current context to add a pseudo-selector or a child
// selector. Such a property should contain a `&` character, which
// will be replaced by the current selector. For example `{"&:before":
// {content: '"hi"'}}`. Sub-selectors and regular properties can
// freely be mixed in a given object. Any property containing a `&` is
// assumed to be a sub-selector.
//
// Finally, a property can specify an @-block to be wrapped around the
// styles defined inside the object that's the property's value. For
// example to create a media query you can do `{"@media screen and
// (min-width: 400px)": {...}}`.
},{}],"lF2G":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.base = void 0;
exports.keyName = keyName;
exports.shift = void 0;
var base = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
};
exports.base = base;
var shift = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: "\""
};
exports.shift = shift;
var chrome = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
var gecko = typeof navigator != "undefined" && /Gecko\/\d+/.test(navigator.userAgent);
var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
var ie = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
var brokenModifierNames = mac || chrome && +chrome[1] < 57; // Fill in the digit keys

for (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i); // The function keys


for (var i = 1; i <= 24; i++) base[i + 111] = "F" + i; // And the alphabetic keys


for (var i = 65; i <= 90; i++) {
  base[i] = String.fromCharCode(i + 32);
  shift[i] = String.fromCharCode(i);
} // For each code that doesn't have a shift-equivalent, copy the base name


for (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];

function keyName(event) {
  var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) || ie && event.shiftKey && event.key && event.key.length == 1 || event.key == "Unidentified";
  var name = !ignoreKey && event.key || (event.shiftKey ? shift : base)[event.keyCode] || event.key || "Unidentified"; // Edge sometimes produces wrong names (Issue #3)

  if (name == "Esc") name = "Escape";
  if (name == "Del") name = "Delete"; // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/

  if (name == "Left") name = "ArrowLeft";
  if (name == "Up") name = "ArrowUp";
  if (name == "Right") name = "ArrowRight";
  if (name == "Down") name = "ArrowDown";
  return name;
}
},{}],"q9gB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.closeHoverTooltips = exports.__test = exports.WidgetType = exports.ViewUpdate = exports.ViewPlugin = exports.MatchDecorator = exports.GutterMarker = exports.EditorView = exports.Direction = exports.Decoration = exports.BlockType = exports.BlockInfo = exports.BidiSpan = void 0;
exports.crosshairCursor = crosshairCursor;
exports.drawSelection = drawSelection;
exports.dropCursor = dropCursor;
exports.getPanel = getPanel;
exports.getTooltip = getTooltip;
exports.gutter = gutter;
exports.gutterLineClass = void 0;
exports.gutters = gutters;
exports.hasHoverTooltips = hasHoverTooltips;
exports.highlightActiveLine = highlightActiveLine;
exports.highlightActiveLineGutter = highlightActiveLineGutter;
exports.highlightSpecialChars = highlightSpecialChars;
exports.hoverTooltip = hoverTooltip;
exports.lineNumberMarkers = exports.keymap = void 0;
exports.lineNumbers = lineNumbers;
exports.logException = logException;
exports.panels = panels;
exports.placeholder = placeholder;
exports.rectangularSelection = rectangularSelection;
exports.repositionTooltips = repositionTooltips;
exports.runScopeHandlers = runScopeHandlers;
exports.scrollPastEnd = scrollPastEnd;
exports.showTooltip = exports.showPanel = void 0;
exports.tooltips = tooltips;

var _state = require("@codemirror/state");

var _styleMod = require("style-mod");

var _w3cKeyname = require("w3c-keyname");

function getSelection(root) {
  let target; // Browsers differ on whether shadow roots have a getSelection
  // method. If it exists, use that, otherwise, call it on the
  // document.

  if (root.nodeType == 11) {
    // Shadow root
    target = root.getSelection ? root : root.ownerDocument;
  } else {
    target = root;
  }

  return target.getSelection();
}

function contains(dom, node) {
  return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
}

function deepActiveElement() {
  let elt = document.activeElement;

  while (elt && elt.shadowRoot) elt = elt.shadowRoot.activeElement;

  return elt;
}

function hasSelection(dom, selection) {
  if (!selection.anchorNode) return false;

  try {
    // Firefox will raise 'permission denied' errors when accessing
    // properties of `sel.anchorNode` when it's in a generated CSS
    // element.
    return contains(dom, selection.anchorNode);
  } catch (_) {
    return false;
  }
}

function clientRectsFor(dom) {
  if (dom.nodeType == 3) return textRange(dom, 0, dom.nodeValue.length).getClientRects();else if (dom.nodeType == 1) return dom.getClientRects();else return [];
} // Scans forward and backward through DOM positions equivalent to the
// given one to see if the two are in the same place (i.e. after a
// text node vs at the end of that text node)


function isEquivalentPosition(node, off, targetNode, targetOff) {
  return targetNode ? scanFor(node, off, targetNode, targetOff, -1) || scanFor(node, off, targetNode, targetOff, 1) : false;
}

function domIndex(node) {
  for (var index = 0;; index++) {
    node = node.previousSibling;
    if (!node) return index;
  }
}

function scanFor(node, off, targetNode, targetOff, dir) {
  for (;;) {
    if (node == targetNode && off == targetOff) return true;

    if (off == (dir < 0 ? 0 : maxOffset(node))) {
      if (node.nodeName == "DIV") return false;
      let parent = node.parentNode;
      if (!parent || parent.nodeType != 1) return false;
      off = domIndex(node) + (dir < 0 ? 0 : 1);
      node = parent;
    } else if (node.nodeType == 1) {
      node = node.childNodes[off + (dir < 0 ? -1 : 0)];
      if (node.nodeType == 1 && node.contentEditable == "false") return false;
      off = dir < 0 ? maxOffset(node) : 0;
    } else {
      return false;
    }
  }
}

function maxOffset(node) {
  return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
}

const Rect0 = {
  left: 0,
  right: 0,
  top: 0,
  bottom: 0
};

function flattenRect(rect, left) {
  let x = left ? rect.left : rect.right;
  return {
    left: x,
    right: x,
    top: rect.top,
    bottom: rect.bottom
  };
}

function windowRect(win) {
  return {
    left: 0,
    right: win.innerWidth,
    top: 0,
    bottom: win.innerHeight
  };
}

function scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {
  let doc = dom.ownerDocument,
      win = doc.defaultView;

  for (let cur = dom; cur;) {
    if (cur.nodeType == 1) {
      // Element
      let bounding,
          top = cur == doc.body;

      if (top) {
        bounding = windowRect(win);
      } else {
        if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
          cur = cur.parentNode;
          continue;
        }

        let rect = cur.getBoundingClientRect(); // Make sure scrollbar width isn't included in the rectangle

        bounding = {
          left: rect.left,
          right: rect.left + cur.clientWidth,
          top: rect.top,
          bottom: rect.top + cur.clientHeight
        };
      }

      let moveX = 0,
          moveY = 0;

      if (y == "nearest") {
        if (rect.top < bounding.top) {
          moveY = -(bounding.top - rect.top + yMargin);
          if (side > 0 && rect.bottom > bounding.bottom + moveY) moveY = rect.bottom - bounding.bottom + moveY + yMargin;
        } else if (rect.bottom > bounding.bottom) {
          moveY = rect.bottom - bounding.bottom + yMargin;
          if (side < 0 && rect.top - moveY < bounding.top) moveY = -(bounding.top + moveY - rect.top + yMargin);
        }
      } else {
        let rectHeight = rect.bottom - rect.top,
            boundingHeight = bounding.bottom - bounding.top;
        let targetTop = y == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 : y == "start" || y == "center" && side < 0 ? rect.top - yMargin : rect.bottom - boundingHeight + yMargin;
        moveY = targetTop - bounding.top;
      }

      if (x == "nearest") {
        if (rect.left < bounding.left) {
          moveX = -(bounding.left - rect.left + xMargin);
          if (side > 0 && rect.right > bounding.right + moveX) moveX = rect.right - bounding.right + moveX + xMargin;
        } else if (rect.right > bounding.right) {
          moveX = rect.right - bounding.right + xMargin;
          if (side < 0 && rect.left < bounding.left + moveX) moveX = -(bounding.left + moveX - rect.left + xMargin);
        }
      } else {
        let targetLeft = x == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 : x == "start" == ltr ? rect.left - xMargin : rect.right - (bounding.right - bounding.left) + xMargin;
        moveX = targetLeft - bounding.left;
      }

      if (moveX || moveY) {
        if (top) {
          win.scrollBy(moveX, moveY);
        } else {
          if (moveY) {
            let start = cur.scrollTop;
            cur.scrollTop += moveY;
            moveY = cur.scrollTop - start;
          }

          if (moveX) {
            let start = cur.scrollLeft;
            cur.scrollLeft += moveX;
            moveX = cur.scrollLeft - start;
          }

          rect = {
            left: rect.left - moveX,
            top: rect.top - moveY,
            right: rect.right - moveX,
            bottom: rect.bottom - moveY
          };
        }
      }

      if (top) break;
      cur = cur.assignedSlot || cur.parentNode;
      x = y = "nearest";
    } else if (cur.nodeType == 11) {
      // A shadow root
      cur = cur.host;
    } else {
      break;
    }
  }
}

class DOMSelectionState {
  constructor() {
    this.anchorNode = null;
    this.anchorOffset = 0;
    this.focusNode = null;
    this.focusOffset = 0;
  }

  eq(domSel) {
    return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset && this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
  }

  setRange(range) {
    this.set(range.anchorNode, range.anchorOffset, range.focusNode, range.focusOffset);
  }

  set(anchorNode, anchorOffset, focusNode, focusOffset) {
    this.anchorNode = anchorNode;
    this.anchorOffset = anchorOffset;
    this.focusNode = focusNode;
    this.focusOffset = focusOffset;
  }

}

let preventScrollSupported = null; // Feature-detects support for .focus({preventScroll: true}), and uses
// a fallback kludge when not supported.

function focusPreventScroll(dom) {
  if (dom.setActive) return dom.setActive(); // in IE

  if (preventScrollSupported) return dom.focus(preventScrollSupported);
  let stack = [];

  for (let cur = dom; cur; cur = cur.parentNode) {
    stack.push(cur, cur.scrollTop, cur.scrollLeft);
    if (cur == cur.ownerDocument) break;
  }

  dom.focus(preventScrollSupported == null ? {
    get preventScroll() {
      preventScrollSupported = {
        preventScroll: true
      };
      return true;
    }

  } : undefined);

  if (!preventScrollSupported) {
    preventScrollSupported = false;

    for (let i = 0; i < stack.length;) {
      let elt = stack[i++],
          top = stack[i++],
          left = stack[i++];
      if (elt.scrollTop != top) elt.scrollTop = top;
      if (elt.scrollLeft != left) elt.scrollLeft = left;
    }
  }
}

let scratchRange;

function textRange(node, from, to = from) {
  let range = scratchRange || (scratchRange = document.createRange());
  range.setEnd(node, to);
  range.setStart(node, from);
  return range;
}

function dispatchKey(elt, name, code) {
  let options = {
    key: name,
    code: name,
    keyCode: code,
    which: code,
    cancelable: true
  };
  let down = new KeyboardEvent("keydown", options);
  down.synthetic = true;
  elt.dispatchEvent(down);
  let up = new KeyboardEvent("keyup", options);
  up.synthetic = true;
  elt.dispatchEvent(up);
  return down.defaultPrevented || up.defaultPrevented;
}

function getRoot(node) {
  while (node) {
    if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host)) return node;
    node = node.assignedSlot || node.parentNode;
  }

  return null;
}

function clearAttributes(node) {
  while (node.attributes.length) node.removeAttributeNode(node.attributes[0]);
}

function atElementStart(doc, selection) {
  let node = selection.focusNode,
      offset = selection.focusOffset;
  if (!node || selection.anchorNode != node || selection.anchorOffset != offset) return false;

  for (;;) {
    if (offset) {
      if (node.nodeType != 1) return false;
      let prev = node.childNodes[offset - 1];
      if (prev.contentEditable == "false") offset--;else {
        node = prev;
        offset = maxOffset(node);
      }
    } else if (node == doc) {
      return true;
    } else {
      offset = domIndex(node);
      node = node.parentNode;
    }
  }
}

class DOMPos {
  constructor(node, offset, precise = true) {
    this.node = node;
    this.offset = offset;
    this.precise = precise;
  }

  static before(dom, precise) {
    return new DOMPos(dom.parentNode, domIndex(dom), precise);
  }

  static after(dom, precise) {
    return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise);
  }

}

const noChildren = [];

class ContentView {
  constructor() {
    this.parent = null;
    this.dom = null;
    this.dirty = 2
    /* Node */
    ;
  }

  get editorView() {
    if (!this.parent) throw new Error("Accessing view in orphan content view");
    return this.parent.editorView;
  }

  get overrideDOMText() {
    return null;
  }

  get posAtStart() {
    return this.parent ? this.parent.posBefore(this) : 0;
  }

  get posAtEnd() {
    return this.posAtStart + this.length;
  }

  posBefore(view) {
    let pos = this.posAtStart;

    for (let child of this.children) {
      if (child == view) return pos;
      pos += child.length + child.breakAfter;
    }

    throw new RangeError("Invalid child in posBefore");
  }

  posAfter(view) {
    return this.posBefore(view) + view.length;
  } // Will return a rectangle directly before (when side < 0), after
  // (side > 0) or directly on (when the browser supports it) the
  // given position.


  coordsAt(_pos, _side) {
    return null;
  }

  sync(track) {
    if (this.dirty & 2
    /* Node */
    ) {
      let parent = this.dom;
      let prev = null,
          next;

      for (let child of this.children) {
        if (child.dirty) {
          if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
            let contentView = ContentView.get(next);
            if (!contentView || !contentView.parent && contentView.constructor == child.constructor) child.reuseDOM(next);
          }

          child.sync(track);
          child.dirty = 0
          /* Not */
          ;
        }

        next = prev ? prev.nextSibling : parent.firstChild;
        if (track && !track.written && track.node == parent && next != child.dom) track.written = true;

        if (child.dom.parentNode == parent) {
          while (next && next != child.dom) next = rm$1(next);
        } else {
          parent.insertBefore(child.dom, next);
        }

        prev = child.dom;
      }

      next = prev ? prev.nextSibling : parent.firstChild;
      if (next && track && track.node == parent) track.written = true;

      while (next) next = rm$1(next);
    } else if (this.dirty & 1
    /* Child */
    ) {
      for (let child of this.children) if (child.dirty) {
        child.sync(track);
        child.dirty = 0
        /* Not */
        ;
      }
    }
  }

  reuseDOM(_dom) {}

  localPosFromDOM(node, offset) {
    let after;

    if (node == this.dom) {
      after = this.dom.childNodes[offset];
    } else {
      let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;

      for (;;) {
        let parent = node.parentNode;
        if (parent == this.dom) break;

        if (bias == 0 && parent.firstChild != parent.lastChild) {
          if (node == parent.firstChild) bias = -1;else bias = 1;
        }

        node = parent;
      }

      if (bias < 0) after = node;else after = node.nextSibling;
    }

    if (after == this.dom.firstChild) return 0;

    while (after && !ContentView.get(after)) after = after.nextSibling;

    if (!after) return this.length;

    for (let i = 0, pos = 0;; i++) {
      let child = this.children[i];
      if (child.dom == after) return pos;
      pos += child.length + child.breakAfter;
    }
  }

  domBoundsAround(from, to, offset = 0) {
    let fromI = -1,
        fromStart = -1,
        toI = -1,
        toEnd = -1;

    for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
      let child = this.children[i],
          end = pos + child.length;
      if (pos < from && end > to) return child.domBoundsAround(from, to, pos);

      if (end >= from && fromI == -1) {
        fromI = i;
        fromStart = pos;
      }

      if (pos > to && child.dom.parentNode == this.dom) {
        toI = i;
        toEnd = prevEnd;
        break;
      }

      prevEnd = end;
      pos = end + child.breakAfter;
    }

    return {
      from: fromStart,
      to: toEnd < 0 ? offset + this.length : toEnd,
      startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
      endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null
    };
  }

  markDirty(andParent = false) {
    this.dirty |= 2
    /* Node */
    ;
    this.markParentsDirty(andParent);
  }

  markParentsDirty(childList) {
    for (let parent = this.parent; parent; parent = parent.parent) {
      if (childList) parent.dirty |= 2
      /* Node */
      ;
      if (parent.dirty & 1
      /* Child */
      ) return;
      parent.dirty |= 1
      /* Child */
      ;
      childList = false;
    }
  }

  setParent(parent) {
    if (this.parent != parent) {
      this.parent = parent;
      if (this.dirty) this.markParentsDirty(true);
    }
  }

  setDOM(dom) {
    if (this.dom) this.dom.cmView = null;
    this.dom = dom;
    dom.cmView = this;
  }

  get rootView() {
    for (let v = this;;) {
      let parent = v.parent;
      if (!parent) return v;
      v = parent;
    }
  }

  replaceChildren(from, to, children = noChildren) {
    this.markDirty();

    for (let i = from; i < to; i++) {
      let child = this.children[i];
      if (child.parent == this) child.destroy();
    }

    this.children.splice(from, to - from, ...children);

    for (let i = 0; i < children.length; i++) children[i].setParent(this);
  }

  ignoreMutation(_rec) {
    return false;
  }

  ignoreEvent(_event) {
    return false;
  }

  childCursor(pos = this.length) {
    return new ChildCursor(this.children, pos, this.children.length);
  }

  childPos(pos, bias = 1) {
    return this.childCursor().findPos(pos, bias);
  }

  toString() {
    let name = this.constructor.name.replace("View", "");
    return name + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
  }

  static get(node) {
    return node.cmView;
  }

  get isEditable() {
    return true;
  }

  merge(from, to, source, hasStart, openStart, openEnd) {
    return false;
  }

  become(other) {
    return false;
  } // When this is a zero-length view with a side, this should return a
  // number <= 0 to indicate it is before its position, or a
  // number > 0 when after its position.


  getSide() {
    return 0;
  }

  destroy() {
    this.parent = null;
  }

}

ContentView.prototype.breakAfter = 0; // Remove a DOM node and return its next sibling.

function rm$1(dom) {
  let next = dom.nextSibling;
  dom.parentNode.removeChild(dom);
  return next;
}

class ChildCursor {
  constructor(children, pos, i) {
    this.children = children;
    this.pos = pos;
    this.i = i;
    this.off = 0;
  }

  findPos(pos, bias = 1) {
    for (;;) {
      if (pos > this.pos || pos == this.pos && (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
        this.off = pos - this.pos;
        return this;
      }

      let next = this.children[--this.i];
      this.pos -= next.length + next.breakAfter;
    }
  }

}

function replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {
  let {
    children
  } = parent;
  let before = children.length ? children[fromI] : null;
  let last = insert.length ? insert[insert.length - 1] : null;
  let breakAtEnd = last ? last.breakAfter : breakAtStart; // Change within a single child

  if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 && before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd)) return;

  if (toI < children.length) {
    let after = children[toI]; // Make sure the end of the child after the update is preserved in `after`

    if (after && toOff < after.length) {
      // If we're splitting a child, separate part of it to avoid that
      // being mangled when updating the child before the update.
      if (fromI == toI) {
        after = after.split(toOff);
        toOff = 0;
      } // If the element after the replacement should be merged with
      // the last replacing element, update `content`


      if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
        insert[insert.length - 1] = after;
      } else {
        // Remove the start of the after element, if necessary, and
        // add it to `content`.
        if (toOff) after.merge(0, toOff, null, false, 0, openEnd);
        insert.push(after);
      }
    } else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
      // The element at `toI` is entirely covered by this range.
      // Preserve its line break, if any.
      if (last) last.breakAfter = 1;else breakAtStart = 1;
    } // Since we've handled the next element from the current elements
    // now, make sure `toI` points after that.


    toI++;
  }

  if (before) {
    before.breakAfter = breakAtStart;

    if (fromOff > 0) {
      if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {
        before.breakAfter = insert.shift().breakAfter;
      } else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
        before.merge(fromOff, before.length, null, false, openStart, 0);
      }

      fromI++;
    }
  } // Try to merge widgets on the boundaries of the replacement


  while (fromI < toI && insert.length) {
    if (children[toI - 1].become(insert[insert.length - 1])) {
      toI--;
      insert.pop();
      openEnd = insert.length ? 0 : openStart;
    } else if (children[fromI].become(insert[0])) {
      fromI++;
      insert.shift();
      openStart = insert.length ? 0 : openEnd;
    } else {
      break;
    }
  }

  if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter && children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd)) fromI--;
  if (fromI < toI || insert.length) parent.replaceChildren(fromI, toI, insert);
}

function mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {
  let cur = parent.childCursor();
  let {
    i: toI,
    off: toOff
  } = cur.findPos(to, 1);
  let {
    i: fromI,
    off: fromOff
  } = cur.findPos(from, -1);
  let dLen = from - to;

  for (let view of insert) dLen += view.length;

  parent.length += dLen;
  replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);
}

let nav = typeof navigator != "undefined" ? navigator : {
  userAgent: "",
  vendor: "",
  platform: ""
};
let doc = typeof document != "undefined" ? document : {
  documentElement: {
    style: {}
  }
};
const ie_edge = /*@__PURE__*/ /Edge\/(\d+)/.exec(nav.userAgent);
const ie_upto10 = /*@__PURE__*/ /MSIE \d/.test(nav.userAgent);
const ie_11up = /*@__PURE__*/ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
const ie = !!(ie_upto10 || ie_11up || ie_edge);
const gecko = !ie && /*@__PURE__*/ /gecko\/(\d+)/i.test(nav.userAgent);
const chrome = !ie && /*@__PURE__*/ /Chrome\/(\d+)/.exec(nav.userAgent);
const webkit = ("webkitFontSmoothing" in doc.documentElement.style);
const safari = !ie && /*@__PURE__*/ /Apple Computer/.test(nav.vendor);
const ios = safari && ( /*@__PURE__*/ /Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
var browser = {
  mac: ios || /*@__PURE__*/ /Mac/.test(nav.platform),
  windows: /*@__PURE__*/ /Win/.test(nav.platform),
  linux: /*@__PURE__*/ /Linux|X11/.test(nav.platform),
  ie,
  ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
  gecko,
  gecko_version: gecko ? +( /*@__PURE__*/ /Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
  chrome: !!chrome,
  chrome_version: chrome ? +chrome[1] : 0,
  ios,
  android: /*@__PURE__*/ /Android\b/.test(nav.userAgent),
  webkit,
  safari,
  webkit_version: webkit ? +( /*@__PURE__*/ /\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
  tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
};
const MaxJoinLen = 256;

class TextView extends ContentView {
  constructor(text) {
    super();
    this.text = text;
  }

  get length() {
    return this.text.length;
  }

  createDOM(textDOM) {
    this.setDOM(textDOM || document.createTextNode(this.text));
  }

  sync(track) {
    if (!this.dom) this.createDOM();

    if (this.dom.nodeValue != this.text) {
      if (track && track.node == this.dom) track.written = true;
      this.dom.nodeValue = this.text;
    }
  }

  reuseDOM(dom) {
    if (dom.nodeType == 3) this.createDOM(dom);
  }

  merge(from, to, source) {
    if (source && (!(source instanceof TextView) || this.length - (to - from) + source.length > MaxJoinLen)) return false;
    this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
    this.markDirty();
    return true;
  }

  split(from) {
    let result = new TextView(this.text.slice(from));
    this.text = this.text.slice(0, from);
    this.markDirty();
    return result;
  }

  localPosFromDOM(node, offset) {
    return node == this.dom ? offset : offset ? this.text.length : 0;
  }

  domAtPos(pos) {
    return new DOMPos(this.dom, pos);
  }

  domBoundsAround(_from, _to, offset) {
    return {
      from: offset,
      to: offset + this.length,
      startDOM: this.dom,
      endDOM: this.dom.nextSibling
    };
  }

  coordsAt(pos, side) {
    return textCoords(this.dom, pos, side);
  }

}

class MarkView extends ContentView {
  constructor(mark, children = [], length = 0) {
    super();
    this.mark = mark;
    this.children = children;
    this.length = length;

    for (let ch of children) ch.setParent(this);
  }

  setAttrs(dom) {
    clearAttributes(dom);
    if (this.mark.class) dom.className = this.mark.class;
    if (this.mark.attrs) for (let name in this.mark.attrs) dom.setAttribute(name, this.mark.attrs[name]);
    return dom;
  }

  reuseDOM(node) {
    if (node.nodeName == this.mark.tagName.toUpperCase()) {
      this.setDOM(node);
      this.dirty |= 4
      /* Attrs */
      | 2
      /* Node */
      ;
    }
  }

  sync(track) {
    if (!this.dom) this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));else if (this.dirty & 4
    /* Attrs */
    ) this.setAttrs(this.dom);
    super.sync(track);
  }

  merge(from, to, source, _hasStart, openStart, openEnd) {
    if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) || from && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
    mergeChildrenInto(this, from, to, source ? source.children : [], openStart - 1, openEnd - 1);
    this.markDirty();
    return true;
  }

  split(from) {
    let result = [],
        off = 0,
        detachFrom = -1,
        i = 0;

    for (let elt of this.children) {
      let end = off + elt.length;
      if (end > from) result.push(off < from ? elt.split(from - off) : elt);
      if (detachFrom < 0 && off >= from) detachFrom = i;
      off = end;
      i++;
    }

    let length = this.length - from;
    this.length = from;

    if (detachFrom > -1) {
      this.children.length = detachFrom;
      this.markDirty();
    }

    return new MarkView(this.mark, result, length);
  }

  domAtPos(pos) {
    return inlineDOMAtPos(this.dom, this.children, pos);
  }

  coordsAt(pos, side) {
    return coordsInChildren(this, pos, side);
  }

}

function textCoords(text, pos, side) {
  let length = text.nodeValue.length;
  if (pos > length) pos = length;
  let from = pos,
      to = pos,
      flatten = 0;

  if (pos == 0 && side < 0 || pos == length && side >= 0) {
    if (!(browser.chrome || browser.gecko)) {
      // These browsers reliably return valid rectangles for empty ranges
      if (pos) {
        from--;
        flatten = 1;
      } // FIXME this is wrong in RTL text
      else if (to < length) {
        to++;
        flatten = -1;
      }
    }
  } else {
    if (side < 0) from--;else if (to < length) to++;
  }

  let rects = textRange(text, from, to).getClientRects();
  if (!rects.length) return Rect0;
  let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
  if (browser.safari && !flatten && rect.width == 0) rect = Array.prototype.find.call(rects, r => r.width) || rect;
  return flatten ? flattenRect(rect, flatten < 0) : rect || null;
} // Also used for collapsed ranges that don't have a placeholder widget!


class WidgetView extends ContentView {
  constructor(widget, length, side) {
    super();
    this.widget = widget;
    this.length = length;
    this.side = side;
    this.prevWidget = null;
  }

  static create(widget, length, side) {
    return new (widget.customView || WidgetView)(widget, length, side);
  }

  split(from) {
    let result = WidgetView.create(this.widget, this.length - from, this.side);
    this.length -= from;
    return result;
  }

  sync() {
    if (!this.dom || !this.widget.updateDOM(this.dom)) {
      if (this.dom && this.prevWidget) this.prevWidget.destroy(this.dom);
      this.prevWidget = null;
      this.setDOM(this.widget.toDOM(this.editorView));
      this.dom.contentEditable = "false";
    }
  }

  getSide() {
    return this.side;
  }

  merge(from, to, source, hasStart, openStart, openEnd) {
    if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
    this.length = from + (source ? source.length : 0) + (this.length - to);
    return true;
  }

  become(other) {
    if (other.length == this.length && other instanceof WidgetView && other.side == this.side) {
      if (this.widget.constructor == other.widget.constructor) {
        if (!this.widget.eq(other.widget)) this.markDirty(true);
        if (this.dom && !this.prevWidget) this.prevWidget = this.widget;
        this.widget = other.widget;
        return true;
      }
    }

    return false;
  }

  ignoreMutation() {
    return true;
  }

  ignoreEvent(event) {
    return this.widget.ignoreEvent(event);
  }

  get overrideDOMText() {
    if (this.length == 0) return _state.Text.empty;
    let top = this;

    while (top.parent) top = top.parent;

    let view = top.editorView,
        text = view && view.state.doc,
        start = this.posAtStart;
    return text ? text.slice(start, start + this.length) : _state.Text.empty;
  }

  domAtPos(pos) {
    return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
  }

  domBoundsAround() {
    return null;
  }

  coordsAt(pos, side) {
    let rects = this.dom.getClientRects(),
        rect = null;
    if (!rects.length) return Rect0;

    for (let i = pos > 0 ? rects.length - 1 : 0;; i += pos > 0 ? -1 : 1) {
      rect = rects[i];
      if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom) break;
    }

    return pos == 0 && side > 0 || pos == this.length && side <= 0 ? rect : flattenRect(rect, pos == 0);
  }

  get isEditable() {
    return false;
  }

  destroy() {
    super.destroy();
    if (this.dom) this.widget.destroy(this.dom);
  }

}

class CompositionView extends WidgetView {
  domAtPos(pos) {
    let {
      topView,
      text
    } = this.widget;
    if (!topView) return new DOMPos(text, Math.min(pos, text.nodeValue.length));
    return scanCompositionTree(pos, 0, topView, text, (v, p) => v.domAtPos(p), p => new DOMPos(text, Math.min(p, text.nodeValue.length)));
  }

  sync() {
    this.setDOM(this.widget.toDOM());
  }

  localPosFromDOM(node, offset) {
    let {
      topView,
      text
    } = this.widget;
    if (!topView) return Math.min(offset, this.length);
    return posFromDOMInCompositionTree(node, offset, topView, text);
  }

  ignoreMutation() {
    return false;
  }

  get overrideDOMText() {
    return null;
  }

  coordsAt(pos, side) {
    let {
      topView,
      text
    } = this.widget;
    if (!topView) return textCoords(text, pos, side);
    return scanCompositionTree(pos, side, topView, text, (v, pos, side) => v.coordsAt(pos, side), (pos, side) => textCoords(text, pos, side));
  }

  destroy() {
    var _a;

    super.destroy();
    (_a = this.widget.topView) === null || _a === void 0 ? void 0 : _a.destroy();
  }

  get isEditable() {
    return true;
  }

} // Uses the old structure of a chunk of content view frozen for
// composition to try and find a reasonable DOM location for the given
// offset.


function scanCompositionTree(pos, side, view, text, enterView, fromText) {
  if (view instanceof MarkView) {
    for (let child of view.children) {
      let hasComp = contains(child.dom, text);
      let len = hasComp ? text.nodeValue.length : child.length;
      if (pos < len || pos == len && child.getSide() <= 0) return hasComp ? scanCompositionTree(pos, side, child, text, enterView, fromText) : enterView(child, pos, side);
      pos -= len;
    }

    return enterView(view, view.length, -1);
  } else if (view.dom == text) {
    return fromText(pos, side);
  } else {
    return enterView(view, pos, side);
  }
}

function posFromDOMInCompositionTree(node, offset, view, text) {
  if (view instanceof MarkView) {
    for (let child of view.children) {
      let pos = 0,
          hasComp = contains(child.dom, text);
      if (contains(child.dom, node)) return pos + (hasComp ? posFromDOMInCompositionTree(node, offset, child, text) : child.localPosFromDOM(node, offset));
      pos += hasComp ? text.nodeValue.length : child.length;
    }
  } else if (view.dom == text) {
    return Math.min(offset, text.nodeValue.length);
  }

  return view.localPosFromDOM(node, offset);
} // These are drawn around uneditable widgets to avoid a number of
// browser bugs that show up when the cursor is directly next to
// uneditable inline content.


class WidgetBufferView extends ContentView {
  constructor(side) {
    super();
    this.side = side;
  }

  get length() {
    return 0;
  }

  merge() {
    return false;
  }

  become(other) {
    return other instanceof WidgetBufferView && other.side == this.side;
  }

  split() {
    return new WidgetBufferView(this.side);
  }

  sync() {
    if (!this.dom) {
      let dom = document.createElement("img");
      dom.className = "cm-widgetBuffer";
      dom.setAttribute("aria-hidden", "true");
      this.setDOM(dom);
    }
  }

  getSide() {
    return this.side;
  }

  domAtPos(pos) {
    return DOMPos.before(this.dom);
  }

  localPosFromDOM() {
    return 0;
  }

  domBoundsAround() {
    return null;
  }

  coordsAt(pos) {
    let imgRect = this.dom.getBoundingClientRect(); // Since the <img> height doesn't correspond to text height, try
    // to borrow the height from some sibling node.

    let siblingRect = inlineSiblingRect(this, this.side > 0 ? -1 : 1);
    return siblingRect && siblingRect.top < imgRect.bottom && siblingRect.bottom > imgRect.top ? {
      left: imgRect.left,
      right: imgRect.right,
      top: siblingRect.top,
      bottom: siblingRect.bottom
    } : imgRect;
  }

  get overrideDOMText() {
    return _state.Text.empty;
  }

}

TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;

function inlineSiblingRect(view, side) {
  let parent = view.parent,
      index = parent ? parent.children.indexOf(view) : -1;

  while (parent && index >= 0) {
    if (side < 0 ? index > 0 : index < parent.children.length) {
      let next = parent.children[index + side];

      if (next instanceof TextView) {
        let nextRect = next.coordsAt(side < 0 ? next.length : 0, side);
        if (nextRect) return nextRect;
      }

      index += side;
    } else if (parent instanceof MarkView && parent.parent) {
      index = parent.parent.children.indexOf(parent) + (side < 0 ? 0 : 1);
      parent = parent.parent;
    } else {
      let last = parent.dom.lastChild;
      if (last && last.nodeName == "BR") return last.getClientRects()[0];
      break;
    }
  }

  return undefined;
}

function inlineDOMAtPos(dom, children, pos) {
  let i = 0;

  for (let off = 0; i < children.length; i++) {
    let child = children[i],
        end = off + child.length;
    if (end == off && child.getSide() <= 0) continue;
    if (pos > off && pos < end && child.dom.parentNode == dom) return child.domAtPos(pos - off);
    if (pos <= off) break;
    off = end;
  }

  for (; i > 0; i--) {
    let before = children[i - 1].dom;
    if (before.parentNode == dom) return DOMPos.after(before);
  }

  return new DOMPos(dom, 0);
} // Assumes `view`, if a mark view, has precisely 1 child.


function joinInlineInto(parent, view, open) {
  let last,
      {
    children
  } = parent;

  if (open > 0 && view instanceof MarkView && children.length && (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
    joinInlineInto(last, view.children[0], open - 1);
  } else {
    children.push(view);
    view.setParent(parent);
  }

  parent.length += view.length;
}

function coordsInChildren(view, pos, side) {
  for (let off = 0, i = 0; i < view.children.length; i++) {
    let child = view.children[i],
        end = off + child.length,
        next;

    if ((side <= 0 || end == view.length || child.getSide() > 0 ? end >= pos : end > pos) && (pos < end || i + 1 == view.children.length || (next = view.children[i + 1]).length || next.getSide() > 0)) {
      let flatten = 0;

      if (end == off) {
        if (child.getSide() <= 0) continue;
        flatten = side = -child.getSide();
      }

      let rect = child.coordsAt(Math.max(0, pos - off), side);
      return flatten && rect ? flattenRect(rect, side < 0) : rect;
    }

    off = end;
  }

  let last = view.dom.lastChild;
  if (!last) return view.dom.getBoundingClientRect();
  let rects = clientRectsFor(last);
  return rects[rects.length - 1] || null;
}

function combineAttrs(source, target) {
  for (let name in source) {
    if (name == "class" && target.class) target.class += " " + source.class;else if (name == "style" && target.style) target.style += ";" + source.style;else target[name] = source[name];
  }

  return target;
}

function attrsEq(a, b) {
  if (a == b) return true;
  if (!a || !b) return false;
  let keysA = Object.keys(a),
      keysB = Object.keys(b);
  if (keysA.length != keysB.length) return false;

  for (let key of keysA) {
    if (keysB.indexOf(key) == -1 || a[key] !== b[key]) return false;
  }

  return true;
}

function updateAttrs(dom, prev, attrs) {
  let changed = null;
  if (prev) for (let name in prev) if (!(attrs && name in attrs)) dom.removeAttribute(changed = name);
  if (attrs) for (let name in attrs) if (!(prev && prev[name] == attrs[name])) dom.setAttribute(changed = name, attrs[name]);
  return !!changed;
}
/**
Widgets added to the content are described by subclasses of this
class. Using a description object like that makes it possible to
delay creating of the DOM structure for a widget until it is
needed, and to avoid redrawing widgets even if the decorations
that define them are recreated.
*/


class WidgetType {
  /**
  Compare this instance to another instance of the same type.
  (TypeScript can't express this, but only instances of the same
  specific class will be passed to this method.) This is used to
  avoid redrawing widgets when they are replaced by a new
  decoration of the same type. The default implementation just
  returns `false`, which will cause new instances of the widget to
  always be redrawn.
  */
  eq(widget) {
    return false;
  }
  /**
  Update a DOM element created by a widget of the same type (but
  different, non-`eq` content) to reflect this widget. May return
  true to indicate that it could update, false to indicate it
  couldn't (in which case the widget will be redrawn). The default
  implementation just returns false.
  */


  updateDOM(dom) {
    return false;
  }
  /**
  @internal
  */


  compare(other) {
    return this == other || this.constructor == other.constructor && this.eq(other);
  }
  /**
  The estimated height this widget will have, to be used when
  estimating the height of content that hasn't been drawn. May
  return -1 to indicate you don't know. The default implementation
  returns -1.
  */


  get estimatedHeight() {
    return -1;
  }
  /**
  Can be used to configure which kinds of events inside the widget
  should be ignored by the editor. The default is to ignore all
  events.
  */


  ignoreEvent(event) {
    return true;
  }
  /**
  @internal
  */


  get customView() {
    return null;
  }
  /**
  This is called when the an instance of the widget is removed
  from the editor view.
  */


  destroy(dom) {}

}
/**
The different types of blocks that can occur in an editor view.
*/


exports.WidgetType = WidgetType;

var BlockType = /*@__PURE__*/function (BlockType) {
  /**
  A line of text.
  */
  BlockType[BlockType["Text"] = 0] = "Text";
  /**
  A block widget associated with the position after it.
  */

  BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
  /**
  A block widget associated with the position before it.
  */

  BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
  /**
  A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
  */

  BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
  return BlockType;
}(BlockType || (exports.BlockType = BlockType = {}));
/**
A decoration provides information on how to draw or style a piece
of content. You'll usually use it wrapped in a
[`Range`](https://codemirror.net/6/docs/ref/#state.Range), which adds a start and end position.
@nonabstract
*/


exports.BlockType = BlockType;

class Decoration extends _state.RangeValue {
  constructor(
  /**
  @internal
  */
  startSide,
  /**
  @internal
  */
  endSide,
  /**
  @internal
  */
  widget,
  /**
  The config object used to create this decoration. You can
  include additional properties in there to store metadata about
  your decoration.
  */
  spec) {
    super();
    this.startSide = startSide;
    this.endSide = endSide;
    this.widget = widget;
    this.spec = spec;
  }
  /**
  @internal
  */


  get heightRelevant() {
    return false;
  }
  /**
  Create a mark decoration, which influences the styling of the
  content in its range. Nested mark decorations will cause nested
  DOM elements to be created. Nesting order is determined by
  precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
  the higher-precedence decorations creating the inner DOM nodes.
  Such elements are split on line boundaries and on the boundaries
  of lower-precedence decorations.
  */


  static mark(spec) {
    return new MarkDecoration(spec);
  }
  /**
  Create a widget decoration, which displays a DOM element at the
  given position.
  */


  static widget(spec) {
    let side = spec.side || 0,
        block = !!spec.block;
    side += block ? side > 0 ? 300000000
    /* BlockAfter */
    : -400000000
    /* BlockBefore */
    : side > 0 ? 100000000
    /* InlineAfter */
    : -100000000
    /* InlineBefore */
    ;
    return new PointDecoration(spec, side, side, block, spec.widget || null, false);
  }
  /**
  Create a replace decoration which replaces the given range with
  a widget, or simply hides it.
  */


  static replace(spec) {
    let block = !!spec.block,
        startSide,
        endSide;

    if (spec.isBlockGap) {
      startSide = -500000000
      /* GapStart */
      ;
      endSide = 400000000
      /* GapEnd */
      ;
    } else {
      let {
        start,
        end
      } = getInclusive(spec, block);
      startSide = (start ? block ? -300000000
      /* BlockIncStart */
      : -1
      /* InlineIncStart */
      : 500000000
      /* NonIncStart */
      ) - 1;
      endSide = (end ? block ? 200000000
      /* BlockIncEnd */
      : 1
      /* InlineIncEnd */
      : -600000000
      /* NonIncEnd */
      ) + 1;
    }

    return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
  }
  /**
  Create a line decoration, which can add DOM attributes to the
  line starting at the given position.
  */


  static line(spec) {
    return new LineDecoration(spec);
  }
  /**
  Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
  decorated range or ranges. If the ranges aren't already sorted,
  pass `true` for `sort` to make the library sort them for you.
  */


  static set(of, sort = false) {
    return _state.RangeSet.of(of, sort);
  }
  /**
  @internal
  */


  hasHeight() {
    return this.widget ? this.widget.estimatedHeight > -1 : false;
  }

}
/**
The empty set of decorations.
*/


exports.Decoration = Decoration;
Decoration.none = _state.RangeSet.empty;

class MarkDecoration extends Decoration {
  constructor(spec) {
    let {
      start,
      end
    } = getInclusive(spec);
    super(start ? -1
    /* InlineIncStart */
    : 500000000
    /* NonIncStart */
    , end ? 1
    /* InlineIncEnd */
    : -600000000
    /* NonIncEnd */
    , null, spec);
    this.tagName = spec.tagName || "span";
    this.class = spec.class || "";
    this.attrs = spec.attributes || null;
  }

  eq(other) {
    return this == other || other instanceof MarkDecoration && this.tagName == other.tagName && this.class == other.class && attrsEq(this.attrs, other.attrs);
  }

  range(from, to = from) {
    if (from >= to) throw new RangeError("Mark decorations may not be empty");
    return super.range(from, to);
  }

}

MarkDecoration.prototype.point = false;

class LineDecoration extends Decoration {
  constructor(spec) {
    super(-200000000
    /* Line */
    , -200000000
    /* Line */
    , null, spec);
  }

  eq(other) {
    return other instanceof LineDecoration && attrsEq(this.spec.attributes, other.spec.attributes);
  }

  range(from, to = from) {
    if (to != from) throw new RangeError("Line decoration ranges must be zero-length");
    return super.range(from, to);
  }

}

LineDecoration.prototype.mapMode = _state.MapMode.TrackBefore;
LineDecoration.prototype.point = true;

class PointDecoration extends Decoration {
  constructor(spec, startSide, endSide, block, widget, isReplace) {
    super(startSide, endSide, widget, spec);
    this.block = block;
    this.isReplace = isReplace;
    this.mapMode = !block ? _state.MapMode.TrackDel : startSide <= 0 ? _state.MapMode.TrackBefore : _state.MapMode.TrackAfter;
  } // Only relevant when this.block == true


  get type() {
    return this.startSide < this.endSide ? BlockType.WidgetRange : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
  }

  get heightRelevant() {
    return this.block || !!this.widget && this.widget.estimatedHeight >= 5;
  }

  eq(other) {
    return other instanceof PointDecoration && widgetsEq(this.widget, other.widget) && this.block == other.block && this.startSide == other.startSide && this.endSide == other.endSide;
  }

  range(from, to = from) {
    if (this.isReplace && (from > to || from == to && this.startSide > 0 && this.endSide <= 0)) throw new RangeError("Invalid range for replacement decoration");
    if (!this.isReplace && to != from) throw new RangeError("Widget decorations can only have zero-length ranges");
    return super.range(from, to);
  }

}

PointDecoration.prototype.point = true;

function getInclusive(spec, block = false) {
  let {
    inclusiveStart: start,
    inclusiveEnd: end
  } = spec;
  if (start == null) start = spec.inclusive;
  if (end == null) end = spec.inclusive;
  return {
    start: start !== null && start !== void 0 ? start : block,
    end: end !== null && end !== void 0 ? end : block
  };
}

function widgetsEq(a, b) {
  return a == b || !!(a && b && a.compare(b));
}

function addRange(from, to, ranges, margin = 0) {
  let last = ranges.length - 1;
  if (last >= 0 && ranges[last] + margin >= from) ranges[last] = Math.max(ranges[last], to);else ranges.push(from, to);
}

class LineView extends ContentView {
  constructor() {
    super(...arguments);
    this.children = [];
    this.length = 0;
    this.prevAttrs = undefined;
    this.attrs = null;
    this.breakAfter = 0;
  } // Consumes source


  merge(from, to, source, hasStart, openStart, openEnd) {
    if (source) {
      if (!(source instanceof LineView)) return false;
      if (!this.dom) source.transferDOM(this); // Reuse source.dom when appropriate
    }

    if (hasStart) this.setDeco(source ? source.attrs : null);
    mergeChildrenInto(this, from, to, source ? source.children : [], openStart, openEnd);
    return true;
  }

  split(at) {
    let end = new LineView();
    end.breakAfter = this.breakAfter;
    if (this.length == 0) return end;
    let {
      i,
      off
    } = this.childPos(at);

    if (off) {
      end.append(this.children[i].split(off), 0);
      this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
      i++;
    }

    for (let j = i; j < this.children.length; j++) end.append(this.children[j], 0);

    while (i > 0 && this.children[i - 1].length == 0) this.children[--i].destroy();

    this.children.length = i;
    this.markDirty();
    this.length = at;
    return end;
  }

  transferDOM(other) {
    if (!this.dom) return;
    this.markDirty();
    other.setDOM(this.dom);
    other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
    this.prevAttrs = undefined;
    this.dom = null;
  }

  setDeco(attrs) {
    if (!attrsEq(this.attrs, attrs)) {
      if (this.dom) {
        this.prevAttrs = this.attrs;
        this.markDirty();
      }

      this.attrs = attrs;
    }
  }

  append(child, openStart) {
    joinInlineInto(this, child, openStart);
  } // Only called when building a line view in ContentBuilder


  addLineDeco(deco) {
    let attrs = deco.spec.attributes,
        cls = deco.spec.class;
    if (attrs) this.attrs = combineAttrs(attrs, this.attrs || {});
    if (cls) this.attrs = combineAttrs({
      class: cls
    }, this.attrs || {});
  }

  domAtPos(pos) {
    return inlineDOMAtPos(this.dom, this.children, pos);
  }

  reuseDOM(node) {
    if (node.nodeName == "DIV") {
      this.setDOM(node);
      this.dirty |= 4
      /* Attrs */
      | 2
      /* Node */
      ;
    }
  }

  sync(track) {
    var _a;

    if (!this.dom) {
      this.setDOM(document.createElement("div"));
      this.dom.className = "cm-line";
      this.prevAttrs = this.attrs ? null : undefined;
    } else if (this.dirty & 4
    /* Attrs */
    ) {
      clearAttributes(this.dom);
      this.dom.className = "cm-line";
      this.prevAttrs = this.attrs ? null : undefined;
    }

    if (this.prevAttrs !== undefined) {
      updateAttrs(this.dom, this.prevAttrs, this.attrs);
      this.dom.classList.add("cm-line");
      this.prevAttrs = undefined;
    }

    super.sync(track);
    let last = this.dom.lastChild;

    while (last && ContentView.get(last) instanceof MarkView) last = last.lastChild;

    if (!last || !this.length || last.nodeName != "BR" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false && (!browser.ios || !this.children.some(ch => ch instanceof TextView))) {
      let hack = document.createElement("BR");
      hack.cmIgnore = true;
      this.dom.appendChild(hack);
    }
  }

  measureTextSize() {
    if (this.children.length == 0 || this.length > 20) return null;
    let totalWidth = 0;

    for (let child of this.children) {
      if (!(child instanceof TextView) || /[^ -~]/.test(child.text)) return null;
      let rects = clientRectsFor(child.dom);
      if (rects.length != 1) return null;
      totalWidth += rects[0].width;
    }

    return !totalWidth ? null : {
      lineHeight: this.dom.getBoundingClientRect().height,
      charWidth: totalWidth / this.length
    };
  }

  coordsAt(pos, side) {
    return coordsInChildren(this, pos, side);
  }

  become(_other) {
    return false;
  }

  get type() {
    return BlockType.Text;
  }

  static find(docView, pos) {
    for (let i = 0, off = 0; i < docView.children.length; i++) {
      let block = docView.children[i],
          end = off + block.length;

      if (end >= pos) {
        if (block instanceof LineView) return block;
        if (end > pos) break;
      }

      off = end + block.breakAfter;
    }

    return null;
  }

}

class BlockWidgetView extends ContentView {
  constructor(widget, length, type) {
    super();
    this.widget = widget;
    this.length = length;
    this.type = type;
    this.breakAfter = 0;
    this.prevWidget = null;
  }

  merge(from, to, source, _takeDeco, openStart, openEnd) {
    if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
    this.length = from + (source ? source.length : 0) + (this.length - to);
    return true;
  }

  domAtPos(pos) {
    return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
  }

  split(at) {
    let len = this.length - at;
    this.length = at;
    let end = new BlockWidgetView(this.widget, len, this.type);
    end.breakAfter = this.breakAfter;
    return end;
  }

  get children() {
    return noChildren;
  }

  sync() {
    if (!this.dom || !this.widget.updateDOM(this.dom)) {
      if (this.dom && this.prevWidget) this.prevWidget.destroy(this.dom);
      this.prevWidget = null;
      this.setDOM(this.widget.toDOM(this.editorView));
      this.dom.contentEditable = "false";
    }
  }

  get overrideDOMText() {
    return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : _state.Text.empty;
  }

  domBoundsAround() {
    return null;
  }

  become(other) {
    if (other instanceof BlockWidgetView && other.type == this.type && other.widget.constructor == this.widget.constructor) {
      if (!other.widget.eq(this.widget)) this.markDirty(true);
      if (this.dom && !this.prevWidget) this.prevWidget = this.widget;
      this.widget = other.widget;
      this.length = other.length;
      this.breakAfter = other.breakAfter;
      return true;
    }

    return false;
  }

  ignoreMutation() {
    return true;
  }

  ignoreEvent(event) {
    return this.widget.ignoreEvent(event);
  }

  destroy() {
    super.destroy();
    if (this.dom) this.widget.destroy(this.dom);
  }

}

class ContentBuilder {
  constructor(doc, pos, end, disallowBlockEffectsFor) {
    this.doc = doc;
    this.pos = pos;
    this.end = end;
    this.disallowBlockEffectsFor = disallowBlockEffectsFor;
    this.content = [];
    this.curLine = null;
    this.breakAtStart = 0;
    this.pendingBuffer = 0
    /* No */
    ; // Set to false directly after a widget that covers the position after it

    this.atCursorPos = true;
    this.openStart = -1;
    this.openEnd = -1;
    this.text = "";
    this.textOff = 0;
    this.cursor = doc.iter();
    this.skip = pos;
  }

  posCovered() {
    if (this.content.length == 0) return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
    let last = this.content[this.content.length - 1];
    return !last.breakAfter && !(last instanceof BlockWidgetView && last.type == BlockType.WidgetBefore);
  }

  getLine() {
    if (!this.curLine) {
      this.content.push(this.curLine = new LineView());
      this.atCursorPos = true;
    }

    return this.curLine;
  }

  flushBuffer(active) {
    if (this.pendingBuffer) {
      this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
      this.pendingBuffer = 0
      /* No */
      ;
    }
  }

  addBlockWidget(view) {
    this.flushBuffer([]);
    this.curLine = null;
    this.content.push(view);
  }

  finish(openEnd) {
    if (!openEnd) this.flushBuffer([]);else this.pendingBuffer = 0
    /* No */
    ;
    if (!this.posCovered()) this.getLine();
  }

  buildText(length, active, openStart) {
    while (length > 0) {
      if (this.textOff == this.text.length) {
        let {
          value,
          lineBreak,
          done
        } = this.cursor.next(this.skip);
        this.skip = 0;
        if (done) throw new Error("Ran out of text content when drawing inline views");

        if (lineBreak) {
          if (!this.posCovered()) this.getLine();
          if (this.content.length) this.content[this.content.length - 1].breakAfter = 1;else this.breakAtStart = 1;
          this.flushBuffer([]);
          this.curLine = null;
          length--;
          continue;
        } else {
          this.text = value;
          this.textOff = 0;
        }
      }

      let take = Math.min(this.text.length - this.textOff, length, 512
      /* Chunk */
      );
      this.flushBuffer(active.slice(0, openStart));
      this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
      this.atCursorPos = true;
      this.textOff += take;
      length -= take;
      openStart = 0;
    }
  }

  span(from, to, active, openStart) {
    this.buildText(to - from, active, openStart);
    this.pos = to;
    if (this.openStart < 0) this.openStart = openStart;
  }

  point(from, to, deco, active, openStart, index) {
    if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
      if (deco.block) throw new RangeError("Block decorations may not be specified via plugins");
      if (to > this.doc.lineAt(this.pos).to) throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
    }

    let len = to - from;

    if (deco instanceof PointDecoration) {
      if (deco.block) {
        let {
          type
        } = deco;
        if (type == BlockType.WidgetAfter && !this.posCovered()) this.getLine();
        this.addBlockWidget(new BlockWidgetView(deco.widget || new NullWidget("div"), len, type));
      } else {
        let view = WidgetView.create(deco.widget || new NullWidget("span"), len, deco.startSide);
        let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length && (from < to || deco.startSide > 0);
        let cursorAfter = !view.isEditable && (from < to || deco.startSide <= 0);
        let line = this.getLine();
        if (this.pendingBuffer == 2
        /* IfCursor */
        && !cursorBefore) this.pendingBuffer = 0
        /* No */
        ;
        this.flushBuffer(active);

        if (cursorBefore) {
          line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
          openStart = active.length + Math.max(0, openStart - active.length);
        }

        line.append(wrapMarks(view, active), openStart);
        this.atCursorPos = cursorAfter;
        this.pendingBuffer = !cursorAfter ? 0
        /* No */
        : from < to ? 1
        /* Yes */
        : 2
        /* IfCursor */
        ;
      }
    } else if (this.doc.lineAt(this.pos).from == this.pos) {
      // Line decoration
      this.getLine().addLineDeco(deco);
    }

    if (len) {
      // Advance the iterator past the replaced content
      if (this.textOff + len <= this.text.length) {
        this.textOff += len;
      } else {
        this.skip += len - (this.text.length - this.textOff);
        this.text = "";
        this.textOff = 0;
      }

      this.pos = to;
    }

    if (this.openStart < 0) this.openStart = openStart;
  }

  static build(text, from, to, decorations, dynamicDecorationMap) {
    let builder = new ContentBuilder(text, from, to, dynamicDecorationMap);
    builder.openEnd = _state.RangeSet.spans(decorations, from, to, builder);
    if (builder.openStart < 0) builder.openStart = builder.openEnd;
    builder.finish(builder.openEnd);
    return builder;
  }

}

function wrapMarks(view, active) {
  for (let mark of active) view = new MarkView(mark, [view], view.length);

  return view;
}

class NullWidget extends WidgetType {
  constructor(tag) {
    super();
    this.tag = tag;
  }

  eq(other) {
    return other.tag == this.tag;
  }

  toDOM() {
    return document.createElement(this.tag);
  }

  updateDOM(elt) {
    return elt.nodeName.toLowerCase() == this.tag;
  }

}

const clickAddsSelectionRange = /*@__PURE__*/_state.Facet.define();

const dragMovesSelection$1 = /*@__PURE__*/_state.Facet.define();

const mouseSelectionStyle = /*@__PURE__*/_state.Facet.define();

const exceptionSink = /*@__PURE__*/_state.Facet.define();

const updateListener = /*@__PURE__*/_state.Facet.define();

const inputHandler = /*@__PURE__*/_state.Facet.define();

const perLineTextDirection = /*@__PURE__*/_state.Facet.define({
  combine: values => values.some(x => x)
});

class ScrollTarget {
  constructor(range, y = "nearest", x = "nearest", yMargin = 5, xMargin = 5) {
    this.range = range;
    this.y = y;
    this.x = x;
    this.yMargin = yMargin;
    this.xMargin = xMargin;
  }

  map(changes) {
    return changes.empty ? this : new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin);
  }

}

const scrollIntoView = /*@__PURE__*/_state.StateEffect.define({
  map: (t, ch) => t.map(ch)
});
/**
Log or report an unhandled exception in client code. Should
probably only be used by extension code that allows client code to
provide functions, and calls those functions in a context where an
exception can't be propagated to calling code in a reasonable way
(for example when in an event handler).

Either calls a handler registered with
[`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
`window.onerror`, if defined, or `console.error` (in which case
it'll pass `context`, when given, as first argument).
*/


function logException(state, exception, context) {
  let handler = state.facet(exceptionSink);
  if (handler.length) handler[0](exception);else if (window.onerror) window.onerror(String(exception), context, undefined, undefined, exception);else if (context) console.error(context + ":", exception);else console.error(exception);
}

const editable = /*@__PURE__*/_state.Facet.define({
  combine: values => values.length ? values[0] : true
});

let nextPluginID = 0;

const viewPlugin = /*@__PURE__*/_state.Facet.define();
/**
View plugins associate stateful values with a view. They can
influence the way the content is drawn, and are notified of things
that happen in the view.
*/


class ViewPlugin {
  constructor(
  /**
  @internal
  */
  id,
  /**
  @internal
  */
  create,
  /**
  @internal
  */
  domEventHandlers, buildExtensions) {
    this.id = id;
    this.create = create;
    this.domEventHandlers = domEventHandlers;
    this.extension = buildExtensions(this);
  }
  /**
  Define a plugin from a constructor function that creates the
  plugin's value, given an editor view.
  */


  static define(create, spec) {
    const {
      eventHandlers,
      provide,
      decorations: deco
    } = spec || {};
    return new ViewPlugin(nextPluginID++, create, eventHandlers, plugin => {
      let ext = [viewPlugin.of(plugin)];
      if (deco) ext.push(decorations.of(view => {
        let pluginInst = view.plugin(plugin);
        return pluginInst ? deco(pluginInst) : Decoration.none;
      }));
      if (provide) ext.push(provide(plugin));
      return ext;
    });
  }
  /**
  Create a plugin for a class whose constructor takes a single
  editor view as argument.
  */


  static fromClass(cls, spec) {
    return ViewPlugin.define(view => new cls(view), spec);
  }

}

exports.ViewPlugin = ViewPlugin;

class PluginInstance {
  constructor(spec) {
    this.spec = spec; // When starting an update, all plugins have this field set to the
    // update object, indicating they need to be updated. When finished
    // updating, it is set to `false`. Retrieving a plugin that needs to
    // be updated with `view.plugin` forces an eager update.

    this.mustUpdate = null; // This is null when the plugin is initially created, but
    // initialized on the first update.

    this.value = null;
  }

  update(view) {
    if (!this.value) {
      if (this.spec) {
        try {
          this.value = this.spec.create(view);
        } catch (e) {
          logException(view.state, e, "CodeMirror plugin crashed");
          this.deactivate();
        }
      }
    } else if (this.mustUpdate) {
      let update = this.mustUpdate;
      this.mustUpdate = null;

      if (this.value.update) {
        try {
          this.value.update(update);
        } catch (e) {
          logException(update.state, e, "CodeMirror plugin crashed");
          if (this.value.destroy) try {
            this.value.destroy();
          } catch (_) {}
          this.deactivate();
        }
      }
    }

    return this;
  }

  destroy(view) {
    var _a;

    if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
      try {
        this.value.destroy();
      } catch (e) {
        logException(view.state, e, "CodeMirror plugin crashed");
      }
    }
  }

  deactivate() {
    this.spec = this.value = null;
  }

}

const editorAttributes = /*@__PURE__*/_state.Facet.define();

const contentAttributes = /*@__PURE__*/_state.Facet.define(); // Provide decorations


const decorations = /*@__PURE__*/_state.Facet.define();

const atomicRanges = /*@__PURE__*/_state.Facet.define();

const scrollMargins = /*@__PURE__*/_state.Facet.define();

const styleModule = /*@__PURE__*/_state.Facet.define();

class ChangedRange {
  constructor(fromA, toA, fromB, toB) {
    this.fromA = fromA;
    this.toA = toA;
    this.fromB = fromB;
    this.toB = toB;
  }

  join(other) {
    return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
  }

  addToSet(set) {
    let i = set.length,
        me = this;

    for (; i > 0; i--) {
      let range = set[i - 1];
      if (range.fromA > me.toA) continue;
      if (range.toA < me.fromA) break;
      me = me.join(range);
      set.splice(i - 1, 1);
    }

    set.splice(i, 0, me);
    return set;
  }

  static extendWithRanges(diff, ranges) {
    if (ranges.length == 0) return diff;
    let result = [];

    for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
      let next = dI == diff.length ? null : diff[dI],
          off = posA - posB;
      let end = next ? next.fromB : 1e9;

      while (rI < ranges.length && ranges[rI] < end) {
        let from = ranges[rI],
            to = ranges[rI + 1];
        let fromB = Math.max(posB, from),
            toB = Math.min(end, to);
        if (fromB <= toB) new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
        if (to > end) break;else rI += 2;
      }

      if (!next) return result;
      new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
      posA = next.toA;
      posB = next.toB;
    }
  }

}
/**
View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
class, which describe what happened, whenever the view is updated.
*/


class ViewUpdate {
  constructor(
  /**
  The editor view that the update is associated with.
  */
  view,
  /**
  The new editor state.
  */
  state,
  /**
  The transactions involved in the update. May be empty.
  */
  transactions) {
    this.view = view;
    this.state = state;
    this.transactions = transactions;
    /**
    @internal
    */

    this.flags = 0;
    this.startState = view.state;
    this.changes = _state.ChangeSet.empty(this.startState.doc.length);

    for (let tr of transactions) this.changes = this.changes.compose(tr.changes);

    let changedRanges = [];
    this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
    this.changedRanges = changedRanges;
    let focus = view.hasFocus;

    if (focus != view.inputState.notifiedFocused) {
      view.inputState.notifiedFocused = focus;
      this.flags |= 1
      /* Focus */
      ;
    }
  }
  /**
  @internal
  */


  static create(view, state, transactions) {
    return new ViewUpdate(view, state, transactions);
  }
  /**
  Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
  [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
  update.
  */


  get viewportChanged() {
    return (this.flags & 4
    /* Viewport */
    ) > 0;
  }
  /**
  Indicates whether the height of a block element in the editor
  changed in this update.
  */


  get heightChanged() {
    return (this.flags & 2
    /* Height */
    ) > 0;
  }
  /**
  Returns true when the document was modified or the size of the
  editor, or elements within the editor, changed.
  */


  get geometryChanged() {
    return this.docChanged || (this.flags & (8
    /* Geometry */
    | 2
    /* Height */
    )) > 0;
  }
  /**
  True when this update indicates a focus change.
  */


  get focusChanged() {
    return (this.flags & 1
    /* Focus */
    ) > 0;
  }
  /**
  Whether the document changed in this update.
  */


  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Whether the selection was explicitly set in this update.
  */


  get selectionSet() {
    return this.transactions.some(tr => tr.selection);
  }
  /**
  @internal
  */


  get empty() {
    return this.flags == 0 && this.transactions.length == 0;
  }

}
/**
Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
*/


exports.ViewUpdate = ViewUpdate;

var Direction = /*@__PURE__*/function (Direction) {
  // (These are chosen to match the base levels, in bidi algorithm
  // terms, of spans in that direction.)

  /**
  Left-to-right.
  */
  Direction[Direction["LTR"] = 0] = "LTR";
  /**
  Right-to-left.
  */

  Direction[Direction["RTL"] = 1] = "RTL";
  return Direction;
}(Direction || (exports.Direction = Direction = {}));

exports.Direction = Direction;
const LTR = Direction.LTR,
      RTL = Direction.RTL; // Decode a string with each type encoded as log2(type)

function dec(str) {
  let result = [];

  for (let i = 0; i < str.length; i++) result.push(1 << +str[i]);

  return result;
} // Character types for codepoints 0 to 0xf8


const LowTypes = /*@__PURE__*/dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008"); // Character types for codepoints 0x600 to 0x6f9

const ArabicTypes = /*@__PURE__*/dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
const Brackets = /*@__PURE__*/Object.create(null),
      BracketStack = []; // There's a lot more in
// https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
// which are left out to keep code size down.

for (let p of ["()", "[]", "{}"]) {
  let l = /*@__PURE__*/p.charCodeAt(0),
      r = /*@__PURE__*/p.charCodeAt(1);
  Brackets[l] = r;
  Brackets[r] = -l;
}

function charType(ch) {
  return ch <= 0xf7 ? LowTypes[ch] : 0x590 <= ch && ch <= 0x5f4 ? 2
  /* R */
  : 0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] : 0x6ee <= ch && ch <= 0x8ac ? 4
  /* AL */
  : 0x2000 <= ch && ch <= 0x200b ? 256
  /* NI */
  : ch == 0x200c ? 256
  /* NI */
  : 1
  /* L */
  ;
}

const BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
/**
Represents a contiguous range of text that has a single direction
(as in left-to-right or right-to-left).
*/

class BidiSpan {
  /**
  @internal
  */
  constructor(
  /**
  The start of the span (relative to the start of the line).
  */
  from,
  /**
  The end of the span.
  */
  to,
  /**
  The ["bidi
  level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
  of the span (in this context, 0 means
  left-to-right, 1 means right-to-left, 2 means left-to-right
  number inside right-to-left text).
  */
  level) {
    this.from = from;
    this.to = to;
    this.level = level;
  }
  /**
  The direction of this span.
  */


  get dir() {
    return this.level % 2 ? RTL : LTR;
  }
  /**
  @internal
  */


  side(end, dir) {
    return this.dir == dir == end ? this.to : this.from;
  }
  /**
  @internal
  */


  static find(order, index, level, assoc) {
    let maybe = -1;

    for (let i = 0; i < order.length; i++) {
      let span = order[i];

      if (span.from <= index && span.to >= index) {
        if (span.level == level) return i; // When multiple spans match, if assoc != 0, take the one that
        // covers that side, otherwise take the one with the minimum
        // level.

        if (maybe < 0 || (assoc != 0 ? assoc < 0 ? span.from < index : span.to > index : order[maybe].level > span.level)) maybe = i;
      }
    }

    if (maybe < 0) throw new RangeError("Index out of range");
    return maybe;
  }

} // Reused array of character types


exports.BidiSpan = BidiSpan;
const types = [];

function computeOrder(line, direction) {
  let len = line.length,
      outerType = direction == LTR ? 1
  /* L */
  : 2
  /* R */
  ,
      oppositeType = direction == LTR ? 2
  /* R */
  : 1
  /* L */
  ;
  if (!line || outerType == 1
  /* L */
  && !BidiRE.test(line)) return trivialOrder(len); // W1. Examine each non-spacing mark (NSM) in the level run, and
  // change the type of the NSM to the type of the previous
  // character. If the NSM is at the start of the level run, it will
  // get the type of sor.
  // W2. Search backwards from each instance of a European number
  // until the first strong type (R, L, AL, or sor) is found. If an
  // AL is found, change the type of the European number to Arabic
  // number.
  // W3. Change all ALs to R.
  // (Left after this: L, R, EN, AN, ET, CS, NI)

  for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
    let type = charType(line.charCodeAt(i));
    if (type == 512
    /* NSM */
    ) type = prev;else if (type == 8
    /* EN */
    && prevStrong == 4
    /* AL */
    ) type = 16
    /* AN */
    ;
    types[i] = type == 4
    /* AL */
    ? 2
    /* R */
    : type;
    if (type & 7
    /* Strong */
    ) prevStrong = type;
    prev = type;
  } // W5. A sequence of European terminators adjacent to European
  // numbers changes to all European numbers.
  // W6. Otherwise, separators and terminators change to Other
  // Neutral.
  // W7. Search backwards from each instance of a European number
  // until the first strong type (R, L, or sor) is found. If an L is
  // found, then change the type of the European number to L.
  // (Left after this: L, R, EN+AN, NI)


  for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
    let type = types[i];

    if (type == 128
    /* CS */
    ) {
      if (i < len - 1 && prev == types[i + 1] && prev & 24
      /* Num */
      ) type = types[i] = prev;else types[i] = 256
      /* NI */
      ;
    } else if (type == 64
    /* ET */
    ) {
      let end = i + 1;

      while (end < len && types[end] == 64
      /* ET */
      ) end++;

      let replace = i && prev == 8
      /* EN */
      || end < len && types[end] == 8
      /* EN */
      ? prevStrong == 1
      /* L */
      ? 1
      /* L */
      : 8
      /* EN */
      : 256
      /* NI */
      ;

      for (let j = i; j < end; j++) types[j] = replace;

      i = end - 1;
    } else if (type == 8
    /* EN */
    && prevStrong == 1
    /* L */
    ) {
      types[i] = 1
      /* L */
      ;
    }

    prev = type;
    if (type & 7
    /* Strong */
    ) prevStrong = type;
  } // N0. Process bracket pairs in an isolating run sequence
  // sequentially in the logical order of the text positions of the
  // opening paired brackets using the logic given below. Within this
  // scope, bidirectional types EN and AN are treated as R.


  for (let i = 0, sI = 0, context = 0, ch, br, type; i < len; i++) {
    // Keeps [startIndex, type, strongSeen] triples for each open
    // bracket on BracketStack.
    if (br = Brackets[ch = line.charCodeAt(i)]) {
      if (br < 0) {
        // Closing bracket
        for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
          if (BracketStack[sJ + 1] == -br) {
            let flags = BracketStack[sJ + 2];
            let type = flags & 2
            /* EmbedInside */
            ? outerType : !(flags & 4
            /* OppositeInside */
            ) ? 0 : flags & 1
            /* OppositeBefore */
            ? oppositeType : outerType;
            if (type) types[i] = types[BracketStack[sJ]] = type;
            sI = sJ;
            break;
          }
        }
      } else if (BracketStack.length == 189
      /* MaxDepth */
      ) {
        break;
      } else {
        BracketStack[sI++] = i;
        BracketStack[sI++] = ch;
        BracketStack[sI++] = context;
      }
    } else if ((type = types[i]) == 2
    /* R */
    || type == 1
    /* L */
    ) {
      let embed = type == outerType;
      context = embed ? 0 : 1
      /* OppositeBefore */
      ;

      for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
        let cur = BracketStack[sJ + 2];
        if (cur & 2
        /* EmbedInside */
        ) break;

        if (embed) {
          BracketStack[sJ + 2] |= 2
          /* EmbedInside */
          ;
        } else {
          if (cur & 4
          /* OppositeInside */
          ) break;
          BracketStack[sJ + 2] |= 4
          /* OppositeInside */
          ;
        }
      }
    }
  } // N1. A sequence of neutrals takes the direction of the
  // surrounding strong text if the text on both sides has the same
  // direction. European and Arabic numbers act as if they were R in
  // terms of their influence on neutrals. Start-of-level-run (sor)
  // and end-of-level-run (eor) are used at level run boundaries.
  // N2. Any remaining neutrals take the embedding direction.
  // (Left after this: L, R, EN+AN)


  for (let i = 0; i < len; i++) {
    if (types[i] == 256
    /* NI */
    ) {
      let end = i + 1;

      while (end < len && types[end] == 256
      /* NI */
      ) end++;

      let beforeL = (i ? types[i - 1] : outerType) == 1
      /* L */
      ;
      let afterL = (end < len ? types[end] : outerType) == 1
      /* L */
      ;
      let replace = beforeL == afterL ? beforeL ? 1
      /* L */
      : 2
      /* R */
      : outerType;

      for (let j = i; j < end; j++) types[j] = replace;

      i = end - 1;
    }
  } // Here we depart from the documented algorithm, in order to avoid
  // building up an actual levels array. Since there are only three
  // levels (0, 1, 2) in an implementation that doesn't take
  // explicit embedding into account, we can build up the order on
  // the fly, without following the level-based algorithm.


  let order = [];

  if (outerType == 1
  /* L */
  ) {
    for (let i = 0; i < len;) {
      let start = i,
          rtl = types[i++] != 1
      /* L */
      ;

      while (i < len && rtl == (types[i] != 1
      /* L */
      )) i++;

      if (rtl) {
        for (let j = i; j > start;) {
          let end = j,
              l = types[--j] != 2
          /* R */
          ;

          while (j > start && l == (types[j - 1] != 2
          /* R */
          )) j--;

          order.push(new BidiSpan(j, end, l ? 2 : 1));
        }
      } else {
        order.push(new BidiSpan(start, i, 0));
      }
    }
  } else {
    for (let i = 0; i < len;) {
      let start = i,
          rtl = types[i++] == 2
      /* R */
      ;

      while (i < len && rtl == (types[i] == 2
      /* R */
      )) i++;

      order.push(new BidiSpan(start, i, rtl ? 1 : 2));
    }
  }

  return order;
}

function trivialOrder(length) {
  return [new BidiSpan(0, length, 0)];
}

let movedOver = "";

function moveVisually(line, order, dir, start, forward) {
  var _a;

  let startIndex = start.head - line.from,
      spanI = -1;

  if (startIndex == 0) {
    if (!forward || !line.length) return null;

    if (order[0].level != dir) {
      startIndex = order[0].side(false, dir);
      spanI = 0;
    }
  } else if (startIndex == line.length) {
    if (forward) return null;
    let last = order[order.length - 1];

    if (last.level != dir) {
      startIndex = last.side(true, dir);
      spanI = order.length - 1;
    }
  }

  if (spanI < 0) spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
  let span = order[spanI]; // End of span. (But not end of line--that was checked for above.)

  if (startIndex == span.side(forward, dir)) {
    span = order[spanI += forward ? 1 : -1];
    startIndex = span.side(!forward, dir);
  }

  let indexForward = forward == (span.dir == dir);
  let nextIndex = (0, _state.findClusterBreak)(line.text, startIndex, indexForward);
  movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
  if (nextIndex != span.side(forward, dir)) return _state.EditorSelection.cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);
  let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
  if (!nextSpan && span.level != dir) return _state.EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);
  if (nextSpan && nextSpan.level < span.level) return _state.EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, forward ? 1 : -1, nextSpan.level);
  return _state.EditorSelection.cursor(nextIndex + line.from, forward ? -1 : 1, span.level);
}

const LineBreakPlaceholder = "\uffff";

class DOMReader {
  constructor(points, state) {
    this.points = points;
    this.text = "";
    this.lineSeparator = state.facet(_state.EditorState.lineSeparator);
  }

  append(text) {
    this.text += text;
  }

  lineBreak() {
    this.text += LineBreakPlaceholder;
  }

  readRange(start, end) {
    if (!start) return this;
    let parent = start.parentNode;

    for (let cur = start;;) {
      this.findPointBefore(parent, cur);
      this.readNode(cur);
      let next = cur.nextSibling;
      if (next == end) break;
      let view = ContentView.get(cur),
          nextView = ContentView.get(next);
      if (view && nextView ? view.breakAfter : (view ? view.breakAfter : isBlockElement(cur)) || isBlockElement(next) && (cur.nodeName != "BR" || cur.cmIgnore)) this.lineBreak();
      cur = next;
    }

    this.findPointBefore(parent, end);
    return this;
  }

  readTextNode(node) {
    let text = node.nodeValue;

    for (let point of this.points) if (point.node == node) point.pos = this.text.length + Math.min(point.offset, text.length);

    for (let off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g;;) {
      let nextBreak = -1,
          breakSize = 1,
          m;

      if (this.lineSeparator) {
        nextBreak = text.indexOf(this.lineSeparator, off);
        breakSize = this.lineSeparator.length;
      } else if (m = re.exec(text)) {
        nextBreak = m.index;
        breakSize = m[0].length;
      }

      this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
      if (nextBreak < 0) break;
      this.lineBreak();
      if (breakSize > 1) for (let point of this.points) if (point.node == node && point.pos > this.text.length) point.pos -= breakSize - 1;
      off = nextBreak + breakSize;
    }
  }

  readNode(node) {
    if (node.cmIgnore) return;
    let view = ContentView.get(node);
    let fromView = view && view.overrideDOMText;

    if (fromView != null) {
      this.findPointInside(node, fromView.length);

      for (let i = fromView.iter(); !i.next().done;) {
        if (i.lineBreak) this.lineBreak();else this.append(i.value);
      }
    } else if (node.nodeType == 3) {
      this.readTextNode(node);
    } else if (node.nodeName == "BR") {
      if (node.nextSibling) this.lineBreak();
    } else if (node.nodeType == 1) {
      this.readRange(node.firstChild, null);
    }
  }

  findPointBefore(node, next) {
    for (let point of this.points) if (point.node == node && node.childNodes[point.offset] == next) point.pos = this.text.length;
  }

  findPointInside(node, maxLen) {
    for (let point of this.points) if (node.nodeType == 3 ? point.node == node : node.contains(point.node)) point.pos = this.text.length + Math.min(maxLen, point.offset);
  }

}

function isBlockElement(node) {
  return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
}

class DOMPoint {
  constructor(node, offset) {
    this.node = node;
    this.offset = offset;
    this.pos = -1;
  }

}

class DocView extends ContentView {
  constructor(view) {
    super();
    this.view = view;
    this.compositionDeco = Decoration.none;
    this.decorations = [];
    this.dynamicDecorationMap = []; // Track a minimum width for the editor. When measuring sizes in
    // measureVisibleLineHeights, this is updated to point at the width
    // of a given element and its extent in the document. When a change
    // happens in that range, these are reset. That way, once we've seen
    // a line/element of a given length, we keep the editor wide enough
    // to fit at least that element, until it is changed, at which point
    // we forget it again.

    this.minWidth = 0;
    this.minWidthFrom = 0;
    this.minWidthTo = 0; // Track whether the DOM selection was set in a lossy way, so that
    // we don't mess it up when reading it back it

    this.impreciseAnchor = null;
    this.impreciseHead = null;
    this.forceSelection = false; // Used by the resize observer to ignore resizes that we caused
    // ourselves

    this.lastUpdate = Date.now();
    this.setDOM(view.contentDOM);
    this.children = [new LineView()];
    this.children[0].setParent(this);
    this.updateDeco();
    this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0);
  }

  get editorView() {
    return this.view;
  }

  get length() {
    return this.view.state.doc.length;
  } // Update the document view to a given state. scrollIntoView can be
  // used as a hint to compute a new viewport that includes that
  // position, if we know the editor is going to scroll that position
  // into view.


  update(update) {
    let changedRanges = update.changedRanges;

    if (this.minWidth > 0 && changedRanges.length) {
      if (!changedRanges.every(({
        fromA,
        toA
      }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
        this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
      } else {
        this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
        this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
      }
    }

    if (this.view.inputState.composing < 0) this.compositionDeco = Decoration.none;else if (update.transactions.length || this.dirty) this.compositionDeco = computeCompositionDeco(this.view, update.changes); // When the DOM nodes around the selection are moved to another
    // parent, Chrome sometimes reports a different selection through
    // getSelection than the one that it actually shows to the user.
    // This forces a selection update when lines are joined to work
    // around that. Issue #54

    if ((browser.ie || browser.chrome) && !this.compositionDeco.size && update && update.state.doc.lines != update.startState.doc.lines) this.forceSelection = true;
    let prevDeco = this.decorations,
        deco = this.updateDeco();
    let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
    changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);

    if (this.dirty == 0
    /* Not */
    && changedRanges.length == 0) {
      return false;
    } else {
      this.updateInner(changedRanges, update.startState.doc.length);
      if (update.transactions.length) this.lastUpdate = Date.now();
      return true;
    }
  } // Used by update and the constructor do perform the actual DOM
  // update


  updateInner(changes, oldLength) {
    this.view.viewState.mustMeasureContent = true;
    this.updateChildren(changes, oldLength);
    let {
      observer
    } = this.view;
    observer.ignore(() => {
      // Lock the height during redrawing, since Chrome sometimes
      // messes with the scroll position during DOM mutation (though
      // no relayout is triggered and I cannot imagine how it can
      // recompute the scroll position without a layout)
      this.dom.style.height = this.view.viewState.contentHeight + "px";
      this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : ""; // Chrome will sometimes, when DOM mutations occur directly
      // around the selection, get confused and report a different
      // selection from the one it displays (issue #218). This tries
      // to detect that situation.

      let track = browser.chrome || browser.ios ? {
        node: observer.selectionRange.focusNode,
        written: false
      } : undefined;
      this.sync(track);
      this.dirty = 0
      /* Not */
      ;
      if (track && (track.written || observer.selectionRange.focusNode != track.node)) this.forceSelection = true;
      this.dom.style.height = "";
    });
    let gaps = [];
    if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length) for (let child of this.children) if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget) gaps.push(child.dom);
    observer.updateGaps(gaps);
  }

  updateChildren(changes, oldLength) {
    let cursor = this.childCursor(oldLength);

    for (let i = changes.length - 1;; i--) {
      let next = i >= 0 ? changes[i] : null;
      if (!next) break;
      let {
        fromA,
        toA,
        fromB,
        toB
      } = next;
      let {
        content,
        breakAtStart,
        openStart,
        openEnd
      } = ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap);
      let {
        i: toI,
        off: toOff
      } = cursor.findPos(toA, 1);
      let {
        i: fromI,
        off: fromOff
      } = cursor.findPos(fromA, -1);
      replaceRange(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
    }
  } // Sync the DOM selection to this.state.selection


  updateSelection(mustRead = false, fromPointer = false) {
    if (mustRead || !this.view.observer.selectionRange.focusNode) this.view.observer.readSelectionRange();
    if (!(fromPointer || this.mayControlSelection()) || browser.ios && this.view.inputState.rapidCompositionStart) return;
    let force = this.forceSelection;
    this.forceSelection = false;
    let main = this.view.state.selection.main; // FIXME need to handle the case where the selection falls inside a block range

    let anchor = this.domAtPos(main.anchor);
    let head = main.empty ? anchor : this.domAtPos(main.head); // Always reset on Firefox when next to an uneditable node to
    // avoid invisible cursor bugs (#111)

    if (browser.gecko && main.empty && betweenUneditable(anchor)) {
      let dummy = document.createTextNode("");
      this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
      anchor = head = new DOMPos(dummy, 0);
      force = true;
    }

    let domSel = this.view.observer.selectionRange; // If the selection is already here, or in an equivalent position, don't touch it

    if (force || !domSel.focusNode || !isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) || !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {
      this.view.observer.ignore(() => {
        // Chrome Android will hide the virtual keyboard when tapping
        // inside an uneditable node, and not bring it back when we
        // move the cursor to its proper position. This tries to
        // restore the keyboard by cycling focus.
        if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) && inUneditable(domSel.focusNode, this.dom)) {
          this.dom.blur();
          this.dom.focus({
            preventScroll: true
          });
        }

        let rawSel = getSelection(this.view.root);
        if (!rawSel) ;else if (main.empty) {
          // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
          if (browser.gecko) {
            let nextTo = nextToUneditable(anchor.node, anchor.offset);

            if (nextTo && nextTo != (1
            /* Before */
            | 2
            /* After */
            )) {
              let text = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1
              /* Before */
              ? 1 : -1);
              if (text) anchor = new DOMPos(text, nextTo == 1
              /* Before */
              ? 0 : text.nodeValue.length);
            }
          }

          rawSel.collapse(anchor.node, anchor.offset);
          if (main.bidiLevel != null && domSel.cursorBidiLevel != null) domSel.cursorBidiLevel = main.bidiLevel;
        } else if (rawSel.extend) {
          // Selection.extend can be used to create an 'inverted' selection
          // (one where the focus is before the anchor), but not all
          // browsers support it yet.
          rawSel.collapse(anchor.node, anchor.offset);
          rawSel.extend(head.node, head.offset);
        } else {
          // Primitive (IE) way
          let range = document.createRange();
          if (main.anchor > main.head) [anchor, head] = [head, anchor];
          range.setEnd(head.node, head.offset);
          range.setStart(anchor.node, anchor.offset);
          rawSel.removeAllRanges();
          rawSel.addRange(range);
        }
      });
      this.view.observer.setSelectionRange(anchor, head);
    }

    this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
    this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
  }

  enforceCursorAssoc() {
    if (this.compositionDeco.size) return;
    let cursor = this.view.state.selection.main;
    let sel = getSelection(this.view.root);
    if (!sel || !cursor.empty || !cursor.assoc || !sel.modify) return;
    let line = LineView.find(this, cursor.head);
    if (!line) return;
    let lineStart = line.posAtStart;
    if (cursor.head == lineStart || cursor.head == lineStart + line.length) return;
    let before = this.coordsAt(cursor.head, -1),
        after = this.coordsAt(cursor.head, 1);
    if (!before || !after || before.bottom > after.top) return;
    let dom = this.domAtPos(cursor.head + cursor.assoc);
    sel.collapse(dom.node, dom.offset);
    sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
  }

  mayControlSelection() {
    let active = this.view.root.activeElement;
    return active == this.dom || hasSelection(this.dom, this.view.observer.selectionRange) && !(active && this.dom.contains(active));
  }

  nearest(dom) {
    for (let cur = dom; cur;) {
      let domView = ContentView.get(cur);
      if (domView && domView.rootView == this) return domView;
      cur = cur.parentNode;
    }

    return null;
  }

  posFromDOM(node, offset) {
    let view = this.nearest(node);
    if (!view) throw new RangeError("Trying to find position for a DOM position outside of the document");
    return view.localPosFromDOM(node, offset) + view.posAtStart;
  }

  domAtPos(pos) {
    let {
      i,
      off
    } = this.childCursor().findPos(pos, -1);

    for (; i < this.children.length - 1;) {
      let child = this.children[i];
      if (off < child.length || child instanceof LineView) break;
      i++;
      off = 0;
    }

    return this.children[i].domAtPos(off);
  }

  coordsAt(pos, side) {
    for (let off = this.length, i = this.children.length - 1;; i--) {
      let child = this.children[i],
          start = off - child.breakAfter - child.length;
      if (pos > start || pos == start && child.type != BlockType.WidgetBefore && child.type != BlockType.WidgetAfter && (!i || side == 2 || this.children[i - 1].breakAfter || this.children[i - 1].type == BlockType.WidgetBefore && side > -2)) return child.coordsAt(pos - start, side);
      off = start;
    }
  }

  measureVisibleLineHeights(viewport) {
    let result = [],
        {
      from,
      to
    } = viewport;
    let contentWidth = this.view.contentDOM.clientWidth;
    let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
    let widest = -1,
        ltr = this.view.textDirection == Direction.LTR;

    for (let pos = 0, i = 0; i < this.children.length; i++) {
      let child = this.children[i],
          end = pos + child.length;
      if (end > to) break;

      if (pos >= from) {
        let childRect = child.dom.getBoundingClientRect();
        result.push(childRect.height);

        if (isWider) {
          let last = child.dom.lastChild;
          let rects = last ? clientRectsFor(last) : [];

          if (rects.length) {
            let rect = rects[rects.length - 1];
            let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;

            if (width > widest) {
              widest = width;
              this.minWidth = contentWidth;
              this.minWidthFrom = pos;
              this.minWidthTo = end;
            }
          }
        }
      }

      pos = end + child.breakAfter;
    }

    return result;
  }

  textDirectionAt(pos) {
    let {
      i
    } = this.childPos(pos, 1);
    return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
  }

  measureTextSize() {
    for (let child of this.children) {
      if (child instanceof LineView) {
        let measure = child.measureTextSize();
        if (measure) return measure;
      }
    } // If no workable line exists, force a layout of a measurable element


    let dummy = document.createElement("div"),
        lineHeight,
        charWidth;
    dummy.className = "cm-line";
    dummy.style.width = "99999px";
    dummy.textContent = "abc def ghi jkl mno pqr stu";
    this.view.observer.ignore(() => {
      this.dom.appendChild(dummy);
      let rect = clientRectsFor(dummy.firstChild)[0];
      lineHeight = dummy.getBoundingClientRect().height;
      charWidth = rect ? rect.width / 27 : 7;
      dummy.remove();
    });
    return {
      lineHeight,
      charWidth
    };
  }

  childCursor(pos = this.length) {
    // Move back to start of last element when possible, so that
    // `ChildCursor.findPos` doesn't have to deal with the edge case
    // of being after the last element.
    let i = this.children.length;
    if (i) pos -= this.children[--i].length;
    return new ChildCursor(this.children, pos, i);
  }

  computeBlockGapDeco() {
    let deco = [],
        vs = this.view.viewState;

    for (let pos = 0, i = 0;; i++) {
      let next = i == vs.viewports.length ? null : vs.viewports[i];
      let end = next ? next.from - 1 : this.length;

      if (end > pos) {
        let height = vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top;
        deco.push(Decoration.replace({
          widget: new BlockGapWidget(height),
          block: true,
          inclusive: true,
          isBlockGap: true
        }).range(pos, end));
      }

      if (!next) break;
      pos = next.to + 1;
    }

    return Decoration.set(deco);
  }

  updateDeco() {
    let allDeco = this.view.state.facet(decorations).map((d, i) => {
      let dynamic = this.dynamicDecorationMap[i] = typeof d == "function";
      return dynamic ? d(this.view) : d;
    });

    for (let i = allDeco.length; i < allDeco.length + 3; i++) this.dynamicDecorationMap[i] = false;

    return this.decorations = [...allDeco, this.compositionDeco, this.computeBlockGapDeco(), this.view.viewState.lineGapDeco];
  }

  scrollIntoView(target) {
    let {
      range
    } = target;
    let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1),
        other;
    if (!rect) return;
    if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1))) rect = {
      left: Math.min(rect.left, other.left),
      top: Math.min(rect.top, other.top),
      right: Math.max(rect.right, other.right),
      bottom: Math.max(rect.bottom, other.bottom)
    };
    let mLeft = 0,
        mRight = 0,
        mTop = 0,
        mBottom = 0;

    for (let margins of this.view.state.facet(scrollMargins).map(f => f(this.view))) if (margins) {
      let {
        left,
        right,
        top,
        bottom
      } = margins;
      if (left != null) mLeft = Math.max(mLeft, left);
      if (right != null) mRight = Math.max(mRight, right);
      if (top != null) mTop = Math.max(mTop, top);
      if (bottom != null) mBottom = Math.max(mBottom, bottom);
    }

    let targetRect = {
      left: rect.left - mLeft,
      top: rect.top - mTop,
      right: rect.right + mRight,
      bottom: rect.bottom + mBottom
    };
    scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, target.xMargin, target.yMargin, this.view.textDirection == Direction.LTR);
  }

}

function betweenUneditable(pos) {
  return pos.node.nodeType == 1 && pos.node.firstChild && (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") && (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
}

class BlockGapWidget extends WidgetType {
  constructor(height) {
    super();
    this.height = height;
  }

  toDOM() {
    let elt = document.createElement("div");
    this.updateDOM(elt);
    return elt;
  }

  eq(other) {
    return other.height == this.height;
  }

  updateDOM(elt) {
    elt.style.height = this.height + "px";
    return true;
  }

  get estimatedHeight() {
    return this.height;
  }

}

function compositionSurroundingNode(view) {
  let sel = view.observer.selectionRange;
  let textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);
  if (!textNode) return null;
  let cView = view.docView.nearest(textNode);
  if (!cView) return null;

  if (cView instanceof LineView) {
    let topNode = textNode;

    while (topNode.parentNode != cView.dom) topNode = topNode.parentNode;

    let prev = topNode.previousSibling;

    while (prev && !ContentView.get(prev)) prev = prev.previousSibling;

    let pos = prev ? ContentView.get(prev).posAtEnd : cView.posAtStart;
    return {
      from: pos,
      to: pos,
      node: topNode,
      text: textNode
    };
  } else {
    for (;;) {
      let {
        parent
      } = cView;
      if (!parent) return null;
      if (parent instanceof LineView) break;
      cView = parent;
    }

    let from = cView.posAtStart;
    return {
      from,
      to: from + cView.length,
      node: cView.dom,
      text: textNode
    };
  }
}

function computeCompositionDeco(view, changes) {
  let surrounding = compositionSurroundingNode(view);
  if (!surrounding) return Decoration.none;
  let {
    from,
    to,
    node,
    text: textNode
  } = surrounding;
  let newFrom = changes.mapPos(from, 1),
      newTo = Math.max(newFrom, changes.mapPos(to, -1));
  let {
    state
  } = view,
      text = node.nodeType == 3 ? node.nodeValue : new DOMReader([], state).readRange(node.firstChild, null).text;

  if (newTo - newFrom < text.length) {
    if (state.doc.sliceString(newFrom, Math.min(state.doc.length, newFrom + text.length), LineBreakPlaceholder) == text) newTo = newFrom + text.length;else if (state.doc.sliceString(Math.max(0, newTo - text.length), newTo, LineBreakPlaceholder) == text) newFrom = newTo - text.length;else return Decoration.none;
  } else if (state.doc.sliceString(newFrom, newTo, LineBreakPlaceholder) != text) {
    return Decoration.none;
  }

  let topView = ContentView.get(node);
  if (topView instanceof CompositionView) topView = topView.widget.topView;else if (topView) topView.parent = null;
  return Decoration.set(Decoration.replace({
    widget: new CompositionWidget(node, textNode, topView),
    inclusive: true
  }).range(newFrom, newTo));
}

class CompositionWidget extends WidgetType {
  constructor(top, text, topView) {
    super();
    this.top = top;
    this.text = text;
    this.topView = topView;
  }

  eq(other) {
    return this.top == other.top && this.text == other.text;
  }

  toDOM() {
    return this.top;
  }

  ignoreEvent() {
    return false;
  }

  get customView() {
    return CompositionView;
  }

}

function nearbyTextNode(node, offset, side) {
  for (;;) {
    if (node.nodeType == 3) return node;

    if (node.nodeType == 1 && offset > 0 && side <= 0) {
      node = node.childNodes[offset - 1];
      offset = maxOffset(node);
    } else if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {
      node = node.childNodes[offset];
      offset = 0;
    } else {
      return null;
    }
  }
}

function nextToUneditable(node, offset) {
  if (node.nodeType != 1) return 0;
  return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1
  /* Before */
  : 0) | (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2
  /* After */
  : 0);
}

class DecorationComparator$1 {
  constructor() {
    this.changes = [];
  }

  compareRange(from, to) {
    addRange(from, to, this.changes);
  }

  comparePoint(from, to) {
    addRange(from, to, this.changes);
  }

}

function findChangedDeco(a, b, diff) {
  let comp = new DecorationComparator$1();

  _state.RangeSet.compare(a, b, diff, comp);

  return comp.changes;
}

function inUneditable(node, inside) {
  for (let cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode) {
    if (cur.nodeType == 1 && cur.contentEditable == 'false') {
      return true;
    }
  }

  return false;
}

function groupAt(state, pos, bias = 1) {
  let categorize = state.charCategorizer(pos);
  let line = state.doc.lineAt(pos),
      linePos = pos - line.from;
  if (line.length == 0) return _state.EditorSelection.cursor(pos);
  if (linePos == 0) bias = 1;else if (linePos == line.length) bias = -1;
  let from = linePos,
      to = linePos;
  if (bias < 0) from = (0, _state.findClusterBreak)(line.text, linePos, false);else to = (0, _state.findClusterBreak)(line.text, linePos);
  let cat = categorize(line.text.slice(from, to));

  while (from > 0) {
    let prev = (0, _state.findClusterBreak)(line.text, from, false);
    if (categorize(line.text.slice(prev, from)) != cat) break;
    from = prev;
  }

  while (to < line.length) {
    let next = (0, _state.findClusterBreak)(line.text, to);
    if (categorize(line.text.slice(to, next)) != cat) break;
    to = next;
  }

  return _state.EditorSelection.range(from + line.from, to + line.from);
} // Search the DOM for the {node, offset} position closest to the given
// coordinates. Very inefficient and crude, but can usually be avoided
// by calling caret(Position|Range)FromPoint instead.


function getdx(x, rect) {
  return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
}

function getdy(y, rect) {
  return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
}

function yOverlap(a, b) {
  return a.top < b.bottom - 1 && a.bottom > b.top + 1;
}

function upTop(rect, top) {
  return top < rect.top ? {
    top,
    left: rect.left,
    right: rect.right,
    bottom: rect.bottom
  } : rect;
}

function upBot(rect, bottom) {
  return bottom > rect.bottom ? {
    top: rect.top,
    left: rect.left,
    right: rect.right,
    bottom
  } : rect;
}

function domPosAtCoords(parent, x, y) {
  let closest,
      closestRect,
      closestX,
      closestY,
      closestOverlap = false;
  let above, below, aboveRect, belowRect;

  for (let child = parent.firstChild; child; child = child.nextSibling) {
    let rects = clientRectsFor(child);

    for (let i = 0; i < rects.length; i++) {
      let rect = rects[i];
      if (closestRect && yOverlap(closestRect, rect)) rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
      let dx = getdx(x, rect),
          dy = getdy(y, rect);
      if (dx == 0 && dy == 0) return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);

      if (!closest || closestY > dy || closestY == dy && closestX > dx) {
        closest = child;
        closestRect = rect;
        closestX = dx;
        closestY = dy;
        closestOverlap = !dx || (dx > 0 ? i < rects.length - 1 : i > 0);
      }

      if (dx == 0) {
        if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
          above = child;
          aboveRect = rect;
        } else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
          below = child;
          belowRect = rect;
        }
      } else if (aboveRect && yOverlap(aboveRect, rect)) {
        aboveRect = upBot(aboveRect, rect.bottom);
      } else if (belowRect && yOverlap(belowRect, rect)) {
        belowRect = upTop(belowRect, rect.top);
      }
    }
  }

  if (aboveRect && aboveRect.bottom >= y) {
    closest = above;
    closestRect = aboveRect;
  } else if (belowRect && belowRect.top <= y) {
    closest = below;
    closestRect = belowRect;
  }

  if (!closest) return {
    node: parent,
    offset: 0
  };
  let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
  if (closest.nodeType == 3) return domPosInText(closest, clipX, y);
  if (closestOverlap && closest.contentEditable != "false") return domPosAtCoords(closest, clipX, y);
  let offset = Array.prototype.indexOf.call(parent.childNodes, closest) + (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
  return {
    node: parent,
    offset
  };
}

function domPosInText(node, x, y) {
  let len = node.nodeValue.length;
  let closestOffset = -1,
      closestDY = 1e9,
      generalSide = 0;

  for (let i = 0; i < len; i++) {
    let rects = textRange(node, i, i + 1).getClientRects();

    for (let j = 0; j < rects.length; j++) {
      let rect = rects[j];
      if (rect.top == rect.bottom) continue;
      if (!generalSide) generalSide = x - rect.left;
      let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;

      if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
        let right = x >= (rect.left + rect.right) / 2,
            after = right;

        if (browser.chrome || browser.gecko) {
          // Check for RTL on browsers that support getting client
          // rects for empty ranges.
          let rectBefore = textRange(node, i).getBoundingClientRect();
          if (rectBefore.left == rect.right) after = !right;
        }

        if (dy <= 0) return {
          node,
          offset: i + (after ? 1 : 0)
        };
        closestOffset = i + (after ? 1 : 0);
        closestDY = dy;
      }
    }
  }

  return {
    node,
    offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0
  };
}

function posAtCoords(view, {
  x,
  y
}, precise, bias = -1) {
  var _a;

  let content = view.contentDOM.getBoundingClientRect(),
      docTop = content.top + view.viewState.paddingTop;
  let block,
      {
    docHeight
  } = view.viewState;
  let yOffset = y - docTop;
  if (yOffset < 0) return 0;
  if (yOffset > docHeight) return view.state.doc.length; // Scan for a text block near the queried y position

  for (let halfLine = view.defaultLineHeight / 2, bounced = false;;) {
    block = view.elementAtHeight(yOffset);
    if (block.type == BlockType.Text) break;

    for (;;) {
      // Move the y position out of this block
      yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
      if (yOffset >= 0 && yOffset <= docHeight) break; // If the document consists entirely of replaced widgets, we
      // won't find a text block, so return 0

      if (bounced) return precise ? null : 0;
      bounced = true;
      bias = -bias;
    }
  }

  y = docTop + yOffset;
  let lineStart = block.from; // If this is outside of the rendered viewport, we can't determine a position

  if (lineStart < view.viewport.from) return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
  if (lineStart > view.viewport.to) return view.viewport.to == view.state.doc.length ? view.state.doc.length : precise ? null : posAtCoordsImprecise(view, content, block, x, y); // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not

  let doc = view.dom.ownerDocument;
  let root = view.root.elementFromPoint ? view.root : doc;
  let element = root.elementFromPoint(x, y);
  if (element && !view.contentDOM.contains(element)) element = null; // If the element is unexpected, clip x at the sides of the content area and try again

  if (!element) {
    x = Math.max(content.left + 1, Math.min(content.right - 1, x));
    element = root.elementFromPoint(x, y);
    if (element && !view.contentDOM.contains(element)) element = null;
  } // There's visible editor content under the point, so we can try
  // using caret(Position|Range)FromPoint as a shortcut


  let node,
      offset = -1;

  if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {
    if (doc.caretPositionFromPoint) {
      let pos = doc.caretPositionFromPoint(x, y);
      if (pos) ({
        offsetNode: node,
        offset
      } = pos);
    } else if (doc.caretRangeFromPoint) {
      let range = doc.caretRangeFromPoint(x, y);

      if (range) {
        ({
          startContainer: node,
          startOffset: offset
        } = range);
        if (!view.contentDOM.contains(node) || browser.safari && isSuspiciousSafariCaretResult(node, offset, x) || browser.chrome && isSuspiciousChromeCaretResult(node, offset, x)) node = undefined;
      }
    }
  } // No luck, do our own (potentially expensive) search


  if (!node || !view.docView.dom.contains(node)) {
    let line = LineView.find(view.docView, lineStart);
    if (!line) return yOffset > block.top + block.height / 2 ? block.to : block.from;
    ({
      node,
      offset
    } = domPosAtCoords(line.dom, x, y));
  }

  return view.docView.posFromDOM(node, offset);
}

function posAtCoordsImprecise(view, contentRect, block, x, y) {
  let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);

  if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
    let line = Math.floor((y - block.top) / view.defaultLineHeight);
    into += line * view.viewState.heightOracle.lineLength;
  }

  let content = view.state.sliceDoc(block.from, block.to);
  return block.from + (0, _state.findColumn)(content, into, view.state.tabSize);
} // In case of a high line height, Safari's caretRangeFromPoint treats
// the space between lines as belonging to the last character of the
// line before. This is used to detect such a result so that it can be
// ignored (issue #401).


function isSuspiciousSafariCaretResult(node, offset, x) {
  let len;
  if (node.nodeType != 3 || offset != (len = node.nodeValue.length)) return false;

  for (let next = node.nextSibling; next; next = next.nextSibling) if (next.nodeType != 1 || next.nodeName != "BR") return false;

  return textRange(node, len - 1, len).getBoundingClientRect().left > x;
} // Chrome will move positions between lines to the start of the next line


function isSuspiciousChromeCaretResult(node, offset, x) {
  if (offset != 0) return false;

  for (let cur = node;;) {
    let parent = cur.parentNode;
    if (!parent || parent.nodeType != 1 || parent.firstChild != cur) return false;
    if (parent.classList.contains("cm-line")) break;
    cur = parent;
  }

  let rect = node.nodeType == 1 ? node.getBoundingClientRect() : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
  return x - rect.left > 5;
}

function moveToLineBoundary(view, start, forward, includeWrap) {
  let line = view.state.doc.lineAt(start.head);
  let coords = !includeWrap || !view.lineWrapping ? null : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);

  if (coords) {
    let editorRect = view.dom.getBoundingClientRect();
    let direction = view.textDirectionAt(line.from);
    let pos = view.posAtCoords({
      x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
      y: (coords.top + coords.bottom) / 2
    });
    if (pos != null) return _state.EditorSelection.cursor(pos, forward ? -1 : 1);
  }

  let lineView = LineView.find(view.docView, start.head);
  let end = lineView ? forward ? lineView.posAtEnd : lineView.posAtStart : forward ? line.to : line.from;
  return _state.EditorSelection.cursor(end, forward ? -1 : 1);
}

function moveByChar(view, start, forward, by) {
  let line = view.state.doc.lineAt(start.head),
      spans = view.bidiSpans(line);
  let direction = view.textDirectionAt(line.from);

  for (let cur = start, check = null;;) {
    let next = moveVisually(line, spans, direction, cur, forward),
        char = movedOver;

    if (!next) {
      if (line.number == (forward ? view.state.doc.lines : 1)) return cur;
      char = "\n";
      line = view.state.doc.line(line.number + (forward ? 1 : -1));
      spans = view.bidiSpans(line);
      next = _state.EditorSelection.cursor(forward ? line.from : line.to);
    }

    if (!check) {
      if (!by) return next;
      check = by(char);
    } else if (!check(char)) {
      return cur;
    }

    cur = next;
  }
}

function byGroup(view, pos, start) {
  let categorize = view.state.charCategorizer(pos);
  let cat = categorize(start);
  return next => {
    let nextCat = categorize(next);
    if (cat == _state.CharCategory.Space) cat = nextCat;
    return cat == nextCat;
  };
}

function moveVertically(view, start, forward, distance) {
  let startPos = start.head,
      dir = forward ? 1 : -1;
  if (startPos == (forward ? view.state.doc.length : 0)) return _state.EditorSelection.cursor(startPos, start.assoc);
  let goal = start.goalColumn,
      startY;
  let rect = view.contentDOM.getBoundingClientRect();
  let startCoords = view.coordsAtPos(startPos),
      docTop = view.documentTop;

  if (startCoords) {
    if (goal == null) goal = startCoords.left - rect.left;
    startY = dir < 0 ? startCoords.top : startCoords.bottom;
  } else {
    let line = view.viewState.lineBlockAt(startPos);
    if (goal == null) goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
    startY = (dir < 0 ? line.top : line.bottom) + docTop;
  }

  let resolvedGoal = rect.left + goal;
  let dist = distance !== null && distance !== void 0 ? distance : view.defaultLineHeight >> 1;

  for (let extra = 0;; extra += 10) {
    let curY = startY + (dist + extra) * dir;
    let pos = posAtCoords(view, {
      x: resolvedGoal,
      y: curY
    }, false, dir);
    if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) return _state.EditorSelection.cursor(pos, start.assoc, undefined, goal);
  }
}

function skipAtoms(view, oldPos, pos) {
  let atoms = view.state.facet(atomicRanges).map(f => f(view));

  for (;;) {
    let moved = false;

    for (let set of atoms) {
      set.between(pos.from - 1, pos.from + 1, (from, to, value) => {
        if (pos.from > from && pos.from < to) {
          pos = oldPos.from > pos.from ? _state.EditorSelection.cursor(from, 1) : _state.EditorSelection.cursor(to, -1);
          moved = true;
        }
      });
    }

    if (!moved) return pos;
  }
} // This will also be where dragging info and such goes


class InputState {
  constructor(view) {
    this.lastKeyCode = 0;
    this.lastKeyTime = 0;
    this.lastTouchTime = 0;
    this.lastFocusTime = 0;
    this.lastScrollTop = 0;
    this.lastScrollLeft = 0;
    this.chromeScrollHack = -1; // On iOS, some keys need to have their default behavior happen
    // (after which we retroactively handle them and reset the DOM) to
    // avoid messing up the virtual keyboard state.

    this.pendingIOSKey = undefined;
    this.lastSelectionOrigin = null;
    this.lastSelectionTime = 0;
    this.lastEscPress = 0;
    this.lastContextMenu = 0;
    this.scrollHandlers = [];
    this.registeredEvents = [];
    this.customHandlers = []; // -1 means not in a composition. Otherwise, this counts the number
    // of changes made during the composition. The count is used to
    // avoid treating the start state of the composition, before any
    // changes have been made, as part of the composition.

    this.composing = -1; // Tracks whether the next change should be marked as starting the
    // composition (null means no composition, true means next is the
    // first, false means first has already been marked for this
    // composition)

    this.compositionFirstChange = null;
    this.compositionEndedAt = 0;
    this.rapidCompositionStart = false;
    this.mouseSelection = null;

    for (let type in handlers) {
      let handler = handlers[type];
      view.contentDOM.addEventListener(type, event => {
        if (!eventBelongsToEditor(view, event) || this.ignoreDuringComposition(event)) return;
        if (type == "keydown" && this.keydown(view, event)) return;
        if (this.mustFlushObserver(event)) view.observer.forceFlush();
        if (this.runCustomHandlers(type, view, event)) event.preventDefault();else handler(view, event);
      }, handlerOptions[type]);
      this.registeredEvents.push(type);
    }

    if (browser.chrome && browser.chrome_version == 102) {
      // FIXME remove at some point
      // On Chrome 102, viewport updates somehow stop wheel-based
      // scrolling. Turning off pointer events during the scroll seems
      // to avoid the issue.
      view.scrollDOM.addEventListener("wheel", () => {
        if (this.chromeScrollHack < 0) view.contentDOM.style.pointerEvents = "none";else window.clearTimeout(this.chromeScrollHack);
        this.chromeScrollHack = setTimeout(() => {
          this.chromeScrollHack = -1;
          view.contentDOM.style.pointerEvents = "";
        }, 100);
      }, {
        passive: true
      });
    }

    this.notifiedFocused = view.hasFocus; // On Safari adding an input event handler somehow prevents an
    // issue where the composition vanishes when you press enter.

    if (browser.safari) view.contentDOM.addEventListener("input", () => null);
  }

  setSelectionOrigin(origin) {
    this.lastSelectionOrigin = origin;
    this.lastSelectionTime = Date.now();
  }

  ensureHandlers(view, plugins) {
    var _a;

    let handlers;
    this.customHandlers = [];

    for (let plugin of plugins) if (handlers = (_a = plugin.update(view).spec) === null || _a === void 0 ? void 0 : _a.domEventHandlers) {
      this.customHandlers.push({
        plugin: plugin.value,
        handlers
      });

      for (let type in handlers) if (this.registeredEvents.indexOf(type) < 0 && type != "scroll") {
        this.registeredEvents.push(type);
        view.contentDOM.addEventListener(type, event => {
          if (!eventBelongsToEditor(view, event)) return;
          if (this.runCustomHandlers(type, view, event)) event.preventDefault();
        });
      }
    }
  }

  runCustomHandlers(type, view, event) {
    for (let set of this.customHandlers) {
      let handler = set.handlers[type];

      if (handler) {
        try {
          if (handler.call(set.plugin, event, view) || event.defaultPrevented) return true;
        } catch (e) {
          logException(view.state, e);
        }
      }
    }

    return false;
  }

  runScrollHandlers(view, event) {
    this.lastScrollTop = view.scrollDOM.scrollTop;
    this.lastScrollLeft = view.scrollDOM.scrollLeft;

    for (let set of this.customHandlers) {
      let handler = set.handlers.scroll;

      if (handler) {
        try {
          handler.call(set.plugin, event, view);
        } catch (e) {
          logException(view.state, e);
        }
      }
    }
  }

  keydown(view, event) {
    // Must always run, even if a custom handler handled the event
    this.lastKeyCode = event.keyCode;
    this.lastKeyTime = Date.now();
    if (event.keyCode == 9 && Date.now() < this.lastEscPress + 2000) return true; // Chrome for Android usually doesn't fire proper key events, but
    // occasionally does, usually surrounded by a bunch of complicated
    // composition changes. When an enter or backspace key event is
    // seen, hold off on handling DOM events for a bit, and then
    // dispatch it.

    if (browser.android && browser.chrome && !event.synthetic && (event.keyCode == 13 || event.keyCode == 8)) {
      view.observer.delayAndroidKey(event.key, event.keyCode);
      return true;
    } // Prevent the default behavior of Enter on iOS makes the
    // virtual keyboard get stuck in the wrong (lowercase)
    // state. So we let it go through, and then, in
    // applyDOMChange, notify key handlers of it and reset to
    // the state they produce.


    let pending;

    if (browser.ios && (pending = PendingKeys.find(key => key.keyCode == event.keyCode)) && !(event.ctrlKey || event.altKey || event.metaKey) && !event.synthetic) {
      this.pendingIOSKey = pending;
      setTimeout(() => this.flushIOSKey(view), 250);
      return true;
    }

    return false;
  }

  flushIOSKey(view) {
    let key = this.pendingIOSKey;
    if (!key) return false;
    this.pendingIOSKey = undefined;
    return dispatchKey(view.contentDOM, key.key, key.keyCode);
  }

  ignoreDuringComposition(event) {
    if (!/^key/.test(event.type)) return false;
    if (this.composing > 0) return true; // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
    // On some input method editors (IMEs), the Enter key is used to
    // confirm character selection. On Safari, when Enter is pressed,
    // compositionend and keydown events are sometimes emitted in the
    // wrong order. The key event should still be ignored, even when
    // it happens after the compositionend event.

    if (browser.safari && !browser.ios && Date.now() - this.compositionEndedAt < 100) {
      this.compositionEndedAt = 0;
      return true;
    }

    return false;
  }

  mustFlushObserver(event) {
    return event.type == "keydown" && event.keyCode != 229 || event.type == "compositionend" && !browser.ios;
  }

  startMouseSelection(mouseSelection) {
    if (this.mouseSelection) this.mouseSelection.destroy();
    this.mouseSelection = mouseSelection;
  }

  update(update) {
    if (this.mouseSelection) this.mouseSelection.update(update);
    if (update.transactions.length) this.lastKeyCode = this.lastSelectionTime = 0;
  }

  destroy() {
    if (this.mouseSelection) this.mouseSelection.destroy();
  }

}

const PendingKeys = [{
  key: "Backspace",
  keyCode: 8,
  inputType: "deleteContentBackward"
}, {
  key: "Enter",
  keyCode: 13,
  inputType: "insertParagraph"
}, {
  key: "Delete",
  keyCode: 46,
  inputType: "deleteContentForward"
}]; // Key codes for modifier keys

const modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];

class MouseSelection {
  constructor(view, startEvent, style, mustSelect) {
    this.view = view;
    this.style = style;
    this.mustSelect = mustSelect;
    this.lastEvent = startEvent;
    let doc = view.contentDOM.ownerDocument;
    doc.addEventListener("mousemove", this.move = this.move.bind(this));
    doc.addEventListener("mouseup", this.up = this.up.bind(this));
    this.extend = startEvent.shiftKey;
    this.multiple = view.state.facet(_state.EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
    this.dragMove = dragMovesSelection(view, startEvent);
    this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false; // When clicking outside of the selection, immediately apply the
    // effect of starting the selection

    if (this.dragging === false) {
      startEvent.preventDefault();
      this.select(startEvent);
    }
  }

  move(event) {
    if (event.buttons == 0) return this.destroy();
    if (this.dragging !== false) return;
    this.select(this.lastEvent = event);
  }

  up(event) {
    if (this.dragging == null) this.select(this.lastEvent);
    if (!this.dragging) event.preventDefault();
    this.destroy();
  }

  destroy() {
    let doc = this.view.contentDOM.ownerDocument;
    doc.removeEventListener("mousemove", this.move);
    doc.removeEventListener("mouseup", this.up);
    this.view.inputState.mouseSelection = null;
  }

  select(event) {
    let selection = this.style.get(event, this.extend, this.multiple);
    if (this.mustSelect || !selection.eq(this.view.state.selection) || selection.main.assoc != this.view.state.selection.main.assoc) this.view.dispatch({
      selection,
      userEvent: "select.pointer",
      scrollIntoView: true
    });
    this.mustSelect = false;
  }

  update(update) {
    if (update.docChanged && this.dragging) this.dragging = this.dragging.map(update.changes);
    if (this.style.update(update)) setTimeout(() => this.select(this.lastEvent), 20);
  }

}

function addsSelectionRange(view, event) {
  let facet = view.state.facet(clickAddsSelectionRange);
  return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
}

function dragMovesSelection(view, event) {
  let facet = view.state.facet(dragMovesSelection$1);
  return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
}

function isInPrimarySelection(view, event) {
  let {
    main
  } = view.state.selection;
  if (main.empty) return false; // On boundary clicks, check whether the coordinates are inside the
  // selection's client rectangles

  let sel = getSelection(view.root);
  if (!sel || sel.rangeCount == 0) return true;
  let rects = sel.getRangeAt(0).getClientRects();

  for (let i = 0; i < rects.length; i++) {
    let rect = rects[i];
    if (rect.left <= event.clientX && rect.right >= event.clientX && rect.top <= event.clientY && rect.bottom >= event.clientY) return true;
  }

  return false;
}

function eventBelongsToEditor(view, event) {
  if (!event.bubbles) return true;
  if (event.defaultPrevented) return false;

  for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode) if (!node || node.nodeType == 11 || (cView = ContentView.get(node)) && cView.ignoreEvent(event)) return false;

  return true;
}

const handlers = /*@__PURE__*/Object.create(null);
const handlerOptions = /*@__PURE__*/Object.create(null); // This is very crude, but unfortunately both these browsers _pretend_
// that they have a clipboard API—all the objects and methods are
// there, they just don't work, and they are hard to test.

const brokenClipboardAPI = browser.ie && browser.ie_version < 15 || browser.ios && browser.webkit_version < 604;

function capturePaste(view) {
  let parent = view.dom.parentNode;
  if (!parent) return;
  let target = parent.appendChild(document.createElement("textarea"));
  target.style.cssText = "position: fixed; left: -10000px; top: 10px";
  target.focus();
  setTimeout(() => {
    view.focus();
    target.remove();
    doPaste(view, target.value);
  }, 50);
}

function doPaste(view, input) {
  let {
    state
  } = view,
      changes,
      i = 1,
      text = state.toText(input);
  let byLine = text.lines == state.selection.ranges.length;
  let linewise = lastLinewiseCopy != null && state.selection.ranges.every(r => r.empty) && lastLinewiseCopy == text.toString();

  if (linewise) {
    let lastLine = -1;
    changes = state.changeByRange(range => {
      let line = state.doc.lineAt(range.from);
      if (line.from == lastLine) return {
        range
      };
      lastLine = line.from;
      let insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
      return {
        changes: {
          from: line.from,
          insert
        },
        range: _state.EditorSelection.cursor(range.from + insert.length)
      };
    });
  } else if (byLine) {
    changes = state.changeByRange(range => {
      let line = text.line(i++);
      return {
        changes: {
          from: range.from,
          to: range.to,
          insert: line.text
        },
        range: _state.EditorSelection.cursor(range.from + line.length)
      };
    });
  } else {
    changes = state.replaceSelection(text);
  }

  view.dispatch(changes, {
    userEvent: "input.paste",
    scrollIntoView: true
  });
}

handlers.keydown = (view, event) => {
  view.inputState.setSelectionOrigin("select");
  if (event.keyCode == 27) view.inputState.lastEscPress = Date.now();else if (modifierCodes.indexOf(event.keyCode) < 0) view.inputState.lastEscPress = 0;
};

handlers.touchstart = (view, e) => {
  view.inputState.lastTouchTime = Date.now();
  view.inputState.setSelectionOrigin("select.pointer");
};

handlers.touchmove = view => {
  view.inputState.setSelectionOrigin("select.pointer");
};

handlerOptions.touchstart = handlerOptions.touchmove = {
  passive: true
};

handlers.mousedown = (view, event) => {
  view.observer.flush();
  if (view.inputState.lastTouchTime > Date.now() - 2000 && getClickType(event) == 1) return; // Ignore touch interaction

  let style = null;

  for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
    style = makeStyle(view, event);
    if (style) break;
  }

  if (!style && event.button == 0) style = basicMouseSelection(view, event);

  if (style) {
    let mustFocus = view.root.activeElement != view.contentDOM;
    if (mustFocus) view.observer.ignore(() => focusPreventScroll(view.contentDOM));
    view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
  }
};

function rangeForClick(view, pos, bias, type) {
  if (type == 1) {
    // Single click
    return _state.EditorSelection.cursor(pos, bias);
  } else if (type == 2) {
    // Double click
    return groupAt(view.state, pos, bias);
  } else {
    // Triple click
    let visual = LineView.find(view.docView, pos),
        line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
    let from = visual ? visual.posAtStart : line.from,
        to = visual ? visual.posAtEnd : line.to;
    if (to < view.state.doc.length && to == line.to) to++;
    return _state.EditorSelection.range(from, to);
  }
}

let insideY = (y, rect) => y >= rect.top && y <= rect.bottom;

let inside = (x, y, rect) => insideY(y, rect) && x >= rect.left && x <= rect.right; // Try to determine, for the given coordinates, associated with the
// given position, whether they are related to the element before or
// the element after the position.


function findPositionSide(view, pos, x, y) {
  let line = LineView.find(view.docView, pos);
  if (!line) return 1;
  let off = pos - line.posAtStart; // Line boundaries point into the line

  if (off == 0) return 1;
  if (off == line.length) return -1; // Positions on top of an element point at that element

  let before = line.coordsAt(off, -1);
  if (before && inside(x, y, before)) return -1;
  let after = line.coordsAt(off, 1);
  if (after && inside(x, y, after)) return 1; // This is probably a line wrap point. Pick before if the point is
  // beside it.

  return before && insideY(y, before) ? -1 : 1;
}

function queryPos(view, event) {
  let pos = view.posAtCoords({
    x: event.clientX,
    y: event.clientY
  }, false);
  return {
    pos,
    bias: findPositionSide(view, pos, event.clientX, event.clientY)
  };
}

const BadMouseDetail = browser.ie && browser.ie_version <= 11;
let lastMouseDown = null,
    lastMouseDownCount = 0,
    lastMouseDownTime = 0;

function getClickType(event) {
  if (!BadMouseDetail) return event.detail;
  let last = lastMouseDown,
      lastTime = lastMouseDownTime;
  lastMouseDown = event;
  lastMouseDownTime = Date.now();
  return lastMouseDownCount = !last || lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 && Math.abs(last.clientY - event.clientY) < 2 ? (lastMouseDownCount + 1) % 3 : 1;
}

function basicMouseSelection(view, event) {
  let start = queryPos(view, event),
      type = getClickType(event);
  let startSel = view.state.selection;
  let last = start,
      lastEvent = event;
  return {
    update(update) {
      if (update.docChanged) {
        if (start) start.pos = update.changes.mapPos(start.pos);
        startSel = startSel.map(update.changes);
        lastEvent = null;
      }
    },

    get(event, extend, multiple) {
      let cur;
      if (lastEvent && event.clientX == lastEvent.clientX && event.clientY == lastEvent.clientY) cur = last;else {
        cur = last = queryPos(view, event);
        lastEvent = event;
      }
      if (!cur || !start) return startSel;
      let range = rangeForClick(view, cur.pos, cur.bias, type);

      if (start.pos != cur.pos && !extend) {
        let startRange = rangeForClick(view, start.pos, start.bias, type);
        let from = Math.min(startRange.from, range.from),
            to = Math.max(startRange.to, range.to);
        range = from < range.from ? _state.EditorSelection.range(from, to) : _state.EditorSelection.range(to, from);
      }

      if (extend) return startSel.replaceRange(startSel.main.extend(range.from, range.to));else if (multiple && startSel.ranges.length > 1 && startSel.ranges.some(r => r.eq(range))) return removeRange(startSel, range);else if (multiple) return startSel.addRange(range);else return _state.EditorSelection.create([range]);
    }

  };
}

function removeRange(sel, range) {
  for (let i = 0;; i++) {
    if (sel.ranges[i].eq(range)) return _state.EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));
  }
}

handlers.dragstart = (view, event) => {
  let {
    selection: {
      main
    }
  } = view.state;
  let {
    mouseSelection
  } = view.inputState;
  if (mouseSelection) mouseSelection.dragging = main;

  if (event.dataTransfer) {
    event.dataTransfer.setData("Text", view.state.sliceDoc(main.from, main.to));
    event.dataTransfer.effectAllowed = "copyMove";
  }
};

function dropText(view, event, text, direct) {
  if (!text) return;
  let dropPos = view.posAtCoords({
    x: event.clientX,
    y: event.clientY
  }, false);
  event.preventDefault();
  let {
    mouseSelection
  } = view.inputState;
  let del = direct && mouseSelection && mouseSelection.dragging && mouseSelection.dragMove ? {
    from: mouseSelection.dragging.from,
    to: mouseSelection.dragging.to
  } : null;
  let ins = {
    from: dropPos,
    insert: text
  };
  let changes = view.state.changes(del ? [del, ins] : ins);
  view.focus();
  view.dispatch({
    changes,
    selection: {
      anchor: changes.mapPos(dropPos, -1),
      head: changes.mapPos(dropPos, 1)
    },
    userEvent: del ? "move.drop" : "input.drop"
  });
}

handlers.drop = (view, event) => {
  if (!event.dataTransfer) return;
  if (view.state.readOnly) return event.preventDefault();
  let files = event.dataTransfer.files;

  if (files && files.length) {
    // For a file drop, read the file's text.
    event.preventDefault();
    let text = Array(files.length),
        read = 0;

    let finishFile = () => {
      if (++read == files.length) dropText(view, event, text.filter(s => s != null).join(view.state.lineBreak), false);
    };

    for (let i = 0; i < files.length; i++) {
      let reader = new FileReader();
      reader.onerror = finishFile;

      reader.onload = () => {
        if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result)) text[i] = reader.result;
        finishFile();
      };

      reader.readAsText(files[i]);
    }
  } else {
    dropText(view, event, event.dataTransfer.getData("Text"), true);
  }
};

handlers.paste = (view, event) => {
  if (view.state.readOnly) return event.preventDefault();
  view.observer.flush();
  let data = brokenClipboardAPI ? null : event.clipboardData;

  if (data) {
    doPaste(view, data.getData("text/plain"));
    event.preventDefault();
  } else {
    capturePaste(view);
  }
};

function captureCopy(view, text) {
  // The extra wrapper is somehow necessary on IE/Edge to prevent the
  // content from being mangled when it is put onto the clipboard
  let parent = view.dom.parentNode;
  if (!parent) return;
  let target = parent.appendChild(document.createElement("textarea"));
  target.style.cssText = "position: fixed; left: -10000px; top: 10px";
  target.value = text;
  target.focus();
  target.selectionEnd = text.length;
  target.selectionStart = 0;
  setTimeout(() => {
    target.remove();
    view.focus();
  }, 50);
}

function copiedRange(state) {
  let content = [],
      ranges = [],
      linewise = false;

  for (let range of state.selection.ranges) if (!range.empty) {
    content.push(state.sliceDoc(range.from, range.to));
    ranges.push(range);
  }

  if (!content.length) {
    // Nothing selected, do a line-wise copy
    let upto = -1;

    for (let {
      from
    } of state.selection.ranges) {
      let line = state.doc.lineAt(from);

      if (line.number > upto) {
        content.push(line.text);
        ranges.push({
          from: line.from,
          to: Math.min(state.doc.length, line.to + 1)
        });
      }

      upto = line.number;
    }

    linewise = true;
  }

  return {
    text: content.join(state.lineBreak),
    ranges,
    linewise
  };
}

let lastLinewiseCopy = null;

handlers.copy = handlers.cut = (view, event) => {
  let {
    text,
    ranges,
    linewise
  } = copiedRange(view.state);
  if (!text && !linewise) return;
  lastLinewiseCopy = linewise ? text : null;
  let data = brokenClipboardAPI ? null : event.clipboardData;

  if (data) {
    event.preventDefault();
    data.clearData();
    data.setData("text/plain", text);
  } else {
    captureCopy(view, text);
  }

  if (event.type == "cut" && !view.state.readOnly) view.dispatch({
    changes: ranges,
    scrollIntoView: true,
    userEvent: "delete.cut"
  });
};

function updateForFocusChange(view) {
  setTimeout(() => {
    if (view.hasFocus != view.inputState.notifiedFocused) view.update([]);
  }, 10);
}

handlers.focus = view => {
  view.inputState.lastFocusTime = Date.now(); // When focusing reset the scroll position, move it back to where it was

  if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
    view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
    view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
  }

  updateForFocusChange(view);
};

handlers.blur = view => {
  view.observer.clearSelectionRange();
  updateForFocusChange(view);
};

function forceClearComposition(view, rapid) {
  if (view.docView.compositionDeco.size) {
    view.inputState.rapidCompositionStart = rapid;

    try {
      view.update([]);
    } finally {
      view.inputState.rapidCompositionStart = false;
    }
  }
}

handlers.compositionstart = handlers.compositionupdate = view => {
  if (view.inputState.compositionFirstChange == null) view.inputState.compositionFirstChange = true;

  if (view.inputState.composing < 0) {
    // FIXME possibly set a timeout to clear it again on Android
    view.inputState.composing = 0;

    if (view.docView.compositionDeco.size) {
      view.observer.flush();
      forceClearComposition(view, true);
    }
  }
};

handlers.compositionend = view => {
  view.inputState.composing = -1;
  view.inputState.compositionEndedAt = Date.now();
  view.inputState.compositionFirstChange = null;
  setTimeout(() => {
    if (view.inputState.composing < 0) forceClearComposition(view, false);
  }, 50);
};

handlers.contextmenu = view => {
  view.inputState.lastContextMenu = Date.now();
};

handlers.beforeinput = (view, event) => {
  var _a; // Because Chrome Android doesn't fire useful key events, use
  // beforeinput to detect backspace (and possibly enter and delete,
  // but those usually don't even seem to fire beforeinput events at
  // the moment) and fake a key event for it.
  //
  // (preventDefault on beforeinput, though supported in the spec,
  // seems to do nothing at all on Chrome).


  let pending;

  if (browser.chrome && browser.android && (pending = PendingKeys.find(key => key.inputType == event.inputType))) {
    view.observer.delayAndroidKey(pending.key, pending.keyCode);

    if (pending.key == "Backspace" || pending.key == "Delete") {
      let startViewHeight = ((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0;
      setTimeout(() => {
        var _a; // Backspacing near uneditable nodes on Chrome Android sometimes
        // closes the virtual keyboard. This tries to crudely detect
        // that and refocus to get it back.


        if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {
          view.contentDOM.blur();
          view.focus();
        }
      }, 100);
    }
  }
};

const wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];

class HeightOracle {
  constructor() {
    this.doc = _state.Text.empty;
    this.lineWrapping = false;
    this.heightSamples = {};
    this.lineHeight = 14;
    this.charWidth = 7;
    this.lineLength = 30; // Used to track, during updateHeight, if any actual heights changed

    this.heightChanged = false;
  }

  heightForGap(from, to) {
    let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
    if (this.lineWrapping) lines += Math.ceil((to - from - lines * this.lineLength * 0.5) / this.lineLength);
    return this.lineHeight * lines;
  }

  heightForLine(length) {
    if (!this.lineWrapping) return this.lineHeight;
    let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
    return lines * this.lineHeight;
  }

  setDoc(doc) {
    this.doc = doc;
    return this;
  }

  mustRefreshForWrapping(whiteSpace) {
    return wrappingWhiteSpace.indexOf(whiteSpace) > -1 != this.lineWrapping;
  }

  mustRefreshForHeights(lineHeights) {
    let newHeight = false;

    for (let i = 0; i < lineHeights.length; i++) {
      let h = lineHeights[i];

      if (h < 0) {
        i++;
      } else if (!this.heightSamples[Math.floor(h * 10)]) {
        // Round to .1 pixels
        newHeight = true;
        this.heightSamples[Math.floor(h * 10)] = true;
      }
    }

    return newHeight;
  }

  refresh(whiteSpace, lineHeight, charWidth, lineLength, knownHeights) {
    let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
    let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
    this.lineWrapping = lineWrapping;
    this.lineHeight = lineHeight;
    this.charWidth = charWidth;
    this.lineLength = lineLength;

    if (changed) {
      this.heightSamples = {};

      for (let i = 0; i < knownHeights.length; i++) {
        let h = knownHeights[i];
        if (h < 0) i++;else this.heightSamples[Math.floor(h * 10)] = true;
      }
    }

    return changed;
  }

} // This object is used by `updateHeight` to make DOM measurements
// arrive at the right nides. The `heights` array is a sequence of
// block heights, starting from position `from`.


class MeasuredHeights {
  constructor(from, heights) {
    this.from = from;
    this.heights = heights;
    this.index = 0;
  }

  get more() {
    return this.index < this.heights.length;
  }

}
/**
Record used to represent information about a block-level element
in the editor view.
*/


class BlockInfo {
  /**
  @internal
  */
  constructor(
  /**
  The start of the element in the document.
  */
  from,
  /**
  The length of the element.
  */
  length,
  /**
  The top position of the element (relative to the top of the
  document).
  */
  top,
  /**
  Its height.
  */
  height,
  /**
  The type of element this is. When querying lines, this may be
  an array of all the blocks that make up the line.
  */
  type) {
    this.from = from;
    this.length = length;
    this.top = top;
    this.height = height;
    this.type = type;
  }
  /**
  The end of the element as a document position.
  */


  get to() {
    return this.from + this.length;
  }
  /**
  The bottom position of the element.
  */


  get bottom() {
    return this.top + this.height;
  }
  /**
  @internal
  */


  join(other) {
    let detail = (Array.isArray(this.type) ? this.type : [this]).concat(Array.isArray(other.type) ? other.type : [other]);
    return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, detail);
  }

}

exports.BlockInfo = BlockInfo;

var QueryType = /*@__PURE__*/function (QueryType) {
  QueryType[QueryType["ByPos"] = 0] = "ByPos";
  QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
  QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
  return QueryType;
}(QueryType || (QueryType = {}));

const Epsilon = 1e-3;

class HeightMap {
  constructor(length, // The number of characters covered
  height, // Height of this part of the document
  flags = 2
  /* Outdated */
  ) {
    this.length = length;
    this.height = height;
    this.flags = flags;
  }

  get outdated() {
    return (this.flags & 2
    /* Outdated */
    ) > 0;
  }

  set outdated(value) {
    this.flags = (value ? 2
    /* Outdated */
    : 0) | this.flags & ~2
    /* Outdated */
    ;
  }

  setHeight(oracle, height) {
    if (this.height != height) {
      if (Math.abs(this.height - height) > Epsilon) oracle.heightChanged = true;
      this.height = height;
    }
  } // Base case is to replace a leaf node, which simply builds a tree
  // from the new nodes and returns that (HeightMapBranch and
  // HeightMapGap override this to actually use from/to)


  replace(_from, _to, nodes) {
    return HeightMap.of(nodes);
  } // Again, these are base cases, and are overridden for branch and gap nodes.


  decomposeLeft(_to, result) {
    result.push(this);
  }

  decomposeRight(_from, result) {
    result.push(this);
  }

  applyChanges(decorations, oldDoc, oracle, changes) {
    let me = this;

    for (let i = changes.length - 1; i >= 0; i--) {
      let {
        fromA,
        toA,
        fromB,
        toB
      } = changes[i];
      let start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
      let end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
      toB += end.to - toA;
      toA = end.to;

      while (i > 0 && start.from <= changes[i - 1].toA) {
        fromA = changes[i - 1].fromA;
        fromB = changes[i - 1].fromB;
        i--;
        if (fromA < start.from) start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
      }

      fromB += start.from - fromA;
      fromA = start.from;
      let nodes = NodeBuilder.build(oracle, decorations, fromB, toB);
      me = me.replace(fromA, toA, nodes);
    }

    return me.updateHeight(oracle, 0);
  }

  static empty() {
    return new HeightMapText(0, 0);
  } // nodes uses null values to indicate the position of line breaks.
  // There are never line breaks at the start or end of the array, or
  // two line breaks next to each other, and the array isn't allowed
  // to be empty (same restrictions as return value from the builder).


  static of(nodes) {
    if (nodes.length == 1) return nodes[0];
    let i = 0,
        j = nodes.length,
        before = 0,
        after = 0;

    for (;;) {
      if (i == j) {
        if (before > after * 2) {
          let split = nodes[i - 1];
          if (split.break) nodes.splice(--i, 1, split.left, null, split.right);else nodes.splice(--i, 1, split.left, split.right);
          j += 1 + split.break;
          before -= split.size;
        } else if (after > before * 2) {
          let split = nodes[j];
          if (split.break) nodes.splice(j, 1, split.left, null, split.right);else nodes.splice(j, 1, split.left, split.right);
          j += 2 + split.break;
          after -= split.size;
        } else {
          break;
        }
      } else if (before < after) {
        let next = nodes[i++];
        if (next) before += next.size;
      } else {
        let next = nodes[--j];
        if (next) after += next.size;
      }
    }

    let brk = 0;

    if (nodes[i - 1] == null) {
      brk = 1;
      i--;
    } else if (nodes[i] == null) {
      brk = 1;
      j++;
    }

    return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
  }

}

HeightMap.prototype.size = 1;

class HeightMapBlock extends HeightMap {
  constructor(length, height, type) {
    super(length, height);
    this.type = type;
  }

  blockAt(_height, _doc, top, offset) {
    return new BlockInfo(offset, this.length, top, this.height, this.type);
  }

  lineAt(_value, _type, doc, top, offset) {
    return this.blockAt(0, doc, top, offset);
  }

  forEachLine(from, to, doc, top, offset, f) {
    if (from <= offset + this.length && to >= offset) f(this.blockAt(0, doc, top, offset));
  }

  updateHeight(oracle, offset = 0, _force = false, measured) {
    if (measured && measured.from <= offset && measured.more) this.setHeight(oracle, measured.heights[measured.index++]);
    this.outdated = false;
    return this;
  }

  toString() {
    return `block(${this.length})`;
  }

}

class HeightMapText extends HeightMapBlock {
  constructor(length, height) {
    super(length, height, BlockType.Text);
    this.collapsed = 0; // Amount of collapsed content in the line

    this.widgetHeight = 0; // Maximum inline widget height
  }

  replace(_from, _to, nodes) {
    let node = nodes[0];

    if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && node.flags & 4
    /* SingleLine */
    ) && Math.abs(this.length - node.length) < 10) {
      if (node instanceof HeightMapGap) node = new HeightMapText(node.length, this.height);else node.height = this.height;
      if (!this.outdated) node.outdated = false;
      return node;
    } else {
      return HeightMap.of(nodes);
    }
  }

  updateHeight(oracle, offset = 0, force = false, measured) {
    if (measured && measured.from <= offset && measured.more) this.setHeight(oracle, measured.heights[measured.index++]);else if (force || this.outdated) this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)));
    this.outdated = false;
    return this;
  }

  toString() {
    return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
  }

}

class HeightMapGap extends HeightMap {
  constructor(length) {
    super(length, 0);
  }

  lines(doc, offset) {
    let firstLine = doc.lineAt(offset).number,
        lastLine = doc.lineAt(offset + this.length).number;
    return {
      firstLine,
      lastLine,
      lineHeight: this.height / (lastLine - firstLine + 1)
    };
  }

  blockAt(height, doc, top, offset) {
    let {
      firstLine,
      lastLine,
      lineHeight
    } = this.lines(doc, offset);
    let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / lineHeight)));
    let {
      from,
      length
    } = doc.line(firstLine + line);
    return new BlockInfo(from, length, top + lineHeight * line, lineHeight, BlockType.Text);
  }

  lineAt(value, type, doc, top, offset) {
    if (type == QueryType.ByHeight) return this.blockAt(value, doc, top, offset);

    if (type == QueryType.ByPosNoHeight) {
      let {
        from,
        to
      } = doc.lineAt(value);
      return new BlockInfo(from, to - from, 0, 0, BlockType.Text);
    }

    let {
      firstLine,
      lineHeight
    } = this.lines(doc, offset);
    let {
      from,
      length,
      number
    } = doc.lineAt(value);
    return new BlockInfo(from, length, top + lineHeight * (number - firstLine), lineHeight, BlockType.Text);
  }

  forEachLine(from, to, doc, top, offset, f) {
    let {
      firstLine,
      lineHeight
    } = this.lines(doc, offset);

    for (let pos = Math.max(from, offset), end = Math.min(offset + this.length, to); pos <= end;) {
      let line = doc.lineAt(pos);
      if (pos == from) top += lineHeight * (line.number - firstLine);
      f(new BlockInfo(line.from, line.length, top, lineHeight, BlockType.Text));
      top += lineHeight;
      pos = line.to + 1;
    }
  }

  replace(from, to, nodes) {
    let after = this.length - to;

    if (after > 0) {
      let last = nodes[nodes.length - 1];
      if (last instanceof HeightMapGap) nodes[nodes.length - 1] = new HeightMapGap(last.length + after);else nodes.push(null, new HeightMapGap(after - 1));
    }

    if (from > 0) {
      let first = nodes[0];
      if (first instanceof HeightMapGap) nodes[0] = new HeightMapGap(from + first.length);else nodes.unshift(new HeightMapGap(from - 1), null);
    }

    return HeightMap.of(nodes);
  }

  decomposeLeft(to, result) {
    result.push(new HeightMapGap(to - 1), null);
  }

  decomposeRight(from, result) {
    result.push(null, new HeightMapGap(this.length - from - 1));
  }

  updateHeight(oracle, offset = 0, force = false, measured) {
    let end = offset + this.length;

    if (measured && measured.from <= offset + this.length && measured.more) {
      // Fill in part of this gap with measured lines. We know there
      // can't be widgets or collapsed ranges in those lines, because
      // they would already have been added to the heightmap (gaps
      // only contain plain text).
      let nodes = [],
          pos = Math.max(offset, measured.from),
          singleHeight = -1;
      let wasChanged = oracle.heightChanged;
      if (measured.from > offset) nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));

      while (pos <= end && measured.more) {
        let len = oracle.doc.lineAt(pos).length;
        if (nodes.length) nodes.push(null);
        let height = measured.heights[measured.index++];
        if (singleHeight == -1) singleHeight = height;else if (Math.abs(height - singleHeight) >= Epsilon) singleHeight = -2;
        let line = new HeightMapText(len, height);
        line.outdated = false;
        nodes.push(line);
        pos += len + 1;
      }

      if (pos <= end) nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
      let result = HeightMap.of(nodes);
      oracle.heightChanged = wasChanged || singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon || Math.abs(singleHeight - this.lines(oracle.doc, offset).lineHeight) >= Epsilon;
      return result;
    } else if (force || this.outdated) {
      this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
      this.outdated = false;
    }

    return this;
  }

  toString() {
    return `gap(${this.length})`;
  }

}

class HeightMapBranch extends HeightMap {
  constructor(left, brk, right) {
    super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2
    /* Outdated */
    : 0));
    this.left = left;
    this.right = right;
    this.size = left.size + right.size;
  }

  get break() {
    return this.flags & 1
    /* Break */
    ;
  }

  blockAt(height, doc, top, offset) {
    let mid = top + this.left.height;
    return height < mid ? this.left.blockAt(height, doc, top, offset) : this.right.blockAt(height, doc, mid, offset + this.left.length + this.break);
  }

  lineAt(value, type, doc, top, offset) {
    let rightTop = top + this.left.height,
        rightOffset = offset + this.left.length + this.break;
    let left = type == QueryType.ByHeight ? value < rightTop : value < rightOffset;
    let base = left ? this.left.lineAt(value, type, doc, top, offset) : this.right.lineAt(value, type, doc, rightTop, rightOffset);
    if (this.break || (left ? base.to < rightOffset : base.from > rightOffset)) return base;
    let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
    if (left) return base.join(this.right.lineAt(rightOffset, subQuery, doc, rightTop, rightOffset));else return this.left.lineAt(rightOffset, subQuery, doc, top, offset).join(base);
  }

  forEachLine(from, to, doc, top, offset, f) {
    let rightTop = top + this.left.height,
        rightOffset = offset + this.left.length + this.break;

    if (this.break) {
      if (from < rightOffset) this.left.forEachLine(from, to, doc, top, offset, f);
      if (to >= rightOffset) this.right.forEachLine(from, to, doc, rightTop, rightOffset, f);
    } else {
      let mid = this.lineAt(rightOffset, QueryType.ByPos, doc, top, offset);
      if (from < mid.from) this.left.forEachLine(from, mid.from - 1, doc, top, offset, f);
      if (mid.to >= from && mid.from <= to) f(mid);
      if (to > mid.to) this.right.forEachLine(mid.to + 1, to, doc, rightTop, rightOffset, f);
    }
  }

  replace(from, to, nodes) {
    let rightStart = this.left.length + this.break;
    if (to < rightStart) return this.balanced(this.left.replace(from, to, nodes), this.right);
    if (from > this.left.length) return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
    let result = [];
    if (from > 0) this.decomposeLeft(from, result);
    let left = result.length;

    for (let node of nodes) result.push(node);

    if (from > 0) mergeGaps(result, left - 1);

    if (to < this.length) {
      let right = result.length;
      this.decomposeRight(to, result);
      mergeGaps(result, right);
    }

    return HeightMap.of(result);
  }

  decomposeLeft(to, result) {
    let left = this.left.length;
    if (to <= left) return this.left.decomposeLeft(to, result);
    result.push(this.left);

    if (this.break) {
      left++;
      if (to >= left) result.push(null);
    }

    if (to > left) this.right.decomposeLeft(to - left, result);
  }

  decomposeRight(from, result) {
    let left = this.left.length,
        right = left + this.break;
    if (from >= right) return this.right.decomposeRight(from - right, result);
    if (from < left) this.left.decomposeRight(from, result);
    if (this.break && from < right) result.push(null);
    result.push(this.right);
  }

  balanced(left, right) {
    if (left.size > 2 * right.size || right.size > 2 * left.size) return HeightMap.of(this.break ? [left, null, right] : [left, right]);
    this.left = left;
    this.right = right;
    this.height = left.height + right.height;
    this.outdated = left.outdated || right.outdated;
    this.size = left.size + right.size;
    this.length = left.length + this.break + right.length;
    return this;
  }

  updateHeight(oracle, offset = 0, force = false, measured) {
    let {
      left,
      right
    } = this,
        rightStart = offset + left.length + this.break,
        rebalance = null;
    if (measured && measured.from <= offset + left.length && measured.more) rebalance = left = left.updateHeight(oracle, offset, force, measured);else left.updateHeight(oracle, offset, force);
    if (measured && measured.from <= rightStart + right.length && measured.more) rebalance = right = right.updateHeight(oracle, rightStart, force, measured);else right.updateHeight(oracle, rightStart, force);
    if (rebalance) return this.balanced(left, right);
    this.height = this.left.height + this.right.height;
    this.outdated = false;
    return this;
  }

  toString() {
    return this.left + (this.break ? " " : "-") + this.right;
  }

}

function mergeGaps(nodes, around) {
  let before, after;
  if (nodes[around] == null && (before = nodes[around - 1]) instanceof HeightMapGap && (after = nodes[around + 1]) instanceof HeightMapGap) nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
}

const relevantWidgetHeight = 5;

class NodeBuilder {
  constructor(pos, oracle) {
    this.pos = pos;
    this.oracle = oracle;
    this.nodes = [];
    this.lineStart = -1;
    this.lineEnd = -1;
    this.covering = null;
    this.writtenTo = pos;
  }

  get isCovered() {
    return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
  }

  span(_from, to) {
    if (this.lineStart > -1) {
      let end = Math.min(to, this.lineEnd),
          last = this.nodes[this.nodes.length - 1];
      if (last instanceof HeightMapText) last.length += end - this.pos;else if (end > this.pos || !this.isCovered) this.nodes.push(new HeightMapText(end - this.pos, -1));
      this.writtenTo = end;

      if (to > end) {
        this.nodes.push(null);
        this.writtenTo++;
        this.lineStart = -1;
      }
    }

    this.pos = to;
  }

  point(from, to, deco) {
    if (from < to || deco.heightRelevant) {
      let height = deco.widget ? deco.widget.estimatedHeight : 0;
      if (height < 0) height = this.oracle.lineHeight;
      let len = to - from;

      if (deco.block) {
        this.addBlock(new HeightMapBlock(len, height, deco.type));
      } else if (len || height >= relevantWidgetHeight) {
        this.addLineDeco(height, len);
      }
    } else if (to > from) {
      this.span(from, to);
    }

    if (this.lineEnd > -1 && this.lineEnd < this.pos) this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
  }

  enterLine() {
    if (this.lineStart > -1) return;
    let {
      from,
      to
    } = this.oracle.doc.lineAt(this.pos);
    this.lineStart = from;
    this.lineEnd = to;

    if (this.writtenTo < from) {
      if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null) this.nodes.push(this.blankContent(this.writtenTo, from - 1));
      this.nodes.push(null);
    }

    if (this.pos > from) this.nodes.push(new HeightMapText(this.pos - from, -1));
    this.writtenTo = this.pos;
  }

  blankContent(from, to) {
    let gap = new HeightMapGap(to - from);
    if (this.oracle.doc.lineAt(from).to == to) gap.flags |= 4
    /* SingleLine */
    ;
    return gap;
  }

  ensureLine() {
    this.enterLine();
    let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
    if (last instanceof HeightMapText) return last;
    let line = new HeightMapText(0, -1);
    this.nodes.push(line);
    return line;
  }

  addBlock(block) {
    this.enterLine();
    if (block.type == BlockType.WidgetAfter && !this.isCovered) this.ensureLine();
    this.nodes.push(block);
    this.writtenTo = this.pos = this.pos + block.length;
    if (block.type != BlockType.WidgetBefore) this.covering = block;
  }

  addLineDeco(height, length) {
    let line = this.ensureLine();
    line.length += length;
    line.collapsed += length;
    line.widgetHeight = Math.max(line.widgetHeight, height);
    this.writtenTo = this.pos = this.pos + length;
  }

  finish(from) {
    let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
    if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered) this.nodes.push(new HeightMapText(0, -1));else if (this.writtenTo < this.pos || last == null) this.nodes.push(this.blankContent(this.writtenTo, this.pos));
    let pos = from;

    for (let node of this.nodes) {
      if (node instanceof HeightMapText) node.updateHeight(this.oracle, pos);
      pos += node ? node.length : 1;
    }

    return this.nodes;
  } // Always called with a region that on both sides either stretches
  // to a line break or the end of the document.
  // The returned array uses null to indicate line breaks, but never
  // starts or ends in a line break, or has multiple line breaks next
  // to each other.


  static build(oracle, decorations, from, to) {
    let builder = new NodeBuilder(from, oracle);

    _state.RangeSet.spans(decorations, from, to, builder, 0);

    return builder.finish(from);
  }

}

function heightRelevantDecoChanges(a, b, diff) {
  let comp = new DecorationComparator();

  _state.RangeSet.compare(a, b, diff, comp, 0);

  return comp.changes;
}

class DecorationComparator {
  constructor() {
    this.changes = [];
  }

  compareRange() {}

  comparePoint(from, to, a, b) {
    if (from < to || a && a.heightRelevant || b && b.heightRelevant) addRange(from, to, this.changes, 5);
  }

}

function visiblePixelRange(dom, paddingTop) {
  let rect = dom.getBoundingClientRect();
  let left = Math.max(0, rect.left),
      right = Math.min(innerWidth, rect.right);
  let top = Math.max(0, rect.top),
      bottom = Math.min(innerHeight, rect.bottom);
  let body = dom.ownerDocument.body;

  for (let parent = dom.parentNode; parent && parent != body;) {
    if (parent.nodeType == 1) {
      let elt = parent;
      let style = window.getComputedStyle(elt);

      if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) && style.overflow != "visible") {
        let parentRect = elt.getBoundingClientRect();
        left = Math.max(left, parentRect.left);
        right = Math.min(right, parentRect.right);
        top = Math.max(top, parentRect.top);
        bottom = parent == dom.parentNode ? parentRect.bottom : Math.min(bottom, parentRect.bottom);
      }

      parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
    } else if (parent.nodeType == 11) {
      // Shadow root
      parent = parent.host;
    } else {
      break;
    }
  }

  return {
    left: left - rect.left,
    right: Math.max(left, right) - rect.left,
    top: top - (rect.top + paddingTop),
    bottom: Math.max(top, bottom) - (rect.top + paddingTop)
  };
}

function fullPixelRange(dom, paddingTop) {
  let rect = dom.getBoundingClientRect();
  return {
    left: 0,
    right: rect.right - rect.left,
    top: paddingTop,
    bottom: rect.bottom - (rect.top + paddingTop)
  };
} // Line gaps are placeholder widgets used to hide pieces of overlong
// lines within the viewport, as a kludge to keep the editor
// responsive when a ridiculously long line is loaded into it.


class LineGap {
  constructor(from, to, size) {
    this.from = from;
    this.to = to;
    this.size = size;
  }

  static same(a, b) {
    if (a.length != b.length) return false;

    for (let i = 0; i < a.length; i++) {
      let gA = a[i],
          gB = b[i];
      if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size) return false;
    }

    return true;
  }

  draw(wrapping) {
    return Decoration.replace({
      widget: new LineGapWidget(this.size, wrapping)
    }).range(this.from, this.to);
  }

}

class LineGapWidget extends WidgetType {
  constructor(size, vertical) {
    super();
    this.size = size;
    this.vertical = vertical;
  }

  eq(other) {
    return other.size == this.size && other.vertical == this.vertical;
  }

  toDOM() {
    let elt = document.createElement("div");

    if (this.vertical) {
      elt.style.height = this.size + "px";
    } else {
      elt.style.width = this.size + "px";
      elt.style.height = "2px";
      elt.style.display = "inline-block";
    }

    return elt;
  }

  get estimatedHeight() {
    return this.vertical ? this.size : -1;
  }

}

class ViewState {
  constructor(state) {
    this.state = state; // These are contentDOM-local coordinates

    this.pixelViewport = {
      left: 0,
      right: window.innerWidth,
      top: 0,
      bottom: 0
    };
    this.inView = true;
    this.paddingTop = 0;
    this.paddingBottom = 0;
    this.contentDOMWidth = 0;
    this.contentDOMHeight = 0;
    this.editorHeight = 0;
    this.editorWidth = 0;
    this.heightOracle = new HeightOracle(); // See VP.MaxDOMHeight

    this.scaler = IdScaler;
    this.scrollTarget = null; // Briefly set to true when printing, to disable viewport limiting

    this.printing = false; // Flag set when editor content was redrawn, so that the next
    // measure stage knows it must read DOM layout

    this.mustMeasureContent = true;
    this.defaultTextDirection = Direction.RTL;
    this.visibleRanges = []; // Cursor 'assoc' is only significant when the cursor is on a line
    // wrap point, where it must stick to the character that it is
    // associated with. Since browsers don't provide a reasonable
    // interface to set or query this, when a selection is set that
    // might cause this to be significant, this flag is set. The next
    // measure phase will check whether the cursor is on a line-wrapping
    // boundary and, if so, reset it to make sure it is positioned in
    // the right place.

    this.mustEnforceCursorAssoc = false;
    this.stateDeco = state.facet(decorations).filter(d => typeof d != "function");
    this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, _state.Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
    this.viewport = this.getViewport(0, null);
    this.updateViewportLines();
    this.updateForViewport();
    this.lineGaps = this.ensureLineGaps([]);
    this.lineGapDeco = Decoration.set(this.lineGaps.map(gap => gap.draw(false)));
    this.computeVisibleRanges();
  }

  updateForViewport() {
    let viewports = [this.viewport],
        {
      main
    } = this.state.selection;

    for (let i = 0; i <= 1; i++) {
      let pos = i ? main.head : main.anchor;

      if (!viewports.some(({
        from,
        to
      }) => pos >= from && pos <= to)) {
        let {
          from,
          to
        } = this.lineBlockAt(pos);
        viewports.push(new Viewport(from, to));
      }
    }

    this.viewports = viewports.sort((a, b) => a.from - b.from);
    this.scaler = this.heightMap.height <= 7000000
    /* MaxDOMHeight */
    ? IdScaler : new BigScaler(this.heightOracle.doc, this.heightMap, this.viewports);
  }

  updateViewportLines() {
    this.viewportLines = [];
    this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.state.doc, 0, 0, block => {
      this.viewportLines.push(this.scaler.scale == 1 ? block : scaleBlock(block, this.scaler));
    });
  }

  update(update, scrollTarget = null) {
    this.state = update.state;
    let prevDeco = this.stateDeco;
    this.stateDeco = this.state.facet(decorations).filter(d => typeof d != "function");
    let contentChanges = update.changedRanges;
    let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : _state.ChangeSet.empty(this.state.doc.length)));
    let prevHeight = this.heightMap.height;
    this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
    if (this.heightMap.height != prevHeight) update.flags |= 2
    /* Height */
    ;
    let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
    if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) || !this.viewportIsAppropriate(viewport)) viewport = this.getViewport(0, scrollTarget);
    let updateLines = !update.changes.empty || update.flags & 2
    /* Height */
    || viewport.from != this.viewport.from || viewport.to != this.viewport.to;
    this.viewport = viewport;
    this.updateForViewport();
    if (updateLines) this.updateViewportLines();
    if (this.lineGaps.length || this.viewport.to - this.viewport.from > 4000
    /* DoubleMargin */
    ) this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
    update.flags |= this.computeVisibleRanges();
    if (scrollTarget) this.scrollTarget = scrollTarget;
    if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping && update.state.selection.main.empty && update.state.selection.main.assoc) this.mustEnforceCursorAssoc = true;
  }

  measure(view) {
    let dom = view.contentDOM,
        style = window.getComputedStyle(dom);
    let oracle = this.heightOracle;
    let whiteSpace = style.whiteSpace;
    this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
    let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
    let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != dom.clientHeight;
    this.contentDOMHeight = dom.clientHeight;
    this.mustMeasureContent = false;
    let result = 0,
        bias = 0; // Vertical padding

    let paddingTop = parseInt(style.paddingTop) || 0,
        paddingBottom = parseInt(style.paddingBottom) || 0;

    if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
      this.paddingTop = paddingTop;
      this.paddingBottom = paddingBottom;
      result |= 8
      /* Geometry */
      | 2
      /* Height */
      ;
    }

    if (this.editorWidth != view.scrollDOM.clientWidth) {
      if (oracle.lineWrapping) measureContent = true;
      this.editorWidth = view.scrollDOM.clientWidth;
      result |= 8
      /* Geometry */
      ;
    } // Pixel viewport


    let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
    let dTop = pixelViewport.top - this.pixelViewport.top,
        dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
    this.pixelViewport = pixelViewport;
    let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;

    if (inView != this.inView) {
      this.inView = inView;
      if (inView) measureContent = true;
    }

    if (!this.inView) return 0;
    let contentWidth = dom.clientWidth;

    if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
      this.contentDOMWidth = contentWidth;
      this.editorHeight = view.scrollDOM.clientHeight;
      result |= 8
      /* Geometry */
      ;
    }

    if (measureContent) {
      let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
      if (oracle.mustRefreshForHeights(lineHeights)) refresh = true;

      if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
        let {
          lineHeight,
          charWidth
        } = view.docView.measureTextSize();
        refresh = oracle.refresh(whiteSpace, lineHeight, charWidth, contentWidth / charWidth, lineHeights);

        if (refresh) {
          view.docView.minWidth = 0;
          result |= 8
          /* Geometry */
          ;
        }
      }

      if (dTop > 0 && dBottom > 0) bias = Math.max(dTop, dBottom);else if (dTop < 0 && dBottom < 0) bias = Math.min(dTop, dBottom);
      oracle.heightChanged = false;

      for (let vp of this.viewports) {
        let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
        this.heightMap = this.heightMap.updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
      }

      if (oracle.heightChanged) result |= 2
      /* Height */
      ;
    }

    let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
    if (viewportChange) this.viewport = this.getViewport(bias, this.scrollTarget);
    this.updateForViewport();
    if (result & 2
    /* Height */
    || viewportChange) this.updateViewportLines();
    if (this.lineGaps.length || this.viewport.to - this.viewport.from > 4000
    /* DoubleMargin */
    ) this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps));
    result |= this.computeVisibleRanges();

    if (this.mustEnforceCursorAssoc) {
      this.mustEnforceCursorAssoc = false; // This is done in the read stage, because moving the selection
      // to a line end is going to trigger a layout anyway, so it
      // can't be a pure write. It should be rare that it does any
      // writing.

      view.docView.enforceCursorAssoc();
    }

    return result;
  }

  get visibleTop() {
    return this.scaler.fromDOM(this.pixelViewport.top);
  }

  get visibleBottom() {
    return this.scaler.fromDOM(this.pixelViewport.bottom);
  }

  getViewport(bias, scrollTarget) {
    // This will divide VP.Margin between the top and the
    // bottom, depending on the bias (the change in viewport position
    // since the last update). It'll hold a number between 0 and 1
    let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000
    /* Margin */
    / 2));
    let map = this.heightMap,
        doc = this.state.doc,
        {
      visibleTop,
      visibleBottom
    } = this;
    let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000
    /* Margin */
    , QueryType.ByHeight, doc, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000
    /* Margin */
    , QueryType.ByHeight, doc, 0, 0).to); // If scrollTarget is given, make sure the viewport includes that position

    if (scrollTarget) {
      let {
        head
      } = scrollTarget.range;

      if (head < viewport.from || head > viewport.to) {
        let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
        let block = map.lineAt(head, QueryType.ByPos, doc, 0, 0),
            topPos;
        if (scrollTarget.y == "center") topPos = (block.top + block.bottom) / 2 - viewHeight / 2;else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from) topPos = block.top;else topPos = block.bottom - viewHeight;
        viewport = new Viewport(map.lineAt(topPos - 1000
        /* Margin */
        / 2, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(topPos + viewHeight + 1000
        /* Margin */
        / 2, QueryType.ByHeight, doc, 0, 0).to);
      }
    }

    return viewport;
  }

  mapViewport(viewport, changes) {
    let from = changes.mapPos(viewport.from, -1),
        to = changes.mapPos(viewport.to, 1);
    return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.state.doc, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.state.doc, 0, 0).to);
  } // Checks if a given viewport covers the visible part of the
  // document and not too much beyond that.


  viewportIsAppropriate({
    from,
    to
  }, bias = 0) {
    if (!this.inView) return true;
    let {
      top
    } = this.heightMap.lineAt(from, QueryType.ByPos, this.state.doc, 0, 0);
    let {
      bottom
    } = this.heightMap.lineAt(to, QueryType.ByPos, this.state.doc, 0, 0);
    let {
      visibleTop,
      visibleBottom
    } = this;
    return (from == 0 || top <= visibleTop - Math.max(10
    /* MinCoverMargin */
    , Math.min(-bias, 250
    /* MaxCoverMargin */
    ))) && (to == this.state.doc.length || bottom >= visibleBottom + Math.max(10
    /* MinCoverMargin */
    , Math.min(bias, 250
    /* MaxCoverMargin */
    ))) && top > visibleTop - 2 * 1000
    /* Margin */
    && bottom < visibleBottom + 2 * 1000
    /* Margin */
    ;
  }

  mapLineGaps(gaps, changes) {
    if (!gaps.length || changes.empty) return gaps;
    let mapped = [];

    for (let gap of gaps) if (!changes.touchesRange(gap.from, gap.to)) mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));

    return mapped;
  } // Computes positions in the viewport where the start or end of a
  // line should be hidden, trying to reuse existing line gaps when
  // appropriate to avoid unneccesary redraws.
  // Uses crude character-counting for the positioning and sizing,
  // since actual DOM coordinates aren't always available and
  // predictable. Relies on generous margins (see LG.Margin) to hide
  // the artifacts this might produce from the user.


  ensureLineGaps(current) {
    let gaps = []; // This won't work at all in predominantly right-to-left text.

    if (this.defaultTextDirection != Direction.LTR) return gaps;

    for (let line of this.viewportLines) {
      if (line.length < 4000
      /* DoubleMargin */
      ) continue;
      let structure = lineStructure(line.from, line.to, this.stateDeco);
      if (structure.total < 4000
      /* DoubleMargin */
      ) continue;
      let viewFrom, viewTo;

      if (this.heightOracle.lineWrapping) {
        let marginHeight = 2000
        /* Margin */
        / this.heightOracle.lineLength * this.heightOracle.lineHeight;
        viewFrom = findPosition(structure, (this.visibleTop - line.top - marginHeight) / line.height);
        viewTo = findPosition(structure, (this.visibleBottom - line.top + marginHeight) / line.height);
      } else {
        let totalWidth = structure.total * this.heightOracle.charWidth;
        let marginWidth = 2000
        /* Margin */
        * this.heightOracle.charWidth;
        viewFrom = findPosition(structure, (this.pixelViewport.left - marginWidth) / totalWidth);
        viewTo = findPosition(structure, (this.pixelViewport.right + marginWidth) / totalWidth);
      }

      let outside = [];
      if (viewFrom > line.from) outside.push({
        from: line.from,
        to: viewFrom
      });
      if (viewTo < line.to) outside.push({
        from: viewTo,
        to: line.to
      });
      let sel = this.state.selection.main; // Make sure the gaps don't cover a selection end

      if (sel.from >= line.from && sel.from <= line.to) cutRange(outside, sel.from - 10
      /* SelectionMargin */
      , sel.from + 10
      /* SelectionMargin */
      );
      if (!sel.empty && sel.to >= line.from && sel.to <= line.to) cutRange(outside, sel.to - 10
      /* SelectionMargin */
      , sel.to + 10
      /* SelectionMargin */
      );

      for (let {
        from,
        to
      } of outside) if (to - from > 1000
      /* HalfMargin */
      ) {
        gaps.push(find(current, gap => gap.from >= line.from && gap.to <= line.to && Math.abs(gap.from - from) < 1000
        /* HalfMargin */
        && Math.abs(gap.to - to) < 1000
        /* HalfMargin */
        ) || new LineGap(from, to, this.gapSize(line, from, to, structure)));
      }
    }

    return gaps;
  }

  gapSize(line, from, to, structure) {
    let fraction = findFraction(structure, to) - findFraction(structure, from);

    if (this.heightOracle.lineWrapping) {
      return line.height * fraction;
    } else {
      return structure.total * this.heightOracle.charWidth * fraction;
    }
  }

  updateLineGaps(gaps) {
    if (!LineGap.same(gaps, this.lineGaps)) {
      this.lineGaps = gaps;
      this.lineGapDeco = Decoration.set(gaps.map(gap => gap.draw(this.heightOracle.lineWrapping)));
    }
  }

  computeVisibleRanges() {
    let deco = this.stateDeco;
    if (this.lineGaps.length) deco = deco.concat(this.lineGapDeco);
    let ranges = [];

    _state.RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
      span(from, to) {
        ranges.push({
          from,
          to
        });
      },

      point() {}

    }, 20);

    let changed = ranges.length != this.visibleRanges.length || this.visibleRanges.some((r, i) => r.from != ranges[i].from || r.to != ranges[i].to);
    this.visibleRanges = ranges;
    return changed ? 4
    /* Viewport */
    : 0;
  }

  lineBlockAt(pos) {
    return pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find(b => b.from <= pos && b.to >= pos) || scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.state.doc, 0, 0), this.scaler);
  }

  lineBlockAtHeight(height) {
    return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.state.doc, 0, 0), this.scaler);
  }

  elementAtHeight(height) {
    return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.state.doc, 0, 0), this.scaler);
  }

  get docHeight() {
    return this.scaler.toDOM(this.heightMap.height);
  }

  get contentHeight() {
    return this.docHeight + this.paddingTop + this.paddingBottom;
  }

}

class Viewport {
  constructor(from, to) {
    this.from = from;
    this.to = to;
  }

}

function lineStructure(from, to, stateDeco) {
  let ranges = [],
      pos = from,
      total = 0;

  _state.RangeSet.spans(stateDeco, from, to, {
    span() {},

    point(from, to) {
      if (from > pos) {
        ranges.push({
          from: pos,
          to: from
        });
        total += from - pos;
      }

      pos = to;
    }

  }, 20); // We're only interested in collapsed ranges of a significant size


  if (pos < to) {
    ranges.push({
      from: pos,
      to
    });
    total += to - pos;
  }

  return {
    total,
    ranges
  };
}

function findPosition({
  total,
  ranges
}, ratio) {
  if (ratio <= 0) return ranges[0].from;
  if (ratio >= 1) return ranges[ranges.length - 1].to;
  let dist = Math.floor(total * ratio);

  for (let i = 0;; i++) {
    let {
      from,
      to
    } = ranges[i],
        size = to - from;
    if (dist <= size) return from + dist;
    dist -= size;
  }
}

function findFraction(structure, pos) {
  let counted = 0;

  for (let {
    from,
    to
  } of structure.ranges) {
    if (pos <= to) {
      counted += pos - from;
      break;
    }

    counted += to - from;
  }

  return counted / structure.total;
}

function cutRange(ranges, from, to) {
  for (let i = 0; i < ranges.length; i++) {
    let r = ranges[i];

    if (r.from < to && r.to > from) {
      let pieces = [];
      if (r.from < from) pieces.push({
        from: r.from,
        to: from
      });
      if (r.to > to) pieces.push({
        from: to,
        to: r.to
      });
      ranges.splice(i, 1, ...pieces);
      i += pieces.length - 1;
    }
  }
}

function find(array, f) {
  for (let val of array) if (f(val)) return val;

  return undefined;
} // Don't scale when the document height is within the range of what
// the DOM can handle.


const IdScaler = {
  toDOM(n) {
    return n;
  },

  fromDOM(n) {
    return n;
  },

  scale: 1
}; // When the height is too big (> VP.MaxDOMHeight), scale down the
// regions outside the viewports so that the total height is
// VP.MaxDOMHeight.

class BigScaler {
  constructor(doc, heightMap, viewports) {
    let vpHeight = 0,
        base = 0,
        domBase = 0;
    this.viewports = viewports.map(({
      from,
      to
    }) => {
      let top = heightMap.lineAt(from, QueryType.ByPos, doc, 0, 0).top;
      let bottom = heightMap.lineAt(to, QueryType.ByPos, doc, 0, 0).bottom;
      vpHeight += bottom - top;
      return {
        from,
        to,
        top,
        bottom,
        domTop: 0,
        domBottom: 0
      };
    });
    this.scale = (7000000
    /* MaxDOMHeight */
    - vpHeight) / (heightMap.height - vpHeight);

    for (let obj of this.viewports) {
      obj.domTop = domBase + (obj.top - base) * this.scale;
      domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
      base = obj.bottom;
    }
  }

  toDOM(n) {
    for (let i = 0, base = 0, domBase = 0;; i++) {
      let vp = i < this.viewports.length ? this.viewports[i] : null;
      if (!vp || n < vp.top) return domBase + (n - base) * this.scale;
      if (n <= vp.bottom) return vp.domTop + (n - vp.top);
      base = vp.bottom;
      domBase = vp.domBottom;
    }
  }

  fromDOM(n) {
    for (let i = 0, base = 0, domBase = 0;; i++) {
      let vp = i < this.viewports.length ? this.viewports[i] : null;
      if (!vp || n < vp.domTop) return base + (n - domBase) / this.scale;
      if (n <= vp.domBottom) return vp.top + (n - vp.domTop);
      base = vp.bottom;
      domBase = vp.domBottom;
    }
  }

}

function scaleBlock(block, scaler) {
  if (scaler.scale == 1) return block;
  let bTop = scaler.toDOM(block.top),
      bBottom = scaler.toDOM(block.bottom);
  return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block.type) ? block.type.map(b => scaleBlock(b, scaler)) : block.type);
}

const theme = /*@__PURE__*/_state.Facet.define({
  combine: strs => strs.join(" ")
});

const darkTheme = /*@__PURE__*/_state.Facet.define({
  combine: values => values.indexOf(true) > -1
});

const baseThemeID = /*@__PURE__*/_styleMod.StyleModule.newName(),
      baseLightID = /*@__PURE__*/_styleMod.StyleModule.newName(),
      baseDarkID = /*@__PURE__*/_styleMod.StyleModule.newName();

const lightDarkIDs = {
  "&light": "." + baseLightID,
  "&dark": "." + baseDarkID
};

function buildTheme(main, spec, scopes) {
  return new _styleMod.StyleModule(spec, {
    finish(sel) {
      return /&/.test(sel) ? sel.replace(/&\w*/, m => {
        if (m == "&") return main;
        if (!scopes || !scopes[m]) throw new RangeError(`Unsupported selector: ${m}`);
        return scopes[m];
      }) : main + " " + sel;
    }

  });
}

const baseTheme$1 = /*@__PURE__*/buildTheme("." + baseThemeID, {
  "&.cm-editor": {
    position: "relative !important",
    boxSizing: "border-box",
    "&.cm-focused": {
      // Provide a simple default outline to make sure a focused
      // editor is visually distinct. Can't leave the default behavior
      // because that will apply to the content element, which is
      // inside the scrollable container and doesn't include the
      // gutters. We also can't use an 'auto' outline, since those
      // are, for some reason, drawn behind the element content, which
      // will cause things like the active line background to cover
      // the outline (#297).
      outline: "1px dotted #212121"
    },
    display: "flex !important",
    flexDirection: "column"
  },
  ".cm-scroller": {
    display: "flex !important",
    alignItems: "flex-start !important",
    fontFamily: "monospace",
    lineHeight: 1.4,
    height: "100%",
    overflowX: "auto",
    position: "relative",
    zIndex: 0
  },
  ".cm-content": {
    margin: 0,
    flexGrow: 2,
    flexShrink: 0,
    minHeight: "100%",
    display: "block",
    whiteSpace: "pre",
    wordWrap: "normal",
    boxSizing: "border-box",
    padding: "4px 0",
    outline: "none",
    "&[contenteditable=true]": {
      WebkitUserModify: "read-write-plaintext-only"
    }
  },
  ".cm-lineWrapping": {
    whiteSpace_fallback: "pre-wrap",
    whiteSpace: "break-spaces",
    wordBreak: "break-word",
    overflowWrap: "anywhere",
    flexShrink: 1
  },
  "&light .cm-content": {
    caretColor: "black"
  },
  "&dark .cm-content": {
    caretColor: "white"
  },
  ".cm-line": {
    display: "block",
    padding: "0 2px 0 4px"
  },
  ".cm-selectionLayer": {
    zIndex: -1,
    contain: "size style"
  },
  ".cm-selectionBackground": {
    position: "absolute"
  },
  "&light .cm-selectionBackground": {
    background: "#d9d9d9"
  },
  "&dark .cm-selectionBackground": {
    background: "#222"
  },
  "&light.cm-focused .cm-selectionBackground": {
    background: "#d7d4f0"
  },
  "&dark.cm-focused .cm-selectionBackground": {
    background: "#233"
  },
  ".cm-cursorLayer": {
    zIndex: 100,
    contain: "size style",
    pointerEvents: "none"
  },
  "&.cm-focused .cm-cursorLayer": {
    animation: "steps(1) cm-blink 1.2s infinite"
  },
  // Two animations defined so that we can switch between them to
  // restart the animation without forcing another style
  // recomputation.
  "@keyframes cm-blink": {
    "0%": {},
    "50%": {
      opacity: 0
    },
    "100%": {}
  },
  "@keyframes cm-blink2": {
    "0%": {},
    "50%": {
      opacity: 0
    },
    "100%": {}
  },
  ".cm-cursor, .cm-dropCursor": {
    position: "absolute",
    borderLeft: "1.2px solid black",
    marginLeft: "-0.6px",
    pointerEvents: "none"
  },
  ".cm-cursor": {
    display: "none"
  },
  "&dark .cm-cursor": {
    borderLeftColor: "#444"
  },
  "&.cm-focused .cm-cursor": {
    display: "block"
  },
  "&light .cm-activeLine": {
    backgroundColor: "#f3f9ff"
  },
  "&dark .cm-activeLine": {
    backgroundColor: "#223039"
  },
  "&light .cm-specialChar": {
    color: "red"
  },
  "&dark .cm-specialChar": {
    color: "#f78"
  },
  ".cm-gutters": {
    flexShrink: 0,
    display: "flex",
    height: "100%",
    boxSizing: "border-box",
    left: 0,
    zIndex: 200
  },
  "&light .cm-gutters": {
    backgroundColor: "#f5f5f5",
    color: "#6c6c6c",
    borderRight: "1px solid #ddd"
  },
  "&dark .cm-gutters": {
    backgroundColor: "#333338",
    color: "#ccc"
  },
  ".cm-gutter": {
    display: "flex !important",
    flexDirection: "column",
    flexShrink: 0,
    boxSizing: "border-box",
    minHeight: "100%",
    overflow: "hidden"
  },
  ".cm-gutterElement": {
    boxSizing: "border-box"
  },
  ".cm-lineNumbers .cm-gutterElement": {
    padding: "0 3px 0 5px",
    minWidth: "20px",
    textAlign: "right",
    whiteSpace: "nowrap"
  },
  "&light .cm-activeLineGutter": {
    backgroundColor: "#e2f2ff"
  },
  "&dark .cm-activeLineGutter": {
    backgroundColor: "#222227"
  },
  ".cm-panels": {
    boxSizing: "border-box",
    position: "sticky",
    left: 0,
    right: 0
  },
  "&light .cm-panels": {
    backgroundColor: "#f5f5f5",
    color: "black"
  },
  "&light .cm-panels-top": {
    borderBottom: "1px solid #ddd"
  },
  "&light .cm-panels-bottom": {
    borderTop: "1px solid #ddd"
  },
  "&dark .cm-panels": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tab": {
    display: "inline-block",
    overflow: "hidden",
    verticalAlign: "bottom"
  },
  ".cm-widgetBuffer": {
    verticalAlign: "text-top",
    height: "1em",
    width: 0,
    display: "inline"
  },
  ".cm-placeholder": {
    color: "#888",
    display: "inline-block",
    verticalAlign: "top"
  },
  ".cm-button": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    padding: ".2em 1em",
    borderRadius: "1px"
  },
  "&light .cm-button": {
    backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
    }
  },
  "&dark .cm-button": {
    backgroundImage: "linear-gradient(#393939, #111)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#111, #333)"
    }
  },
  ".cm-textfield": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    border: "1px solid silver",
    padding: ".2em .5em"
  },
  "&light .cm-textfield": {
    backgroundColor: "white"
  },
  "&dark .cm-textfield": {
    border: "1px solid #555",
    backgroundColor: "inherit"
  }
}, lightDarkIDs);
const observeOptions = {
  childList: true,
  characterData: true,
  subtree: true,
  attributes: true,
  characterDataOldValue: true
}; // IE11 has very broken mutation observers, so we also listen to
// DOMCharacterDataModified there

const useCharData = browser.ie && browser.ie_version <= 11;

class DOMObserver {
  constructor(view, onChange, onScrollChanged) {
    this.view = view;
    this.onChange = onChange;
    this.onScrollChanged = onScrollChanged;
    this.active = false; // The known selection. Kept in our own object, as opposed to just
    // directly accessing the selection because:
    //  - Safari doesn't report the right selection in shadow DOM
    //  - Reading from the selection forces a DOM layout
    //  - This way, we can ignore selectionchange events if we have
    //    already seen the 'new' selection

    this.selectionRange = new DOMSelectionState(); // Set when a selection change is detected, cleared on flush

    this.selectionChanged = false;
    this.delayedFlush = -1;
    this.resizeTimeout = -1;
    this.queue = [];
    this.delayedAndroidKey = null;
    this.scrollTargets = [];
    this.intersection = null;
    this.resize = null;
    this.intersecting = false;
    this.gapIntersection = null;
    this.gaps = []; // Timeout for scheduling check of the parents that need scroll handlers

    this.parentCheck = -1;
    this.dom = view.contentDOM;
    this.observer = new MutationObserver(mutations => {
      for (let mut of mutations) this.queue.push(mut); // IE11 will sometimes (on typing over a selection or
      // backspacing out a single character text node) call the
      // observer callback before actually updating the DOM.
      //
      // Unrelatedly, iOS Safari will, when ending a composition,
      // sometimes first clear it, deliver the mutations, and then
      // reinsert the finished text. CodeMirror's handling of the
      // deletion will prevent the reinsertion from happening,
      // breaking composition.


      if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) && mutations.some(m => m.type == "childList" && m.removedNodes.length || m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length)) this.flushSoon();else this.flush();
    });
    if (useCharData) this.onCharData = event => {
      this.queue.push({
        target: event.target,
        type: "characterData",
        oldValue: event.prevValue
      });
      this.flushSoon();
    };
    this.onSelectionChange = this.onSelectionChange.bind(this);
    this.onResize = this.onResize.bind(this);
    this.onPrint = this.onPrint.bind(this);
    this.onScroll = this.onScroll.bind(this);

    if (typeof ResizeObserver == "function") {
      this.resize = new ResizeObserver(() => {
        if (this.view.docView.lastUpdate < Date.now() - 75) this.onResize();
      });
      this.resize.observe(view.scrollDOM);
    }

    this.win = view.dom.ownerDocument.defaultView;
    this.addWindowListeners(this.win);
    this.start();

    if (typeof IntersectionObserver == "function") {
      this.intersection = new IntersectionObserver(entries => {
        if (this.parentCheck < 0) this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);

        if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0 != this.intersecting) {
          this.intersecting = !this.intersecting;
          if (this.intersecting != this.view.inView) this.onScrollChanged(document.createEvent("Event"));
        }
      }, {});
      this.intersection.observe(this.dom);
      this.gapIntersection = new IntersectionObserver(entries => {
        if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0) this.onScrollChanged(document.createEvent("Event"));
      }, {});
    }

    this.listenForScroll();
    this.readSelectionRange();
  }

  onScroll(e) {
    if (this.intersecting) this.flush(false);
    this.onScrollChanged(e);
  }

  onResize() {
    if (this.resizeTimeout < 0) this.resizeTimeout = setTimeout(() => {
      this.resizeTimeout = -1;
      this.view.requestMeasure();
    }, 50);
  }

  onPrint() {
    this.view.viewState.printing = true;
    this.view.measure();
    setTimeout(() => {
      this.view.viewState.printing = false;
      this.view.requestMeasure();
    }, 500);
  }

  updateGaps(gaps) {
    if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {
      this.gapIntersection.disconnect();

      for (let gap of gaps) this.gapIntersection.observe(gap);

      this.gaps = gaps;
    }
  }

  onSelectionChange(event) {
    if (!this.readSelectionRange() || this.delayedAndroidKey) return;
    let {
      view
    } = this,
        sel = this.selectionRange;
    if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel)) return;
    let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
    if (context && context.ignoreEvent(event)) return; // Deletions on IE11 fire their events in the wrong order, giving
    // us a selection change event before the DOM changes are
    // reported.
    // Chrome Android has a similar issue when backspacing out a
    // selection (#645).

    if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)
    sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset)) this.flushSoon();else this.flush(false);
  }

  readSelectionRange() {
    let {
      view
    } = this; // The Selection object is broken in shadow roots in Safari. See
    // https://github.com/codemirror/dev/issues/414

    let range = browser.safari && view.root.nodeType == 11 && deepActiveElement() == this.dom && safariSelectionRangeHack(this.view) || getSelection(view.root);
    if (!range || this.selectionRange.eq(range)) return false;
    let local = hasSelection(this.dom, range); // Detect the situation where the browser has, on focus, moved the
    // selection to the start of the content element. Reset it to the
    // position from the editor state.

    if (local && !this.selectionChanged && view.inputState.lastFocusTime > Date.now() - 200 && view.inputState.lastTouchTime < Date.now() - 300 && atElementStart(this.dom, range)) {
      this.view.inputState.lastFocusTime = 0;
      view.docView.updateSelection();
      return false;
    }

    this.selectionRange.setRange(range);
    if (local) this.selectionChanged = true;
    return true;
  }

  setSelectionRange(anchor, head) {
    this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
    this.selectionChanged = false;
  }

  clearSelectionRange() {
    this.selectionRange.set(null, 0, null, 0);
  }

  listenForScroll() {
    this.parentCheck = -1;
    let i = 0,
        changed = null;

    for (let dom = this.dom; dom;) {
      if (dom.nodeType == 1) {
        if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom) i++;else if (!changed) changed = this.scrollTargets.slice(0, i);
        if (changed) changed.push(dom);
        dom = dom.assignedSlot || dom.parentNode;
      } else if (dom.nodeType == 11) {
        // Shadow root
        dom = dom.host;
      } else {
        break;
      }
    }

    if (i < this.scrollTargets.length && !changed) changed = this.scrollTargets.slice(0, i);

    if (changed) {
      for (let dom of this.scrollTargets) dom.removeEventListener("scroll", this.onScroll);

      for (let dom of this.scrollTargets = changed) dom.addEventListener("scroll", this.onScroll);
    }
  }

  ignore(f) {
    if (!this.active) return f();

    try {
      this.stop();
      return f();
    } finally {
      this.start();
      this.clear();
    }
  }

  start() {
    if (this.active) return;
    this.observer.observe(this.dom, observeOptions);
    if (useCharData) this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
    this.active = true;
  }

  stop() {
    if (!this.active) return;
    this.active = false;
    this.observer.disconnect();
    if (useCharData) this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
  } // Throw away any pending changes


  clear() {
    this.processRecords();
    this.queue.length = 0;
    this.selectionChanged = false;
  } // Chrome Android, especially in combination with GBoard, not only
  // doesn't reliably fire regular key events, but also often
  // surrounds the effect of enter or backspace with a bunch of
  // composition events that, when interrupted, cause text duplication
  // or other kinds of corruption. This hack makes the editor back off
  // from handling DOM changes for a moment when such a key is
  // detected (via beforeinput or keydown), and then tries to flush
  // them or, if that has no effect, dispatches the given key.


  delayAndroidKey(key, keyCode) {
    if (!this.delayedAndroidKey) requestAnimationFrame(() => {
      let key = this.delayedAndroidKey;
      this.delayedAndroidKey = null;
      this.delayedFlush = -1;
      if (!this.flush()) dispatchKey(this.dom, key.key, key.keyCode);
    }); // Since backspace beforeinput is sometimes signalled spuriously,
    // Enter always takes precedence.

    if (!this.delayedAndroidKey || key == "Enter") this.delayedAndroidKey = {
      key,
      keyCode
    };
  }

  flushSoon() {
    if (this.delayedFlush < 0) this.delayedFlush = window.setTimeout(() => {
      this.delayedFlush = -1;
      this.flush();
    }, 20);
  }

  forceFlush() {
    if (this.delayedFlush >= 0) {
      window.clearTimeout(this.delayedFlush);
      this.delayedFlush = -1;
    }

    this.flush();
  }

  processRecords() {
    let records = this.queue;

    for (let mut of this.observer.takeRecords()) records.push(mut);

    if (records.length) this.queue = [];
    let from = -1,
        to = -1,
        typeOver = false;

    for (let record of records) {
      let range = this.readMutation(record);
      if (!range) continue;
      if (range.typeOver) typeOver = true;

      if (from == -1) {
        ({
          from,
          to
        } = range);
      } else {
        from = Math.min(range.from, from);
        to = Math.max(range.to, to);
      }
    }

    return {
      from,
      to,
      typeOver
    };
  } // Apply pending changes, if any


  flush(readSelection = true) {
    // Completely hold off flushing when pending keys are set—the code
    // managing those will make sure processRecords is called and the
    // view is resynchronized after
    if (this.delayedFlush >= 0 || this.delayedAndroidKey) return;
    if (readSelection) this.readSelectionRange();
    let {
      from,
      to,
      typeOver
    } = this.processRecords();
    let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
    if (from < 0 && !newSel) return;
    this.view.inputState.lastFocusTime = 0;
    this.selectionChanged = false;
    let startState = this.view.state;
    let handled = this.onChange(from, to, typeOver); // The view wasn't updated

    if (this.view.state == startState) this.view.update([]);
    return handled;
  }

  readMutation(rec) {
    let cView = this.view.docView.nearest(rec.target);
    if (!cView || cView.ignoreMutation(rec)) return null;
    cView.markDirty(rec.type == "attributes");
    if (rec.type == "attributes") cView.dirty |= 4
    /* Attrs */
    ;

    if (rec.type == "childList") {
      let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
      let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
      return {
        from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
        to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd,
        typeOver: false
      };
    } else if (rec.type == "characterData") {
      return {
        from: cView.posAtStart,
        to: cView.posAtEnd,
        typeOver: rec.target.nodeValue == rec.oldValue
      };
    } else {
      return null;
    }
  }

  setWindow(win) {
    if (win != this.win) {
      this.removeWindowListeners(this.win);
      this.win = win;
      this.addWindowListeners(this.win);
    }
  }

  addWindowListeners(win) {
    win.addEventListener("resize", this.onResize);
    win.addEventListener("beforeprint", this.onPrint);
    win.addEventListener("scroll", this.onScroll);
    win.document.addEventListener("selectionchange", this.onSelectionChange);
  }

  removeWindowListeners(win) {
    win.removeEventListener("scroll", this.onScroll);
    win.removeEventListener("resize", this.onResize);
    win.removeEventListener("beforeprint", this.onPrint);
    win.document.removeEventListener("selectionchange", this.onSelectionChange);
  }

  destroy() {
    var _a, _b, _c;

    this.stop();
    (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();
    (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
    (_c = this.resize) === null || _c === void 0 ? void 0 : _c.disconnect();

    for (let dom of this.scrollTargets) dom.removeEventListener("scroll", this.onScroll);

    this.removeWindowListeners(this.win);
    clearTimeout(this.parentCheck);
    clearTimeout(this.resizeTimeout);
  }

}

function findChild(cView, dom, dir) {
  while (dom) {
    let curView = ContentView.get(dom);
    if (curView && curView.parent == cView) return curView;
    let parent = dom.parentNode;
    dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
  }

  return null;
} // Used to work around a Safari Selection/shadow DOM bug (#414)


function safariSelectionRangeHack(view) {
  let found = null; // Because Safari (at least in 2018-2021) doesn't provide regular
  // access to the selection inside a shadowroot, we have to perform a
  // ridiculous hack to get at it—using `execCommand` to trigger a
  // `beforeInput` event so that we can read the target range from the
  // event.

  function read(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
    found = event.getTargetRanges()[0];
  }

  view.contentDOM.addEventListener("beforeinput", read, true);
  document.execCommand("indent");
  view.contentDOM.removeEventListener("beforeinput", read, true);
  if (!found) return null;
  let anchorNode = found.startContainer,
      anchorOffset = found.startOffset;
  let focusNode = found.endContainer,
      focusOffset = found.endOffset;
  let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor); // Since such a range doesn't distinguish between anchor and head,
  // use a heuristic that flips it around if its end matches the
  // current anchor.

  if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset)) [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
  return {
    anchorNode,
    anchorOffset,
    focusNode,
    focusOffset
  };
}

function applyDOMChange(view, start, end, typeOver) {
  let change, newSel;
  let sel = view.state.selection.main;

  if (start > -1) {
    let bounds = view.docView.domBoundsAround(start, end, 0);
    if (!bounds || view.state.readOnly) return false;
    let {
      from,
      to
    } = bounds;
    let selPoints = view.docView.impreciseHead || view.docView.impreciseAnchor ? [] : selectionPoints(view);
    let reader = new DOMReader(selPoints, view.state);
    reader.readRange(bounds.startDOM, bounds.endDOM);
    let preferredPos = sel.from,
        preferredSide = null; // Prefer anchoring to end when Backspace is pressed (or, on
    // Android, when something was deleted)

    if (view.inputState.lastKeyCode === 8 && view.inputState.lastKeyTime > Date.now() - 100 || browser.android && reader.text.length < to - from) {
      preferredPos = sel.to;
      preferredSide = "end";
    }

    let diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), reader.text, preferredPos - from, preferredSide);

    if (diff) {
      // Chrome inserts two newlines when pressing shift-enter at the
      // end of a line. This drops one of those.
      if (browser.chrome && view.inputState.lastKeyCode == 13 && diff.toB == diff.from + 2 && reader.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder) diff.toB--;
      change = {
        from: from + diff.from,
        to: from + diff.toA,
        insert: _state.Text.of(reader.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder))
      };
    }

    newSel = selectionFromPoints(selPoints, from);
  } else if (view.hasFocus || !view.state.facet(editable)) {
    let domSel = view.observer.selectionRange;
    let {
      impreciseHead: iHead,
      impreciseAnchor: iAnchor
    } = view.docView;
    let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset || !contains(view.contentDOM, domSel.focusNode) ? view.state.selection.main.head : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
    let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset || !contains(view.contentDOM, domSel.anchorNode) ? view.state.selection.main.anchor : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
    if (head != sel.head || anchor != sel.anchor) newSel = _state.EditorSelection.single(anchor, head);
  }

  if (!change && !newSel) return false; // Heuristic to notice typing over a selected character

  if (!change && typeOver && !sel.empty && newSel && newSel.main.empty) change = {
    from: sel.from,
    to: sel.to,
    insert: view.state.doc.slice(sel.from, sel.to)
  }; // If the change is inside the selection and covers most of it,
  // assume it is a selection replace (with identical characters at
  // the start/end not included in the diff)
  else if (change && change.from >= sel.from && change.to <= sel.to && (change.from != sel.from || change.to != sel.to) && sel.to - sel.from - (change.to - change.from) <= 4) change = {
    from: sel.from,
    to: sel.to,
    insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
  }; // Detect insert-period-on-double-space Mac behavior, and transform
  // it into a regular space insert.
  else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 && change.insert.toString() == ".") change = {
    from: sel.from,
    to: sel.to,
    insert: _state.Text.of([" "])
  };

  if (change) {
    let startState = view.state;
    if (browser.ios && view.inputState.flushIOSKey(view)) return true; // Android browsers don't fire reasonable key events for enter,
    // backspace, or delete. So this detects changes that look like
    // they're caused by those keys, and reinterprets them as key
    // events. (Some of these keys are also handled by beforeinput
    // events and the pendingAndroidKey mechanism, but that's not
    // reliable in all situations.)

    if (browser.android && (change.from == sel.from && change.to == sel.to && change.insert.length == 1 && change.insert.lines == 2 && dispatchKey(view.contentDOM, "Enter", 13) || change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 && dispatchKey(view.contentDOM, "Backspace", 8) || change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 && dispatchKey(view.contentDOM, "Delete", 46))) return true;
    let text = change.insert.toString();
    if (view.state.facet(inputHandler).some(h => h(view, change.from, change.to, text))) return true;
    if (view.inputState.composing >= 0) view.inputState.composing++;
    let tr;

    if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 && (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) && view.inputState.composing < 0) {
      let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
      let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
      tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));
    } else {
      let changes = startState.changes(change);
      let mainSel = newSel && !startState.selection.main.eq(newSel.main) && newSel.main.to <= changes.newLength ? newSel.main : undefined; // Try to apply a composition change to all cursors

      if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 && change.to <= sel.to && change.to >= sel.to - 10) {
        let replaced = view.state.sliceDoc(change.from, change.to);
        let compositionRange = compositionSurroundingNode(view) || view.state.doc.lineAt(sel.head);
        let offset = sel.to - change.to,
            size = sel.to - sel.from;
        tr = startState.changeByRange(range => {
          if (range.from == sel.from && range.to == sel.to) return {
            changes,
            range: mainSel || range.map(changes)
          };
          let to = range.to - offset,
              from = to - replaced.length;
          if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced || // Unfortunately, there's no way to make multiple
          // changes in the same node work without aborting
          // composition, so cursors in the composition range are
          // ignored.
          compositionRange && range.to >= compositionRange.from && range.from <= compositionRange.to) return {
            range
          };
          let rangeChanges = startState.changes({
            from,
            to,
            insert: change.insert
          }),
              selOff = range.to - sel.to;
          return {
            changes: rangeChanges,
            range: !mainSel ? range.map(rangeChanges) : _state.EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
          };
        });
      } else {
        tr = {
          changes,
          selection: mainSel && startState.selection.replaceRange(mainSel)
        };
      }
    }

    let userEvent = "input.type";

    if (view.composing) {
      userEvent += ".compose";

      if (view.inputState.compositionFirstChange) {
        userEvent += ".start";
        view.inputState.compositionFirstChange = false;
      }
    }

    view.dispatch(tr, {
      scrollIntoView: true,
      userEvent
    });
    return true;
  } else if (newSel && !newSel.main.eq(sel)) {
    let scrollIntoView = false,
        userEvent = "select";

    if (view.inputState.lastSelectionTime > Date.now() - 50) {
      if (view.inputState.lastSelectionOrigin == "select") scrollIntoView = true;
      userEvent = view.inputState.lastSelectionOrigin;
    }

    view.dispatch({
      selection: newSel,
      scrollIntoView,
      userEvent
    });
    return true;
  } else {
    return false;
  }
}

function findDiff(a, b, preferredPos, preferredSide) {
  let minLen = Math.min(a.length, b.length);
  let from = 0;

  while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from)) from++;

  if (from == minLen && a.length == b.length) return null;
  let toA = a.length,
      toB = b.length;

  while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
    toA--;
    toB--;
  }

  if (preferredSide == "end") {
    let adjust = Math.max(0, from - Math.min(toA, toB));
    preferredPos -= toA + adjust - from;
  }

  if (toA < from && a.length < b.length) {
    let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
    from -= move;
    toB = from + (toB - toA);
    toA = from;
  } else if (toB < from) {
    let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
    from -= move;
    toA = from + (toA - toB);
    toB = from;
  }

  return {
    from,
    toA,
    toB
  };
}

function selectionPoints(view) {
  let result = [];
  if (view.root.activeElement != view.contentDOM) return result;
  let {
    anchorNode,
    anchorOffset,
    focusNode,
    focusOffset
  } = view.observer.selectionRange;

  if (anchorNode) {
    result.push(new DOMPoint(anchorNode, anchorOffset));
    if (focusNode != anchorNode || focusOffset != anchorOffset) result.push(new DOMPoint(focusNode, focusOffset));
  }

  return result;
}

function selectionFromPoints(points, base) {
  if (points.length == 0) return null;
  let anchor = points[0].pos,
      head = points.length == 2 ? points[1].pos : anchor;
  return anchor > -1 && head > -1 ? _state.EditorSelection.single(anchor + base, head + base) : null;
} // The editor's update state machine looks something like this:
//
//     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
//                                         ↑      ↓
//                                         Updating (measure)
//
// The difference between 'Idle' and 'Idle (unchecked)' lies in
// whether a layout check has been scheduled. A regular update through
// the `update` method updates the DOM in a write-only fashion, and
// relies on a check (scheduled with `requestAnimationFrame`) to make
// sure everything is where it should be and the viewport covers the
// visible code. That check continues to measure and then optionally
// update until it reaches a coherent state.

/**
An editor view represents the editor's user interface. It holds
the editable DOM surface, and possibly other elements such as the
line number gutter. It handles events and dispatches state
transactions for editing actions.
*/


class EditorView {
  /**
  Construct a new view. You'll want to either provide a `parent`
  option, or put `view.dom` into your document after creating a
  view, so that the user can see the editor.
  */
  constructor(config = {}) {
    this.plugins = [];
    this.pluginMap = new Map();
    this.editorAttrs = {};
    this.contentAttrs = {};
    this.bidiCache = [];
    this.destroyed = false;
    /**
    @internal
    */

    this.updateState = 2
    /* Updating */
    ;
    /**
    @internal
    */

    this.measureScheduled = -1;
    /**
    @internal
    */

    this.measureRequests = [];
    this.contentDOM = document.createElement("div");
    this.scrollDOM = document.createElement("div");
    this.scrollDOM.tabIndex = -1;
    this.scrollDOM.className = "cm-scroller";
    this.scrollDOM.appendChild(this.contentDOM);
    this.announceDOM = document.createElement("div");
    this.announceDOM.style.cssText = "position: absolute; top: -10000px";
    this.announceDOM.setAttribute("aria-live", "polite");
    this.dom = document.createElement("div");
    this.dom.appendChild(this.announceDOM);
    this.dom.appendChild(this.scrollDOM);

    this._dispatch = config.dispatch || (tr => this.update([tr]));

    this.dispatch = this.dispatch.bind(this);
    this._root = config.root || getRoot(config.parent) || document;
    this.viewState = new ViewState(config.state || _state.EditorState.create(config));
    this.plugins = this.state.facet(viewPlugin).map(spec => new PluginInstance(spec));

    for (let plugin of this.plugins) plugin.update(this);

    this.observer = new DOMObserver(this, (from, to, typeOver) => {
      return applyDOMChange(this, from, to, typeOver);
    }, event => {
      this.inputState.runScrollHandlers(this, event);
      if (this.observer.intersecting) this.measure();
    });
    this.inputState = new InputState(this);
    this.inputState.ensureHandlers(this, this.plugins);
    this.docView = new DocView(this);
    this.mountStyles();
    this.updateAttrs();
    this.updateState = 0
    /* Idle */
    ;
    this.requestMeasure();
    if (config.parent) config.parent.appendChild(this.dom);
  }
  /**
  The current editor state.
  */


  get state() {
    return this.viewState.state;
  }
  /**
  To be able to display large documents without consuming too much
  memory or overloading the browser, CodeMirror only draws the
  code that is visible (plus a margin around it) to the DOM. This
  property tells you the extent of the current drawn viewport, in
  document positions.
  */


  get viewport() {
    return this.viewState.viewport;
  }
  /**
  When there are, for example, large collapsed ranges in the
  viewport, its size can be a lot bigger than the actual visible
  content. Thus, if you are doing something like styling the
  content in the viewport, it is preferable to only do so for
  these ranges, which are the subset of the viewport that is
  actually drawn.
  */


  get visibleRanges() {
    return this.viewState.visibleRanges;
  }
  /**
  Returns false when the editor is entirely scrolled out of view
  or otherwise hidden.
  */


  get inView() {
    return this.viewState.inView;
  }
  /**
  Indicates whether the user is currently composing text via
  [IME](https://en.wikipedia.org/wiki/Input_method), and at least
  one change has been made in the current composition.
  */


  get composing() {
    return this.inputState.composing > 0;
  }
  /**
  Indicates whether the user is currently in composing state. Note
  that on some platforms, like Android, this will be the case a
  lot, since just putting the cursor on a word starts a
  composition there.
  */


  get compositionStarted() {
    return this.inputState.composing >= 0;
  }
  /**
  The document or shadow root that the view lives in.
  */


  get root() {
    return this._root;
  }

  dispatch(...input) {
    this._dispatch(input.length == 1 && input[0] instanceof _state.Transaction ? input[0] : this.state.update(...input));
  }
  /**
  Update the view for the given array of transactions. This will
  update the visible document and selection to match the state
  produced by the transactions, and notify view plugins of the
  change. You should usually call
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
  as a primitive.
  */


  update(transactions) {
    if (this.updateState != 0
    /* Idle */
    ) throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
    let redrawn = false,
        attrsChanged = false,
        update;
    let state = this.state;

    for (let tr of transactions) {
      if (tr.startState != state) throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
      state = tr.state;
    }

    if (this.destroyed) {
      this.viewState.state = state;
      return;
    }

    this.observer.clear(); // When the phrases change, redraw the editor

    if (state.facet(_state.EditorState.phrases) != this.state.facet(_state.EditorState.phrases)) return this.setState(state);
    update = ViewUpdate.create(this, state, transactions);
    let scrollTarget = this.viewState.scrollTarget;

    try {
      this.updateState = 2
      /* Updating */
      ;

      for (let tr of transactions) {
        if (scrollTarget) scrollTarget = scrollTarget.map(tr.changes);

        if (tr.scrollIntoView) {
          let {
            main
          } = tr.state.selection;
          scrollTarget = new ScrollTarget(main.empty ? main : _state.EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
        }

        for (let e of tr.effects) if (e.is(scrollIntoView)) scrollTarget = e.value;
      }

      this.viewState.update(update, scrollTarget);
      this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);

      if (!update.empty) {
        this.updatePlugins(update);
        this.inputState.update(update);
      }

      redrawn = this.docView.update(update);
      if (this.state.facet(styleModule) != this.styleModules) this.mountStyles();
      attrsChanged = this.updateAttrs();
      this.showAnnouncements(transactions);
      this.docView.updateSelection(redrawn, transactions.some(tr => tr.isUserEvent("select.pointer")));
    } finally {
      this.updateState = 0
      /* Idle */
      ;
    }

    if (update.startState.facet(theme) != update.state.facet(theme)) this.viewState.mustMeasureContent = true;
    if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent) this.requestMeasure();
    if (!update.empty) for (let listener of this.state.facet(updateListener)) listener(update);
  }
  /**
  Reset the view to the given state. (This will cause the entire
  document to be redrawn and all view plugins to be reinitialized,
  so you should probably only use it when the new state isn't
  derived from the old state. Otherwise, use
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
  */


  setState(newState) {
    if (this.updateState != 0
    /* Idle */
    ) throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");

    if (this.destroyed) {
      this.viewState.state = newState;
      return;
    }

    this.updateState = 2
    /* Updating */
    ;
    let hadFocus = this.hasFocus;

    try {
      for (let plugin of this.plugins) plugin.destroy(this);

      this.viewState = new ViewState(newState);
      this.plugins = newState.facet(viewPlugin).map(spec => new PluginInstance(spec));
      this.pluginMap.clear();

      for (let plugin of this.plugins) plugin.update(this);

      this.docView = new DocView(this);
      this.inputState.ensureHandlers(this, this.plugins);
      this.mountStyles();
      this.updateAttrs();
      this.bidiCache = [];
    } finally {
      this.updateState = 0
      /* Idle */
      ;
    }

    if (hadFocus) this.focus();
    this.requestMeasure();
  }

  updatePlugins(update) {
    let prevSpecs = update.startState.facet(viewPlugin),
        specs = update.state.facet(viewPlugin);

    if (prevSpecs != specs) {
      let newPlugins = [];

      for (let spec of specs) {
        let found = prevSpecs.indexOf(spec);

        if (found < 0) {
          newPlugins.push(new PluginInstance(spec));
        } else {
          let plugin = this.plugins[found];
          plugin.mustUpdate = update;
          newPlugins.push(plugin);
        }
      }

      for (let plugin of this.plugins) if (plugin.mustUpdate != update) plugin.destroy(this);

      this.plugins = newPlugins;
      this.pluginMap.clear();
      this.inputState.ensureHandlers(this, this.plugins);
    } else {
      for (let p of this.plugins) p.mustUpdate = update;
    }

    for (let i = 0; i < this.plugins.length; i++) this.plugins[i].update(this);
  }
  /**
  @internal
  */


  measure(flush = true) {
    if (this.destroyed) return;
    if (this.measureScheduled > -1) cancelAnimationFrame(this.measureScheduled);
    this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame

    if (flush) this.observer.forceFlush();
    let updated = null;
    let {
      scrollHeight,
      scrollTop,
      clientHeight
    } = this.scrollDOM;
    let refHeight = scrollTop > scrollHeight - clientHeight - 4 ? scrollHeight : scrollTop;

    try {
      for (let i = 0;; i++) {
        this.updateState = 1
        /* Measuring */
        ;
        let oldViewport = this.viewport;
        let refBlock = this.viewState.lineBlockAtHeight(refHeight);
        let changed = this.viewState.measure(this);
        if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null) break;

        if (i > 5) {
          console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
          break;
        }

        let measuring = []; // Only run measure requests in this cycle when the viewport didn't change

        if (!(changed & 4
        /* Viewport */
        )) [this.measureRequests, measuring] = [measuring, this.measureRequests];
        let measured = measuring.map(m => {
          try {
            return m.read(this);
          } catch (e) {
            logException(this.state, e);
            return BadMeasure;
          }
        });
        let update = ViewUpdate.create(this, this.state, []),
            redrawn = false,
            scrolled = false;
        update.flags |= changed;
        if (!updated) updated = update;else updated.flags |= changed;
        this.updateState = 2
        /* Updating */
        ;

        if (!update.empty) {
          this.updatePlugins(update);
          this.inputState.update(update);
          this.updateAttrs();
          redrawn = this.docView.update(update);
        }

        for (let i = 0; i < measuring.length; i++) if (measured[i] != BadMeasure) {
          try {
            let m = measuring[i];
            if (m.write) m.write(measured[i], this);
          } catch (e) {
            logException(this.state, e);
          }
        }

        if (this.viewState.scrollTarget) {
          this.docView.scrollIntoView(this.viewState.scrollTarget);
          this.viewState.scrollTarget = null;
          scrolled = true;
        } else {
          let diff = this.viewState.lineBlockAt(refBlock.from).top - refBlock.top;

          if (diff > 1 || diff < -1) {
            this.scrollDOM.scrollTop += diff;
            scrolled = true;
          }
        }

        if (redrawn) this.docView.updateSelection(true);
        if (this.viewport.from == oldViewport.from && this.viewport.to == oldViewport.to && !scrolled && this.measureRequests.length == 0) break;
      }
    } finally {
      this.updateState = 0
      /* Idle */
      ;
      this.measureScheduled = -1;
    }

    if (updated && !updated.empty) for (let listener of this.state.facet(updateListener)) listener(updated);
  }
  /**
  Get the CSS classes for the currently active editor themes.
  */


  get themeClasses() {
    return baseThemeID + " " + (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " + this.state.facet(theme);
  }

  updateAttrs() {
    let editorAttrs = attrsFromFacet(this, editorAttributes, {
      class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
    });
    let contentAttrs = {
      spellcheck: "false",
      autocorrect: "off",
      autocapitalize: "off",
      translate: "no",
      contenteditable: !this.state.facet(editable) ? "false" : "true",
      class: "cm-content",
      style: `${browser.tabSize}: ${this.state.tabSize}`,
      role: "textbox",
      "aria-multiline": "true"
    };
    if (this.state.readOnly) contentAttrs["aria-readonly"] = "true";
    attrsFromFacet(this, contentAttributes, contentAttrs);
    let changed = this.observer.ignore(() => {
      let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
      let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
      return changedContent || changedEditor;
    });
    this.editorAttrs = editorAttrs;
    this.contentAttrs = contentAttrs;
    return changed;
  }

  showAnnouncements(trs) {
    let first = true;

    for (let tr of trs) for (let effect of tr.effects) if (effect.is(EditorView.announce)) {
      if (first) this.announceDOM.textContent = "";
      first = false;
      let div = this.announceDOM.appendChild(document.createElement("div"));
      div.textContent = effect.value;
    }
  }

  mountStyles() {
    this.styleModules = this.state.facet(styleModule);

    _styleMod.StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1).reverse());
  }

  readMeasured() {
    if (this.updateState == 2
    /* Updating */
    ) throw new Error("Reading the editor layout isn't allowed during an update");
    if (this.updateState == 0
    /* Idle */
    && this.measureScheduled > -1) this.measure(false);
  }
  /**
  Schedule a layout measurement, optionally providing callbacks to
  do custom DOM measuring followed by a DOM write phase. Using
  this is preferable reading DOM layout directly from, for
  example, an event handler, because it'll make sure measuring and
  drawing done by other components is synchronized, avoiding
  unnecessary DOM layout computations.
  */


  requestMeasure(request) {
    if (this.measureScheduled < 0) this.measureScheduled = requestAnimationFrame(() => this.measure());

    if (request) {
      if (request.key != null) for (let i = 0; i < this.measureRequests.length; i++) {
        if (this.measureRequests[i].key === request.key) {
          this.measureRequests[i] = request;
          return;
        }
      }
      this.measureRequests.push(request);
    }
  }
  /**
  Get the value of a specific plugin, if present. Note that
  plugins that crash can be dropped from a view, so even when you
  know you registered a given plugin, it is recommended to check
  the return value of this method.
  */


  plugin(plugin) {
    let known = this.pluginMap.get(plugin);
    if (known === undefined || known && known.spec != plugin) this.pluginMap.set(plugin, known = this.plugins.find(p => p.spec == plugin) || null);
    return known && known.update(this).value;
  }
  /**
  The top position of the document, in screen coordinates. This
  may be negative when the editor is scrolled down. Points
  directly to the top of the first line, not above the padding.
  */


  get documentTop() {
    return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
  }
  /**
  Reports the padding above and below the document.
  */


  get documentPadding() {
    return {
      top: this.viewState.paddingTop,
      bottom: this.viewState.paddingBottom
    };
  }
  /**
  Find the text line or block widget at the given vertical
  position (which is interpreted as relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
  */


  elementAtHeight(height) {
    this.readMeasured();
    return this.viewState.elementAtHeight(height);
  }
  /**
  Find the line block (see
  [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
  height, again interpreted relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
  */


  lineBlockAtHeight(height) {
    this.readMeasured();
    return this.viewState.lineBlockAtHeight(height);
  }
  /**
  Get the extent and vertical position of all [line
  blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
  are relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
  */


  get viewportLineBlocks() {
    return this.viewState.viewportLines;
  }
  /**
  Find the line block around the given document position. A line
  block is a range delimited on both sides by either a
  non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the
  start/end of the document. It will usually just hold a line of
  text, but may be broken into multiple textblocks by block
  widgets.
  */


  lineBlockAt(pos) {
    return this.viewState.lineBlockAt(pos);
  }
  /**
  The editor's total content height.
  */


  get contentHeight() {
    return this.viewState.contentHeight;
  }
  /**
  Move a cursor position by [grapheme
  cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
  the motion is away from the line start, or towards it. In
  bidirectional text, the line is traversed in visual order, using
  the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
  When the start position was the last one on the line, the
  returned position will be across the line break. If there is no
  further line, the original position is returned.
  
  By default, this method moves over a single cluster. The
  optional `by` argument can be used to move across more. It will
  be called with the first cluster as argument, and should return
  a predicate that determines, for each subsequent cluster,
  whether it should also be moved over.
  */


  moveByChar(start, forward, by) {
    return skipAtoms(this, start, moveByChar(this, start, forward, by));
  }
  /**
  Move a cursor position across the next group of either
  [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
  non-whitespace characters.
  */


  moveByGroup(start, forward) {
    return skipAtoms(this, start, moveByChar(this, start, forward, initial => byGroup(this, start.head, initial)));
  }
  /**
  Move to the next line boundary in the given direction. If
  `includeWrap` is true, line wrapping is on, and there is a
  further wrap point on the current line, the wrap point will be
  returned. Otherwise this function will return the start or end
  of the line.
  */


  moveToLineBoundary(start, forward, includeWrap = true) {
    return moveToLineBoundary(this, start, forward, includeWrap);
  }
  /**
  Move a cursor position vertically. When `distance` isn't given,
  it defaults to moving to the next line (including wrapped
  lines). Otherwise, `distance` should provide a positive distance
  in pixels.
  
  When `start` has a
  [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
  motion will use that as a target horizontal position. Otherwise,
  the cursor's own horizontal position is used. The returned
  cursor will have its goal column set to whichever column was
  used.
  */


  moveVertically(start, forward, distance) {
    return skipAtoms(this, start, moveVertically(this, start, forward, distance));
  }
  /**
  Find the DOM parent node and offset (child offset if `node` is
  an element, character offset when it is a text node) at the
  given document position.
  
  Note that for positions that aren't currently in
  `visibleRanges`, the resulting DOM position isn't necessarily
  meaningful (it may just point before or after a placeholder
  element).
  */


  domAtPos(pos) {
    return this.docView.domAtPos(pos);
  }
  /**
  Find the document position at the given DOM node. Can be useful
  for associating positions with DOM events. Will raise an error
  when `node` isn't part of the editor content.
  */


  posAtDOM(node, offset = 0) {
    return this.docView.posFromDOM(node, offset);
  }

  posAtCoords(coords, precise = true) {
    this.readMeasured();
    return posAtCoords(this, coords, precise);
  }
  /**
  Get the screen coordinates at the given document position.
  `side` determines whether the coordinates are based on the
  element before (-1) or after (1) the position (if no element is
  available on the given side, the method will transparently use
  another strategy to get reasonable coordinates).
  */


  coordsAtPos(pos, side = 1) {
    this.readMeasured();
    let rect = this.docView.coordsAt(pos, side);
    if (!rect || rect.left == rect.right) return rect;
    let line = this.state.doc.lineAt(pos),
        order = this.bidiSpans(line);
    let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
    return flattenRect(rect, span.dir == Direction.LTR == side > 0);
  }
  /**
  The default width of a character in the editor. May not
  accurately reflect the width of all characters (given variable
  width fonts or styling of invididual ranges).
  */


  get defaultCharacterWidth() {
    return this.viewState.heightOracle.charWidth;
  }
  /**
  The default height of a line in the editor. May not be accurate
  for all lines.
  */


  get defaultLineHeight() {
    return this.viewState.heightOracle.lineHeight;
  }
  /**
  The text direction
  ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
  CSS property) of the editor's content element.
  */


  get textDirection() {
    return this.viewState.defaultTextDirection;
  }
  /**
  Find the text direction of the block at the given position, as
  assigned by CSS. If
  [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
  isn't enabled, or the given position is outside of the viewport,
  this will always return the same as
  [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
  this may trigger a DOM layout.
  */


  textDirectionAt(pos) {
    let perLine = this.state.facet(perLineTextDirection);
    if (!perLine || pos < this.viewport.from || pos > this.viewport.to) return this.textDirection;
    this.readMeasured();
    return this.docView.textDirectionAt(pos);
  }
  /**
  Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
  (as determined by the
  [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
  CSS property of its content element).
  */


  get lineWrapping() {
    return this.viewState.heightOracle.lineWrapping;
  }
  /**
  Returns the bidirectional text structure of the given line
  (which should be in the current document) as an array of span
  objects. The order of these spans matches the [text
  direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
  left-to-right, the leftmost spans come first, otherwise the
  rightmost spans come first.
  */


  bidiSpans(line) {
    if (line.length > MaxBidiLine) return trivialOrder(line.length);
    let dir = this.textDirectionAt(line.from);

    for (let entry of this.bidiCache) if (entry.from == line.from && entry.dir == dir) return entry.order;

    let order = computeOrder(line.text, dir);
    this.bidiCache.push(new CachedOrder(line.from, line.to, dir, order));
    return order;
  }
  /**
  Check whether the editor has focus.
  */


  get hasFocus() {
    var _a; // Safari return false for hasFocus when the context menu is open
    // or closing, which leads us to ignore selection changes from the
    // context menu because it looks like the editor isn't focused.
    // This kludges around that.


    return (document.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
  }
  /**
  Put focus on the editor.
  */


  focus() {
    this.observer.ignore(() => {
      focusPreventScroll(this.contentDOM);
      this.docView.updateSelection();
    });
  }
  /**
  Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
  necessary when moving the editor's existing DOM to a new window or shadow root.
  */


  setRoot(root) {
    if (this._root != root) {
      this._root = root;
      this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView);
      this.mountStyles();
    }
  }
  /**
  Clean up this editor view, removing its element from the
  document, unregistering event handlers, and notifying
  plugins. The view instance can no longer be used after
  calling this.
  */


  destroy() {
    for (let plugin of this.plugins) plugin.destroy(this);

    this.plugins = [];
    this.inputState.destroy();
    this.dom.remove();
    this.observer.destroy();
    if (this.measureScheduled > -1) cancelAnimationFrame(this.measureScheduled);
    this.destroyed = true;
  }
  /**
  Returns an effect that can be
  [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
  cause it to scroll the given position or range into view.
  */


  static scrollIntoView(pos, options = {}) {
    return scrollIntoView.of(new ScrollTarget(typeof pos == "number" ? _state.EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
  }
  /**
  Returns an extension that can be used to add DOM event handlers.
  The value should be an object mapping event names to handler
  functions. For any given event, such functions are ordered by
  extension precedence, and the first handler to return true will
  be assumed to have handled that event, and no other handlers or
  built-in behavior will be activated for it. These are registered
  on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
  for `scroll` handlers, which will be called any time the
  editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
  its parent nodes is scrolled.
  */


  static domEventHandlers(handlers) {
    return ViewPlugin.define(() => ({}), {
      eventHandlers: handlers
    });
  }
  /**
  Create a theme extension. The first argument can be a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)
  style spec providing the styles for the theme. These will be
  prefixed with a generated class for the style.
  
  Because the selectors will be prefixed with a scope class, rule
  that directly match the editor's [wrapper
  element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
  added—need to be explicitly differentiated by adding an `&` to
  the selector for that element—for example
  `&.cm-focused`.
  
  When `dark` is set to true, the theme will be marked as dark,
  which will cause the `&dark` rules from [base
  themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
  `&light` when a light theme is active).
  */


  static theme(spec, options) {
    let prefix = _styleMod.StyleModule.newName();

    let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
    if (options && options.dark) result.push(darkTheme.of(true));
    return result;
  }
  /**
  Create an extension that adds styles to the base theme. Like
  with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
  place of the editor wrapper element when directly targeting
  that. You can also use `&dark` or `&light` instead to only
  target editors with a dark or light theme.
  */


  static baseTheme(spec) {
    return _state.Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
  }
  /**
  Retrieve an editor view instance from the view's DOM
  representation.
  */


  static findFromDOM(dom) {
    var _a;

    let content = dom.querySelector(".cm-content");
    let cView = content && ContentView.get(content) || ContentView.get(dom);
    return ((_a = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a === void 0 ? void 0 : _a.view) || null;
  }

}
/**
Facet to add a [style
module](https://github.com/marijnh/style-mod#documentation) to
an editor view. The view will ensure that the module is
mounted in its [document
root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
*/


exports.EditorView = EditorView;
EditorView.styleModule = styleModule;
/**
An input handler can override the way changes to the editable
DOM content are handled. Handlers are passed the document
positions between which the change was found, and the new
content. When one returns true, no further input handlers are
called and the default behavior is prevented.
*/

EditorView.inputHandler = inputHandler;
/**
By default, the editor assumes all its content has the same
[text direction](https://codemirror.net/6/docs/ref/#view.Direction). Configure this with a `true`
value to make it read the text direction of every (rendered)
line separately.
*/

EditorView.perLineTextDirection = perLineTextDirection;
/**
Allows you to provide a function that should be called when the
library catches an exception from an extension (mostly from view
plugins, but may be used by other extensions to route exceptions
from user-code-provided callbacks). This is mostly useful for
debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
*/

EditorView.exceptionSink = exceptionSink;
/**
A facet that can be used to register a function to be called
every time the view updates.
*/

EditorView.updateListener = updateListener;
/**
Facet that controls whether the editor content DOM is editable.
When its highest-precedence value is `false`, the element will
not have its `contenteditable` attribute set. (Note that this
doesn't affect API calls that change the editor content, even
when those are bound to keys or buttons. See the
[`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)
*/

EditorView.editable = editable;
/**
Allows you to influence the way mouse selection happens. The
functions in this facet will be called for a `mousedown` event
on the editor, and can return an object that overrides the way a
selection is computed from that mouse click or drag.
*/

EditorView.mouseSelectionStyle = mouseSelectionStyle;
/**
Facet used to configure whether a given selection drag event
should move or copy the selection. The given predicate will be
called with the `mousedown` event, and can return `true` when
the drag should move the content.
*/

EditorView.dragMovesSelection = dragMovesSelection$1;
/**
Facet used to configure whether a given selecting click adds a
new range to the existing selection or replaces it entirely. The
default behavior is to check `event.metaKey` on macOS, and
`event.ctrlKey` elsewhere.
*/

EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
/**
A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
are shown in the view. Decorations can be provided in two
ways—directly, or via a function that takes an editor view.

Only decoration sets provided directly are allowed to influence
the editor's vertical layout structure. The ones provided as
functions are called _after_ the new viewport has been computed,
and thus **must not** introduce block widgets or replacing
decorations that cover line breaks.
*/

EditorView.decorations = decorations;
/**
Used to provide ranges that should be treated as atoms as far as
cursor motion is concerned. This causes methods like
[`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
[`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
commands built on top of them) to skip across such regions when
a selection endpoint would enter them. This does _not_ prevent
direct programmatic [selection
updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
regions.
*/

EditorView.atomicRanges = atomicRanges;
/**
Facet that allows extensions to provide additional scroll
margins (space around the sides of the scrolling element that
should be considered invisible). This can be useful when the
plugin introduces elements that cover part of that element (for
example a horizontally fixed gutter).
*/

EditorView.scrollMargins = scrollMargins;
/**
This facet records whether a dark theme is active. The extension
returned by [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme) automatically
includes an instance of this when the `dark` option is set to
true.
*/

EditorView.darkTheme = darkTheme;
/**
Facet that provides additional DOM attributes for the editor's
editable DOM element.
*/

EditorView.contentAttributes = contentAttributes;
/**
Facet that provides DOM attributes for the editor's outer
element.
*/

EditorView.editorAttributes = editorAttributes;
/**
An extension that enables line wrapping in the editor (by
setting CSS `white-space` to `pre-wrap` in the content).
*/

EditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({
  "class": "cm-lineWrapping"
});
/**
State effect used to include screen reader announcements in a
transaction. These will be added to the DOM in a visually hidden
element with `aria-live="polite"` set, and should be used to
describe effects that are visually obvious but may not be
noticed by screen reader users (such as moving to the next
search match).
*/

EditorView.announce = /*@__PURE__*/_state.StateEffect.define(); // Maximum line length for which we compute accurate bidi info

const MaxBidiLine = 4096;
const BadMeasure = {};

class CachedOrder {
  constructor(from, to, dir, order) {
    this.from = from;
    this.to = to;
    this.dir = dir;
    this.order = order;
  }

  static update(cache, changes) {
    if (changes.empty) return cache;
    let result = [],
        lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;

    for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {
      let entry = cache[i];
      if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to)) result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));
    }

    return result;
  }

}

function attrsFromFacet(view, facet, base) {
  for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
    let source = sources[i],
        value = typeof source == "function" ? source(view) : source;
    if (value) combineAttrs(value, base);
  }

  return base;
}

const currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";

function normalizeKeyName(name, platform) {
  const parts = name.split(/-(?!$)/);
  let result = parts[parts.length - 1];
  if (result == "Space") result = " ";
  let alt, ctrl, shift, meta;

  for (let i = 0; i < parts.length - 1; ++i) {
    const mod = parts[i];
    if (/^(cmd|meta|m)$/i.test(mod)) meta = true;else if (/^a(lt)?$/i.test(mod)) alt = true;else if (/^(c|ctrl|control)$/i.test(mod)) ctrl = true;else if (/^s(hift)?$/i.test(mod)) shift = true;else if (/^mod$/i.test(mod)) {
      if (platform == "mac") meta = true;else ctrl = true;
    } else throw new Error("Unrecognized modifier name: " + mod);
  }

  if (alt) result = "Alt-" + result;
  if (ctrl) result = "Ctrl-" + result;
  if (meta) result = "Meta-" + result;
  if (shift) result = "Shift-" + result;
  return result;
}

function modifiers(name, event, shift) {
  if (event.altKey) name = "Alt-" + name;
  if (event.ctrlKey) name = "Ctrl-" + name;
  if (event.metaKey) name = "Meta-" + name;
  if (shift !== false && event.shiftKey) name = "Shift-" + name;
  return name;
}

const handleKeyEvents = /*@__PURE__*/_state.Prec.default( /*@__PURE__*/EditorView.domEventHandlers({
  keydown(event, view) {
    return runHandlers(getKeymap(view.state), event, view, "editor");
  }

}));
/**
Facet used for registering keymaps.

You can add multiple keymaps to an editor. Their priorities
determine their precedence (the ones specified early or with high
priority get checked first). When a handler has returned `true`
for a given key, no further handlers are called.
*/


const keymap = /*@__PURE__*/_state.Facet.define({
  enables: handleKeyEvents
});

exports.keymap = keymap;
const Keymaps = /*@__PURE__*/new WeakMap(); // This is hidden behind an indirection, rather than directly computed
// by the facet, to keep internal types out of the facet's type.

function getKeymap(state) {
  let bindings = state.facet(keymap);
  let map = Keymaps.get(bindings);
  if (!map) Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));
  return map;
}
/**
Run the key handlers registered for a given scope. The event
object should be a `"keydown"` event. Returns true if any of the
handlers handled it.
*/


function runScopeHandlers(view, event, scope) {
  return runHandlers(getKeymap(view.state), event, view, scope);
}

let storedPrefix = null;
const PrefixTimeout = 4000;

function buildKeymap(bindings, platform = currentPlatform) {
  let bound = Object.create(null);
  let isPrefix = Object.create(null);

  let checkPrefix = (name, is) => {
    let current = isPrefix[name];
    if (current == null) isPrefix[name] = is;else if (current != is) throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
  };

  let add = (scope, key, command, preventDefault) => {
    let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
    let parts = key.split(/ (?!$)/).map(k => normalizeKeyName(k, platform));

    for (let i = 1; i < parts.length; i++) {
      let prefix = parts.slice(0, i).join(" ");
      checkPrefix(prefix, true);
      if (!scopeObj[prefix]) scopeObj[prefix] = {
        preventDefault: true,
        commands: [view => {
          let ourObj = storedPrefix = {
            view,
            prefix,
            scope
          };
          setTimeout(() => {
            if (storedPrefix == ourObj) storedPrefix = null;
          }, PrefixTimeout);
          return true;
        }]
      };
    }

    let full = parts.join(" ");
    checkPrefix(full, false);
    let binding = scopeObj[full] || (scopeObj[full] = {
      preventDefault: false,
      commands: []
    });
    binding.commands.push(command);
    if (preventDefault) binding.preventDefault = true;
  };

  for (let b of bindings) {
    let name = b[platform] || b.key;
    if (!name) continue;

    for (let scope of b.scope ? b.scope.split(" ") : ["editor"]) {
      add(scope, name, b.run, b.preventDefault);
      if (b.shift) add(scope, "Shift-" + name, b.shift, b.preventDefault);
    }
  }

  return bound;
}

function runHandlers(map, event, view, scope) {
  let name = (0, _w3cKeyname.keyName)(event);
  let charCode = (0, _state.codePointAt)(name, 0),
      isChar = (0, _state.codePointSize)(charCode) == name.length && name != " ";
  let prefix = "",
      fallthrough = false;

  if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
    prefix = storedPrefix.prefix + " ";
    if (fallthrough = modifierCodes.indexOf(event.keyCode) < 0) storedPrefix = null;
  }

  let runFor = binding => {
    if (binding) {
      for (let cmd of binding.commands) if (cmd(view)) return true;

      if (binding.preventDefault) fallthrough = true;
    }

    return false;
  };

  let scopeObj = map[scope],
      baseName;

  if (scopeObj) {
    if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)])) return true;

    if (isChar && (event.shiftKey || event.altKey || event.metaKey || charCode > 127) && (baseName = _w3cKeyname.base[event.keyCode]) && baseName != name) {
      if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) return true;else if (event.shiftKey && _w3cKeyname.shift[event.keyCode] != baseName && runFor(scopeObj[prefix + modifiers(_w3cKeyname.shift[event.keyCode], event, false)])) return true;
    } else if (isChar && event.shiftKey) {
      if (runFor(scopeObj[prefix + modifiers(name, event, true)])) return true;
    }
  }

  return fallthrough;
}

const CanHidePrimary = !browser.ios; // FIXME test IE

const selectionConfig = /*@__PURE__*/_state.Facet.define({
  combine(configs) {
    return (0, _state.combineConfig)(configs, {
      cursorBlinkRate: 1200,
      drawRangeCursor: true
    }, {
      cursorBlinkRate: (a, b) => Math.min(a, b),
      drawRangeCursor: (a, b) => a || b
    });
  }

});
/**
Returns an extension that hides the browser's native selection and
cursor, replacing the selection with a background behind the text
(with the `cm-selectionBackground` class), and the
cursors with elements overlaid over the code (using
`cm-cursor-primary` and `cm-cursor-secondary`).

This allows the editor to display secondary selection ranges, and
tends to produce a type of selection more in line with that users
expect in a text editor (the native selection styling will often
leave gaps between lines and won't fill the horizontal space after
a line when the selection continues past it).

It does have a performance cost, in that it requires an extra DOM
layout cycle for many updates (the selection is drawn based on DOM
layout information that's only available after laying out the
content).
*/


function drawSelection(config = {}) {
  return [selectionConfig.of(config), drawSelectionPlugin, hideNativeSelection];
}

class Piece {
  constructor(left, top, width, height, className) {
    this.left = left;
    this.top = top;
    this.width = width;
    this.height = height;
    this.className = className;
  }

  draw() {
    let elt = document.createElement("div");
    elt.className = this.className;
    this.adjust(elt);
    return elt;
  }

  adjust(elt) {
    elt.style.left = this.left + "px";
    elt.style.top = this.top + "px";
    if (this.width >= 0) elt.style.width = this.width + "px";
    elt.style.height = this.height + "px";
  }

  eq(p) {
    return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height && this.className == p.className;
  }

}

const drawSelectionPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
  constructor(view) {
    this.view = view;
    this.rangePieces = [];
    this.cursors = [];
    this.measureReq = {
      read: this.readPos.bind(this),
      write: this.drawSel.bind(this)
    };
    this.selectionLayer = view.scrollDOM.appendChild(document.createElement("div"));
    this.selectionLayer.className = "cm-selectionLayer";
    this.selectionLayer.setAttribute("aria-hidden", "true");
    this.cursorLayer = view.scrollDOM.appendChild(document.createElement("div"));
    this.cursorLayer.className = "cm-cursorLayer";
    this.cursorLayer.setAttribute("aria-hidden", "true");
    view.requestMeasure(this.measureReq);
    this.setBlinkRate();
  }

  setBlinkRate() {
    this.cursorLayer.style.animationDuration = this.view.state.facet(selectionConfig).cursorBlinkRate + "ms";
  }

  update(update) {
    let confChanged = update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
    if (confChanged || update.selectionSet || update.geometryChanged || update.viewportChanged) this.view.requestMeasure(this.measureReq);
    if (update.transactions.some(tr => tr.scrollIntoView)) this.cursorLayer.style.animationName = this.cursorLayer.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
    if (confChanged) this.setBlinkRate();
  }

  readPos() {
    let {
      state
    } = this.view,
        conf = state.facet(selectionConfig);
    let rangePieces = state.selection.ranges.map(r => r.empty ? [] : measureRange(this.view, r)).reduce((a, b) => a.concat(b));
    let cursors = [];

    for (let r of state.selection.ranges) {
      let prim = r == state.selection.main;

      if (r.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {
        let piece = measureCursor(this.view, r, prim);
        if (piece) cursors.push(piece);
      }
    }

    return {
      rangePieces,
      cursors
    };
  }

  drawSel({
    rangePieces,
    cursors
  }) {
    if (rangePieces.length != this.rangePieces.length || rangePieces.some((p, i) => !p.eq(this.rangePieces[i]))) {
      this.selectionLayer.textContent = "";

      for (let p of rangePieces) this.selectionLayer.appendChild(p.draw());

      this.rangePieces = rangePieces;
    }

    if (cursors.length != this.cursors.length || cursors.some((c, i) => !c.eq(this.cursors[i]))) {
      let oldCursors = this.cursorLayer.children;

      if (oldCursors.length !== cursors.length) {
        this.cursorLayer.textContent = "";

        for (const c of cursors) this.cursorLayer.appendChild(c.draw());
      } else {
        cursors.forEach((c, idx) => c.adjust(oldCursors[idx]));
      }

      this.cursors = cursors;
    }
  }

  destroy() {
    this.selectionLayer.remove();
    this.cursorLayer.remove();
  }

});
const themeSpec = {
  ".cm-line": {
    "& ::selection": {
      backgroundColor: "transparent !important"
    },
    "&::selection": {
      backgroundColor: "transparent !important"
    }
  }
};
if (CanHidePrimary) themeSpec[".cm-line"].caretColor = "transparent !important";

const hideNativeSelection = /*@__PURE__*/_state.Prec.highest( /*@__PURE__*/EditorView.theme(themeSpec));

function getBase(view) {
  let rect = view.scrollDOM.getBoundingClientRect();
  let left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth;
  return {
    left: left - view.scrollDOM.scrollLeft,
    top: rect.top - view.scrollDOM.scrollTop
  };
}

function wrappedLine(view, pos, inside) {
  let range = _state.EditorSelection.cursor(pos);

  return {
    from: Math.max(inside.from, view.moveToLineBoundary(range, false, true).from),
    to: Math.min(inside.to, view.moveToLineBoundary(range, true, true).from),
    type: BlockType.Text
  };
}

function blockAt(view, pos) {
  let line = view.lineBlockAt(pos);
  if (Array.isArray(line.type)) for (let l of line.type) {
    if (l.to > pos || l.to == pos && (l.to == line.to || l.type == BlockType.Text)) return l;
  }
  return line;
}

function measureRange(view, range) {
  if (range.to <= view.viewport.from || range.from >= view.viewport.to) return [];
  let from = Math.max(range.from, view.viewport.from),
      to = Math.min(range.to, view.viewport.to);
  let ltr = view.textDirection == Direction.LTR;
  let content = view.contentDOM,
      contentRect = content.getBoundingClientRect(),
      base = getBase(view);
  let lineStyle = window.getComputedStyle(content.firstChild);
  let leftSide = contentRect.left + parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent));
  let rightSide = contentRect.right - parseInt(lineStyle.paddingRight);
  let startBlock = blockAt(view, from),
      endBlock = blockAt(view, to);
  let visualStart = startBlock.type == BlockType.Text ? startBlock : null;
  let visualEnd = endBlock.type == BlockType.Text ? endBlock : null;

  if (view.lineWrapping) {
    if (visualStart) visualStart = wrappedLine(view, from, visualStart);
    if (visualEnd) visualEnd = wrappedLine(view, to, visualEnd);
  }

  if (visualStart && visualEnd && visualStart.from == visualEnd.from) {
    return pieces(drawForLine(range.from, range.to, visualStart));
  } else {
    let top = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
    let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
    let between = [];
    if ((visualStart || startBlock).to < (visualEnd || endBlock).from - 1) between.push(piece(leftSide, top.bottom, rightSide, bottom.top));else if (top.bottom < bottom.top && view.elementAtHeight((top.bottom + bottom.top) / 2).type == BlockType.Text) top.bottom = bottom.top = (top.bottom + bottom.top) / 2;
    return pieces(top).concat(between).concat(pieces(bottom));
  }

  function piece(left, top, right, bottom) {
    return new Piece(left - base.left, top - base.top - 0.01
    /* Epsilon */
    , right - left, bottom - top + 0.01
    /* Epsilon */
    , "cm-selectionBackground");
  }

  function pieces({
    top,
    bottom,
    horizontal
  }) {
    let pieces = [];

    for (let i = 0; i < horizontal.length; i += 2) pieces.push(piece(horizontal[i], top, horizontal[i + 1], bottom));

    return pieces;
  } // Gets passed from/to in line-local positions


  function drawForLine(from, to, line) {
    let top = 1e9,
        bottom = -1e9,
        horizontal = [];

    function addSpan(from, fromOpen, to, toOpen, dir) {
      // Passing 2/-2 is a kludge to force the view to return
      // coordinates on the proper side of block widgets, since
      // normalizing the side there, though appropriate for most
      // coordsAtPos queries, would break selection drawing.
      let fromCoords = view.coordsAtPos(from, from == line.to ? -2 : 2);
      let toCoords = view.coordsAtPos(to, to == line.from ? 2 : -2);
      top = Math.min(fromCoords.top, toCoords.top, top);
      bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
      if (dir == Direction.LTR) horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);else horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
    }

    let start = from !== null && from !== void 0 ? from : line.from,
        end = to !== null && to !== void 0 ? to : line.to; // Split the range by visible range and document line

    for (let r of view.visibleRanges) if (r.to > start && r.from < end) {
      for (let pos = Math.max(r.from, start), endPos = Math.min(r.to, end);;) {
        let docLine = view.state.doc.lineAt(pos);

        for (let span of view.bidiSpans(docLine)) {
          let spanFrom = span.from + docLine.from,
              spanTo = span.to + docLine.from;
          if (spanFrom >= endPos) break;
          if (spanTo > pos) addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);
        }

        pos = docLine.to + 1;
        if (pos >= endPos) break;
      }
    }

    if (horizontal.length == 0) addSpan(start, from == null, end, to == null, view.textDirection);
    return {
      top,
      bottom,
      horizontal
    };
  }

  function drawForWidget(block, top) {
    let y = contentRect.top + (top ? block.top : block.bottom);
    return {
      top: y,
      bottom: y,
      horizontal: []
    };
  }
}

function measureCursor(view, cursor, primary) {
  let pos = view.coordsAtPos(cursor.head, cursor.assoc || 1);
  if (!pos) return null;
  let base = getBase(view);
  return new Piece(pos.left - base.left, pos.top - base.top, -1, pos.bottom - pos.top, primary ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary");
}

const setDropCursorPos = /*@__PURE__*/_state.StateEffect.define({
  map(pos, mapping) {
    return pos == null ? null : mapping.mapPos(pos);
  }

});

const dropCursorPos = /*@__PURE__*/_state.StateField.define({
  create() {
    return null;
  },

  update(pos, tr) {
    if (pos != null) pos = tr.changes.mapPos(pos);
    return tr.effects.reduce((pos, e) => e.is(setDropCursorPos) ? e.value : pos, pos);
  }

});

const drawDropCursor = /*@__PURE__*/ViewPlugin.fromClass(class {
  constructor(view) {
    this.view = view;
    this.cursor = null;
    this.measureReq = {
      read: this.readPos.bind(this),
      write: this.drawCursor.bind(this)
    };
  }

  update(update) {
    var _a;

    let cursorPos = update.state.field(dropCursorPos);

    if (cursorPos == null) {
      if (this.cursor != null) {
        (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.remove();
        this.cursor = null;
      }
    } else {
      if (!this.cursor) {
        this.cursor = this.view.scrollDOM.appendChild(document.createElement("div"));
        this.cursor.className = "cm-dropCursor";
      }

      if (update.startState.field(dropCursorPos) != cursorPos || update.docChanged || update.geometryChanged) this.view.requestMeasure(this.measureReq);
    }
  }

  readPos() {
    let pos = this.view.state.field(dropCursorPos);
    let rect = pos != null && this.view.coordsAtPos(pos);
    if (!rect) return null;
    let outer = this.view.scrollDOM.getBoundingClientRect();
    return {
      left: rect.left - outer.left + this.view.scrollDOM.scrollLeft,
      top: rect.top - outer.top + this.view.scrollDOM.scrollTop,
      height: rect.bottom - rect.top
    };
  }

  drawCursor(pos) {
    if (this.cursor) {
      if (pos) {
        this.cursor.style.left = pos.left + "px";
        this.cursor.style.top = pos.top + "px";
        this.cursor.style.height = pos.height + "px";
      } else {
        this.cursor.style.left = "-100000px";
      }
    }
  }

  destroy() {
    if (this.cursor) this.cursor.remove();
  }

  setDropPos(pos) {
    if (this.view.state.field(dropCursorPos) != pos) this.view.dispatch({
      effects: setDropCursorPos.of(pos)
    });
  }

}, {
  eventHandlers: {
    dragover(event) {
      this.setDropPos(this.view.posAtCoords({
        x: event.clientX,
        y: event.clientY
      }));
    },

    dragleave(event) {
      if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget)) this.setDropPos(null);
    },

    dragend() {
      this.setDropPos(null);
    },

    drop() {
      this.setDropPos(null);
    }

  }
});
/**
Draws a cursor at the current drop position when something is
dragged over the editor.
*/

function dropCursor() {
  return [dropCursorPos, drawDropCursor];
}

function iterMatches(doc, re, from, to, f) {
  re.lastIndex = 0;

  for (let cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {
    if (!cursor.lineBreak) while (m = re.exec(cursor.value)) f(pos + m.index, m);
  }
}

function matchRanges(view, maxLength) {
  let visible = view.visibleRanges;
  if (visible.length == 1 && visible[0].from == view.viewport.from && visible[0].to == view.viewport.to) return visible;
  let result = [];

  for (let {
    from,
    to
  } of visible) {
    from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);
    to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);
    if (result.length && result[result.length - 1].to >= from) result[result.length - 1].to = to;else result.push({
      from,
      to
    });
  }

  return result;
}
/**
Helper class used to make it easier to maintain decorations on
visible code that matches a given regular expression. To be used
in a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin). Instances of this object
represent a matching configuration.
*/


class MatchDecorator {
  /**
  Create a decorator.
  */
  constructor(config) {
    const {
      regexp,
      decoration,
      decorate,
      boundary,
      maxLength = 1000
    } = config;
    if (!regexp.global) throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
    this.regexp = regexp;

    if (decorate) {
      this.addMatch = (match, view, from, add) => decorate(add, from, from + match[0].length, match, view);
    } else if (decoration) {
      let getDeco = typeof decoration == "function" ? decoration : () => decoration;

      this.addMatch = (match, view, from, add) => add(from, from + match[0].length, getDeco(match, view, from));
    } else {
      throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
    }

    this.boundary = boundary;
    this.maxLength = maxLength;
  }
  /**
  Compute the full set of decorations for matches in the given
  view's viewport. You'll want to call this when initializing your
  plugin.
  */


  createDeco(view) {
    let build = new _state.RangeSetBuilder(),
        add = build.add.bind(build);

    for (let {
      from,
      to
    } of matchRanges(view, this.maxLength)) iterMatches(view.state.doc, this.regexp, from, to, (from, m) => this.addMatch(m, view, from, add));

    return build.finish();
  }
  /**
  Update a set of decorations for a view update. `deco` _must_ be
  the set of decorations produced by _this_ `MatchDecorator` for
  the view state before the update.
  */


  updateDeco(update, deco) {
    let changeFrom = 1e9,
        changeTo = -1;
    if (update.docChanged) update.changes.iterChanges((_f, _t, from, to) => {
      if (to > update.view.viewport.from && from < update.view.viewport.to) {
        changeFrom = Math.min(from, changeFrom);
        changeTo = Math.max(to, changeTo);
      }
    });
    if (update.viewportChanged || changeTo - changeFrom > 1000) return this.createDeco(update.view);
    if (changeTo > -1) return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
    return deco;
  }

  updateRange(view, deco, updateFrom, updateTo) {
    for (let r of view.visibleRanges) {
      let from = Math.max(r.from, updateFrom),
          to = Math.min(r.to, updateTo);

      if (to > from) {
        let fromLine = view.state.doc.lineAt(from),
            toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
        let start = Math.max(r.from, fromLine.from),
            end = Math.min(r.to, toLine.to);

        if (this.boundary) {
          for (; from > fromLine.from; from--) if (this.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
            start = from;
            break;
          }

          for (; to < toLine.to; to++) if (this.boundary.test(toLine.text[to - toLine.from])) {
            end = to;
            break;
          }
        }

        let ranges = [],
            m;

        let add = (from, to, deco) => ranges.push(deco.range(from, to));

        if (fromLine == toLine) {
          this.regexp.lastIndex = start - fromLine.from;

          while ((m = this.regexp.exec(fromLine.text)) && m.index < end - fromLine.from) this.addMatch(m, view, m.index + fromLine.from, add);
        } else {
          iterMatches(view.state.doc, this.regexp, start, end, (from, m) => this.addMatch(m, view, from, add));
        }

        deco = deco.update({
          filterFrom: start,
          filterTo: end,
          filter: (from, to) => from < start || to > end,
          add: ranges
        });
      }
    }

    return deco;
  }

}

exports.MatchDecorator = MatchDecorator;
const UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
const Specials = /*@__PURE__*/new RegExp("[\u0000-\u0008\u000a-\u001f\u007f-\u009f\u00ad\u061c\u200b\u200e\u200f\u2028\u2029\u202d\u202e\u2066\u2067\u2069\ufeff\ufff9-\ufffc]", UnicodeRegexpSupport);
const Names = {
  0: "null",
  7: "bell",
  8: "backspace",
  10: "newline",
  11: "vertical tab",
  13: "carriage return",
  27: "escape",
  8203: "zero width space",
  8204: "zero width non-joiner",
  8205: "zero width joiner",
  8206: "left-to-right mark",
  8207: "right-to-left mark",
  8232: "line separator",
  8237: "left-to-right override",
  8238: "right-to-left override",
  8294: "left-to-right isolate",
  8295: "right-to-left isolate",
  8297: "pop directional isolate",
  8233: "paragraph separator",
  65279: "zero width no-break space",
  65532: "object replacement"
};
let _supportsTabSize = null;

function supportsTabSize() {
  var _a;

  if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
    let styles = document.body.style;
    _supportsTabSize = ((_a = styles.tabSize) !== null && _a !== void 0 ? _a : styles.MozTabSize) != null;
  }

  return _supportsTabSize || false;
}

const specialCharConfig = /*@__PURE__*/_state.Facet.define({
  combine(configs) {
    let config = (0, _state.combineConfig)(configs, {
      render: null,
      specialChars: Specials,
      addSpecialChars: null
    });
    if (config.replaceTabs = !supportsTabSize()) config.specialChars = new RegExp("\t|" + config.specialChars.source, UnicodeRegexpSupport);
    if (config.addSpecialChars) config.specialChars = new RegExp(config.specialChars.source + "|" + config.addSpecialChars.source, UnicodeRegexpSupport);
    return config;
  }

});
/**
Returns an extension that installs highlighting of special
characters.
*/


function highlightSpecialChars(
/**
Configuration options.
*/
config = {}) {
  return [specialCharConfig.of(config), specialCharPlugin()];
}

let _plugin = null;

function specialCharPlugin() {
  return _plugin || (_plugin = ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.decorations = Decoration.none;
      this.decorationCache = Object.create(null);
      this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
      this.decorations = this.decorator.createDeco(view);
    }

    makeDecorator(conf) {
      return new MatchDecorator({
        regexp: conf.specialChars,
        decoration: (m, view, pos) => {
          let {
            doc
          } = view.state;
          let code = (0, _state.codePointAt)(m[0], 0);

          if (code == 9) {
            let line = doc.lineAt(pos);
            let size = view.state.tabSize,
                col = (0, _state.countColumn)(line.text, size, pos - line.from);
            return Decoration.replace({
              widget: new TabWidget((size - col % size) * this.view.defaultCharacterWidth)
            });
          }

          return this.decorationCache[code] || (this.decorationCache[code] = Decoration.replace({
            widget: new SpecialCharWidget(conf, code)
          }));
        },
        boundary: conf.replaceTabs ? undefined : /[^]/
      });
    }

    update(update) {
      let conf = update.state.facet(specialCharConfig);

      if (update.startState.facet(specialCharConfig) != conf) {
        this.decorator = this.makeDecorator(conf);
        this.decorations = this.decorator.createDeco(update.view);
      } else {
        this.decorations = this.decorator.updateDeco(update, this.decorations);
      }
    }

  }, {
    decorations: v => v.decorations
  }));
}

const DefaultPlaceholder = "\u2022"; // Assigns placeholder characters from the Control Pictures block to
// ASCII control characters

function placeholder$1(code) {
  if (code >= 32) return DefaultPlaceholder;
  if (code == 10) return "\u2424";
  return String.fromCharCode(9216 + code);
}

class SpecialCharWidget extends WidgetType {
  constructor(options, code) {
    super();
    this.options = options;
    this.code = code;
  }

  eq(other) {
    return other.code == this.code;
  }

  toDOM(view) {
    let ph = placeholder$1(this.code);
    let desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
    let custom = this.options.render && this.options.render(this.code, desc, ph);
    if (custom) return custom;
    let span = document.createElement("span");
    span.textContent = ph;
    span.title = desc;
    span.setAttribute("aria-label", desc);
    span.className = "cm-specialChar";
    return span;
  }

  ignoreEvent() {
    return false;
  }

}

class TabWidget extends WidgetType {
  constructor(width) {
    super();
    this.width = width;
  }

  eq(other) {
    return other.width == this.width;
  }

  toDOM() {
    let span = document.createElement("span");
    span.textContent = "\t";
    span.className = "cm-tab";
    span.style.width = this.width + "px";
    return span;
  }

  ignoreEvent() {
    return false;
  }

}

const plugin = /*@__PURE__*/ViewPlugin.fromClass(class {
  constructor() {
    this.height = 1000;
    this.attrs = {
      style: "padding-bottom: 1000px"
    };
  }

  update(update) {
    let height = update.view.viewState.editorHeight - update.view.defaultLineHeight;

    if (height != this.height) {
      this.height = height;
      this.attrs = {
        style: `padding-bottom: ${height}px`
      };
    }
  }

});
/**
Returns an extension that makes sure the content has a bottom
margin equivalent to the height of the editor, minus one line
height, so that every line in the document can be scrolled to the
top of the editor.

This is only meaningful when the editor is scrollable, and should
not be enabled in editors that take the size of their content.
*/

function scrollPastEnd() {
  return [plugin, contentAttributes.of(view => {
    var _a;

    return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.attrs) || null;
  })];
}
/**
Mark lines that have a cursor on them with the `"cm-activeLine"`
DOM class.
*/


function highlightActiveLine() {
  return activeLineHighlighter;
}

const lineDeco = /*@__PURE__*/Decoration.line({
  class: "cm-activeLine"
});
const activeLineHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
  constructor(view) {
    this.decorations = this.getDeco(view);
  }

  update(update) {
    if (update.docChanged || update.selectionSet) this.decorations = this.getDeco(update.view);
  }

  getDeco(view) {
    let lastLineStart = -1,
        deco = [];

    for (let r of view.state.selection.ranges) {
      if (!r.empty) return Decoration.none;
      let line = view.lineBlockAt(r.head);

      if (line.from > lastLineStart) {
        deco.push(lineDeco.range(line.from));
        lastLineStart = line.from;
      }
    }

    return Decoration.set(deco);
  }

}, {
  decorations: v => v.decorations
});

class Placeholder extends WidgetType {
  constructor(content) {
    super();
    this.content = content;
  }

  toDOM() {
    let wrap = document.createElement("span");
    wrap.className = "cm-placeholder";
    wrap.style.pointerEvents = "none";
    wrap.appendChild(typeof this.content == "string" ? document.createTextNode(this.content) : this.content);
    if (typeof this.content == "string") wrap.setAttribute("aria-label", "placeholder " + this.content);else wrap.setAttribute("aria-hidden", "true");
    return wrap;
  }

  ignoreEvent() {
    return false;
  }

}
/**
Extension that enables a placeholder—a piece of example content
to show when the editor is empty.
*/


function placeholder(content) {
  return ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.placeholder = Decoration.set([Decoration.widget({
        widget: new Placeholder(content),
        side: 1
      }).range(0)]);
    }

    get decorations() {
      return this.view.state.doc.length ? Decoration.none : this.placeholder;
    }

  }, {
    decorations: v => v.decorations
  });
} // Don't compute precise column positions for line offsets above this
// (since it could get expensive). Assume offset==column for them.


const MaxOff = 2000;

function rectangleFor(state, a, b) {
  let startLine = Math.min(a.line, b.line),
      endLine = Math.max(a.line, b.line);
  let ranges = [];

  if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {
    let startOff = Math.min(a.off, b.off),
        endOff = Math.max(a.off, b.off);

    for (let i = startLine; i <= endLine; i++) {
      let line = state.doc.line(i);
      if (line.length <= endOff) ranges.push(_state.EditorSelection.range(line.from + startOff, line.to + endOff));
    }
  } else {
    let startCol = Math.min(a.col, b.col),
        endCol = Math.max(a.col, b.col);

    for (let i = startLine; i <= endLine; i++) {
      let line = state.doc.line(i);
      let start = (0, _state.findColumn)(line.text, startCol, state.tabSize, true);

      if (start > -1) {
        let end = (0, _state.findColumn)(line.text, endCol, state.tabSize);
        ranges.push(_state.EditorSelection.range(line.from + start, line.from + end));
      }
    }
  }

  return ranges;
}

function absoluteColumn(view, x) {
  let ref = view.coordsAtPos(view.viewport.from);
  return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;
}

function getPos(view, event) {
  let offset = view.posAtCoords({
    x: event.clientX,
    y: event.clientY
  }, false);
  let line = view.state.doc.lineAt(offset),
      off = offset - line.from;
  let col = off > MaxOff ? -1 : off == line.length ? absoluteColumn(view, event.clientX) : (0, _state.countColumn)(line.text, view.state.tabSize, offset - line.from);
  return {
    line: line.number,
    col,
    off
  };
}

function rectangleSelectionStyle(view, event) {
  let start = getPos(view, event),
      startSel = view.state.selection;
  if (!start) return null;
  return {
    update(update) {
      if (update.docChanged) {
        let newStart = update.changes.mapPos(update.startState.doc.line(start.line).from);
        let newLine = update.state.doc.lineAt(newStart);
        start = {
          line: newLine.number,
          col: start.col,
          off: Math.min(start.off, newLine.length)
        };
        startSel = startSel.map(update.changes);
      }
    },

    get(event, _extend, multiple) {
      let cur = getPos(view, event);
      if (!cur) return startSel;
      let ranges = rectangleFor(view.state, start, cur);
      if (!ranges.length) return startSel;
      if (multiple) return _state.EditorSelection.create(ranges.concat(startSel.ranges));else return _state.EditorSelection.create(ranges);
    }

  };
}
/**
Create an extension that enables rectangular selections. By
default, it will react to left mouse drag with the Alt key held
down. When such a selection occurs, the text within the rectangle
that was dragged over will be selected, as one selection
[range](https://codemirror.net/6/docs/ref/#state.SelectionRange) per line.
*/


function rectangularSelection(options) {
  let filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || (e => e.altKey && e.button == 0);

  return EditorView.mouseSelectionStyle.of((view, event) => filter(event) ? rectangleSelectionStyle(view, event) : null);
}

const keys = {
  Alt: [18, e => e.altKey],
  Control: [17, e => e.ctrlKey],
  Shift: [16, e => e.shiftKey],
  Meta: [91, e => e.metaKey]
};
const showCrosshair = {
  style: "cursor: crosshair"
};
/**
Returns an extension that turns the pointer cursor into a
crosshair when a given modifier key, defaulting to Alt, is held
down. Can serve as a visual hint that rectangular selection is
going to happen when paired with
[`rectangularSelection`](https://codemirror.net/6/docs/ref/#view.rectangularSelection).
*/

function crosshairCursor(options = {}) {
  let [code, getter] = keys[options.key || "Alt"];
  let plugin = ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.isDown = false;
    }

    set(isDown) {
      if (this.isDown != isDown) {
        this.isDown = isDown;
        this.view.update([]);
      }
    }

  }, {
    eventHandlers: {
      keydown(e) {
        this.set(e.keyCode == code || getter(e));
      },

      keyup(e) {
        if (e.keyCode == code || !getter(e)) this.set(false);
      }

    }
  });
  return [plugin, EditorView.contentAttributes.of(view => {
    var _a;

    return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.isDown) ? showCrosshair : null;
  })];
}

const Outside = "-10000px";

class TooltipViewManager {
  constructor(view, facet, createTooltipView) {
    this.facet = facet;
    this.createTooltipView = createTooltipView;
    this.input = view.state.facet(facet);
    this.tooltips = this.input.filter(t => t);
    this.tooltipViews = this.tooltips.map(createTooltipView);
  }

  update(update) {
    let input = update.state.facet(this.facet);
    let tooltips = input.filter(x => x);

    if (input === this.input) {
      for (let t of this.tooltipViews) if (t.update) t.update(update);

      return false;
    }

    let tooltipViews = [];

    for (let i = 0; i < tooltips.length; i++) {
      let tip = tooltips[i],
          known = -1;
      if (!tip) continue;

      for (let i = 0; i < this.tooltips.length; i++) {
        let other = this.tooltips[i];
        if (other && other.create == tip.create) known = i;
      }

      if (known < 0) {
        tooltipViews[i] = this.createTooltipView(tip);
      } else {
        let tooltipView = tooltipViews[i] = this.tooltipViews[known];
        if (tooltipView.update) tooltipView.update(update);
      }
    }

    for (let t of this.tooltipViews) if (tooltipViews.indexOf(t) < 0) t.dom.remove();

    this.input = input;
    this.tooltips = tooltips;
    this.tooltipViews = tooltipViews;
    return true;
  }

}
/**
Creates an extension that configures tooltip behavior.
*/


function tooltips(config = {}) {
  return tooltipConfig.of(config);
}

function windowSpace() {
  return {
    top: 0,
    left: 0,
    bottom: innerHeight,
    right: innerWidth
  };
}

const tooltipConfig = /*@__PURE__*/_state.Facet.define({
  combine: values => {
    var _a, _b, _c;

    return {
      position: browser.ios ? "absolute" : ((_a = values.find(conf => conf.position)) === null || _a === void 0 ? void 0 : _a.position) || "fixed",
      parent: ((_b = values.find(conf => conf.parent)) === null || _b === void 0 ? void 0 : _b.parent) || null,
      tooltipSpace: ((_c = values.find(conf => conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace
    };
  }
});

const tooltipPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
  constructor(view) {
    var _a;

    this.view = view;
    this.inView = true;
    this.lastTransaction = 0;
    this.measureTimeout = -1;
    let config = view.state.facet(tooltipConfig);
    this.position = config.position;
    this.parent = config.parent;
    this.classes = view.themeClasses;
    this.createContainer();
    this.measureReq = {
      read: this.readMeasure.bind(this),
      write: this.writeMeasure.bind(this),
      key: this
    };
    this.manager = new TooltipViewManager(view, showTooltip, t => this.createTooltip(t));
    this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver(entries => {
      if (Date.now() > this.lastTransaction - 50 && entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1) this.measureSoon();
    }, {
      threshold: [1]
    }) : null;
    this.observeIntersection();
    (_a = view.dom.ownerDocument.defaultView) === null || _a === void 0 ? void 0 : _a.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this));
    this.maybeMeasure();
  }

  createContainer() {
    if (this.parent) {
      this.container = document.createElement("div");
      this.container.style.position = "relative";
      this.container.className = this.view.themeClasses;
      this.parent.appendChild(this.container);
    } else {
      this.container = this.view.dom;
    }
  }

  observeIntersection() {
    if (this.intersectionObserver) {
      this.intersectionObserver.disconnect();

      for (let tooltip of this.manager.tooltipViews) this.intersectionObserver.observe(tooltip.dom);
    }
  }

  measureSoon() {
    if (this.measureTimeout < 0) this.measureTimeout = setTimeout(() => {
      this.measureTimeout = -1;
      this.maybeMeasure();
    }, 50);
  }

  update(update) {
    if (update.transactions.length) this.lastTransaction = Date.now();
    let updated = this.manager.update(update);
    if (updated) this.observeIntersection();
    let shouldMeasure = updated || update.geometryChanged;
    let newConfig = update.state.facet(tooltipConfig);

    if (newConfig.position != this.position) {
      this.position = newConfig.position;

      for (let t of this.manager.tooltipViews) t.dom.style.position = this.position;

      shouldMeasure = true;
    }

    if (newConfig.parent != this.parent) {
      if (this.parent) this.container.remove();
      this.parent = newConfig.parent;
      this.createContainer();

      for (let t of this.manager.tooltipViews) this.container.appendChild(t.dom);

      shouldMeasure = true;
    } else if (this.parent && this.view.themeClasses != this.classes) {
      this.classes = this.container.className = this.view.themeClasses;
    }

    if (shouldMeasure) this.maybeMeasure();
  }

  createTooltip(tooltip) {
    let tooltipView = tooltip.create(this.view);
    tooltipView.dom.classList.add("cm-tooltip");

    if (tooltip.arrow && !tooltipView.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
      let arrow = document.createElement("div");
      arrow.className = "cm-tooltip-arrow";
      tooltipView.dom.appendChild(arrow);
    }

    tooltipView.dom.style.position = this.position;
    tooltipView.dom.style.top = Outside;
    this.container.appendChild(tooltipView.dom);
    if (tooltipView.mount) tooltipView.mount(this.view);
    return tooltipView;
  }

  destroy() {
    var _a, _b;

    (_a = this.view.dom.ownerDocument.defaultView) === null || _a === void 0 ? void 0 : _a.removeEventListener("resize", this.measureSoon);

    for (let {
      dom
    } of this.manager.tooltipViews) dom.remove();

    (_b = this.intersectionObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
    clearTimeout(this.measureTimeout);
  }

  readMeasure() {
    let editor = this.view.dom.getBoundingClientRect();
    return {
      editor,
      parent: this.parent ? this.container.getBoundingClientRect() : editor,
      pos: this.manager.tooltips.map((t, i) => {
        let tv = this.manager.tooltipViews[i];
        return tv.getCoords ? tv.getCoords(t.pos) : this.view.coordsAtPos(t.pos);
      }),
      size: this.manager.tooltipViews.map(({
        dom
      }) => dom.getBoundingClientRect()),
      space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view)
    };
  }

  writeMeasure(measured) {
    let {
      editor,
      space
    } = measured;
    let others = [];

    for (let i = 0; i < this.manager.tooltips.length; i++) {
      let tooltip = this.manager.tooltips[i],
          tView = this.manager.tooltipViews[i],
          {
        dom
      } = tView;
      let pos = measured.pos[i],
          size = measured.size[i]; // Hide tooltips that are outside of the editor.

      if (!pos || pos.bottom <= Math.max(editor.top, space.top) || pos.top >= Math.min(editor.bottom, space.bottom) || pos.right < Math.max(editor.left, space.left) - .1 || pos.left > Math.min(editor.right, space.right) + .1) {
        dom.style.top = Outside;
        continue;
      }

      let arrow = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
      let arrowHeight = arrow ? 7
      /* Size */
      : 0;
      let width = size.right - size.left,
          height = size.bottom - size.top;
      let offset = tView.offset || noOffset,
          ltr = this.view.textDirection == Direction.LTR;
      let left = size.width > space.right - space.left ? ltr ? space.left : space.right - size.width : ltr ? Math.min(pos.left - (arrow ? 14
      /* Offset */
      : 0) + offset.x, space.right - width) : Math.max(space.left, pos.left - width + (arrow ? 14
      /* Offset */
      : 0) - offset.x);
      let above = !!tooltip.above;
      if (!tooltip.strictSide && (above ? pos.top - (size.bottom - size.top) - offset.y < space.top : pos.bottom + (size.bottom - size.top) + offset.y > space.bottom) && above == space.bottom - pos.bottom > pos.top - space.top) above = !above;
      let top = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
      let right = left + width;
      if (tView.overlap !== true) for (let r of others) if (r.left < right && r.right > left && r.top < top + height && r.bottom > top) top = above ? r.top - height - 2 - arrowHeight : r.bottom + arrowHeight + 2;

      if (this.position == "absolute") {
        dom.style.top = top - measured.parent.top + "px";
        dom.style.left = left - measured.parent.left + "px";
      } else {
        dom.style.top = top + "px";
        dom.style.left = left + "px";
      }

      if (arrow) arrow.style.left = `${pos.left + (ltr ? offset.x : -offset.x) - (left + 14
      /* Offset */
      - 7
      /* Size */
      )}px`;
      if (tView.overlap !== true) others.push({
        left,
        top,
        right,
        bottom: top + height
      });
      dom.classList.toggle("cm-tooltip-above", above);
      dom.classList.toggle("cm-tooltip-below", !above);
      if (tView.positioned) tView.positioned();
    }
  }

  maybeMeasure() {
    if (this.manager.tooltips.length) {
      if (this.view.inView) this.view.requestMeasure(this.measureReq);

      if (this.inView != this.view.inView) {
        this.inView = this.view.inView;
        if (!this.inView) for (let tv of this.manager.tooltipViews) tv.dom.style.top = Outside;
      }
    }
  }

}, {
  eventHandlers: {
    scroll() {
      this.maybeMeasure();
    }

  }
});
const baseTheme = /*@__PURE__*/EditorView.baseTheme({
  ".cm-tooltip": {
    zIndex: 100
  },
  "&light .cm-tooltip": {
    border: "1px solid #bbb",
    backgroundColor: "#f5f5f5"
  },
  "&light .cm-tooltip-section:not(:first-child)": {
    borderTop: "1px solid #bbb"
  },
  "&dark .cm-tooltip": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tooltip-arrow": {
    height: `${7
    /* Size */
    }px`,
    width: `${7
    /* Size */
    * 2}px`,
    position: "absolute",
    zIndex: -1,
    overflow: "hidden",
    "&:before, &:after": {
      content: "''",
      position: "absolute",
      width: 0,
      height: 0,
      borderLeft: `${7
      /* Size */
      }px solid transparent`,
      borderRight: `${7
      /* Size */
      }px solid transparent`
    },
    ".cm-tooltip-above &": {
      bottom: `-${7
      /* Size */
      }px`,
      "&:before": {
        borderTop: `${7
        /* Size */
        }px solid #bbb`
      },
      "&:after": {
        borderTop: `${7
        /* Size */
        }px solid #f5f5f5`,
        bottom: "1px"
      }
    },
    ".cm-tooltip-below &": {
      top: `-${7
      /* Size */
      }px`,
      "&:before": {
        borderBottom: `${7
        /* Size */
        }px solid #bbb`
      },
      "&:after": {
        borderBottom: `${7
        /* Size */
        }px solid #f5f5f5`,
        top: "1px"
      }
    }
  },
  "&dark .cm-tooltip .cm-tooltip-arrow": {
    "&:before": {
      borderTopColor: "#333338",
      borderBottomColor: "#333338"
    },
    "&:after": {
      borderTopColor: "transparent",
      borderBottomColor: "transparent"
    }
  }
});
const noOffset = {
  x: 0,
  y: 0
};
/**
Facet to which an extension can add a value to show a tooltip.
*/

const showTooltip = /*@__PURE__*/_state.Facet.define({
  enables: [tooltipPlugin, baseTheme]
});

exports.showTooltip = showTooltip;

const showHoverTooltip = /*@__PURE__*/_state.Facet.define();

class HoverTooltipHost {
  constructor(view) {
    this.view = view;
    this.mounted = false;
    this.dom = document.createElement("div");
    this.dom.classList.add("cm-tooltip-hover");
    this.manager = new TooltipViewManager(view, showHoverTooltip, t => this.createHostedView(t));
  } // Needs to be static so that host tooltip instances always match


  static create(view) {
    return new HoverTooltipHost(view);
  }

  createHostedView(tooltip) {
    let hostedView = tooltip.create(this.view);
    hostedView.dom.classList.add("cm-tooltip-section");
    this.dom.appendChild(hostedView.dom);
    if (this.mounted && hostedView.mount) hostedView.mount(this.view);
    return hostedView;
  }

  mount(view) {
    for (let hostedView of this.manager.tooltipViews) {
      if (hostedView.mount) hostedView.mount(view);
    }

    this.mounted = true;
  }

  positioned() {
    for (let hostedView of this.manager.tooltipViews) {
      if (hostedView.positioned) hostedView.positioned();
    }
  }

  update(update) {
    this.manager.update(update);
  }

}

const showHoverTooltipHost = /*@__PURE__*/showTooltip.compute([showHoverTooltip], state => {
  let tooltips = state.facet(showHoverTooltip).filter(t => t);
  if (tooltips.length === 0) return null;
  return {
    pos: Math.min(...tooltips.map(t => t.pos)),
    end: Math.max(...tooltips.filter(t => t.end != null).map(t => t.end)),
    create: HoverTooltipHost.create,
    above: tooltips[0].above,
    arrow: tooltips.some(t => t.arrow)
  };
});

class HoverPlugin {
  constructor(view, source, field, setHover, hoverTime) {
    this.view = view;
    this.source = source;
    this.field = field;
    this.setHover = setHover;
    this.hoverTime = hoverTime;
    this.hoverTimeout = -1;
    this.restartTimeout = -1;
    this.pending = null;
    this.lastMove = {
      x: 0,
      y: 0,
      target: view.dom,
      time: 0
    };
    this.checkHover = this.checkHover.bind(this);
    view.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
    view.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
  }

  update() {
    if (this.pending) {
      this.pending = null;
      clearTimeout(this.restartTimeout);
      this.restartTimeout = setTimeout(() => this.startHover(), 20);
    }
  }

  get active() {
    return this.view.state.field(this.field);
  }

  checkHover() {
    this.hoverTimeout = -1;
    if (this.active) return;
    let hovered = Date.now() - this.lastMove.time;
    if (hovered < this.hoverTime) this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);else this.startHover();
  }

  startHover() {
    clearTimeout(this.restartTimeout);
    let {
      lastMove
    } = this;
    let pos = this.view.contentDOM.contains(lastMove.target) ? this.view.posAtCoords(lastMove) : null;
    if (pos == null) return;
    let posCoords = this.view.coordsAtPos(pos);
    if (posCoords == null || lastMove.y < posCoords.top || lastMove.y > posCoords.bottom || lastMove.x < posCoords.left - this.view.defaultCharacterWidth || lastMove.x > posCoords.right + this.view.defaultCharacterWidth) return;
    let bidi = this.view.bidiSpans(this.view.state.doc.lineAt(pos)).find(s => s.from <= pos && s.to >= pos);
    let rtl = bidi && bidi.dir == Direction.RTL ? -1 : 1;
    let open = this.source(this.view, pos, lastMove.x < posCoords.left ? -rtl : rtl);

    if (open === null || open === void 0 ? void 0 : open.then) {
      let pending = this.pending = {
        pos
      };
      open.then(result => {
        if (this.pending == pending) {
          this.pending = null;
          if (result) this.view.dispatch({
            effects: this.setHover.of(result)
          });
        }
      }, e => logException(this.view.state, e, "hover tooltip"));
    } else if (open) {
      this.view.dispatch({
        effects: this.setHover.of(open)
      });
    }
  }

  mousemove(event) {
    var _a;

    this.lastMove = {
      x: event.clientX,
      y: event.clientY,
      target: event.target,
      time: Date.now()
    };
    if (this.hoverTimeout < 0) this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);
    let tooltip = this.active;

    if (tooltip && !isInTooltip(this.lastMove.target) || this.pending) {
      let {
        pos
      } = tooltip || this.pending,
          end = (_a = tooltip === null || tooltip === void 0 ? void 0 : tooltip.end) !== null && _a !== void 0 ? _a : pos;

      if (pos == end ? this.view.posAtCoords(this.lastMove) != pos : !isOverRange(this.view, pos, end, event.clientX, event.clientY, 6
      /* MaxDist */
      )) {
        this.view.dispatch({
          effects: this.setHover.of(null)
        });
        this.pending = null;
      }
    }
  }

  mouseleave() {
    clearTimeout(this.hoverTimeout);
    this.hoverTimeout = -1;
    if (this.active) this.view.dispatch({
      effects: this.setHover.of(null)
    });
  }

  destroy() {
    clearTimeout(this.hoverTimeout);
    this.view.dom.removeEventListener("mouseleave", this.mouseleave);
    this.view.dom.removeEventListener("mousemove", this.mousemove);
  }

}

function isInTooltip(elt) {
  for (let cur = elt; cur; cur = cur.parentNode) if (cur.nodeType == 1 && cur.classList.contains("cm-tooltip")) return true;

  return false;
}

function isOverRange(view, from, to, x, y, margin) {
  let range = document.createRange();
  let fromDOM = view.domAtPos(from),
      toDOM = view.domAtPos(to);
  range.setEnd(toDOM.node, toDOM.offset);
  range.setStart(fromDOM.node, fromDOM.offset);
  let rects = range.getClientRects();
  range.detach();

  for (let i = 0; i < rects.length; i++) {
    let rect = rects[i];
    let dist = Math.max(rect.top - y, y - rect.bottom, rect.left - x, x - rect.right);
    if (dist <= margin) return true;
  }

  return false;
}
/**
Set up a hover tooltip, which shows up when the pointer hovers
over ranges of text. The callback is called when the mouse hovers
over the document text. It should, if there is a tooltip
associated with position `pos`, return the tooltip description
(either directly or in a promise). The `side` argument indicates
on which side of the position the pointer is—it will be -1 if the
pointer is before the position, 1 if after the position.

Note that all hover tooltips are hosted within a single tooltip
container element. This allows multiple tooltips over the same
range to be "merged" together without overlapping.
*/


function hoverTooltip(source, options = {}) {
  let setHover = _state.StateEffect.define();

  let hoverState = _state.StateField.define({
    create() {
      return null;
    },

    update(value, tr) {
      if (value && (options.hideOnChange && (tr.docChanged || tr.selection) || options.hideOn && options.hideOn(tr, value))) return null;

      if (value && tr.docChanged) {
        let newPos = tr.changes.mapPos(value.pos, -1, _state.MapMode.TrackDel);
        if (newPos == null) return null;
        let copy = Object.assign(Object.create(null), value);
        copy.pos = newPos;
        if (value.end != null) copy.end = tr.changes.mapPos(value.end);
        value = copy;
      }

      for (let effect of tr.effects) {
        if (effect.is(setHover)) value = effect.value;
        if (effect.is(closeHoverTooltipEffect)) value = null;
      }

      return value;
    },

    provide: f => showHoverTooltip.from(f)
  });

  return [hoverState, ViewPlugin.define(view => new HoverPlugin(view, source, hoverState, setHover, options.hoverTime || 300
  /* Time */
  )), showHoverTooltipHost];
}
/**
Get the active tooltip view for a given tooltip, if available.
*/


function getTooltip(view, tooltip) {
  let plugin = view.plugin(tooltipPlugin);
  if (!plugin) return null;
  let found = plugin.manager.tooltips.indexOf(tooltip);
  return found < 0 ? null : plugin.manager.tooltipViews[found];
}
/**
Returns true if any hover tooltips are currently active.
*/


function hasHoverTooltips(state) {
  return state.facet(showHoverTooltip).some(x => x);
}

const closeHoverTooltipEffect = /*@__PURE__*/_state.StateEffect.define();
/**
Transaction effect that closes all hover tooltips.
*/


const closeHoverTooltips = /*@__PURE__*/closeHoverTooltipEffect.of(null);
/**
Tell the tooltip extension to recompute the position of the active
tooltips. This can be useful when something happens (such as a
re-positioning or CSS change affecting the editor) that could
invalidate the existing tooltip positions.
*/

exports.closeHoverTooltips = closeHoverTooltips;

function repositionTooltips(view) {
  var _a;

  (_a = view.plugin(tooltipPlugin)) === null || _a === void 0 ? void 0 : _a.maybeMeasure();
}

const panelConfig = /*@__PURE__*/_state.Facet.define({
  combine(configs) {
    let topContainer, bottomContainer;

    for (let c of configs) {
      topContainer = topContainer || c.topContainer;
      bottomContainer = bottomContainer || c.bottomContainer;
    }

    return {
      topContainer,
      bottomContainer
    };
  }

});
/**
Configures the panel-managing extension.
*/


function panels(config) {
  return config ? [panelConfig.of(config)] : [];
}
/**
Get the active panel created by the given constructor, if any.
This can be useful when you need access to your panels' DOM
structure.
*/


function getPanel(view, panel) {
  let plugin = view.plugin(panelPlugin);
  let index = plugin ? plugin.specs.indexOf(panel) : -1;
  return index > -1 ? plugin.panels[index] : null;
}

const panelPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
  constructor(view) {
    this.input = view.state.facet(showPanel);
    this.specs = this.input.filter(s => s);
    this.panels = this.specs.map(spec => spec(view));
    let conf = view.state.facet(panelConfig);
    this.top = new PanelGroup(view, true, conf.topContainer);
    this.bottom = new PanelGroup(view, false, conf.bottomContainer);
    this.top.sync(this.panels.filter(p => p.top));
    this.bottom.sync(this.panels.filter(p => !p.top));

    for (let p of this.panels) {
      p.dom.classList.add("cm-panel");
      if (p.mount) p.mount();
    }
  }

  update(update) {
    let conf = update.state.facet(panelConfig);

    if (this.top.container != conf.topContainer) {
      this.top.sync([]);
      this.top = new PanelGroup(update.view, true, conf.topContainer);
    }

    if (this.bottom.container != conf.bottomContainer) {
      this.bottom.sync([]);
      this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
    }

    this.top.syncClasses();
    this.bottom.syncClasses();
    let input = update.state.facet(showPanel);

    if (input != this.input) {
      let specs = input.filter(x => x);
      let panels = [],
          top = [],
          bottom = [],
          mount = [];

      for (let spec of specs) {
        let known = this.specs.indexOf(spec),
            panel;

        if (known < 0) {
          panel = spec(update.view);
          mount.push(panel);
        } else {
          panel = this.panels[known];
          if (panel.update) panel.update(update);
        }

        panels.push(panel);
        (panel.top ? top : bottom).push(panel);
      }

      this.specs = specs;
      this.panels = panels;
      this.top.sync(top);
      this.bottom.sync(bottom);

      for (let p of mount) {
        p.dom.classList.add("cm-panel");
        if (p.mount) p.mount();
      }
    } else {
      for (let p of this.panels) if (p.update) p.update(update);
    }
  }

  destroy() {
    this.top.sync([]);
    this.bottom.sync([]);
  }

}, {
  provide: plugin => EditorView.scrollMargins.of(view => {
    let value = view.plugin(plugin);
    return value && {
      top: value.top.scrollMargin(),
      bottom: value.bottom.scrollMargin()
    };
  })
});

class PanelGroup {
  constructor(view, top, container) {
    this.view = view;
    this.top = top;
    this.container = container;
    this.dom = undefined;
    this.classes = "";
    this.panels = [];
    this.syncClasses();
  }

  sync(panels) {
    for (let p of this.panels) if (p.destroy && panels.indexOf(p) < 0) p.destroy();

    this.panels = panels;
    this.syncDOM();
  }

  syncDOM() {
    if (this.panels.length == 0) {
      if (this.dom) {
        this.dom.remove();
        this.dom = undefined;
      }

      return;
    }

    if (!this.dom) {
      this.dom = document.createElement("div");
      this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
      this.dom.style[this.top ? "top" : "bottom"] = "0";
      let parent = this.container || this.view.dom;
      parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
    }

    let curDOM = this.dom.firstChild;

    for (let panel of this.panels) {
      if (panel.dom.parentNode == this.dom) {
        while (curDOM != panel.dom) curDOM = rm(curDOM);

        curDOM = curDOM.nextSibling;
      } else {
        this.dom.insertBefore(panel.dom, curDOM);
      }
    }

    while (curDOM) curDOM = rm(curDOM);
  }

  scrollMargin() {
    return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
  }

  syncClasses() {
    if (!this.container || this.classes == this.view.themeClasses) return;

    for (let cls of this.classes.split(" ")) if (cls) this.container.classList.remove(cls);

    for (let cls of (this.classes = this.view.themeClasses).split(" ")) if (cls) this.container.classList.add(cls);
  }

}

function rm(node) {
  let next = node.nextSibling;
  node.remove();
  return next;
}
/**
Opening a panel is done by providing a constructor function for
the panel through this facet. (The panel is closed again when its
constructor is no longer provided.) Values of `null` are ignored.
*/


const showPanel = /*@__PURE__*/_state.Facet.define({
  enables: panelPlugin
});
/**
A gutter marker represents a bit of information attached to a line
in a specific gutter. Your own custom markers have to extend this
class.
*/


exports.showPanel = showPanel;

class GutterMarker extends _state.RangeValue {
  /**
  @internal
  */
  compare(other) {
    return this == other || this.constructor == other.constructor && this.eq(other);
  }
  /**
  Compare this marker to another marker of the same type.
  */


  eq(other) {
    return false;
  }
  /**
  Called if the marker has a `toDOM` method and its representation
  was removed from a gutter.
  */


  destroy(dom) {}

}

exports.GutterMarker = GutterMarker;
GutterMarker.prototype.elementClass = "";
GutterMarker.prototype.toDOM = undefined;
GutterMarker.prototype.mapMode = _state.MapMode.TrackBefore;
GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
GutterMarker.prototype.point = true;
/**
Facet used to add a class to all gutter elements for a given line.
Markers given to this facet should _only_ define an
[`elementclass`](https://codemirror.net/6/docs/ref/#view.GutterMarker.elementClass), not a
[`toDOM`](https://codemirror.net/6/docs/ref/#view.GutterMarker.toDOM) (or the marker will appear
in all gutters for the line).
*/

const gutterLineClass = /*@__PURE__*/_state.Facet.define();

exports.gutterLineClass = gutterLineClass;
const defaults = {
  class: "",
  renderEmptyElements: false,
  elementStyle: "",
  markers: () => _state.RangeSet.empty,
  lineMarker: () => null,
  lineMarkerChange: null,
  initialSpacer: null,
  updateSpacer: null,
  domEventHandlers: {}
};

const activeGutters = /*@__PURE__*/_state.Facet.define();
/**
Define an editor gutter. The order in which the gutters appear is
determined by their extension priority.
*/


function gutter(config) {
  return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults), config))];
}

const unfixGutters = /*@__PURE__*/_state.Facet.define({
  combine: values => values.some(x => x)
});
/**
The gutter-drawing plugin is automatically enabled when you add a
gutter, but you can use this function to explicitly configure it.

Unless `fixed` is explicitly set to `false`, the gutters are
fixed, meaning they don't scroll along with the content
horizontally (except on Internet Explorer, which doesn't support
CSS [`position:
sticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).
*/


function gutters(config) {
  let result = [gutterView];
  if (config && config.fixed === false) result.push(unfixGutters.of(true));
  return result;
}

const gutterView = /*@__PURE__*/ViewPlugin.fromClass(class {
  constructor(view) {
    this.view = view;
    this.prevViewport = view.viewport;
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutters";
    this.dom.setAttribute("aria-hidden", "true");
    this.dom.style.minHeight = this.view.contentHeight + "px";
    this.gutters = view.state.facet(activeGutters).map(conf => new SingleGutterView(view, conf));

    for (let gutter of this.gutters) this.dom.appendChild(gutter.dom);

    this.fixed = !view.state.facet(unfixGutters);

    if (this.fixed) {
      // FIXME IE11 fallback, which doesn't support position: sticky,
      // by using position: relative + event handlers that realign the
      // gutter (or just force fixed=false on IE11?)
      this.dom.style.position = "sticky";
    }

    this.syncGutters(false);
    view.scrollDOM.insertBefore(this.dom, view.contentDOM);
  }

  update(update) {
    if (this.updateGutters(update)) {
      // Detach during sync when the viewport changed significantly
      // (such as during scrolling), since for large updates that is
      // faster.
      let vpA = this.prevViewport,
          vpB = update.view.viewport;
      let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
      this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
    }

    if (update.geometryChanged) this.dom.style.minHeight = this.view.contentHeight + "px";

    if (this.view.state.facet(unfixGutters) != !this.fixed) {
      this.fixed = !this.fixed;
      this.dom.style.position = this.fixed ? "sticky" : "";
    }

    this.prevViewport = update.view.viewport;
  }

  syncGutters(detach) {
    let after = this.dom.nextSibling;
    if (detach) this.dom.remove();

    let lineClasses = _state.RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);

    let classSet = [];
    let contexts = this.gutters.map(gutter => new UpdateContext(gutter, this.view.viewport, -this.view.documentPadding.top));

    for (let line of this.view.viewportLineBlocks) {
      let text;

      if (Array.isArray(line.type)) {
        for (let b of line.type) if (b.type == BlockType.Text) {
          text = b;
          break;
        }
      } else {
        text = line.type == BlockType.Text ? line : undefined;
      }

      if (!text) continue;
      if (classSet.length) classSet = [];
      advanceCursor(lineClasses, classSet, line.from);

      for (let cx of contexts) cx.line(this.view, text, classSet);
    }

    for (let cx of contexts) cx.finish();

    if (detach) this.view.scrollDOM.insertBefore(this.dom, after);
  }

  updateGutters(update) {
    let prev = update.startState.facet(activeGutters),
        cur = update.state.facet(activeGutters);
    let change = update.docChanged || update.heightChanged || update.viewportChanged || !_state.RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);

    if (prev == cur) {
      for (let gutter of this.gutters) if (gutter.update(update)) change = true;
    } else {
      change = true;
      let gutters = [];

      for (let conf of cur) {
        let known = prev.indexOf(conf);

        if (known < 0) {
          gutters.push(new SingleGutterView(this.view, conf));
        } else {
          this.gutters[known].update(update);
          gutters.push(this.gutters[known]);
        }
      }

      for (let g of this.gutters) {
        g.dom.remove();
        if (gutters.indexOf(g) < 0) g.destroy();
      }

      for (let g of gutters) this.dom.appendChild(g.dom);

      this.gutters = gutters;
    }

    return change;
  }

  destroy() {
    for (let view of this.gutters) view.destroy();

    this.dom.remove();
  }

}, {
  provide: plugin => EditorView.scrollMargins.of(view => {
    let value = view.plugin(plugin);
    if (!value || value.gutters.length == 0 || !value.fixed) return null;
    return view.textDirection == Direction.LTR ? {
      left: value.dom.offsetWidth
    } : {
      right: value.dom.offsetWidth
    };
  })
});

function asArray(val) {
  return Array.isArray(val) ? val : [val];
}

function advanceCursor(cursor, collect, pos) {
  while (cursor.value && cursor.from <= pos) {
    if (cursor.from == pos) collect.push(cursor.value);
    cursor.next();
  }
}

class UpdateContext {
  constructor(gutter, viewport, height) {
    this.gutter = gutter;
    this.height = height;
    this.localMarkers = [];
    this.i = 0;
    this.cursor = _state.RangeSet.iter(gutter.markers, viewport.from);
  }

  line(view, line, extraMarkers) {
    if (this.localMarkers.length) this.localMarkers = [];
    advanceCursor(this.cursor, this.localMarkers, line.from);
    let localMarkers = extraMarkers.length ? this.localMarkers.concat(extraMarkers) : this.localMarkers;
    let forLine = this.gutter.config.lineMarker(view, line, localMarkers);
    if (forLine) localMarkers.unshift(forLine);
    let gutter = this.gutter;
    if (localMarkers.length == 0 && !gutter.config.renderEmptyElements) return;
    let above = line.top - this.height;

    if (this.i == gutter.elements.length) {
      let newElt = new GutterElement(view, line.height, above, localMarkers);
      gutter.elements.push(newElt);
      gutter.dom.appendChild(newElt.dom);
    } else {
      gutter.elements[this.i].update(view, line.height, above, localMarkers);
    }

    this.height = line.bottom;
    this.i++;
  }

  finish() {
    let gutter = this.gutter;

    while (gutter.elements.length > this.i) {
      let last = gutter.elements.pop();
      gutter.dom.removeChild(last.dom);
      last.destroy();
    }
  }

}

class SingleGutterView {
  constructor(view, config) {
    this.view = view;
    this.config = config;
    this.elements = [];
    this.spacer = null;
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");

    for (let prop in config.domEventHandlers) {
      this.dom.addEventListener(prop, event => {
        let line = view.lineBlockAtHeight(event.clientY - view.documentTop);
        if (config.domEventHandlers[prop](view, line, event)) event.preventDefault();
      });
    }

    this.markers = asArray(config.markers(view));

    if (config.initialSpacer) {
      this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);
      this.dom.appendChild(this.spacer.dom);
      this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
    }
  }

  update(update) {
    let prevMarkers = this.markers;
    this.markers = asArray(this.config.markers(update.view));

    if (this.spacer && this.config.updateSpacer) {
      let updated = this.config.updateSpacer(this.spacer.markers[0], update);
      if (updated != this.spacer.markers[0]) this.spacer.update(update.view, 0, 0, [updated]);
    }

    let vp = update.view.viewport;
    return !_state.RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);
  }

  destroy() {
    for (let elt of this.elements) elt.destroy();
  }

}

class GutterElement {
  constructor(view, height, above, markers) {
    this.height = -1;
    this.above = 0;
    this.markers = [];
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutterElement";
    this.update(view, height, above, markers);
  }

  update(view, height, above, markers) {
    if (this.height != height) this.dom.style.height = (this.height = height) + "px";
    if (this.above != above) this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
    if (!sameMarkers(this.markers, markers)) this.setMarkers(view, markers);
  }

  setMarkers(view, markers) {
    let cls = "cm-gutterElement",
        domPos = this.dom.firstChild;

    for (let iNew = 0, iOld = 0;;) {
      let skipTo = iOld,
          marker = iNew < markers.length ? markers[iNew++] : null,
          matched = false;

      if (marker) {
        let c = marker.elementClass;
        if (c) cls += " " + c;

        for (let i = iOld; i < this.markers.length; i++) if (this.markers[i].compare(marker)) {
          skipTo = i;
          matched = true;
          break;
        }
      } else {
        skipTo = this.markers.length;
      }

      while (iOld < skipTo) {
        let next = this.markers[iOld++];

        if (next.toDOM) {
          next.destroy(domPos);
          let after = domPos.nextSibling;
          domPos.remove();
          domPos = after;
        }
      }

      if (!marker) break;

      if (marker.toDOM) {
        if (matched) domPos = domPos.nextSibling;else this.dom.insertBefore(marker.toDOM(view), domPos);
      }

      if (matched) iOld++;
    }

    this.dom.className = cls;
    this.markers = markers;
  }

  destroy() {
    this.setMarkers(null, []); // First argument not used unless creating markers
  }

}

function sameMarkers(a, b) {
  if (a.length != b.length) return false;

  for (let i = 0; i < a.length; i++) if (!a[i].compare(b[i])) return false;

  return true;
}
/**
Facet used to provide markers to the line number gutter.
*/


const lineNumberMarkers = /*@__PURE__*/_state.Facet.define();

exports.lineNumberMarkers = lineNumberMarkers;

const lineNumberConfig = /*@__PURE__*/_state.Facet.define({
  combine(values) {
    return (0, _state.combineConfig)(values, {
      formatNumber: String,
      domEventHandlers: {}
    }, {
      domEventHandlers(a, b) {
        let result = Object.assign({}, a);

        for (let event in b) {
          let exists = result[event],
              add = b[event];
          result[event] = exists ? (view, line, event) => exists(view, line, event) || add(view, line, event) : add;
        }

        return result;
      }

    });
  }

});

class NumberMarker extends GutterMarker {
  constructor(number) {
    super();
    this.number = number;
  }

  eq(other) {
    return this.number == other.number;
  }

  toDOM() {
    return document.createTextNode(this.number);
  }

}

function formatNumber(view, number) {
  return view.state.facet(lineNumberConfig).formatNumber(number, view.state);
}

const lineNumberGutter = /*@__PURE__*/activeGutters.compute([lineNumberConfig], state => ({
  class: "cm-lineNumbers",
  renderEmptyElements: false,

  markers(view) {
    return view.state.facet(lineNumberMarkers);
  },

  lineMarker(view, line, others) {
    if (others.some(m => m.toDOM)) return null;
    return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
  },

  lineMarkerChange: update => update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig),

  initialSpacer(view) {
    return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
  },

  updateSpacer(spacer, update) {
    let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
    return max == spacer.number ? spacer : new NumberMarker(max);
  },

  domEventHandlers: state.facet(lineNumberConfig).domEventHandlers
}));
/**
Create a line number gutter extension.
*/

function lineNumbers(config = {}) {
  return [lineNumberConfig.of(config), gutters(), lineNumberGutter];
}

function maxLineNumber(lines) {
  let last = 9;

  while (last < lines) last = last * 10 + 9;

  return last;
}

const activeLineGutterMarker = /*@__PURE__*/new class extends GutterMarker {
  constructor() {
    super(...arguments);
    this.elementClass = "cm-activeLineGutter";
  }

}();
const activeLineGutterHighlighter = /*@__PURE__*/gutterLineClass.compute(["selection"], state => {
  let marks = [],
      last = -1;

  for (let range of state.selection.ranges) if (range.empty) {
    let linePos = state.doc.lineAt(range.head).from;

    if (linePos > last) {
      last = linePos;
      marks.push(activeLineGutterMarker.range(linePos));
    }
  }

  return _state.RangeSet.of(marks);
});
/**
Returns an extension that adds a `cm-activeLineGutter` class to
all gutter elements on the [active
line](https://codemirror.net/6/docs/ref/#view.highlightActiveLine).
*/

function highlightActiveLineGutter() {
  return activeLineGutterHighlighter;
}
/**
@internal
*/


const __test = {
  HeightMap,
  HeightOracle,
  MeasuredHeights,
  QueryType,
  ChangedRange,
  computeOrder,
  moveVisually
};
exports.__test = __test;
},{"@codemirror/state":"s5u9","style-mod":"h8XP","w3c-keyname":"lF2G"}],"P8wn":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.classHighlighter = exports.Tag = void 0;
exports.highlightTree = highlightTree;
exports.styleTags = styleTags;
exports.tagHighlighter = tagHighlighter;
exports.tags = void 0;

var _common = require("@lezer/common");

let nextTagID = 0; /// Highlighting tags are markers that denote a highlighting category.
/// They are [associated](#highlight.styleTags) with parts of a syntax
/// tree by a language mode, and then mapped to an actual CSS style by
/// a [highlighter](#highlight.Highlighter).
///
/// Because syntax tree node types and highlight styles have to be
/// able to talk the same language, CodeMirror uses a mostly _closed_
/// [vocabulary](#highlight.tags) of syntax tags (as opposed to
/// traditional open string-based systems, which make it hard for
/// highlighting themes to cover all the tokens produced by the
/// various languages).
///
/// It _is_ possible to [define](#highlight.Tag^define) your own
/// highlighting tags for system-internal use (where you control both
/// the language package and the highlighter), but such tags will not
/// be picked up by regular highlighters (though you can derive them
/// from standard tags to allow highlighters to fall back to those).

class Tag {
  /// @internal
  constructor( /// The set of this tag and all its parent tags, starting with
  /// this one itself and sorted in order of decreasing specificity.
  set, /// The base unmodified tag that this one is based on, if it's
  /// modified @internal
  base, /// The modifiers applied to this.base @internal
  modified) {
    this.set = set;
    this.base = base;
    this.modified = modified; /// @internal

    this.id = nextTagID++;
  } /// Define a new tag. If `parent` is given, the tag is treated as a
  /// sub-tag of that parent, and
  /// [highlighters](#highlight.tagHighlighter) that don't mention
  /// this tag will try to fall back to the parent tag (or grandparent
  /// tag, etc).


  static define(parent) {
    if (parent === null || parent === void 0 ? void 0 : parent.base) throw new Error("Can not derive from a modified tag");
    let tag = new Tag([], null, []);
    tag.set.push(tag);
    if (parent) for (let t of parent.set) tag.set.push(t);
    return tag;
  } /// Define a tag _modifier_, which is a function that, given a tag,
  /// will return a tag that is a subtag of the original. Applying the
  /// same modifier to a twice tag will return the same value (`m1(t1)
  /// == m1(t1)`) and applying multiple modifiers will, regardless or
  /// order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
  ///
  /// When multiple modifiers are applied to a given base tag, each
  /// smaller set of modifiers is registered as a parent, so that for
  /// example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
  /// `m1(m3(t1)`, and so on.


  static defineModifier() {
    let mod = new Modifier();
    return tag => {
      if (tag.modified.indexOf(mod) > -1) return tag;
      return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));
    };
  }

}

exports.Tag = Tag;
let nextModifierID = 0;

class Modifier {
  constructor() {
    this.instances = [];
    this.id = nextModifierID++;
  }

  static get(base, mods) {
    if (!mods.length) return base;
    let exists = mods[0].instances.find(t => t.base == base && sameArray(mods, t.modified));
    if (exists) return exists;
    let set = [],
        tag = new Tag(set, base, mods);

    for (let m of mods) m.instances.push(tag);

    let configs = permute(mods);

    for (let parent of base.set) for (let config of configs) set.push(Modifier.get(parent, config));

    return tag;
  }

}

function sameArray(a, b) {
  return a.length == b.length && a.every((x, i) => x == b[i]);
}

function permute(array) {
  let result = [array];

  for (let i = 0; i < array.length; i++) {
    for (let a of permute(array.slice(0, i).concat(array.slice(i + 1)))) result.push(a);
  }

  return result;
} /// This function is used to add a set of tags to a language syntax
/// via [`NodeSet.extend`](#common.NodeSet.extend) or
/// [`LRParser.configure`](#lr.LRParser.configure).
///
/// The argument object maps node selectors to [highlighting
/// tags](#highlight.Tag) or arrays of tags.
///
/// Node selectors may hold one or more (space-separated) node paths.
/// Such a path can be a [node name](#common.NodeType.name), or
/// multiple node names (or `*` wildcards) separated by slash
/// characters, as in `"Block/Declaration/VariableName"`. Such a path
/// matches the final node but only if its direct parent nodes are the
/// other nodes mentioned. A `*` in such a path matches any parent,
/// but only a single level—wildcards that match multiple parents
/// aren't supported, both for efficiency reasons and because Lezer
/// trees make it rather hard to reason about what they would match.)
///
/// A path can be ended with `/...` to indicate that the tag assigned
/// to the node should also apply to all child nodes, even if they
/// match their own style (by default, only the innermost style is
/// used).
///
/// When a path ends in `!`, as in `Attribute!`, no further matching
/// happens for the node's child nodes, and the entire node gets the
/// given style.
///
/// In this notation, node names that contain `/`, `!`, `*`, or `...`
/// must be quoted as JSON strings.
///
/// For example:
///
/// ```javascript
/// parser.withProps(
///   styleTags({
///     // Style Number and BigNumber nodes
///     "Number BigNumber": tags.number,
///     // Style Escape nodes whose parent is String
///     "String/Escape": tags.escape,
///     // Style anything inside Attributes nodes
///     "Attributes!": tags.meta,
///     // Add a style to all content inside Italic nodes
///     "Italic/...": tags.emphasis,
///     // Style InvalidString nodes as both `string` and `invalid`
///     "InvalidString": [tags.string, tags.invalid],
///     // Style the node named "/" as punctuation
///     '"/"': tags.punctuation
///   })
/// )
/// ```


function styleTags(spec) {
  let byName = Object.create(null);

  for (let prop in spec) {
    let tags = spec[prop];
    if (!Array.isArray(tags)) tags = [tags];

    for (let part of prop.split(" ")) if (part) {
      let pieces = [],
          mode = 2
      /* Normal */
      ,
          rest = part;

      for (let pos = 0;;) {
        if (rest == "..." && pos > 0 && pos + 3 == part.length) {
          mode = 1
          /* Inherit */
          ;
          break;
        }

        let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
        if (!m) throw new RangeError("Invalid path: " + part);
        pieces.push(m[0] == "*" ? "" : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
        pos += m[0].length;
        if (pos == part.length) break;
        let next = part[pos++];

        if (pos == part.length && next == "!") {
          mode = 0
          /* Opaque */
          ;
          break;
        }

        if (next != "/") throw new RangeError("Invalid path: " + part);
        rest = part.slice(pos);
      }

      let last = pieces.length - 1,
          inner = pieces[last];
      if (!inner) throw new RangeError("Invalid path: " + part);
      let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);
      byName[inner] = rule.sort(byName[inner]);
    }
  }

  return ruleNodeProp.add(byName);
}

const ruleNodeProp = new _common.NodeProp();

class Rule {
  constructor(tags, mode, context, next) {
    this.tags = tags;
    this.mode = mode;
    this.context = context;
    this.next = next;
  }

  sort(other) {
    if (!other || other.depth < this.depth) {
      this.next = other;
      return this;
    }

    other.next = this.sort(other.next);
    return other;
  }

  get depth() {
    return this.context ? this.context.length : 0;
  }

} /// Define a [highlighter](#highlight.Highlighter) from an array of
/// tag/class pairs. Classes associated with more specific tags will
/// take precedence.


function tagHighlighter(tags, options) {
  let map = Object.create(null);

  for (let style of tags) {
    if (!Array.isArray(style.tag)) map[style.tag.id] = style.class;else for (let tag of style.tag) map[tag.id] = style.class;
  }

  let {
    scope,
    all = null
  } = options || {};
  return {
    style: tags => {
      let cls = all;

      for (let tag of tags) {
        for (let sub of tag.set) {
          let tagClass = map[sub.id];

          if (tagClass) {
            cls = cls ? cls + " " + tagClass : tagClass;
            break;
          }
        }
      }

      return cls;
    },
    scope: scope
  };
}

function highlightTags(highlighters, tags) {
  let result = null;

  for (let highlighter of highlighters) {
    let value = highlighter.style(tags);
    if (value) result = result ? result + " " + value : value;
  }

  return result;
} /// Highlight the given [tree](#common.Tree) with the given
/// [highlighter](#highlight.Highlighter).


function highlightTree(tree, highlighter, /// Assign styling to a region of the text. Will be called, in order
/// of position, for any ranges where more than zero classes apply.
/// `classes` is a space separated string of CSS classes.
putStyle, /// The start of the range to highlight.
from = 0, /// The end of the range.
to = tree.length) {
  let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
  builder.highlightRange(tree.cursor(), from, to, "", builder.highlighters);
  builder.flush(to);
}

class HighlightBuilder {
  constructor(at, highlighters, span) {
    this.at = at;
    this.highlighters = highlighters;
    this.span = span;
    this.class = "";
  }

  startSpan(at, cls) {
    if (cls != this.class) {
      this.flush(at);
      if (at > this.at) this.at = at;
      this.class = cls;
    }
  }

  flush(to) {
    if (to > this.at && this.class) this.span(this.at, to, this.class);
  }

  highlightRange(cursor, from, to, inheritedClass, highlighters) {
    let {
      type,
      from: start,
      to: end
    } = cursor;
    if (start >= to || end <= from) return;
    if (type.isTop) highlighters = this.highlighters.filter(h => !h.scope || h.scope(type));
    let cls = inheritedClass;
    let rule = type.prop(ruleNodeProp),
        opaque = false;

    while (rule) {
      if (!rule.context || cursor.matchContext(rule.context)) {
        let tagCls = highlightTags(highlighters, rule.tags);

        if (tagCls) {
          if (cls) cls += " ";
          cls += tagCls;
          if (rule.mode == 1
          /* Inherit */
          ) inheritedClass += (inheritedClass ? " " : "") + tagCls;else if (rule.mode == 0
          /* Opaque */
          ) opaque = true;
        }

        break;
      }

      rule = rule.next;
    }

    this.startSpan(cursor.from, cls);
    if (opaque) return;
    let mounted = cursor.tree && cursor.tree.prop(_common.NodeProp.mounted);

    if (mounted && mounted.overlay) {
      let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
      let innerHighlighters = this.highlighters.filter(h => !h.scope || h.scope(mounted.tree.type));
      let hasChild = cursor.firstChild();

      for (let i = 0, pos = start;; i++) {
        let next = i < mounted.overlay.length ? mounted.overlay[i] : null;
        let nextPos = next ? next.from + start : end;
        let rangeFrom = Math.max(from, pos),
            rangeTo = Math.min(to, nextPos);

        if (rangeFrom < rangeTo && hasChild) {
          while (cursor.from < rangeTo) {
            this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);
            this.startSpan(Math.min(to, cursor.to), cls);
            if (cursor.to >= nextPos || !cursor.nextSibling()) break;
          }
        }

        if (!next || nextPos > to) break;
        pos = next.to + start;

        if (pos > from) {
          this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), inheritedClass, innerHighlighters);
          this.startSpan(pos, cls);
        }
      }

      if (hasChild) cursor.parent();
    } else if (cursor.firstChild()) {
      do {
        if (cursor.to <= from) continue;
        if (cursor.from >= to) break;
        this.highlightRange(cursor, from, to, inheritedClass, highlighters);
        this.startSpan(Math.min(to, cursor.to), cls);
      } while (cursor.nextSibling());

      cursor.parent();
    }
  }

}

const t = Tag.define;
const comment = t(),
      name = t(),
      typeName = t(name),
      propertyName = t(name),
      literal = t(),
      string = t(literal),
      number = t(literal),
      content = t(),
      heading = t(content),
      keyword = t(),
      operator = t(),
      punctuation = t(),
      bracket = t(punctuation),
      meta = t(); /// The default set of highlighting [tags](#highlight.Tag).
///
/// This collection is heavily biased towards programming languages,
/// and necessarily incomplete. A full ontology of syntactic
/// constructs would fill a stack of books, and be impractical to
/// write themes for. So try to make do with this set. If all else
/// fails, [open an
/// issue](https://github.com/codemirror/codemirror.next) to propose a
/// new tag, or [define](#highlight.Tag^define) a local custom tag for
/// your use case.
///
/// Note that it is not obligatory to always attach the most specific
/// tag possible to an element—if your grammar can't easily
/// distinguish a certain type of element (such as a local variable),
/// it is okay to style it as its more general variant (a variable).
/// 
/// For tags that extend some parent tag, the documentation links to
/// the parent.

const tags = {
  /// A comment.
  comment,
  /// A line [comment](#highlight.tags.comment).
  lineComment: t(comment),
  /// A block [comment](#highlight.tags.comment).
  blockComment: t(comment),
  /// A documentation [comment](#highlight.tags.comment).
  docComment: t(comment),
  /// Any kind of identifier.
  name,
  /// The [name](#highlight.tags.name) of a variable.
  variableName: t(name),
  /// A type [name](#highlight.tags.name).
  typeName: typeName,
  /// A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
  tagName: t(typeName),
  /// A property or field [name](#highlight.tags.name).
  propertyName: propertyName,
  /// An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
  attributeName: t(propertyName),
  /// The [name](#highlight.tags.name) of a class.
  className: t(name),
  /// A label [name](#highlight.tags.name).
  labelName: t(name),
  /// A namespace [name](#highlight.tags.name).
  namespace: t(name),
  /// The [name](#highlight.tags.name) of a macro.
  macroName: t(name),
  /// A literal value.
  literal,
  /// A string [literal](#highlight.tags.literal).
  string,
  /// A documentation [string](#highlight.tags.string).
  docString: t(string),
  /// A character literal (subtag of [string](#highlight.tags.string)).
  character: t(string),
  /// An attribute value (subtag of [string](#highlight.tags.string)).
  attributeValue: t(string),
  /// A number [literal](#highlight.tags.literal).
  number,
  /// An integer [number](#highlight.tags.number) literal.
  integer: t(number),
  /// A floating-point [number](#highlight.tags.number) literal.
  float: t(number),
  /// A boolean [literal](#highlight.tags.literal).
  bool: t(literal),
  /// Regular expression [literal](#highlight.tags.literal).
  regexp: t(literal),
  /// An escape [literal](#highlight.tags.literal), for example a
  /// backslash escape in a string.
  escape: t(literal),
  /// A color [literal](#highlight.tags.literal).
  color: t(literal),
  /// A URL [literal](#highlight.tags.literal).
  url: t(literal),
  /// A language keyword.
  keyword,
  /// The [keyword](#highlight.tags.keyword) for the self or this
  /// object.
  self: t(keyword),
  /// The [keyword](#highlight.tags.keyword) for null.
  null: t(keyword),
  /// A [keyword](#highlight.tags.keyword) denoting some atomic value.
  atom: t(keyword),
  /// A [keyword](#highlight.tags.keyword) that represents a unit.
  unit: t(keyword),
  /// A modifier [keyword](#highlight.tags.keyword).
  modifier: t(keyword),
  /// A [keyword](#highlight.tags.keyword) that acts as an operator.
  operatorKeyword: t(keyword),
  /// A control-flow related [keyword](#highlight.tags.keyword).
  controlKeyword: t(keyword),
  /// A [keyword](#highlight.tags.keyword) that defines something.
  definitionKeyword: t(keyword),
  /// A [keyword](#highlight.tags.keyword) related to defining or
  /// interfacing with modules.
  moduleKeyword: t(keyword),
  /// An operator.
  operator,
  /// An [operator](#highlight.tags.operator) that defines something.
  derefOperator: t(operator),
  /// Arithmetic-related [operator](#highlight.tags.operator).
  arithmeticOperator: t(operator),
  /// Logical [operator](#highlight.tags.operator).
  logicOperator: t(operator),
  /// Bit [operator](#highlight.tags.operator).
  bitwiseOperator: t(operator),
  /// Comparison [operator](#highlight.tags.operator).
  compareOperator: t(operator),
  /// [Operator](#highlight.tags.operator) that updates its operand.
  updateOperator: t(operator),
  /// [Operator](#highlight.tags.operator) that defines something.
  definitionOperator: t(operator),
  /// Type-related [operator](#highlight.tags.operator).
  typeOperator: t(operator),
  /// Control-flow [operator](#highlight.tags.operator).
  controlOperator: t(operator),
  /// Program or markup punctuation.
  punctuation,
  /// [Punctuation](#highlight.tags.punctuation) that separates
  /// things.
  separator: t(punctuation),
  /// Bracket-style [punctuation](#highlight.tags.punctuation).
  bracket,
  /// Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
  /// tokens).
  angleBracket: t(bracket),
  /// Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
  /// tokens).
  squareBracket: t(bracket),
  /// Parentheses (usually `(` and `)` tokens). Subtag of
  /// [bracket](#highlight.tags.bracket).
  paren: t(bracket),
  /// Braces (usually `{` and `}` tokens). Subtag of
  /// [bracket](#highlight.tags.bracket).
  brace: t(bracket),
  /// Content, for example plain text in XML or markup documents.
  content,
  /// [Content](#highlight.tags.content) that represents a heading.
  heading,
  /// A level 1 [heading](#highlight.tags.heading).
  heading1: t(heading),
  /// A level 2 [heading](#highlight.tags.heading).
  heading2: t(heading),
  /// A level 3 [heading](#highlight.tags.heading).
  heading3: t(heading),
  /// A level 4 [heading](#highlight.tags.heading).
  heading4: t(heading),
  /// A level 5 [heading](#highlight.tags.heading).
  heading5: t(heading),
  /// A level 6 [heading](#highlight.tags.heading).
  heading6: t(heading),
  /// A prose separator (such as a horizontal rule).
  contentSeparator: t(content),
  /// [Content](#highlight.tags.content) that represents a list.
  list: t(content),
  /// [Content](#highlight.tags.content) that represents a quote.
  quote: t(content),
  /// [Content](#highlight.tags.content) that is emphasized.
  emphasis: t(content),
  /// [Content](#highlight.tags.content) that is styled strong.
  strong: t(content),
  /// [Content](#highlight.tags.content) that is part of a link.
  link: t(content),
  /// [Content](#highlight.tags.content) that is styled as code or
  /// monospace.
  monospace: t(content),
  /// [Content](#highlight.tags.content) that has a strike-through
  /// style.
  strikethrough: t(content),
  /// Inserted text in a change-tracking format.
  inserted: t(),
  /// Deleted text.
  deleted: t(),
  /// Changed text.
  changed: t(),
  /// An invalid or unsyntactic element.
  invalid: t(),
  /// Metadata or meta-instruction.
  meta,
  /// [Metadata](#highlight.tags.meta) that applies to the entire
  /// document.
  documentMeta: t(meta),
  /// [Metadata](#highlight.tags.meta) that annotates or adds
  /// attributes to a given syntactic element.
  annotation: t(meta),
  /// Processing instruction or preprocessor directive. Subtag of
  /// [meta](#highlight.tags.meta).
  processingInstruction: t(meta),
  /// [Modifier](#highlight.Tag^defineModifier) that indicates that a
  /// given element is being defined. Expected to be used with the
  /// various [name](#highlight.tags.name) tags.
  definition: Tag.defineModifier(),
  /// [Modifier](#highlight.Tag^defineModifier) that indicates that
  /// something is constant. Mostly expected to be used with
  /// [variable names](#highlight.tags.variableName).
  constant: Tag.defineModifier(),
  /// [Modifier](#highlight.Tag^defineModifier) used to indicate that
  /// a [variable](#highlight.tags.variableName) or [property
  /// name](#highlight.tags.propertyName) is being called or defined
  /// as a function.
  function: Tag.defineModifier(),
  /// [Modifier](#highlight.Tag^defineModifier) that can be applied to
  /// [names](#highlight.tags.name) to indicate that they belong to
  /// the language's standard environment.
  standard: Tag.defineModifier(),
  /// [Modifier](#highlight.Tag^defineModifier) that indicates a given
  /// [names](#highlight.tags.name) is local to some scope.
  local: Tag.defineModifier(),
  /// A generic variant [modifier](#highlight.Tag^defineModifier) that
  /// can be used to tag language-specific alternative variants of
  /// some common tag. It is recommended for themes to define special
  /// forms of at least the [string](#highlight.tags.string) and
  /// [variable name](#highlight.tags.variableName) tags, since those
  /// come up a lot.
  special: Tag.defineModifier()
}; /// This is a highlighter that adds stable, predictable classes to
/// tokens, for styling with external CSS.
///
/// The following tags are mapped to their name prefixed with `"tok-"`
/// (for example `"tok-comment"`):
///
/// * [`link`](#highlight.tags.link)
/// * [`heading`](#highlight.tags.heading)
/// * [`emphasis`](#highlight.tags.emphasis)
/// * [`strong`](#highlight.tags.strong)
/// * [`keyword`](#highlight.tags.keyword)
/// * [`atom`](#highlight.tags.atom)
/// * [`bool`](#highlight.tags.bool)
/// * [`url`](#highlight.tags.url)
/// * [`labelName`](#highlight.tags.labelName)
/// * [`inserted`](#highlight.tags.inserted)
/// * [`deleted`](#highlight.tags.deleted)
/// * [`literal`](#highlight.tags.literal)
/// * [`string`](#highlight.tags.string)
/// * [`number`](#highlight.tags.number)
/// * [`variableName`](#highlight.tags.variableName)
/// * [`typeName`](#highlight.tags.typeName)
/// * [`namespace`](#highlight.tags.namespace)
/// * [`className`](#highlight.tags.className)
/// * [`macroName`](#highlight.tags.macroName)
/// * [`propertyName`](#highlight.tags.propertyName)
/// * [`operator`](#highlight.tags.operator)
/// * [`comment`](#highlight.tags.comment)
/// * [`meta`](#highlight.tags.meta)
/// * [`punctuation`](#highlight.tags.punctuation)
/// * [`invalid`](#highlight.tags.invalid)
///
/// In addition, these mappings are provided:
///
/// * [`regexp`](#highlight.tags.regexp),
///   [`escape`](#highlight.tags.escape), and
///   [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)
///   are mapped to `"tok-string2"`
/// * [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)
///   to `"tok-variableName2"`
/// * [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)
///   to `"tok-variableName tok-local"`
/// * [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)
///   to `"tok-variableName tok-definition"`
/// * [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)
///   to `"tok-propertyName tok-definition"`

exports.tags = tags;
const classHighlighter = tagHighlighter([{
  tag: tags.link,
  class: "tok-link"
}, {
  tag: tags.heading,
  class: "tok-heading"
}, {
  tag: tags.emphasis,
  class: "tok-emphasis"
}, {
  tag: tags.strong,
  class: "tok-strong"
}, {
  tag: tags.keyword,
  class: "tok-keyword"
}, {
  tag: tags.atom,
  class: "tok-atom"
}, {
  tag: tags.bool,
  class: "tok-bool"
}, {
  tag: tags.url,
  class: "tok-url"
}, {
  tag: tags.labelName,
  class: "tok-labelName"
}, {
  tag: tags.inserted,
  class: "tok-inserted"
}, {
  tag: tags.deleted,
  class: "tok-deleted"
}, {
  tag: tags.literal,
  class: "tok-literal"
}, {
  tag: tags.string,
  class: "tok-string"
}, {
  tag: tags.number,
  class: "tok-number"
}, {
  tag: [tags.regexp, tags.escape, tags.special(tags.string)],
  class: "tok-string2"
}, {
  tag: tags.variableName,
  class: "tok-variableName"
}, {
  tag: tags.local(tags.variableName),
  class: "tok-variableName tok-local"
}, {
  tag: tags.definition(tags.variableName),
  class: "tok-variableName tok-definition"
}, {
  tag: tags.special(tags.variableName),
  class: "tok-variableName2"
}, {
  tag: tags.definition(tags.propertyName),
  class: "tok-propertyName tok-definition"
}, {
  tag: tags.typeName,
  class: "tok-typeName"
}, {
  tag: tags.namespace,
  class: "tok-namespace"
}, {
  tag: tags.className,
  class: "tok-className"
}, {
  tag: tags.macroName,
  class: "tok-macroName"
}, {
  tag: tags.propertyName,
  class: "tok-propertyName"
}, {
  tag: tags.operator,
  class: "tok-operator"
}, {
  tag: tags.comment,
  class: "tok-comment"
}, {
  tag: tags.meta,
  class: "tok-meta"
}, {
  tag: tags.invalid,
  class: "tok-invalid"
}, {
  tag: tags.punctuation,
  class: "tok-punctuation"
}]);
exports.classHighlighter = classHighlighter;
},{"@lezer/common":"YT4N"}],"Hm1j":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TreeIndentContext = exports.StringStream = exports.StreamLanguage = exports.ParseContext = exports.LanguageSupport = exports.LanguageDescription = exports.Language = exports.LRLanguage = exports.IndentContext = exports.HighlightStyle = void 0;
exports.bracketMatching = bracketMatching;
exports.codeFolding = codeFolding;
exports.continuedIndent = continuedIndent;
exports.defaultHighlightStyle = void 0;
exports.defineLanguageFacet = defineLanguageFacet;
exports.delimitedIndent = delimitedIndent;
exports.ensureSyntaxTree = ensureSyntaxTree;
exports.foldEffect = exports.foldCode = exports.foldAll = exports.flatIndent = void 0;
exports.foldGutter = foldGutter;
exports.foldInside = foldInside;
exports.foldState = exports.foldService = exports.foldNodeProp = exports.foldKeymap = void 0;
exports.foldable = foldable;
exports.foldedRanges = foldedRanges;
exports.forceParsing = forceParsing;
exports.getIndentUnit = getIndentUnit;
exports.getIndentation = getIndentation;
exports.highlightingFor = highlightingFor;
exports.indentNodeProp = void 0;
exports.indentOnInput = indentOnInput;
exports.indentRange = indentRange;
exports.indentService = void 0;
exports.indentString = indentString;
exports.languageDataProp = exports.language = exports.indentUnit = void 0;
exports.matchBrackets = matchBrackets;
exports.syntaxHighlighting = syntaxHighlighting;
exports.syntaxParserRunning = syntaxParserRunning;
exports.syntaxTree = syntaxTree;
exports.syntaxTreeAvailable = syntaxTreeAvailable;
exports.unfoldEffect = exports.unfoldCode = exports.unfoldAll = void 0;

var _common = require("@lezer/common");

var _state2 = require("@codemirror/state");

var _view = require("@codemirror/view");

var _highlight = require("@lezer/highlight");

var _styleMod = require("style-mod");

var _a;
/**
Node prop stored in a parser's top syntax node to provide the
facet that stores language-specific data for that language.
*/


const languageDataProp = /*@__PURE__*/new _common.NodeProp();
/**
Helper function to define a facet (to be added to the top syntax
node(s) for a language via
[`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be
used to associate language data with the language. You
probably only need this when subclassing
[`Language`](https://codemirror.net/6/docs/ref/#language.Language).
*/

exports.languageDataProp = languageDataProp;

function defineLanguageFacet(baseData) {
  return _state2.Facet.define({
    combine: baseData ? values => values.concat(baseData) : undefined
  });
}
/**
A language object manages parsing and per-language
[metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is
managed as a [Lezer](https://lezer.codemirror.net) tree. The class
can be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)
subclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or
via the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass
for stream parsers.
*/


class Language {
  /**
  Construct a language object. If you need to invoke this
  directly, first define a data facet with
  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
  configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
  to the language's outer syntax node.
  */
  constructor(
  /**
  The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet
  used for this language.
  */
  data, parser, extraExtensions = []) {
    this.data = data; // Kludge to define EditorState.tree as a debugging helper,
    // without the EditorState package actually knowing about
    // languages and lezer trees.

    if (!_state2.EditorState.prototype.hasOwnProperty("tree")) Object.defineProperty(_state2.EditorState.prototype, "tree", {
      get() {
        return syntaxTree(this);
      }

    });
    this.parser = parser;
    this.extension = [language.of(this), _state2.EditorState.languageData.of((state, pos, side) => state.facet(languageDataFacetAt(state, pos, side)))].concat(extraExtensions);
  }
  /**
  Query whether this language is active at the given position.
  */


  isActiveAt(state, pos, side = -1) {
    return languageDataFacetAt(state, pos, side) == this.data;
  }
  /**
  Find the document regions that were parsed using this language.
  The returned regions will _include_ any nested languages rooted
  in this language, when those exist.
  */


  findRegions(state) {
    let lang = state.facet(language);
    if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data) return [{
      from: 0,
      to: state.doc.length
    }];
    if (!lang || !lang.allowsNesting) return [];
    let result = [];

    let explore = (tree, from) => {
      if (tree.prop(languageDataProp) == this.data) {
        result.push({
          from,
          to: from + tree.length
        });
        return;
      }

      let mount = tree.prop(_common.NodeProp.mounted);

      if (mount) {
        if (mount.tree.prop(languageDataProp) == this.data) {
          if (mount.overlay) for (let r of mount.overlay) result.push({
            from: r.from + from,
            to: r.to + from
          });else result.push({
            from: from,
            to: from + tree.length
          });
          return;
        } else if (mount.overlay) {
          let size = result.length;
          explore(mount.tree, mount.overlay[0].from + from);
          if (result.length > size) return;
        }
      }

      for (let i = 0; i < tree.children.length; i++) {
        let ch = tree.children[i];
        if (ch instanceof _common.Tree) explore(ch, tree.positions[i] + from);
      }
    };

    explore(syntaxTree(state), 0);
    return result;
  }
  /**
  Indicates whether this language allows nested languages. The
  default implementation returns true.
  */


  get allowsNesting() {
    return true;
  }

}
/**
@internal
*/


exports.Language = Language;
Language.setState = /*@__PURE__*/_state2.StateEffect.define();

function languageDataFacetAt(state, pos, side) {
  let topLang = state.facet(language);
  if (!topLang) return null;
  let facet = topLang.data;

  if (topLang.allowsNesting) {
    for (let node = syntaxTree(state).topNode; node; node = node.enter(pos, side, _common.IterMode.ExcludeBuffers)) facet = node.type.prop(languageDataProp) || facet;
  }

  return facet;
}
/**
A subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer
[LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)
parsers.
*/


class LRLanguage extends Language {
  constructor(data, parser) {
    super(data, parser);
    this.parser = parser;
  }
  /**
  Define a language from a parser.
  */


  static define(spec) {
    let data = defineLanguageFacet(spec.languageData);
    return new LRLanguage(data, spec.parser.configure({
      props: [languageDataProp.add(type => type.isTop ? data : undefined)]
    }));
  }
  /**
  Create a new instance of this language with a reconfigured
  version of its parser.
  */


  configure(options) {
    return new LRLanguage(this.data, this.parser.configure(options));
  }

  get allowsNesting() {
    return this.parser.hasWrappers();
  }

}
/**
Get the syntax tree for a state, which is the current (possibly
incomplete) parse tree of the active
[language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no
language available.
*/


exports.LRLanguage = LRLanguage;

function syntaxTree(state) {
  let field = state.field(Language.state, false);
  return field ? field.tree : _common.Tree.empty;
}
/**
Try to get a parse tree that spans at least up to `upto`. The
method will do at most `timeout` milliseconds of work to parse
up to that point if the tree isn't already available.
*/


function ensureSyntaxTree(state, upto, timeout = 50) {
  var _a;

  let parse = (_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context;
  return !parse ? null : parse.isDone(upto) || parse.work(timeout, upto) ? parse.tree : null;
}
/**
Queries whether there is a full syntax tree available up to the
given document position. If there isn't, the background parse
process _might_ still be working and update the tree further, but
there is no guarantee of that—the parser will [stop
working](https://codemirror.net/6/docs/ref/#language.syntaxParserRunning) when it has spent a
certain amount of time or has moved beyond the visible viewport.
Always returns false if no language has been enabled.
*/


function syntaxTreeAvailable(state, upto = state.doc.length) {
  var _a;

  return ((_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context.isDone(upto)) || false;
}
/**
Move parsing forward, and update the editor state afterwards to
reflect the new tree. Will work for at most `timeout`
milliseconds. Returns true if the parser managed get to the given
position in that time.
*/


function forceParsing(view, upto = view.viewport.to, timeout = 100) {
  let success = ensureSyntaxTree(view.state, upto, timeout);
  if (success != syntaxTree(view.state)) view.dispatch({});
  return !!success;
}
/**
Tells you whether the language parser is planning to do more
parsing work (in a `requestIdleCallback` pseudo-thread) or has
stopped running, either because it parsed the entire document,
because it spent too much time and was cut off, or because there
is no language parser enabled.
*/


function syntaxParserRunning(view) {
  var _a;

  return ((_a = view.plugin(parseWorker)) === null || _a === void 0 ? void 0 : _a.isWorking()) || false;
} // Lezer-style Input object for a Text document.


class DocInput {
  constructor(doc, length = doc.length) {
    this.doc = doc;
    this.length = length;
    this.cursorPos = 0;
    this.string = "";
    this.cursor = doc.iter();
  }

  syncTo(pos) {
    this.string = this.cursor.next(pos - this.cursorPos).value;
    this.cursorPos = pos + this.string.length;
    return this.cursorPos - this.string.length;
  }

  chunk(pos) {
    this.syncTo(pos);
    return this.string;
  }

  get lineChunks() {
    return true;
  }

  read(from, to) {
    let stringStart = this.cursorPos - this.string.length;
    if (from < stringStart || to >= this.cursorPos) return this.doc.sliceString(from, to);else return this.string.slice(from - stringStart, to - stringStart);
  }

}

let currentContext = null;
/**
A parse context provided to parsers working on the editor content.
*/

class ParseContext {
  constructor(parser,
  /**
  The current editor state.
  */
  state,
  /**
  Tree fragments that can be reused by incremental re-parses.
  */
  fragments = [],
  /**
  @internal
  */
  tree,
  /**
  @internal
  */
  treeLen,
  /**
  The current editor viewport (or some overapproximation
  thereof). Intended to be used for opportunistically avoiding
  work (in which case
  [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)
  should be called to make sure the parser is restarted when the
  skipped region becomes visible).
  */
  viewport,
  /**
  @internal
  */
  skipped,
  /**
  This is where skipping parsers can register a promise that,
  when resolved, will schedule a new parse. It is cleared when
  the parse worker picks up the promise. @internal
  */
  scheduleOn) {
    this.parser = parser;
    this.state = state;
    this.fragments = fragments;
    this.tree = tree;
    this.treeLen = treeLen;
    this.viewport = viewport;
    this.skipped = skipped;
    this.scheduleOn = scheduleOn;
    this.parse = null;
    /**
    @internal
    */

    this.tempSkipped = [];
  }
  /**
  @internal
  */


  static create(parser, state, viewport) {
    return new ParseContext(parser, state, [], _common.Tree.empty, 0, viewport, [], null);
  }

  startParse() {
    return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
  }
  /**
  @internal
  */


  work(until, upto) {
    if (upto != null && upto >= this.state.doc.length) upto = undefined;

    if (this.tree != _common.Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
      this.takeTree();
      return true;
    }

    return this.withContext(() => {
      var _a;

      if (typeof until == "number") {
        let endTime = Date.now() + until;

        until = () => Date.now() > endTime;
      }

      if (!this.parse) this.parse = this.startParse();
      if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) && upto < this.state.doc.length) this.parse.stopAt(upto);

      for (;;) {
        let done = this.parse.advance();

        if (done) {
          this.fragments = this.withoutTempSkipped(_common.TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
          this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;
          this.tree = done;
          this.parse = null;
          if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length)) this.parse = this.startParse();else return true;
        }

        if (until()) return false;
      }
    });
  }
  /**
  @internal
  */


  takeTree() {
    let pos, tree;

    if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
      if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos) this.parse.stopAt(pos);
      this.withContext(() => {
        while (!(tree = this.parse.advance())) {}
      });
      this.treeLen = pos;
      this.tree = tree;
      this.fragments = this.withoutTempSkipped(_common.TreeFragment.addTree(this.tree, this.fragments, true));
      this.parse = null;
    }
  }

  withContext(f) {
    let prev = currentContext;
    currentContext = this;

    try {
      return f();
    } finally {
      currentContext = prev;
    }
  }

  withoutTempSkipped(fragments) {
    for (let r; r = this.tempSkipped.pop();) fragments = cutFragments(fragments, r.from, r.to);

    return fragments;
  }
  /**
  @internal
  */


  changes(changes, newState) {
    let {
      fragments,
      tree,
      treeLen,
      viewport,
      skipped
    } = this;
    this.takeTree();

    if (!changes.empty) {
      let ranges = [];
      changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({
        fromA,
        toA,
        fromB,
        toB
      }));
      fragments = _common.TreeFragment.applyChanges(fragments, ranges);
      tree = _common.Tree.empty;
      treeLen = 0;
      viewport = {
        from: changes.mapPos(viewport.from, -1),
        to: changes.mapPos(viewport.to, 1)
      };

      if (this.skipped.length) {
        skipped = [];

        for (let r of this.skipped) {
          let from = changes.mapPos(r.from, 1),
              to = changes.mapPos(r.to, -1);
          if (from < to) skipped.push({
            from,
            to
          });
        }
      }
    }

    return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
  }
  /**
  @internal
  */


  updateViewport(viewport) {
    if (this.viewport.from == viewport.from && this.viewport.to == viewport.to) return false;
    this.viewport = viewport;
    let startLen = this.skipped.length;

    for (let i = 0; i < this.skipped.length; i++) {
      let {
        from,
        to
      } = this.skipped[i];

      if (from < viewport.to && to > viewport.from) {
        this.fragments = cutFragments(this.fragments, from, to);
        this.skipped.splice(i--, 1);
      }
    }

    if (this.skipped.length >= startLen) return false;
    this.reset();
    return true;
  }
  /**
  @internal
  */


  reset() {
    if (this.parse) {
      this.takeTree();
      this.parse = null;
    }
  }
  /**
  Notify the parse scheduler that the given region was skipped
  because it wasn't in view, and the parse should be restarted
  when it comes into view.
  */


  skipUntilInView(from, to) {
    this.skipped.push({
      from,
      to
    });
  }
  /**
  Returns a parser intended to be used as placeholder when
  asynchronously loading a nested parser. It'll skip its input and
  mark it as not-really-parsed, so that the next update will parse
  it again.
  
  When `until` is given, a reparse will be scheduled when that
  promise resolves.
  */


  static getSkippingParser(until) {
    return new class extends _common.Parser {
      createParse(input, fragments, ranges) {
        let from = ranges[0].from,
            to = ranges[ranges.length - 1].to;
        let parser = {
          parsedPos: from,

          advance() {
            let cx = currentContext;

            if (cx) {
              for (let r of ranges) cx.tempSkipped.push(r);

              if (until) cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
            }

            this.parsedPos = to;
            return new _common.Tree(_common.NodeType.none, [], [], to - from);
          },

          stoppedAt: null,

          stopAt() {}

        };
        return parser;
      }

    }();
  }
  /**
  @internal
  */


  isDone(upto) {
    upto = Math.min(upto, this.state.doc.length);
    let frags = this.fragments;
    return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
  }
  /**
  Get the context for the current parse, or `null` if no editor
  parse is in progress.
  */


  static get() {
    return currentContext;
  }

}

exports.ParseContext = ParseContext;

function cutFragments(fragments, from, to) {
  return _common.TreeFragment.applyChanges(fragments, [{
    fromA: from,
    toA: to,
    fromB: from,
    toB: to
  }]);
}

class LanguageState {
  constructor( // A mutable parse state that is used to preserve work done during
  // the lifetime of a state when moving to the next state.
  context) {
    this.context = context;
    this.tree = context.tree;
  }

  apply(tr) {
    if (!tr.docChanged && this.tree == this.context.tree) return this;
    let newCx = this.context.changes(tr.changes, tr.state); // If the previous parse wasn't done, go forward only up to its
    // end position or the end of the viewport, to avoid slowing down
    // state updates with parse work beyond the viewport.

    let upto = this.context.treeLen == tr.startState.doc.length ? undefined : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
    if (!newCx.work(20
    /* Apply */
    , upto)) newCx.takeTree();
    return new LanguageState(newCx);
  }

  static init(state) {
    let vpTo = Math.min(3000
    /* InitViewport */
    , state.doc.length);
    let parseState = ParseContext.create(state.facet(language).parser, state, {
      from: 0,
      to: vpTo
    });
    if (!parseState.work(20
    /* Apply */
    , vpTo)) parseState.takeTree();
    return new LanguageState(parseState);
  }

}

Language.state = /*@__PURE__*/_state2.StateField.define({
  create: LanguageState.init,

  update(value, tr) {
    for (let e of tr.effects) if (e.is(Language.setState)) return e.value;

    if (tr.startState.facet(language) != tr.state.facet(language)) return LanguageState.init(tr.state);
    return value.apply(tr);
  }

});

let requestIdle = callback => {
  let timeout = setTimeout(() => callback(), 500
  /* MaxPause */
  );
  return () => clearTimeout(timeout);
};

if (typeof requestIdleCallback != "undefined") requestIdle = callback => {
  let idle = -1,
      timeout = setTimeout(() => {
    idle = requestIdleCallback(callback, {
      timeout: 500
      /* MaxPause */
      - 100
      /* MinPause */

    });
  }, 100
  /* MinPause */
  );
  return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
};
const isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending) ? () => navigator.scheduling.isInputPending() : null;

const parseWorker = /*@__PURE__*/_view.ViewPlugin.fromClass(class ParseWorker {
  constructor(view) {
    this.view = view;
    this.working = null;
    this.workScheduled = 0; // End of the current time chunk

    this.chunkEnd = -1; // Milliseconds of budget left for this chunk

    this.chunkBudget = -1;
    this.work = this.work.bind(this);
    this.scheduleWork();
  }

  update(update) {
    let cx = this.view.state.field(Language.state).context;
    if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen) this.scheduleWork();

    if (update.docChanged) {
      if (this.view.hasFocus) this.chunkBudget += 50
      /* ChangeBonus */
      ;
      this.scheduleWork();
    }

    this.checkAsyncSchedule(cx);
  }

  scheduleWork() {
    if (this.working) return;
    let {
      state
    } = this.view,
        field = state.field(Language.state);
    if (field.tree != field.context.tree || !field.context.isDone(state.doc.length)) this.working = requestIdle(this.work);
  }

  work(deadline) {
    this.working = null;
    let now = Date.now();

    if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) {
      // Start a new chunk
      this.chunkEnd = now + 30000
      /* ChunkTime */
      ;
      this.chunkBudget = 3000
      /* ChunkBudget */
      ;
    }

    if (this.chunkBudget <= 0) return; // No more budget

    let {
      state,
      viewport: {
        to: vpTo
      }
    } = this.view,
        field = state.field(Language.state);
    if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000
    /* MaxParseAhead */
    )) return;
    let endTime = Date.now() + Math.min(this.chunkBudget, 100
    /* Slice */
    , deadline && !isInputPending ? Math.max(25
    /* MinSlice */
    , deadline.timeRemaining() - 5) : 1e9);
    let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;
    let done = field.context.work(() => {
      return isInputPending && isInputPending() || Date.now() > endTime;
    }, vpTo + (viewportFirst ? 0 : 100000
    /* MaxParseAhead */
    ));
    this.chunkBudget -= Date.now() - now;

    if (done || this.chunkBudget <= 0) {
      field.context.takeTree();
      this.view.dispatch({
        effects: Language.setState.of(new LanguageState(field.context))
      });
    }

    if (this.chunkBudget > 0 && !(done && !viewportFirst)) this.scheduleWork();
    this.checkAsyncSchedule(field.context);
  }

  checkAsyncSchedule(cx) {
    if (cx.scheduleOn) {
      this.workScheduled++;
      cx.scheduleOn.then(() => this.scheduleWork()).catch(err => (0, _view.logException)(this.view.state, err)).then(() => this.workScheduled--);
      cx.scheduleOn = null;
    }
  }

  destroy() {
    if (this.working) this.working();
  }

  isWorking() {
    return !!(this.working || this.workScheduled > 0);
  }

}, {
  eventHandlers: {
    focus() {
      this.scheduleWork();
    }

  }
});
/**
The facet used to associate a language with an editor state. Used
by `Language` object's `extension` property (so you don't need to
manually wrap your languages in this). Can be used to access the
current language on a state.
*/


const language = /*@__PURE__*/_state2.Facet.define({
  combine(languages) {
    return languages.length ? languages[0] : null;
  },

  enables: [Language.state, parseWorker]
});
/**
This class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an
optional set of supporting extensions. Language packages are
encouraged to export a function that optionally takes a
configuration object and returns a `LanguageSupport` instance, as
the main way for client code to use the package.
*/


exports.language = language;

class LanguageSupport {
  /**
  Create a language support object.
  */
  constructor(
  /**
  The language object.
  */
  language,
  /**
  An optional set of supporting extensions. When nesting a
  language in another language, the outer language is encouraged
  to include the supporting extensions for its inner languages
  in its own set of support extensions.
  */
  support = []) {
    this.language = language;
    this.support = support;
    this.extension = [language, support];
  }

}
/**
Language descriptions are used to store metadata about languages
and to dynamically load them. Their main role is finding the
appropriate language for a filename or dynamically loading nested
parsers.
*/


exports.LanguageSupport = LanguageSupport;

class LanguageDescription {
  constructor(
  /**
  The name of this language.
  */
  name,
  /**
  Alternative names for the mode (lowercased, includes `this.name`).
  */
  alias,
  /**
  File extensions associated with this language.
  */
  extensions,
  /**
  Optional filename pattern that should be associated with this
  language.
  */
  filename, loadFunc,
  /**
  If the language has been loaded, this will hold its value.
  */
  support = undefined) {
    this.name = name;
    this.alias = alias;
    this.extensions = extensions;
    this.filename = filename;
    this.loadFunc = loadFunc;
    this.support = support;
    this.loading = null;
  }
  /**
  Start loading the the language. Will return a promise that
  resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)
  object when the language successfully loads.
  */


  load() {
    return this.loading || (this.loading = this.loadFunc().then(support => this.support = support, err => {
      this.loading = null;
      throw err;
    }));
  }
  /**
  Create a language description.
  */


  static of(spec) {
    let {
      load,
      support
    } = spec;

    if (!load) {
      if (!support) throw new RangeError("Must pass either 'load' or 'support' to LanguageDescription.of");

      load = () => Promise.resolve(support);
    }

    return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map(s => s.toLowerCase()), spec.extensions || [], spec.filename, load, support);
  }
  /**
  Look for a language in the given array of descriptions that
  matches the filename. Will first match
  [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,
  and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),
  and return the first language that matches.
  */


  static matchFilename(descs, filename) {
    for (let d of descs) if (d.filename && d.filename.test(filename)) return d;

    let ext = /\.([^.]+)$/.exec(filename);
    if (ext) for (let d of descs) if (d.extensions.indexOf(ext[1]) > -1) return d;
    return null;
  }
  /**
  Look for a language whose name or alias matches the the given
  name (case-insensitively). If `fuzzy` is true, and no direct
  matchs is found, this'll also search for a language whose name
  or alias occurs in the string (for names shorter than three
  characters, only when surrounded by non-word characters).
  */


  static matchLanguageName(descs, name, fuzzy = true) {
    name = name.toLowerCase();

    for (let d of descs) if (d.alias.some(a => a == name)) return d;

    if (fuzzy) for (let d of descs) for (let a of d.alias) {
      let found = name.indexOf(a);
      if (found > -1 && (a.length > 2 || !/\w/.test(name[found - 1]) && !/\w/.test(name[found + a.length]))) return d;
    }
    return null;
  }

}
/**
Facet that defines a way to provide a function that computes the
appropriate indentation depth at the start of a given line, or
`null` to indicate no appropriate indentation could be determined.
*/


exports.LanguageDescription = LanguageDescription;

const indentService = /*@__PURE__*/_state2.Facet.define();
/**
Facet for overriding the unit by which indentation happens.
Should be a string consisting either entirely of spaces or
entirely of tabs. When not set, this defaults to 2 spaces.
*/


exports.indentService = indentService;

const indentUnit = /*@__PURE__*/_state2.Facet.define({
  combine: values => {
    if (!values.length) return "  ";
    if (!/^(?: +|\t+)$/.test(values[0])) throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
    return values[0];
  }
});
/**
Return the _column width_ of an indent unit in the state.
Determined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)
facet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that
contains tabs.
*/


exports.indentUnit = indentUnit;

function getIndentUnit(state) {
  let unit = state.facet(indentUnit);
  return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
}
/**
Create an indentation string that covers columns 0 to `cols`.
Will use tabs for as much of the columns as possible when the
[`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains
tabs.
*/


function indentString(state, cols) {
  let result = "",
      ts = state.tabSize;
  if (state.facet(indentUnit).charCodeAt(0) == 9) while (cols >= ts) {
    result += "\t";
    cols -= ts;
  }

  for (let i = 0; i < cols; i++) result += " ";

  return result;
}
/**
Get the indentation at the given position. Will first consult any
[indent services](https://codemirror.net/6/docs/ref/#language.indentService) that are registered,
and if none of those return an indentation, this will check the
syntax tree for the [indent node prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp)
and use that if found. Returns a number when an indentation could
be determined, and null otherwise.
*/


function getIndentation(context, pos) {
  if (context instanceof _state2.EditorState) context = new IndentContext(context);

  for (let service of context.state.facet(indentService)) {
    let result = service(context, pos);
    if (result != null) return result;
  }

  let tree = syntaxTree(context.state);
  return tree ? syntaxIndentation(context, tree, pos) : null;
}
/**
Create a change set that auto-indents all lines touched by the
given document range.
*/


function indentRange(state, from, to) {
  let updated = Object.create(null);
  let context = new IndentContext(state, {
    overrideIndentation: start => {
      var _a;

      return (_a = updated[start]) !== null && _a !== void 0 ? _a : -1;
    }
  });
  let changes = [];

  for (let pos = from; pos <= to;) {
    let line = state.doc.lineAt(pos);
    pos = line.to + 1;
    let indent = getIndentation(context, line.from);
    if (indent == null) continue;
    if (!/\S/.test(line.text)) indent = 0;
    let cur = /^\s*/.exec(line.text)[0];
    let norm = indentString(state, indent);

    if (cur != norm) {
      updated[line.from] = indent;
      changes.push({
        from: line.from,
        to: line.from + cur.length,
        insert: norm
      });
    }
  }

  return state.changes(changes);
}
/**
Indentation contexts are used when calling [indentation
services](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities
useful in indentation logic, and can selectively override the
indentation reported for some lines.
*/


class IndentContext {
  /**
  Create an indent context.
  */
  constructor(
  /**
  The editor state.
  */
  state,
  /**
  @internal
  */
  options = {}) {
    this.state = state;
    this.options = options;
    this.unit = getIndentUnit(state);
  }
  /**
  Get a description of the line at the given position, taking
  [simulated line
  breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  into account. If there is such a break at `pos`, the `bias`
  argument determines whether the part of the line line before or
  after the break is used.
  */


  lineAt(pos, bias = 1) {
    let line = this.state.doc.lineAt(pos);
    let {
      simulateBreak,
      simulateDoubleBreak
    } = this.options;

    if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
      if (simulateDoubleBreak && simulateBreak == pos) return {
        text: "",
        from: pos
      };else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos) return {
        text: line.text.slice(simulateBreak - line.from),
        from: simulateBreak
      };else return {
        text: line.text.slice(0, simulateBreak - line.from),
        from: line.from
      };
    }

    return line;
  }
  /**
  Get the text directly after `pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */


  textAfterPos(pos, bias = 1) {
    if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak) return "";
    let {
      text,
      from
    } = this.lineAt(pos, bias);
    return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
  }
  /**
  Find the column for the given position.
  */


  column(pos, bias = 1) {
    let {
      text,
      from
    } = this.lineAt(pos, bias);
    let result = this.countColumn(text, pos - from);
    let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
    if (override > -1) result += override - this.countColumn(text, text.search(/\S|$/));
    return result;
  }
  /**
  Find the column position (taking tabs into account) of the given
  position in the given string.
  */


  countColumn(line, pos = line.length) {
    return (0, _state2.countColumn)(line, this.state.tabSize, pos);
  }
  /**
  Find the indentation column of the line at the given point.
  */


  lineIndent(pos, bias = 1) {
    let {
      text,
      from
    } = this.lineAt(pos, bias);
    let override = this.options.overrideIndentation;

    if (override) {
      let overriden = override(from);
      if (overriden > -1) return overriden;
    }

    return this.countColumn(text, text.search(/\S|$/));
  }
  /**
  Returns the [simulated line
  break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  for this context, if any.
  */


  get simulatedBreak() {
    return this.options.simulateBreak || null;
  }

}
/**
A syntax tree node prop used to associate indentation strategies
with node types. Such a strategy is a function from an indentation
context to a column number or null, where null indicates that no
definitive indentation can be determined.
*/


exports.IndentContext = IndentContext;
const indentNodeProp = /*@__PURE__*/new _common.NodeProp(); // Compute the indentation for a given position from the syntax tree.

exports.indentNodeProp = indentNodeProp;

function syntaxIndentation(cx, ast, pos) {
  return indentFrom(ast.resolveInner(pos).enterUnfinishedNodesBefore(pos), pos, cx);
}

function ignoreClosed(cx) {
  return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
}

function indentStrategy(tree) {
  let strategy = tree.type.prop(indentNodeProp);
  if (strategy) return strategy;
  let first = tree.firstChild,
      close;

  if (first && (close = first.type.prop(_common.NodeProp.closedBy))) {
    let last = tree.lastChild,
        closed = last && close.indexOf(last.name) > -1;
    return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);
  }

  return tree.parent == null ? topIndent : null;
}

function indentFrom(node, pos, base) {
  for (; node; node = node.parent) {
    let strategy = indentStrategy(node);
    if (strategy) return strategy(TreeIndentContext.create(base, pos, node));
  }

  return null;
}

function topIndent() {
  return 0;
}
/**
Objects of this type provide context information and helper
methods to indentation functions registered on syntax nodes.
*/


class TreeIndentContext extends IndentContext {
  constructor(base,
  /**
  The position at which indentation is being computed.
  */
  pos,
  /**
  The syntax tree node to which the indentation strategy
  applies.
  */
  node) {
    super(base.state, base.options);
    this.base = base;
    this.pos = pos;
    this.node = node;
  }
  /**
  @internal
  */


  static create(base, pos, node) {
    return new TreeIndentContext(base, pos, node);
  }
  /**
  Get the text directly after `this.pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */


  get textAfter() {
    return this.textAfterPos(this.pos);
  }
  /**
  Get the indentation at the reference line for `this.node`, which
  is the line on which it starts, unless there is a node that is
  _not_ a parent of this node covering the start of that line. If
  so, the line at the start of that node is tried, again skipping
  on if it is covered by another such node.
  */


  get baseIndent() {
    let line = this.state.doc.lineAt(this.node.from); // Skip line starts that are covered by a sibling (or cousin, etc)

    for (;;) {
      let atBreak = this.node.resolve(line.from);

      while (atBreak.parent && atBreak.parent.from == atBreak.from) atBreak = atBreak.parent;

      if (isParent(atBreak, this.node)) break;
      line = this.state.doc.lineAt(atBreak.from);
    }

    return this.lineIndent(line.from);
  }
  /**
  Continue looking for indentations in the node's parent nodes,
  and return the result of that.
  */


  continue() {
    let parent = this.node.parent;
    return parent ? indentFrom(parent, this.pos, this.base) : 0;
  }

}

exports.TreeIndentContext = TreeIndentContext;

function isParent(parent, of) {
  for (let cur = of; cur; cur = cur.parent) if (parent == cur) return true;

  return false;
} // Check whether a delimited node is aligned (meaning there are
// non-skipped nodes on the same line as the opening delimiter). And
// if so, return the opening token.


function bracketedAligned(context) {
  let tree = context.node;
  let openToken = tree.childAfter(tree.from),
      last = tree.lastChild;
  if (!openToken) return null;
  let sim = context.options.simulateBreak;
  let openLine = context.state.doc.lineAt(openToken.from);
  let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);

  for (let pos = openToken.to;;) {
    let next = tree.childAfter(pos);
    if (!next || next == last) return null;
    if (!next.type.isSkipped) return next.from < lineEnd ? openToken : null;
    pos = next.to;
  }
}
/**
An indentation strategy for delimited (usually bracketed) nodes.
Will, by default, indent one unit more than the parent's base
indent unless the line starts with a closing token. When `align`
is true and there are non-skipped nodes on the node's opening
line, the content of the node will be aligned with the end of the
opening node, like this:

    foo(bar,
        baz)
*/


function delimitedIndent({
  closing,
  align = true,
  units = 1
}) {
  return context => delimitedStrategy(context, align, units, closing);
}

function delimitedStrategy(context, align, units, closing, closedAt) {
  let after = context.textAfter,
      space = after.match(/^\s*/)[0].length;
  let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
  let aligned = align ? bracketedAligned(context) : null;
  if (aligned) return closed ? context.column(aligned.from) : context.column(aligned.to);
  return context.baseIndent + (closed ? 0 : context.unit * units);
}
/**
An indentation strategy that aligns a node's content to its base
indentation.
*/


const flatIndent = context => context.baseIndent;
/**
Creates an indentation strategy that, by default, indents
continued lines one unit more than the node's base indentation.
You can provide `except` to prevent indentation of lines that
match a pattern (for example `/^else\b/` in `if`/`else`
constructs), and you can change the amount of units used with the
`units` option.
*/


exports.flatIndent = flatIndent;

function continuedIndent({
  except,
  units = 1
} = {}) {
  return context => {
    let matchExcept = except && except.test(context.textAfter);
    return context.baseIndent + (matchExcept ? 0 : units * context.unit);
  };
}

const DontIndentBeyond = 200;
/**
Enables reindentation on input. When a language defines an
`indentOnInput` field in its [language
data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular
expression, the line at the cursor will be reindented whenever new
text is typed and the input from the start of the line up to the
cursor matches that regexp.

To avoid unneccesary reindents, it is recommended to start the
regexp with `^` (usually followed by `\s*`), and end it with `$`.
For example, `/^\s*\}$/` will reindent when a closing brace is
added at the start of a line.
*/

function indentOnInput() {
  return _state2.EditorState.transactionFilter.of(tr => {
    if (!tr.docChanged || !tr.isUserEvent("input.type") && !tr.isUserEvent("input.complete")) return tr;
    let rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
    if (!rules.length) return tr;
    let doc = tr.newDoc,
        {
      head
    } = tr.newSelection.main,
        line = doc.lineAt(head);
    if (head > line.from + DontIndentBeyond) return tr;
    let lineStart = doc.sliceString(line.from, head);
    if (!rules.some(r => r.test(lineStart))) return tr;
    let {
      state
    } = tr,
        last = -1,
        changes = [];

    for (let {
      head
    } of state.selection.ranges) {
      let line = state.doc.lineAt(head);
      if (line.from == last) continue;
      last = line.from;
      let indent = getIndentation(state, line.from);
      if (indent == null) continue;
      let cur = /^\s*/.exec(line.text)[0];
      let norm = indentString(state, indent);
      if (cur != norm) changes.push({
        from: line.from,
        to: line.from + cur.length,
        insert: norm
      });
    }

    return changes.length ? [tr, {
      changes,
      sequential: true
    }] : tr;
  });
}
/**
A facet that registers a code folding service. When called with
the extent of a line, such a function should return a foldable
range that starts on that line (but continues beyond it), if one
can be found.
*/


const foldService = /*@__PURE__*/_state2.Facet.define();
/**
This node prop is used to associate folding information with
syntax node types. Given a syntax node, it should check whether
that tree is foldable and return the range that can be collapsed
when it is.
*/


exports.foldService = foldService;
const foldNodeProp = /*@__PURE__*/new _common.NodeProp();
/**
[Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but
the first and the last child of a syntax node. Useful for nodes
that start and end with delimiters.
*/

exports.foldNodeProp = foldNodeProp;

function foldInside(node) {
  let first = node.firstChild,
      last = node.lastChild;
  return first && first.to < last.from ? {
    from: first.to,
    to: last.type.isError ? node.to : last.from
  } : null;
}

function syntaxFolding(state, start, end) {
  let tree = syntaxTree(state);
  if (tree.length < end) return null;
  let inner = tree.resolveInner(end);
  let found = null;

  for (let cur = inner; cur; cur = cur.parent) {
    if (cur.to <= end || cur.from > end) continue;
    if (found && cur.from < start) break;
    let prop = cur.type.prop(foldNodeProp);

    if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur))) {
      let value = prop(cur, state);
      if (value && value.from <= end && value.from >= start && value.to > end) found = value;
    }
  }

  return found;
}

function isUnfinished(node) {
  let ch = node.lastChild;
  return ch && ch.to == node.to && ch.type.isError;
}
/**
Check whether the given line is foldable. First asks any fold
services registered through
[`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return
a result, tries to query the [fold node
prop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end
of the line.
*/


function foldable(state, lineStart, lineEnd) {
  for (let service of state.facet(foldService)) {
    let result = service(state, lineStart, lineEnd);
    if (result) return result;
  }

  return syntaxFolding(state, lineStart, lineEnd);
}

function mapRange(range, mapping) {
  let from = mapping.mapPos(range.from, 1),
      to = mapping.mapPos(range.to, -1);
  return from >= to ? undefined : {
    from,
    to
  };
}
/**
State effect that can be attached to a transaction to fold the
given range. (You probably only need this in exceptional
circumstances—usually you'll just want to let
[`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode) and the [fold
gutter](https://codemirror.net/6/docs/ref/#language.foldGutter) create the transactions.)
*/


const foldEffect = /*@__PURE__*/_state2.StateEffect.define({
  map: mapRange
});
/**
State effect that unfolds the given range (if it was folded).
*/


exports.foldEffect = foldEffect;

const unfoldEffect = /*@__PURE__*/_state2.StateEffect.define({
  map: mapRange
});

exports.unfoldEffect = unfoldEffect;

function selectedLines(view) {
  let lines = [];

  for (let {
    head
  } of view.state.selection.ranges) {
    if (lines.some(l => l.from <= head && l.to >= head)) continue;
    lines.push(view.lineBlockAt(head));
  }

  return lines;
}
/**
The state field that stores the folded ranges (as a [decoration
set](https://codemirror.net/6/docs/ref/#view.DecorationSet)). Can be passed to
[`EditorState.toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) and
[`fromJSON`](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) to serialize the fold
state.
*/


const foldState = /*@__PURE__*/_state2.StateField.define({
  create() {
    return _view.Decoration.none;
  },

  update(folded, tr) {
    folded = folded.map(tr.changes);

    for (let e of tr.effects) {
      if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to)) folded = folded.update({
        add: [foldWidget.range(e.value.from, e.value.to)]
      });else if (e.is(unfoldEffect)) folded = folded.update({
        filter: (from, to) => e.value.from != from || e.value.to != to,
        filterFrom: e.value.from,
        filterTo: e.value.to
      });
    } // Clear folded ranges that cover the selection head


    if (tr.selection) {
      let onSelection = false,
          {
        head
      } = tr.selection.main;
      folded.between(head, head, (a, b) => {
        if (a < head && b > head) onSelection = true;
      });
      if (onSelection) folded = folded.update({
        filterFrom: head,
        filterTo: head,
        filter: (a, b) => b <= head || a >= head
      });
    }

    return folded;
  },

  provide: f => _view.EditorView.decorations.from(f),

  toJSON(folded, state) {
    let ranges = [];
    folded.between(0, state.doc.length, (from, to) => {
      ranges.push(from, to);
    });
    return ranges;
  },

  fromJSON(value) {
    if (!Array.isArray(value) || value.length % 2) throw new RangeError("Invalid JSON for fold state");
    let ranges = [];

    for (let i = 0; i < value.length;) {
      let from = value[i++],
          to = value[i++];
      if (typeof from != "number" || typeof to != "number") throw new RangeError("Invalid JSON for fold state");
      ranges.push(foldWidget.range(from, to));
    }

    return _view.Decoration.set(ranges, true);
  }

});
/**
Get a [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) containing the folded ranges
in the given state.
*/


exports.foldState = foldState;

function foldedRanges(state) {
  return state.field(foldState, false) || _state2.RangeSet.empty;
}

function findFold(state, from, to) {
  var _a;

  let found = null;
  (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, (from, to) => {
    if (!found || found.from > from) found = {
      from,
      to
    };
  });
  return found;
}

function foldExists(folded, from, to) {
  let found = false;
  folded.between(from, from, (a, b) => {
    if (a == from && b == to) found = true;
  });
  return found;
}

function maybeEnable(state, other) {
  return state.field(foldState, false) ? other : other.concat(_state2.StateEffect.appendConfig.of(codeFolding()));
}
/**
Fold the lines that are selected, if possible.
*/


const foldCode = view => {
  for (let line of selectedLines(view)) {
    let range = foldable(view.state, line.from, line.to);

    if (range) {
      view.dispatch({
        effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)])
      });
      return true;
    }
  }

  return false;
};
/**
Unfold folded ranges on selected lines.
*/


exports.foldCode = foldCode;

const unfoldCode = view => {
  if (!view.state.field(foldState, false)) return false;
  let effects = [];

  for (let line of selectedLines(view)) {
    let folded = findFold(view.state, line.from, line.to);
    if (folded) effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
  }

  if (effects.length) view.dispatch({
    effects
  });
  return effects.length > 0;
};

exports.unfoldCode = unfoldCode;

function announceFold(view, range, fold = true) {
  let lineFrom = view.state.doc.lineAt(range.from).number,
      lineTo = view.state.doc.lineAt(range.to).number;
  return _view.EditorView.announce.of(`${view.state.phrase(fold ? "Folded lines" : "Unfolded lines")} ${lineFrom} ${view.state.phrase("to")} ${lineTo}.`);
}
/**
Fold all top-level foldable ranges. Note that, in most cases,
folding information will depend on the [syntax
tree](https://codemirror.net/6/docs/ref/#language.syntaxTree), and folding everything may not work
reliably when the document hasn't been fully parsed (either
because the editor state was only just initialized, or because the
document is so big that the parser decided not to parse it
entirely).
*/


const foldAll = view => {
  let {
    state
  } = view,
      effects = [];

  for (let pos = 0; pos < state.doc.length;) {
    let line = view.lineBlockAt(pos),
        range = foldable(state, line.from, line.to);
    if (range) effects.push(foldEffect.of(range));
    pos = (range ? view.lineBlockAt(range.to) : line).to + 1;
  }

  if (effects.length) view.dispatch({
    effects: maybeEnable(view.state, effects)
  });
  return !!effects.length;
};
/**
Unfold all folded code.
*/


exports.foldAll = foldAll;

const unfoldAll = view => {
  let field = view.state.field(foldState, false);
  if (!field || !field.size) return false;
  let effects = [];
  field.between(0, view.state.doc.length, (from, to) => {
    effects.push(unfoldEffect.of({
      from,
      to
    }));
  });
  view.dispatch({
    effects
  });
  return true;
};
/**
Default fold-related key bindings.

 - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode).
 - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#language.unfoldCode).
 - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#language.foldAll).
 - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#language.unfoldAll).
*/


exports.unfoldAll = unfoldAll;
const foldKeymap = [{
  key: "Ctrl-Shift-[",
  mac: "Cmd-Alt-[",
  run: foldCode
}, {
  key: "Ctrl-Shift-]",
  mac: "Cmd-Alt-]",
  run: unfoldCode
}, {
  key: "Ctrl-Alt-[",
  run: foldAll
}, {
  key: "Ctrl-Alt-]",
  run: unfoldAll
}];
exports.foldKeymap = foldKeymap;
const defaultConfig = {
  placeholderDOM: null,
  placeholderText: "…"
};

const foldConfig = /*@__PURE__*/_state2.Facet.define({
  combine(values) {
    return (0, _state2.combineConfig)(values, defaultConfig);
  }

});
/**
Create an extension that configures code folding.
*/


function codeFolding(config) {
  let result = [foldState, baseTheme$1];
  if (config) result.push(foldConfig.of(config));
  return result;
}

const foldWidget = /*@__PURE__*/_view.Decoration.replace({
  widget: /*@__PURE__*/new class extends _view.WidgetType {
    toDOM(view) {
      let {
        state
      } = view,
          conf = state.facet(foldConfig);

      let onclick = event => {
        let line = view.lineBlockAt(view.posAtDOM(event.target));
        let folded = findFold(view.state, line.from, line.to);
        if (folded) view.dispatch({
          effects: unfoldEffect.of(folded)
        });
        event.preventDefault();
      };

      if (conf.placeholderDOM) return conf.placeholderDOM(view, onclick);
      let element = document.createElement("span");
      element.textContent = conf.placeholderText;
      element.setAttribute("aria-label", state.phrase("folded code"));
      element.title = state.phrase("unfold");
      element.className = "cm-foldPlaceholder";
      element.onclick = onclick;
      return element;
    }

  }()
});

const foldGutterDefaults = {
  openText: "⌄",
  closedText: "›",
  markerDOM: null,
  domEventHandlers: {},
  foldingChanged: () => false
};

class FoldMarker extends _view.GutterMarker {
  constructor(config, open) {
    super();
    this.config = config;
    this.open = open;
  }

  eq(other) {
    return this.config == other.config && this.open == other.open;
  }

  toDOM(view) {
    if (this.config.markerDOM) return this.config.markerDOM(this.open);
    let span = document.createElement("span");
    span.textContent = this.open ? this.config.openText : this.config.closedText;
    span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
    return span;
  }

}
/**
Create an extension that registers a fold gutter, which shows a
fold status indicator before foldable lines (which can be clicked
to fold or unfold the line).
*/


function foldGutter(config = {}) {
  let fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);
  let canFold = new FoldMarker(fullConfig, true),
      canUnfold = new FoldMarker(fullConfig, false);

  let markers = _view.ViewPlugin.fromClass(class {
    constructor(view) {
      this.from = view.viewport.from;
      this.markers = this.buildMarkers(view);
    }

    update(update) {
      if (update.docChanged || update.viewportChanged || update.startState.facet(language) != update.state.facet(language) || update.startState.field(foldState, false) != update.state.field(foldState, false) || syntaxTree(update.startState) != syntaxTree(update.state) || fullConfig.foldingChanged(update)) this.markers = this.buildMarkers(update.view);
    }

    buildMarkers(view) {
      let builder = new _state2.RangeSetBuilder();

      for (let line of view.viewportLineBlocks) {
        let mark = findFold(view.state, line.from, line.to) ? canUnfold : foldable(view.state, line.from, line.to) ? canFold : null;
        if (mark) builder.add(line.from, line.from, mark);
      }

      return builder.finish();
    }

  });

  let {
    domEventHandlers
  } = fullConfig;
  return [markers, (0, _view.gutter)({
    class: "cm-foldGutter",

    markers(view) {
      var _a;

      return ((_a = view.plugin(markers)) === null || _a === void 0 ? void 0 : _a.markers) || _state2.RangeSet.empty;
    },

    initialSpacer() {
      return new FoldMarker(fullConfig, false);
    },

    domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), {
      click: (view, line, event) => {
        if (domEventHandlers.click && domEventHandlers.click(view, line, event)) return true;
        let folded = findFold(view.state, line.from, line.to);

        if (folded) {
          view.dispatch({
            effects: unfoldEffect.of(folded)
          });
          return true;
        }

        let range = foldable(view.state, line.from, line.to);

        if (range) {
          view.dispatch({
            effects: foldEffect.of(range)
          });
          return true;
        }

        return false;
      }
    })
  }), codeFolding()];
}

const baseTheme$1 = /*@__PURE__*/_view.EditorView.baseTheme({
  ".cm-foldPlaceholder": {
    backgroundColor: "#eee",
    border: "1px solid #ddd",
    color: "#888",
    borderRadius: ".2em",
    margin: "0 1px",
    padding: "0 1px",
    cursor: "pointer"
  },
  ".cm-foldGutter span": {
    padding: "0 1px",
    cursor: "pointer"
  }
});
/**
A highlight style associates CSS styles with higlighting
[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).
*/


class HighlightStyle {
  constructor(spec, options) {
    let modSpec;

    function def(spec) {
      let cls = _styleMod.StyleModule.newName();

      (modSpec || (modSpec = Object.create(null)))["." + cls] = spec;
      return cls;
    }

    const all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : undefined;
    const scopeOpt = options.scope;
    this.scope = scopeOpt instanceof Language ? type => type.prop(languageDataProp) == scopeOpt.data : scopeOpt ? type => type == scopeOpt : undefined;
    this.style = (0, _highlight.tagHighlighter)(spec.map(style => ({
      tag: style.tag,
      class: style.class || def(Object.assign({}, style, {
        tag: null
      }))
    })), {
      all
    }).style;
    this.module = modSpec ? new _styleMod.StyleModule(modSpec) : null;
    this.themeType = options.themeType;
  }
  /**
  Create a highlighter style that associates the given styles to
  the given tags. The specs must be objects that hold a style tag
  or array of tags in their `tag` property, and either a single
  `class` property providing a static CSS class (for highlighter
  that rely on external styling), or a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
  set of CSS properties (which define the styling for those tags).
  
  The CSS rules created for a highlighter will be emitted in the
  order of the spec's properties. That means that for elements that
  have multiple tags associated with them, styles defined further
  down in the list will have a higher CSS precedence than styles
  defined earlier.
  */


  static define(specs, options) {
    return new HighlightStyle(specs, options || {});
  }

}

exports.HighlightStyle = HighlightStyle;

const highlighterFacet = /*@__PURE__*/_state2.Facet.define();

const fallbackHighlighter = /*@__PURE__*/_state2.Facet.define({
  combine(values) {
    return values.length ? [values[0]] : null;
  }

});

function getHighlighters(state) {
  let main = state.facet(highlighterFacet);
  return main.length ? main : state.facet(fallbackHighlighter);
}
/**
Wrap a highlighter in an editor extension that uses it to apply
syntax highlighting to the editor content.

When multiple (non-fallback) styles are provided, the styling
applied is the union of the classes they emit.
*/


function syntaxHighlighting(highlighter, options) {
  let ext = [treeHighlighter],
      themeType;

  if (highlighter instanceof HighlightStyle) {
    if (highlighter.module) ext.push(_view.EditorView.styleModule.of(highlighter.module));
    themeType = highlighter.themeType;
  }

  if (options === null || options === void 0 ? void 0 : options.fallback) ext.push(fallbackHighlighter.of(highlighter));else if (themeType) ext.push(highlighterFacet.computeN([_view.EditorView.darkTheme], state => {
    return state.facet(_view.EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
  }));else ext.push(highlighterFacet.of(highlighter));
  return ext;
}
/**
Returns the CSS classes (if any) that the highlighters active in
the state would assign to the given style
[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag) and
(optional) language
[scope](https://codemirror.net/6/docs/ref/#language.HighlightStyle^define^options.scope).
*/


function highlightingFor(state, tags, scope) {
  let highlighters = getHighlighters(state);
  let result = null;
  if (highlighters) for (let highlighter of highlighters) {
    if (!highlighter.scope || scope && highlighter.scope(scope)) {
      let cls = highlighter.style(tags);
      if (cls) result = result ? result + " " + cls : cls;
    }
  }
  return result;
}

class TreeHighlighter {
  constructor(view) {
    this.markCache = Object.create(null);
    this.tree = syntaxTree(view.state);
    this.decorations = this.buildDeco(view, getHighlighters(view.state));
  }

  update(update) {
    let tree = syntaxTree(update.state),
        highlighters = getHighlighters(update.state);
    let styleChange = highlighters != getHighlighters(update.startState);

    if (tree.length < update.view.viewport.to && !styleChange && tree.type == this.tree.type) {
      this.decorations = this.decorations.map(update.changes);
    } else if (tree != this.tree || update.viewportChanged || styleChange) {
      this.tree = tree;
      this.decorations = this.buildDeco(update.view, highlighters);
    }
  }

  buildDeco(view, highlighters) {
    if (!highlighters || !this.tree.length) return _view.Decoration.none;
    let builder = new _state2.RangeSetBuilder();

    for (let {
      from,
      to
    } of view.visibleRanges) {
      (0, _highlight.highlightTree)(this.tree, highlighters, (from, to, style) => {
        builder.add(from, to, this.markCache[style] || (this.markCache[style] = _view.Decoration.mark({
          class: style
        })));
      }, from, to);
    }

    return builder.finish();
  }

}

const treeHighlighter = /*@__PURE__*/_state2.Prec.high( /*@__PURE__*/_view.ViewPlugin.fromClass(TreeHighlighter, {
  decorations: v => v.decorations
}));
/**
A default highlight style (works well with light themes).
*/


const defaultHighlightStyle = /*@__PURE__*/HighlightStyle.define([{
  tag: _highlight.tags.meta,
  color: "#7a757a"
}, {
  tag: _highlight.tags.link,
  textDecoration: "underline"
}, {
  tag: _highlight.tags.heading,
  textDecoration: "underline",
  fontWeight: "bold"
}, {
  tag: _highlight.tags.emphasis,
  fontStyle: "italic"
}, {
  tag: _highlight.tags.strong,
  fontWeight: "bold"
}, {
  tag: _highlight.tags.strikethrough,
  textDecoration: "line-through"
}, {
  tag: _highlight.tags.keyword,
  color: "#708"
}, {
  tag: [_highlight.tags.atom, _highlight.tags.bool, _highlight.tags.url, _highlight.tags.contentSeparator, _highlight.tags.labelName],
  color: "#219"
}, {
  tag: [_highlight.tags.literal, _highlight.tags.inserted],
  color: "#164"
}, {
  tag: [_highlight.tags.string, _highlight.tags.deleted],
  color: "#a11"
}, {
  tag: [_highlight.tags.regexp, _highlight.tags.escape, /*@__PURE__*/_highlight.tags.special(_highlight.tags.string)],
  color: "#e40"
}, {
  tag: /*@__PURE__*/_highlight.tags.definition(_highlight.tags.variableName),
  color: "#00f"
}, {
  tag: /*@__PURE__*/_highlight.tags.local(_highlight.tags.variableName),
  color: "#30a"
}, {
  tag: [_highlight.tags.typeName, _highlight.tags.namespace],
  color: "#085"
}, {
  tag: _highlight.tags.className,
  color: "#167"
}, {
  tag: [/*@__PURE__*/_highlight.tags.special(_highlight.tags.variableName), _highlight.tags.macroName],
  color: "#256"
}, {
  tag: /*@__PURE__*/_highlight.tags.definition(_highlight.tags.propertyName),
  color: "#00c"
}, {
  tag: _highlight.tags.comment,
  color: "#940"
}, {
  tag: _highlight.tags.invalid,
  color: "#f00"
}]);
exports.defaultHighlightStyle = defaultHighlightStyle;

const baseTheme = /*@__PURE__*/_view.EditorView.baseTheme({
  "&.cm-focused .cm-matchingBracket": {
    backgroundColor: "#328c8252"
  },
  "&.cm-focused .cm-nonmatchingBracket": {
    backgroundColor: "#bb555544"
  }
});

const DefaultScanDist = 10000,
      DefaultBrackets = "()[]{}";

const bracketMatchingConfig = /*@__PURE__*/_state2.Facet.define({
  combine(configs) {
    return (0, _state2.combineConfig)(configs, {
      afterCursor: true,
      brackets: DefaultBrackets,
      maxScanDistance: DefaultScanDist,
      renderMatch: defaultRenderMatch
    });
  }

});

const matchingMark = /*@__PURE__*/_view.Decoration.mark({
  class: "cm-matchingBracket"
}),
      nonmatchingMark = /*@__PURE__*/_view.Decoration.mark({
  class: "cm-nonmatchingBracket"
});

function defaultRenderMatch(match) {
  let decorations = [];
  let mark = match.matched ? matchingMark : nonmatchingMark;
  decorations.push(mark.range(match.start.from, match.start.to));
  if (match.end) decorations.push(mark.range(match.end.from, match.end.to));
  return decorations;
}

const bracketMatchingState = /*@__PURE__*/_state2.StateField.define({
  create() {
    return _view.Decoration.none;
  },

  update(deco, tr) {
    if (!tr.docChanged && !tr.selection) return deco;
    let decorations = [];
    let config = tr.state.facet(bracketMatchingConfig);

    for (let range of tr.state.selection.ranges) {
      if (!range.empty) continue;
      let match = matchBrackets(tr.state, range.head, -1, config) || range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config) || config.afterCursor && (matchBrackets(tr.state, range.head, 1, config) || range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config));
      if (match) decorations = decorations.concat(config.renderMatch(match, tr.state));
    }

    return _view.Decoration.set(decorations, true);
  },

  provide: f => _view.EditorView.decorations.from(f)
});

const bracketMatchingUnique = [bracketMatchingState, baseTheme];
/**
Create an extension that enables bracket matching. Whenever the
cursor is next to a bracket, that bracket and the one it matches
are highlighted. Or, when no matching bracket is found, another
highlighting style is used to indicate this.
*/

function bracketMatching(config = {}) {
  return [bracketMatchingConfig.of(config), bracketMatchingUnique];
}

function matchingNodes(node, dir, brackets) {
  let byProp = node.prop(dir < 0 ? _common.NodeProp.openedBy : _common.NodeProp.closedBy);
  if (byProp) return byProp;

  if (node.name.length == 1) {
    let index = brackets.indexOf(node.name);
    if (index > -1 && index % 2 == (dir < 0 ? 1 : 0)) return [brackets[index + dir]];
  }

  return null;
}
/**
Find the matching bracket for the token at `pos`, scanning
direction `dir`. Only the `brackets` and `maxScanDistance`
properties are used from `config`, if given. Returns null if no
bracket was found at `pos`, or a match result otherwise.
*/


function matchBrackets(state, pos, dir, config = {}) {
  let maxScanDistance = config.maxScanDistance || DefaultScanDist,
      brackets = config.brackets || DefaultBrackets;
  let tree = syntaxTree(state),
      node = tree.resolveInner(pos, dir);

  for (let cur = node; cur; cur = cur.parent) {
    let matches = matchingNodes(cur.type, dir, brackets);
    if (matches && cur.from < cur.to) return matchMarkedBrackets(state, pos, dir, cur, matches, brackets);
  }

  return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
}

function matchMarkedBrackets(_state, _pos, dir, token, matching, brackets) {
  let parent = token.parent,
      firstToken = {
    from: token.from,
    to: token.to
  };
  let depth = 0,
      cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
  if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to))) do {
    if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
      if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
        return {
          start: firstToken,
          end: {
            from: cursor.from,
            to: cursor.to
          },
          matched: true
        };
      } else if (matchingNodes(cursor.type, dir, brackets)) {
        depth++;
      } else if (matchingNodes(cursor.type, -dir, brackets)) {
        if (depth == 0) return {
          start: firstToken,
          end: cursor.from == cursor.to ? undefined : {
            from: cursor.from,
            to: cursor.to
          },
          matched: false
        };
        depth--;
      }
    }
  } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
  return {
    start: firstToken,
    matched: false
  };
}

function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
  let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
  let bracket = brackets.indexOf(startCh);
  if (bracket < 0 || bracket % 2 == 0 != dir > 0) return null;
  let startToken = {
    from: dir < 0 ? pos - 1 : pos,
    to: dir > 0 ? pos + 1 : pos
  };
  let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0),
      depth = 0;

  for (let distance = 0; !iter.next().done && distance <= maxScanDistance;) {
    let text = iter.value;
    if (dir < 0) distance += text.length;
    let basePos = pos + distance * dir;

    for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {
      let found = brackets.indexOf(text[pos]);
      if (found < 0 || tree.resolveInner(basePos + pos, 1).type != tokenType) continue;

      if (found % 2 == 0 == dir > 0) {
        depth++;
      } else if (depth == 1) {
        // Closing
        return {
          start: startToken,
          end: {
            from: basePos + pos,
            to: basePos + pos + 1
          },
          matched: found >> 1 == bracket >> 1
        };
      } else {
        depth--;
      }
    }

    if (dir > 0) distance += text.length;
  }

  return iter.done ? {
    start: startToken,
    matched: false
  } : null;
} // Counts the column offset in a string, taking tabs into account.
// Used mostly to find indentation.


function countCol(string, end, tabSize, startIndex = 0, startValue = 0) {
  if (end == null) {
    end = string.search(/[^\s\u00a0]/);
    if (end == -1) end = string.length;
  }

  let n = startValue;

  for (let i = startIndex; i < end; i++) {
    if (string.charCodeAt(i) == 9) n += tabSize - n % tabSize;else n++;
  }

  return n;
}
/**
Encapsulates a single line of input. Given to stream syntax code,
which uses it to tokenize the content.
*/


class StringStream {
  /**
  Create a stream.
  */
  constructor(
  /**
  The line.
  */
  string, tabSize,
  /**
  The current indent unit size.
  */
  indentUnit) {
    this.string = string;
    this.tabSize = tabSize;
    this.indentUnit = indentUnit;
    /**
    The current position on the line.
    */

    this.pos = 0;
    /**
    The start position of the current token.
    */

    this.start = 0;
    this.lastColumnPos = 0;
    this.lastColumnValue = 0;
  }
  /**
  True if we are at the end of the line.
  */


  eol() {
    return this.pos >= this.string.length;
  }
  /**
  True if we are at the start of the line.
  */


  sol() {
    return this.pos == 0;
  }
  /**
  Get the next code unit after the current position, or undefined
  if we're at the end of the line.
  */


  peek() {
    return this.string.charAt(this.pos) || undefined;
  }
  /**
  Read the next code unit and advance `this.pos`.
  */


  next() {
    if (this.pos < this.string.length) return this.string.charAt(this.pos++);
  }
  /**
  Match the next character against the given string, regular
  expression, or predicate. Consume and return it if it matches.
  */


  eat(match) {
    let ch = this.string.charAt(this.pos);
    let ok;
    if (typeof match == "string") ok = ch == match;else ok = ch && (match instanceof RegExp ? match.test(ch) : match(ch));

    if (ok) {
      ++this.pos;
      return ch;
    }
  }
  /**
  Continue matching characters that match the given string,
  regular expression, or predicate function. Return true if any
  characters were consumed.
  */


  eatWhile(match) {
    let start = this.pos;

    while (this.eat(match)) {}

    return this.pos > start;
  }
  /**
  Consume whitespace ahead of `this.pos`. Return true if any was
  found.
  */


  eatSpace() {
    let start = this.pos;

    while (/[\s\u00a0]/.test(this.string.charAt(this.pos))) ++this.pos;

    return this.pos > start;
  }
  /**
  Move to the end of the line.
  */


  skipToEnd() {
    this.pos = this.string.length;
  }
  /**
  Move to directly before the given character, if found on the
  current line.
  */


  skipTo(ch) {
    let found = this.string.indexOf(ch, this.pos);

    if (found > -1) {
      this.pos = found;
      return true;
    }
  }
  /**
  Move back `n` characters.
  */


  backUp(n) {
    this.pos -= n;
  }
  /**
  Get the column position at `this.pos`.
  */


  column() {
    if (this.lastColumnPos < this.start) {
      this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);
      this.lastColumnPos = this.start;
    }

    return this.lastColumnValue;
  }
  /**
  Get the indentation column of the current line.
  */


  indentation() {
    return countCol(this.string, null, this.tabSize);
  }
  /**
  Match the input against the given string or regular expression
  (which should start with a `^`). Return true or the regexp match
  if it matches.
  
  Unless `consume` is set to `false`, this will move `this.pos`
  past the matched text.
  
  When matching a string `caseInsensitive` can be set to true to
  make the match case-insensitive.
  */


  match(pattern, consume, caseInsensitive) {
    if (typeof pattern == "string") {
      let cased = str => caseInsensitive ? str.toLowerCase() : str;

      let substr = this.string.substr(this.pos, pattern.length);

      if (cased(substr) == cased(pattern)) {
        if (consume !== false) this.pos += pattern.length;
        return true;
      } else return null;
    } else {
      let match = this.string.slice(this.pos).match(pattern);
      if (match && match.index > 0) return null;
      if (match && consume !== false) this.pos += match[0].length;
      return match;
    }
  }
  /**
  Get the current token.
  */


  current() {
    return this.string.slice(this.start, this.pos);
  }

}

exports.StringStream = StringStream;

function fullParser(spec) {
  return {
    token: spec.token,
    blankLine: spec.blankLine || (() => {}),
    startState: spec.startState || (() => true),
    copyState: spec.copyState || defaultCopyState,
    indent: spec.indent || (() => null),
    languageData: spec.languageData || {},
    tokenTable: spec.tokenTable || noTokens
  };
}

function defaultCopyState(state) {
  if (typeof state != "object") return state;
  let newState = {};

  for (let prop in state) {
    let val = state[prop];
    newState[prop] = val instanceof Array ? val.slice() : val;
  }

  return newState;
}
/**
A [language](https://codemirror.net/6/docs/ref/#language.Language) class based on a CodeMirror
5-style [streaming parser](https://codemirror.net/6/docs/ref/#language.StreamParser).
*/


class StreamLanguage extends Language {
  constructor(parser) {
    let data = defineLanguageFacet(parser.languageData);
    let p = fullParser(parser),
        self;
    let impl = new class extends _common.Parser {
      createParse(input, fragments, ranges) {
        return new Parse(self, input, fragments, ranges);
      }

    }();
    super(data, impl, [indentService.of((cx, pos) => this.getIndent(cx, pos))]);
    this.topNode = docID(data);
    self = this;
    this.streamParser = p;
    this.stateAfter = new _common.NodeProp({
      perNode: true
    });
    this.tokenTable = parser.tokenTable ? new TokenTable(p.tokenTable) : defaultTokenTable;
  }
  /**
  Define a stream language.
  */


  static define(spec) {
    return new StreamLanguage(spec);
  }

  getIndent(cx, pos) {
    let tree = syntaxTree(cx.state),
        at = tree.resolve(pos);

    while (at && at.type != this.topNode) at = at.parent;

    if (!at) return null;
    let start = findState(this, tree, 0, at.from, pos),
        statePos,
        state;

    if (start) {
      state = start.state;
      statePos = start.pos + 1;
    } else {
      state = this.streamParser.startState(cx.unit);
      statePos = 0;
    }

    if (pos - statePos > 10000
    /* MaxIndentScanDist */
    ) return null;

    while (statePos < pos) {
      let line = cx.state.doc.lineAt(statePos),
          end = Math.min(pos, line.to);

      if (line.length) {
        let stream = new StringStream(line.text, cx.state.tabSize, cx.unit);

        while (stream.pos < end - line.from) readToken(this.streamParser.token, stream, state);
      } else {
        this.streamParser.blankLine(state, cx.unit);
      }

      if (end == pos) break;
      statePos = line.to + 1;
    }

    let {
      text
    } = cx.lineAt(pos);
    return this.streamParser.indent(state, /^\s*(.*)/.exec(text)[1], cx);
  }

  get allowsNesting() {
    return false;
  }

}

exports.StreamLanguage = StreamLanguage;

function findState(lang, tree, off, startPos, before) {
  let state = off >= startPos && off + tree.length <= before && tree.prop(lang.stateAfter);
  if (state) return {
    state: lang.streamParser.copyState(state),
    pos: off + tree.length
  };

  for (let i = tree.children.length - 1; i >= 0; i--) {
    let child = tree.children[i],
        pos = off + tree.positions[i];
    let found = child instanceof _common.Tree && pos < before && findState(lang, child, pos, startPos, before);
    if (found) return found;
  }

  return null;
}

function cutTree(lang, tree, from, to, inside) {
  if (inside && from <= 0 && to >= tree.length) return tree;
  if (!inside && tree.type == lang.topNode) inside = true;

  for (let i = tree.children.length - 1; i >= 0; i--) {
    let pos = tree.positions[i],
        child = tree.children[i],
        inner;

    if (pos < to && child instanceof _common.Tree) {
      if (!(inner = cutTree(lang, child, from - pos, to - pos, inside))) break;
      return !inside ? inner : new _common.Tree(tree.type, tree.children.slice(0, i).concat(inner), tree.positions.slice(0, i + 1), pos + inner.length);
    }
  }

  return null;
}

function findStartInFragments(lang, fragments, startPos, editorState) {
  for (let f of fragments) {
    let from = f.from + (f.openStart ? 25 : 0),
        to = f.to - (f.openEnd ? 25 : 0);
    let found = from <= startPos && to > startPos && findState(lang, f.tree, 0 - f.offset, startPos, to),
        tree;
    if (found && (tree = cutTree(lang, f.tree, startPos + f.offset, found.pos + f.offset, false))) return {
      state: found.state,
      tree
    };
  }

  return {
    state: lang.streamParser.startState(editorState ? getIndentUnit(editorState) : 4),
    tree: _common.Tree.empty
  };
}

class Parse {
  constructor(lang, input, fragments, ranges) {
    this.lang = lang;
    this.input = input;
    this.fragments = fragments;
    this.ranges = ranges;
    this.stoppedAt = null;
    this.chunks = [];
    this.chunkPos = [];
    this.chunk = [];
    this.chunkReused = undefined;
    this.rangeIndex = 0;
    this.to = ranges[ranges.length - 1].to;
    let context = ParseContext.get(),
        from = ranges[0].from;
    let {
      state,
      tree
    } = findStartInFragments(lang, fragments, from, context === null || context === void 0 ? void 0 : context.state);
    this.state = state;
    this.parsedPos = this.chunkStart = from + tree.length;

    for (let i = 0; i < tree.children.length; i++) {
      this.chunks.push(tree.children[i]);
      this.chunkPos.push(tree.positions[i]);
    }

    if (context && this.parsedPos < context.viewport.from - 100000
    /* MaxDistanceBeforeViewport */
    ) {
      this.state = this.lang.streamParser.startState(getIndentUnit(context.state));
      context.skipUntilInView(this.parsedPos, context.viewport.from);
      this.parsedPos = context.viewport.from;
    }

    this.moveRangeIndex();
  }

  advance() {
    let context = ParseContext.get();
    let parseEnd = this.stoppedAt == null ? this.to : Math.min(this.to, this.stoppedAt);
    let end = Math.min(parseEnd, this.chunkStart + 2048
    /* ChunkSize */
    );
    if (context) end = Math.min(end, context.viewport.to);

    while (this.parsedPos < end) this.parseLine(context);

    if (this.chunkStart < this.parsedPos) this.finishChunk();
    if (this.parsedPos >= parseEnd) return this.finish();

    if (context && this.parsedPos >= context.viewport.to) {
      context.skipUntilInView(this.parsedPos, parseEnd);
      return this.finish();
    }

    return null;
  }

  stopAt(pos) {
    this.stoppedAt = pos;
  }

  lineAfter(pos) {
    let chunk = this.input.chunk(pos);

    if (!this.input.lineChunks) {
      let eol = chunk.indexOf("\n");
      if (eol > -1) chunk = chunk.slice(0, eol);
    } else if (chunk == "\n") {
      chunk = "";
    }

    return pos + chunk.length <= this.to ? chunk : chunk.slice(0, this.to - pos);
  }

  nextLine() {
    let from = this.parsedPos,
        line = this.lineAfter(from),
        end = from + line.length;

    for (let index = this.rangeIndex;;) {
      let rangeEnd = this.ranges[index].to;
      if (rangeEnd >= end) break;
      line = line.slice(0, rangeEnd - (end - line.length));
      index++;
      if (index == this.ranges.length) break;
      let rangeStart = this.ranges[index].from;
      let after = this.lineAfter(rangeStart);
      line += after;
      end = rangeStart + after.length;
    }

    return {
      line,
      end
    };
  }

  skipGapsTo(pos, offset, side) {
    for (;;) {
      let end = this.ranges[this.rangeIndex].to,
          offPos = pos + offset;
      if (side > 0 ? end > offPos : end >= offPos) break;
      let start = this.ranges[++this.rangeIndex].from;
      offset += start - end;
    }

    return offset;
  }

  moveRangeIndex() {
    while (this.ranges[this.rangeIndex].to < this.parsedPos) this.rangeIndex++;
  }

  emitToken(id, from, to, size, offset) {
    if (this.ranges.length > 1) {
      offset = this.skipGapsTo(from, offset, 1);
      from += offset;
      let len0 = this.chunk.length;
      offset = this.skipGapsTo(to, offset, -1);
      to += offset;
      size += this.chunk.length - len0;
    }

    this.chunk.push(id, from, to, size);
    return offset;
  }

  parseLine(context) {
    let {
      line,
      end
    } = this.nextLine(),
        offset = 0,
        {
      streamParser
    } = this.lang;
    let stream = new StringStream(line, context ? context.state.tabSize : 4, context ? getIndentUnit(context.state) : 2);

    if (stream.eol()) {
      streamParser.blankLine(this.state, stream.indentUnit);
    } else {
      while (!stream.eol()) {
        let token = readToken(streamParser.token, stream, this.state);
        if (token) offset = this.emitToken(this.lang.tokenTable.resolve(token), this.parsedPos + stream.start, this.parsedPos + stream.pos, 4, offset);
        if (stream.start > 10000
        /* MaxLineLength */
        ) break;
      }
    }

    this.parsedPos = end;
    this.moveRangeIndex();
    if (this.parsedPos < this.to) this.parsedPos++;
  }

  finishChunk() {
    let tree = _common.Tree.build({
      buffer: this.chunk,
      start: this.chunkStart,
      length: this.parsedPos - this.chunkStart,
      nodeSet,
      topID: 0,
      maxBufferLength: 2048
      /* ChunkSize */
      ,
      reused: this.chunkReused
    });

    tree = new _common.Tree(tree.type, tree.children, tree.positions, tree.length, [[this.lang.stateAfter, this.lang.streamParser.copyState(this.state)]]);
    this.chunks.push(tree);
    this.chunkPos.push(this.chunkStart - this.ranges[0].from);
    this.chunk = [];
    this.chunkReused = undefined;
    this.chunkStart = this.parsedPos;
  }

  finish() {
    return new _common.Tree(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();
  }

}

function readToken(token, stream, state) {
  stream.start = stream.pos;

  for (let i = 0; i < 10; i++) {
    let result = token(stream, state);
    if (stream.pos > stream.start) return result;
  }

  throw new Error("Stream parser failed to advance stream.");
}

const noTokens = /*@__PURE__*/Object.create(null);
const typeArray = [_common.NodeType.none];
const nodeSet = /*@__PURE__*/new _common.NodeSet(typeArray);
const warned = [];
const defaultTable = /*@__PURE__*/Object.create(null);

for (let [legacyName, name] of [["variable", "variableName"], ["variable-2", "variableName.special"], ["string-2", "string.special"], ["def", "variableName.definition"], ["tag", "tagName"], ["attribute", "attributeName"], ["type", "typeName"], ["builtin", "variableName.standard"], ["qualifier", "modifier"], ["error", "invalid"], ["header", "heading"], ["property", "propertyName"]]) defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);

class TokenTable {
  constructor(extra) {
    this.extra = extra;
    this.table = Object.assign(Object.create(null), defaultTable);
  }

  resolve(tag) {
    return !tag ? 0 : this.table[tag] || (this.table[tag] = createTokenType(this.extra, tag));
  }

}

const defaultTokenTable = /*@__PURE__*/new TokenTable(noTokens);

function warnForPart(part, msg) {
  if (warned.indexOf(part) > -1) return;
  warned.push(part);
  console.warn(msg);
}

function createTokenType(extra, tagStr) {
  let tag = null;

  for (let part of tagStr.split(".")) {
    let value = extra[part] || _highlight.tags[part];

    if (!value) {
      warnForPart(part, `Unknown highlighting tag ${part}`);
    } else if (typeof value == "function") {
      if (!tag) warnForPart(part, `Modifier ${part} used at start of tag`);else tag = value(tag);
    } else {
      if (tag) warnForPart(part, `Tag ${part} used as modifier`);else tag = value;
    }
  }

  if (!tag) return 0;

  let name = tagStr.replace(/ /g, "_"),
      type = _common.NodeType.define({
    id: typeArray.length,
    name,
    props: [(0, _highlight.styleTags)({
      [name]: tag
    })]
  });

  typeArray.push(type);
  return type.id;
}

function docID(data) {
  let type = _common.NodeType.define({
    id: typeArray.length,
    name: "Document",
    props: [languageDataProp.add(() => data)]
  });

  typeArray.push(type);
  return type;
}
},{"@lezer/common":"YT4N","@codemirror/state":"s5u9","@codemirror/view":"q9gB","@lezer/highlight":"P8wn","style-mod":"h8XP"}],"rKYW":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acceptCompletion = exports.CompletionContext = void 0;
exports.autocompletion = autocompletion;
exports.clearSnippet = void 0;
exports.closeBrackets = closeBrackets;
exports.completeAnyWord = exports.closeCompletion = exports.closeBracketsKeymap = void 0;
exports.completeFromList = completeFromList;
exports.completionKeymap = void 0;
exports.completionStatus = completionStatus;
exports.currentCompletions = currentCompletions;
exports.deleteBracketPair = void 0;
exports.ifIn = ifIn;
exports.ifNotIn = ifNotIn;
exports.insertBracket = insertBracket;
exports.insertCompletionText = insertCompletionText;
exports.moveCompletionSelection = moveCompletionSelection;
exports.prevSnippetField = exports.pickedCompletion = exports.nextSnippetField = void 0;
exports.selectedCompletion = selectedCompletion;
exports.selectedCompletionIndex = selectedCompletionIndex;
exports.setSelectedCompletion = setSelectedCompletion;
exports.snippet = snippet;
exports.snippetCompletion = snippetCompletion;
exports.startCompletion = exports.snippetKeymap = void 0;

var _state = require("@codemirror/state");

var _view = require("@codemirror/view");

var _language = require("@codemirror/language");

/**
An instance of this is passed to completion source functions.
*/
class CompletionContext {
  /**
  Create a new completion context. (Mostly useful for testing
  completion sources—in the editor, the extension will create
  these for you.)
  */
  constructor(
  /**
  The editor state that the completion happens in.
  */
  state,
  /**
  The position at which the completion is happening.
  */
  pos,
  /**
  Indicates whether completion was activated explicitly, or
  implicitly by typing. The usual way to respond to this is to
  only return completions when either there is part of a
  completable entity before the cursor, or `explicit` is true.
  */
  explicit) {
    this.state = state;
    this.pos = pos;
    this.explicit = explicit;
    /**
    @internal
    */

    this.abortListeners = [];
  }
  /**
  Get the extent, content, and (if there is a token) type of the
  token before `this.pos`.
  */


  tokenBefore(types) {
    let token = (0, _language.syntaxTree)(this.state).resolveInner(this.pos, -1);

    while (token && types.indexOf(token.name) < 0) token = token.parent;

    return token ? {
      from: token.from,
      to: this.pos,
      text: this.state.sliceDoc(token.from, this.pos),
      type: token.type
    } : null;
  }
  /**
  Get the match of the given expression directly before the
  cursor.
  */


  matchBefore(expr) {
    let line = this.state.doc.lineAt(this.pos);
    let start = Math.max(line.from, this.pos - 250);
    let str = line.text.slice(start - line.from, this.pos - line.from);
    let found = str.search(ensureAnchor(expr, false));
    return found < 0 ? null : {
      from: start + found,
      to: this.pos,
      text: str.slice(found)
    };
  }
  /**
  Yields true when the query has been aborted. Can be useful in
  asynchronous queries to avoid doing work that will be ignored.
  */


  get aborted() {
    return this.abortListeners == null;
  }
  /**
  Allows you to register abort handlers, which will be called when
  the query is
  [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
  */


  addEventListener(type, listener) {
    if (type == "abort" && this.abortListeners) this.abortListeners.push(listener);
  }

}

exports.CompletionContext = CompletionContext;

function toSet(chars) {
  let flat = Object.keys(chars).join("");
  let words = /\w/.test(flat);
  if (words) flat = flat.replace(/\w/g, "");
  return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
}

function prefixMatch(options) {
  let first = Object.create(null),
      rest = Object.create(null);

  for (let {
    label
  } of options) {
    first[label[0]] = true;

    for (let i = 1; i < label.length; i++) rest[label[i]] = true;
  }

  let source = toSet(first) + toSet(rest) + "*$";
  return [new RegExp("^" + source), new RegExp(source)];
}
/**
Given a a fixed array of options, return an autocompleter that
completes them.
*/


function completeFromList(list) {
  let options = list.map(o => typeof o == "string" ? {
    label: o
  } : o);
  let [validFor, match] = options.every(o => /^\w+$/.test(o.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
  return context => {
    let token = context.matchBefore(match);
    return token || context.explicit ? {
      from: token ? token.from : context.pos,
      options,
      validFor
    } : null;
  };
}
/**
Wrap the given completion source so that it will only fire when the
cursor is in a syntax node with one of the given names.
*/


function ifIn(nodes, source) {
  return context => {
    for (let pos = (0, _language.syntaxTree)(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) if (nodes.indexOf(pos.name) > -1) return source(context);

    return null;
  };
}
/**
Wrap the given completion source so that it will not fire when the
cursor is in a syntax node with one of the given names.
*/


function ifNotIn(nodes, source) {
  return context => {
    for (let pos = (0, _language.syntaxTree)(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) if (nodes.indexOf(pos.name) > -1) return null;

    return source(context);
  };
}

class Option {
  constructor(completion, source, match) {
    this.completion = completion;
    this.source = source;
    this.match = match;
  }

}

function cur(state) {
  return state.selection.main.head;
} // Make sure the given regexp has a $ at its end and, if `start` is
// true, a ^ at its start.


function ensureAnchor(expr, start) {
  var _a;

  let {
    source
  } = expr;
  let addStart = start && source[0] != "^",
      addEnd = source[source.length - 1] != "$";
  if (!addStart && !addEnd) return expr;
  return new RegExp(`${addStart ? "^" : ""}(?:${source})${addEnd ? "$" : ""}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : expr.ignoreCase ? "i" : "");
}
/**
This annotation is added to transactions that are produced by
picking a completion.
*/


const pickedCompletion = /*@__PURE__*/_state.Annotation.define();
/**
Helper function that returns a transaction spec which inserts a
completion's text in the main selection range, and any other
selection range that has the same text in front of it.
*/


exports.pickedCompletion = pickedCompletion;

function insertCompletionText(state, text, from, to) {
  return Object.assign(Object.assign({}, state.changeByRange(range => {
    if (range == state.selection.main) return {
      changes: {
        from: from,
        to: to,
        insert: text
      },
      range: _state.EditorSelection.cursor(from + text.length)
    };
    let len = to - from;
    if (!range.empty || len && state.sliceDoc(range.from - len, range.from) != state.sliceDoc(from, to)) return {
      range
    };
    return {
      changes: {
        from: range.from - len,
        to: range.from,
        insert: text
      },
      range: _state.EditorSelection.cursor(range.from - len + text.length)
    };
  })), {
    userEvent: "input.complete"
  });
}

function applyCompletion(view, option) {
  const apply = option.completion.apply || option.completion.label;
  let result = option.source;
  if (typeof apply == "string") view.dispatch(insertCompletionText(view.state, apply, result.from, result.to));else apply(view, option.completion, result.from, result.to);
}

const SourceCache = /*@__PURE__*/new WeakMap();

function asSource(source) {
  if (!Array.isArray(source)) return source;
  let known = SourceCache.get(source);
  if (!known) SourceCache.set(source, known = completeFromList(source));
  return known;
} // A pattern matcher for fuzzy completion matching. Create an instance
// once for a pattern, and then use that to match any number of
// completions.


class FuzzyMatcher {
  constructor(pattern) {
    this.pattern = pattern;
    this.chars = [];
    this.folded = []; // Buffers reused by calls to `match` to track matched character
    // positions.

    this.any = [];
    this.precise = [];
    this.byWord = [];

    for (let p = 0; p < pattern.length;) {
      let char = (0, _state.codePointAt)(pattern, p),
          size = (0, _state.codePointSize)(char);
      this.chars.push(char);
      let part = pattern.slice(p, p + size),
          upper = part.toUpperCase();
      this.folded.push((0, _state.codePointAt)(upper == part ? part.toLowerCase() : upper, 0));
      p += size;
    }

    this.astral = pattern.length != this.chars.length;
  } // Matches a given word (completion) against the pattern (input).
  // Will return null for no match, and otherwise an array that starts
  // with the match score, followed by any number of `from, to` pairs
  // indicating the matched parts of `word`.
  //
  // The score is a number that is more negative the worse the match
  // is. See `Penalty` above.


  match(word) {
    if (this.pattern.length == 0) return [0];
    if (word.length < this.pattern.length) return null;
    let {
      chars,
      folded,
      any,
      precise,
      byWord
    } = this; // For single-character queries, only match when they occur right
    // at the start

    if (chars.length == 1) {
      let first = (0, _state.codePointAt)(word, 0);
      return first == chars[0] ? [0, 0, (0, _state.codePointSize)(first)] : first == folded[0] ? [-200
      /* CaseFold */
      , 0, (0, _state.codePointSize)(first)] : null;
    }

    let direct = word.indexOf(this.pattern);
    if (direct == 0) return [0, 0, this.pattern.length];
    let len = chars.length,
        anyTo = 0;

    if (direct < 0) {
      for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {
        let next = (0, _state.codePointAt)(word, i);
        if (next == chars[anyTo] || next == folded[anyTo]) any[anyTo++] = i;
        i += (0, _state.codePointSize)(next);
      } // No match, exit immediately


      if (anyTo < len) return null;
    } // This tracks the extent of the precise (non-folded, not
    // necessarily adjacent) match


    let preciseTo = 0; // Tracks whether there is a match that hits only characters that
    // appear to be starting words. `byWordFolded` is set to true when
    // a case folded character is encountered in such a match

    let byWordTo = 0,
        byWordFolded = false; // If we've found a partial adjacent match, these track its state

    let adjacentTo = 0,
        adjacentStart = -1,
        adjacentEnd = -1;
    let hasLower = /[a-z]/.test(word),
        wordAdjacent = true; // Go over the option's text, scanning for the various kinds of matches

    for (let i = 0, e = Math.min(word.length, 200), prevType = 0
    /* NonWord */
    ; i < e && byWordTo < len;) {
      let next = (0, _state.codePointAt)(word, i);

      if (direct < 0) {
        if (preciseTo < len && next == chars[preciseTo]) precise[preciseTo++] = i;

        if (adjacentTo < len) {
          if (next == chars[adjacentTo] || next == folded[adjacentTo]) {
            if (adjacentTo == 0) adjacentStart = i;
            adjacentEnd = i + 1;
            adjacentTo++;
          } else {
            adjacentTo = 0;
          }
        }
      }

      let ch,
          type = next < 0xff ? next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2
      /* Lower */
      : next >= 65 && next <= 90 ? 1
      /* Upper */
      : 0
      /* NonWord */
      : (ch = (0, _state.fromCodePoint)(next)) != ch.toLowerCase() ? 1
      /* Upper */
      : ch != ch.toUpperCase() ? 2
      /* Lower */
      : 0
      /* NonWord */
      ;

      if (!i || type == 1
      /* Upper */
      && hasLower || prevType == 0
      /* NonWord */
      && type != 0
      /* NonWord */
      ) {
        if (chars[byWordTo] == next || folded[byWordTo] == next && (byWordFolded = true)) byWord[byWordTo++] = i;else if (byWord.length) wordAdjacent = false;
      }

      prevType = type;
      i += (0, _state.codePointSize)(next);
    }

    if (byWordTo == len && byWord[0] == 0 && wordAdjacent) return this.result(-100
    /* ByWord */
    + (byWordFolded ? -200
    /* CaseFold */
    : 0), byWord, word);
    if (adjacentTo == len && adjacentStart == 0) return [-200
    /* CaseFold */
    - word.length, 0, adjacentEnd];
    if (direct > -1) return [-700
    /* NotStart */
    - word.length, direct, direct + this.pattern.length];
    if (adjacentTo == len) return [-200
    /* CaseFold */
    + -700
    /* NotStart */
    - word.length, adjacentStart, adjacentEnd];
    if (byWordTo == len) return this.result(-100
    /* ByWord */
    + (byWordFolded ? -200
    /* CaseFold */
    : 0) + -700
    /* NotStart */
    + (wordAdjacent ? 0 : -1100
    /* Gap */
    ), byWord, word);
    return chars.length == 2 ? null : this.result((any[0] ? -700
    /* NotStart */
    : 0) + -200
    /* CaseFold */
    + -1100
    /* Gap */
    , any, word);
  }

  result(score, positions, word) {
    let result = [score - word.length],
        i = 1;

    for (let pos of positions) {
      let to = pos + (this.astral ? (0, _state.codePointSize)((0, _state.codePointAt)(word, pos)) : 1);
      if (i > 1 && result[i - 1] == pos) result[i - 1] = to;else {
        result[i++] = pos;
        result[i++] = to;
      }
    }

    return result;
  }

}

const completionConfig = /*@__PURE__*/_state.Facet.define({
  combine(configs) {
    return (0, _state.combineConfig)(configs, {
      activateOnTyping: true,
      selectOnOpen: true,
      override: null,
      closeOnBlur: true,
      maxRenderedOptions: 100,
      defaultKeymap: true,
      optionClass: () => "",
      aboveCursor: false,
      icons: true,
      addToOptions: [],
      compareCompletions: (a, b) => a.label.localeCompare(b.label)
    }, {
      defaultKeymap: (a, b) => a && b,
      closeOnBlur: (a, b) => a && b,
      icons: (a, b) => a && b,
      optionClass: (a, b) => c => joinClass(a(c), b(c)),
      addToOptions: (a, b) => a.concat(b)
    });
  }

});

function joinClass(a, b) {
  return a ? b ? a + " " + b : a : b;
}

function optionContent(config) {
  let content = config.addToOptions.slice();
  if (config.icons) content.push({
    render(completion) {
      let icon = document.createElement("div");
      icon.classList.add("cm-completionIcon");
      if (completion.type) icon.classList.add(...completion.type.split(/\s+/g).map(cls => "cm-completionIcon-" + cls));
      icon.setAttribute("aria-hidden", "true");
      return icon;
    },

    position: 20
  });
  content.push({
    render(completion, _s, match) {
      let labelElt = document.createElement("span");
      labelElt.className = "cm-completionLabel";
      let {
        label
      } = completion,
          off = 0;

      for (let j = 1; j < match.length;) {
        let from = match[j++],
            to = match[j++];
        if (from > off) labelElt.appendChild(document.createTextNode(label.slice(off, from)));
        let span = labelElt.appendChild(document.createElement("span"));
        span.appendChild(document.createTextNode(label.slice(from, to)));
        span.className = "cm-completionMatchedText";
        off = to;
      }

      if (off < label.length) labelElt.appendChild(document.createTextNode(label.slice(off)));
      return labelElt;
    },

    position: 50
  }, {
    render(completion) {
      if (!completion.detail) return null;
      let detailElt = document.createElement("span");
      detailElt.className = "cm-completionDetail";
      detailElt.textContent = completion.detail;
      return detailElt;
    },

    position: 80
  });
  return content.sort((a, b) => a.position - b.position).map(a => a.render);
}

function rangeAroundSelected(total, selected, max) {
  if (total <= max) return {
    from: 0,
    to: total
  };
  if (selected < 0) selected = 0;

  if (selected <= total >> 1) {
    let off = Math.floor(selected / max);
    return {
      from: off * max,
      to: (off + 1) * max
    };
  }

  let off = Math.floor((total - selected) / max);
  return {
    from: total - (off + 1) * max,
    to: total - off * max
  };
}

class CompletionTooltip {
  constructor(view, stateField) {
    this.view = view;
    this.stateField = stateField;
    this.info = null;
    this.placeInfo = {
      read: () => this.measureInfo(),
      write: pos => this.positionInfo(pos),
      key: this
    };
    let cState = view.state.field(stateField);
    let {
      options,
      selected
    } = cState.open;
    let config = view.state.facet(completionConfig);
    this.optionContent = optionContent(config);
    this.optionClass = config.optionClass;
    this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);
    this.dom = document.createElement("div");
    this.dom.className = "cm-tooltip-autocomplete";
    this.dom.addEventListener("mousedown", e => {
      for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {
        if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options.length) {
          applyCompletion(view, options[+match[1]]);
          e.preventDefault();
          return;
        }
      }
    });
    this.list = this.dom.appendChild(this.createListBox(options, cState.id, this.range));
    this.list.addEventListener("scroll", () => {
      if (this.info) this.view.requestMeasure(this.placeInfo);
    });
  }

  mount() {
    this.updateSel();
  }

  update(update) {
    if (update.state.field(this.stateField) != update.startState.field(this.stateField)) this.updateSel();
  }

  positioned() {
    if (this.info) this.view.requestMeasure(this.placeInfo);
  }

  updateSel() {
    let cState = this.view.state.field(this.stateField),
        open = cState.open;

    if (open.selected < this.range.from || open.selected >= this.range.to) {
      this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
      this.list.remove();
      this.list = this.dom.appendChild(this.createListBox(open.options, cState.id, this.range));
      this.list.addEventListener("scroll", () => {
        if (this.info) this.view.requestMeasure(this.placeInfo);
      });
    }

    if (this.updateSelectedOption(open.selected)) {
      if (this.info) {
        this.info.remove();
        this.info = null;
      }

      let {
        completion
      } = open.options[open.selected];
      let {
        info
      } = completion;
      if (!info) return;
      let infoResult = typeof info === 'string' ? document.createTextNode(info) : info(completion);
      if (!infoResult) return;

      if ('then' in infoResult) {
        infoResult.then(node => {
          if (node && this.view.state.field(this.stateField, false) == cState) this.addInfoPane(node);
        }).catch(e => (0, _view.logException)(this.view.state, e, "completion info"));
      } else {
        this.addInfoPane(infoResult);
      }
    }
  }

  addInfoPane(content) {
    let dom = this.info = document.createElement("div");
    dom.className = "cm-tooltip cm-completionInfo";
    dom.appendChild(content);
    this.dom.appendChild(dom);
    this.view.requestMeasure(this.placeInfo);
  }

  updateSelectedOption(selected) {
    let set = null;

    for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {
      if (i == selected) {
        if (!opt.hasAttribute("aria-selected")) {
          opt.setAttribute("aria-selected", "true");
          set = opt;
        }
      } else {
        if (opt.hasAttribute("aria-selected")) opt.removeAttribute("aria-selected");
      }
    }

    if (set) scrollIntoView(this.list, set);
    return set;
  }

  measureInfo() {
    let sel = this.dom.querySelector("[aria-selected]");
    if (!sel || !this.info) return null;
    let listRect = this.dom.getBoundingClientRect();
    let infoRect = this.info.getBoundingClientRect();
    let selRect = sel.getBoundingClientRect();
    if (selRect.top > Math.min(innerHeight, listRect.bottom) - 10 || selRect.bottom < Math.max(0, listRect.top) + 10) return null;
    let top = Math.max(0, Math.min(selRect.top, innerHeight - infoRect.height)) - listRect.top;
    let left = this.view.textDirection == _view.Direction.RTL;
    let spaceLeft = listRect.left,
        spaceRight = innerWidth - listRect.right;
    if (left && spaceLeft < Math.min(infoRect.width, spaceRight)) left = false;else if (!left && spaceRight < Math.min(infoRect.width, spaceLeft)) left = true;
    return {
      top,
      left
    };
  }

  positionInfo(pos) {
    if (this.info) {
      this.info.style.top = (pos ? pos.top : -1e6) + "px";

      if (pos) {
        this.info.classList.toggle("cm-completionInfo-left", pos.left);
        this.info.classList.toggle("cm-completionInfo-right", !pos.left);
      }
    }
  }

  createListBox(options, id, range) {
    const ul = document.createElement("ul");
    ul.id = id;
    ul.setAttribute("role", "listbox");
    ul.setAttribute("aria-expanded", "true");
    ul.setAttribute("aria-label", this.view.state.phrase("Completions"));

    for (let i = range.from; i < range.to; i++) {
      let {
        completion,
        match
      } = options[i];
      const li = ul.appendChild(document.createElement("li"));
      li.id = id + "-" + i;
      li.setAttribute("role", "option");
      let cls = this.optionClass(completion);
      if (cls) li.className = cls;

      for (let source of this.optionContent) {
        let node = source(completion, this.view.state, match);
        if (node) li.appendChild(node);
      }
    }

    if (range.from) ul.classList.add("cm-completionListIncompleteTop");
    if (range.to < options.length) ul.classList.add("cm-completionListIncompleteBottom");
    return ul;
  }

} // We allocate a new function instance every time the completion
// changes to force redrawing/repositioning of the tooltip


function completionTooltip(stateField) {
  return view => new CompletionTooltip(view, stateField);
}

function scrollIntoView(container, element) {
  let parent = container.getBoundingClientRect();
  let self = element.getBoundingClientRect();
  if (self.top < parent.top) container.scrollTop -= parent.top - self.top;else if (self.bottom > parent.bottom) container.scrollTop += self.bottom - parent.bottom;
} // Used to pick a preferred option when two options with the same
// label occur in the result.


function score(option) {
  return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) + (option.type ? 1 : 0);
}

function sortOptions(active, state) {
  let options = [],
      i = 0;

  for (let a of active) if (a.hasResult()) {
    if (a.result.filter === false) {
      let getMatch = a.result.getMatch;

      for (let option of a.result.options) {
        let match = [1e9 - i++];
        if (getMatch) for (let n of getMatch(option)) match.push(n);
        options.push(new Option(option, a, match));
      }
    } else {
      let matcher = new FuzzyMatcher(state.sliceDoc(a.from, a.to)),
          match;

      for (let option of a.result.options) if (match = matcher.match(option.label)) {
        if (option.boost != null) match[0] += option.boost;
        options.push(new Option(option, a, match));
      }
    }
  }

  let result = [],
      prev = null;
  let compare = state.facet(completionConfig).compareCompletions;

  for (let opt of options.sort((a, b) => b.match[0] - a.match[0] || compare(a.completion, b.completion))) {
    if (!prev || prev.label != opt.completion.label || prev.detail != opt.completion.detail || prev.type != null && opt.completion.type != null && prev.type != opt.completion.type || prev.apply != opt.completion.apply) result.push(opt);else if (score(opt.completion) > score(prev)) result[result.length - 1] = opt;
    prev = opt.completion;
  }

  return result;
}

class CompletionDialog {
  constructor(options, attrs, tooltip, timestamp, selected) {
    this.options = options;
    this.attrs = attrs;
    this.tooltip = tooltip;
    this.timestamp = timestamp;
    this.selected = selected;
  }

  setSelected(selected, id) {
    return selected == this.selected || selected >= this.options.length ? this : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected);
  }

  static build(active, state, id, prev, conf) {
    let options = sortOptions(active, state);
    if (!options.length) return null;
    let selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;

    if (prev && prev.selected != selected && prev.selected != -1) {
      let selectedValue = prev.options[prev.selected].completion;

      for (let i = 0; i < options.length; i++) if (options[i].completion == selectedValue) {
        selected = i;
        break;
      }
    }

    return new CompletionDialog(options, makeAttrs(id, selected), {
      pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),
      create: completionTooltip(completionState),
      above: conf.aboveCursor
    }, prev ? prev.timestamp : Date.now(), selected);
  }

  map(changes) {
    return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), {
      pos: changes.mapPos(this.tooltip.pos)
    }), this.timestamp, this.selected);
  }

}

class CompletionState {
  constructor(active, id, open) {
    this.active = active;
    this.id = id;
    this.open = open;
  }

  static start() {
    return new CompletionState(none, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
  }

  update(tr) {
    let {
      state
    } = tr,
        conf = state.facet(completionConfig);
    let sources = conf.override || state.languageDataAt("autocomplete", cur(state)).map(asSource);
    let active = sources.map(source => {
      let value = this.active.find(s => s.source == source) || new ActiveSource(source, this.active.some(a => a.state != 0
      /* Inactive */
      ) ? 1
      /* Pending */
      : 0
      /* Inactive */
      );
      return value.update(tr, conf);
    });
    if (active.length == this.active.length && active.every((a, i) => a == this.active[i])) active = this.active;
    let open = tr.selection || active.some(a => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) || !sameResults(active, this.active) ? CompletionDialog.build(active, state, this.id, this.open, conf) : this.open && tr.docChanged ? this.open.map(tr.changes) : this.open;
    if (!open && active.every(a => a.state != 1
    /* Pending */
    ) && active.some(a => a.hasResult())) active = active.map(a => a.hasResult() ? new ActiveSource(a.source, 0
    /* Inactive */
    ) : a);

    for (let effect of tr.effects) if (effect.is(setSelectedEffect)) open = open && open.setSelected(effect.value, this.id);

    return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);
  }

  get tooltip() {
    return this.open ? this.open.tooltip : null;
  }

  get attrs() {
    return this.open ? this.open.attrs : baseAttrs;
  }

}

function sameResults(a, b) {
  if (a == b) return true;

  for (let iA = 0, iB = 0;;) {
    while (iA < a.length && !a[iA].hasResult) iA++;

    while (iB < b.length && !b[iB].hasResult) iB++;

    let endA = iA == a.length,
        endB = iB == b.length;
    if (endA || endB) return endA == endB;
    if (a[iA++].result != b[iB++].result) return false;
  }
}

const baseAttrs = {
  "aria-autocomplete": "list"
};

function makeAttrs(id, selected) {
  let result = {
    "aria-autocomplete": "list",
    "aria-haspopup": "listbox",
    "aria-controls": id
  };
  if (selected > -1) result["aria-activedescendant"] = id + "-" + selected;
  return result;
}

const none = [];

function getUserEvent(tr) {
  return tr.isUserEvent("input.type") ? "input" : tr.isUserEvent("delete.backward") ? "delete" : null;
}

class ActiveSource {
  constructor(source, state, explicitPos = -1) {
    this.source = source;
    this.state = state;
    this.explicitPos = explicitPos;
  }

  hasResult() {
    return false;
  }

  update(tr, conf) {
    let event = getUserEvent(tr),
        value = this;
    if (event) value = value.handleUserEvent(tr, event, conf);else if (tr.docChanged) value = value.handleChange(tr);else if (tr.selection && value.state != 0
    /* Inactive */
    ) value = new ActiveSource(value.source, 0
    /* Inactive */
    );

    for (let effect of tr.effects) {
      if (effect.is(startCompletionEffect)) value = new ActiveSource(value.source, 1
      /* Pending */
      , effect.value ? cur(tr.state) : -1);else if (effect.is(closeCompletionEffect)) value = new ActiveSource(value.source, 0
      /* Inactive */
      );else if (effect.is(setActiveEffect)) for (let active of effect.value) if (active.source == value.source) value = active;
    }

    return value;
  }

  handleUserEvent(tr, type, conf) {
    return type == "delete" || !conf.activateOnTyping ? this.map(tr.changes) : new ActiveSource(this.source, 1
    /* Pending */
    );
  }

  handleChange(tr) {
    return tr.changes.touchesRange(cur(tr.startState)) ? new ActiveSource(this.source, 0
    /* Inactive */
    ) : this.map(tr.changes);
  }

  map(changes) {
    return changes.empty || this.explicitPos < 0 ? this : new ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));
  }

}

class ActiveResult extends ActiveSource {
  constructor(source, explicitPos, result, from, to) {
    super(source, 2
    /* Result */
    , explicitPos);
    this.result = result;
    this.from = from;
    this.to = to;
  }

  hasResult() {
    return true;
  }

  handleUserEvent(tr, type, conf) {
    var _a;

    let from = tr.changes.mapPos(this.from),
        to = tr.changes.mapPos(this.to, 1);
    let pos = cur(tr.state);
    if ((this.explicitPos < 0 ? pos <= from : pos < this.from) || pos > to || type == "delete" && cur(tr.startState) == this.from) return new ActiveSource(this.source, type == "input" && conf.activateOnTyping ? 1
    /* Pending */
    : 0
    /* Inactive */
    );
    let explicitPos = this.explicitPos < 0 ? -1 : tr.changes.mapPos(this.explicitPos),
        updated;
    if (checkValid(this.result.validFor, tr.state, from, to)) return new ActiveResult(this.source, explicitPos, this.result, from, to);
    if (this.result.update && (updated = this.result.update(this.result, from, to, new CompletionContext(tr.state, pos, explicitPos >= 0)))) return new ActiveResult(this.source, explicitPos, updated, updated.from, (_a = updated.to) !== null && _a !== void 0 ? _a : cur(tr.state));
    return new ActiveSource(this.source, 1
    /* Pending */
    , explicitPos);
  }

  handleChange(tr) {
    return tr.changes.touchesRange(this.from, this.to) ? new ActiveSource(this.source, 0
    /* Inactive */
    ) : this.map(tr.changes);
  }

  map(mapping) {
    return mapping.empty ? this : new ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));
  }

}

function checkValid(validFor, state, from, to) {
  if (!validFor) return false;
  let text = state.sliceDoc(from, to);
  return typeof validFor == "function" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);
}

const startCompletionEffect = /*@__PURE__*/_state.StateEffect.define();

const closeCompletionEffect = /*@__PURE__*/_state.StateEffect.define();

const setActiveEffect = /*@__PURE__*/_state.StateEffect.define({
  map(sources, mapping) {
    return sources.map(s => s.map(mapping));
  }

});

const setSelectedEffect = /*@__PURE__*/_state.StateEffect.define();

const completionState = /*@__PURE__*/_state.StateField.define({
  create() {
    return CompletionState.start();
  },

  update(value, tr) {
    return value.update(tr);
  },

  provide: f => [_view.showTooltip.from(f, val => val.tooltip), _view.EditorView.contentAttributes.from(f, state => state.attrs)]
});

const CompletionInteractMargin = 75;
/**
Returns a command that moves the completion selection forward or
backward by the given amount.
*/

function moveCompletionSelection(forward, by = "option") {
  return view => {
    let cState = view.state.field(completionState, false);
    if (!cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin) return false;
    let step = 1,
        tooltip;
    if (by == "page" && (tooltip = (0, _view.getTooltip)(view, cState.open.tooltip))) step = Math.max(2, Math.floor(tooltip.dom.offsetHeight / tooltip.dom.querySelector("li").offsetHeight) - 1);
    let {
      length
    } = cState.open.options;
    let selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length - 1;
    if (selected < 0) selected = by == "page" ? 0 : length - 1;else if (selected >= length) selected = by == "page" ? length - 1 : 0;
    view.dispatch({
      effects: setSelectedEffect.of(selected)
    });
    return true;
  };
}
/**
Accept the current completion.
*/


const acceptCompletion = view => {
  let cState = view.state.field(completionState, false);
  if (view.state.readOnly || !cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin || cState.open.selected < 0) return false;
  applyCompletion(view, cState.open.options[cState.open.selected]);
  return true;
};
/**
Explicitly start autocompletion.
*/


exports.acceptCompletion = acceptCompletion;

const startCompletion = view => {
  let cState = view.state.field(completionState, false);
  if (!cState) return false;
  view.dispatch({
    effects: startCompletionEffect.of(true)
  });
  return true;
};
/**
Close the currently active completion.
*/


exports.startCompletion = startCompletion;

const closeCompletion = view => {
  let cState = view.state.field(completionState, false);
  if (!cState || !cState.active.some(a => a.state != 0
  /* Inactive */
  )) return false;
  view.dispatch({
    effects: closeCompletionEffect.of(null)
  });
  return true;
};

exports.closeCompletion = closeCompletion;

class RunningQuery {
  constructor(active, context) {
    this.active = active;
    this.context = context;
    this.time = Date.now();
    this.updates = []; // Note that 'undefined' means 'not done yet', whereas 'null' means
    // 'query returned null'.

    this.done = undefined;
  }

}

const DebounceTime = 50,
      MaxUpdateCount = 50,
      MinAbortTime = 1000;

const completionPlugin = /*@__PURE__*/_view.ViewPlugin.fromClass(class {
  constructor(view) {
    this.view = view;
    this.debounceUpdate = -1;
    this.running = [];
    this.debounceAccept = -1;
    this.composing = 0
    /* None */
    ;

    for (let active of view.state.field(completionState).active) if (active.state == 1
    /* Pending */
    ) this.startQuery(active);
  }

  update(update) {
    let cState = update.state.field(completionState);
    if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState) return;
    let doesReset = update.transactions.some(tr => {
      return (tr.selection || tr.docChanged) && !getUserEvent(tr);
    });

    for (let i = 0; i < this.running.length; i++) {
      let query = this.running[i];

      if (doesReset || query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {
        for (let handler of query.context.abortListeners) {
          try {
            handler();
          } catch (e) {
            (0, _view.logException)(this.view.state, e);
          }
        }

        query.context.abortListeners = null;
        this.running.splice(i--, 1);
      } else {
        query.updates.push(...update.transactions);
      }
    }

    if (this.debounceUpdate > -1) clearTimeout(this.debounceUpdate);
    this.debounceUpdate = cState.active.some(a => a.state == 1
    /* Pending */
    && !this.running.some(q => q.active.source == a.source)) ? setTimeout(() => this.startUpdate(), DebounceTime) : -1;
    if (this.composing != 0
    /* None */
    ) for (let tr of update.transactions) {
      if (getUserEvent(tr) == "input") this.composing = 2
      /* Changed */
      ;else if (this.composing == 2
      /* Changed */
      && tr.selection) this.composing = 3
      /* ChangedAndMoved */
      ;
    }
  }

  startUpdate() {
    this.debounceUpdate = -1;
    let {
      state
    } = this.view,
        cState = state.field(completionState);

    for (let active of cState.active) {
      if (active.state == 1
      /* Pending */
      && !this.running.some(r => r.active.source == active.source)) this.startQuery(active);
    }
  }

  startQuery(active) {
    let {
      state
    } = this.view,
        pos = cur(state);
    let context = new CompletionContext(state, pos, active.explicitPos == pos);
    let pending = new RunningQuery(active, context);
    this.running.push(pending);
    Promise.resolve(active.source(context)).then(result => {
      if (!pending.context.aborted) {
        pending.done = result || null;
        this.scheduleAccept();
      }
    }, err => {
      this.view.dispatch({
        effects: closeCompletionEffect.of(null)
      });
      (0, _view.logException)(this.view.state, err);
    });
  }

  scheduleAccept() {
    if (this.running.every(q => q.done !== undefined)) this.accept();else if (this.debounceAccept < 0) this.debounceAccept = setTimeout(() => this.accept(), DebounceTime);
  } // For each finished query in this.running, try to create a result
  // or, if appropriate, restart the query.


  accept() {
    var _a;

    if (this.debounceAccept > -1) clearTimeout(this.debounceAccept);
    this.debounceAccept = -1;
    let updated = [];
    let conf = this.view.state.facet(completionConfig);

    for (let i = 0; i < this.running.length; i++) {
      let query = this.running[i];
      if (query.done === undefined) continue;
      this.running.splice(i--, 1);

      if (query.done) {
        let active = new ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : cur(query.updates.length ? query.updates[0].startState : this.view.state)); // Replay the transactions that happened since the start of
        // the request and see if that preserves the result

        for (let tr of query.updates) active = active.update(tr, conf);

        if (active.hasResult()) {
          updated.push(active);
          continue;
        }
      }

      let current = this.view.state.field(completionState).active.find(a => a.source == query.active.source);

      if (current && current.state == 1
      /* Pending */
      ) {
        if (query.done == null) {
          // Explicitly failed. Should clear the pending status if it
          // hasn't been re-set in the meantime.
          let active = new ActiveSource(query.active.source, 0
          /* Inactive */
          );

          for (let tr of query.updates) active = active.update(tr, conf);

          if (active.state != 1
          /* Pending */
          ) updated.push(active);
        } else {
          // Cleared by subsequent transactions. Restart.
          this.startQuery(current);
        }
      }
    }

    if (updated.length) this.view.dispatch({
      effects: setActiveEffect.of(updated)
    });
  }

}, {
  eventHandlers: {
    blur() {
      let state = this.view.state.field(completionState, false);
      if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur) this.view.dispatch({
        effects: closeCompletionEffect.of(null)
      });
    },

    compositionstart() {
      this.composing = 1
      /* Started */
      ;
    },

    compositionend() {
      if (this.composing == 3
      /* ChangedAndMoved */
      ) {
        // Safari fires compositionend events synchronously, possibly
        // from inside an update, so dispatch asynchronously to avoid reentrancy
        setTimeout(() => this.view.dispatch({
          effects: startCompletionEffect.of(false)
        }), 20);
      }

      this.composing = 0
      /* None */
      ;
    }

  }
});

const baseTheme = /*@__PURE__*/_view.EditorView.baseTheme({
  ".cm-tooltip.cm-tooltip-autocomplete": {
    "& > ul": {
      fontFamily: "monospace",
      whiteSpace: "nowrap",
      overflow: "hidden auto",
      maxWidth_fallback: "700px",
      maxWidth: "min(700px, 95vw)",
      minWidth: "250px",
      maxHeight: "10em",
      listStyle: "none",
      margin: 0,
      padding: 0,
      "& > li": {
        overflowX: "hidden",
        textOverflow: "ellipsis",
        cursor: "pointer",
        padding: "1px 3px",
        lineHeight: 1.2
      }
    }
  },
  "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#17c",
    color: "white"
  },
  "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#347",
    color: "white"
  },
  ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
    content: '"···"',
    opacity: 0.5,
    display: "block",
    textAlign: "center"
  },
  ".cm-tooltip.cm-completionInfo": {
    position: "absolute",
    padding: "3px 9px",
    width: "max-content",
    maxWidth: "300px"
  },
  ".cm-completionInfo.cm-completionInfo-left": {
    right: "100%"
  },
  ".cm-completionInfo.cm-completionInfo-right": {
    left: "100%"
  },
  "&light .cm-snippetField": {
    backgroundColor: "#00000022"
  },
  "&dark .cm-snippetField": {
    backgroundColor: "#ffffff22"
  },
  ".cm-snippetFieldPosition": {
    verticalAlign: "text-top",
    width: 0,
    height: "1.15em",
    margin: "0 -0.7px -.7em",
    borderLeft: "1.4px dotted #888"
  },
  ".cm-completionMatchedText": {
    textDecoration: "underline"
  },
  ".cm-completionDetail": {
    marginLeft: "0.5em",
    fontStyle: "italic"
  },
  ".cm-completionIcon": {
    fontSize: "90%",
    width: ".8em",
    display: "inline-block",
    textAlign: "center",
    paddingRight: ".6em",
    opacity: "0.6"
  },
  ".cm-completionIcon-function, .cm-completionIcon-method": {
    "&:after": {
      content: "'ƒ'"
    }
  },
  ".cm-completionIcon-class": {
    "&:after": {
      content: "'○'"
    }
  },
  ".cm-completionIcon-interface": {
    "&:after": {
      content: "'◌'"
    }
  },
  ".cm-completionIcon-variable": {
    "&:after": {
      content: "'𝑥'"
    }
  },
  ".cm-completionIcon-constant": {
    "&:after": {
      content: "'𝐶'"
    }
  },
  ".cm-completionIcon-type": {
    "&:after": {
      content: "'𝑡'"
    }
  },
  ".cm-completionIcon-enum": {
    "&:after": {
      content: "'∪'"
    }
  },
  ".cm-completionIcon-property": {
    "&:after": {
      content: "'□'"
    }
  },
  ".cm-completionIcon-keyword": {
    "&:after": {
      content: "'🔑\uFE0E'"
    } // Disable emoji rendering

  },
  ".cm-completionIcon-namespace": {
    "&:after": {
      content: "'▢'"
    }
  },
  ".cm-completionIcon-text": {
    "&:after": {
      content: "'abc'",
      fontSize: "50%",
      verticalAlign: "middle"
    }
  }
});

class FieldPos {
  constructor(field, line, from, to) {
    this.field = field;
    this.line = line;
    this.from = from;
    this.to = to;
  }

}

class FieldRange {
  constructor(field, from, to) {
    this.field = field;
    this.from = from;
    this.to = to;
  }

  map(changes) {
    let from = changes.mapPos(this.from, -1, _state.MapMode.TrackDel);
    let to = changes.mapPos(this.to, 1, _state.MapMode.TrackDel);
    return from == null || to == null ? null : new FieldRange(this.field, from, to);
  }

}

class Snippet {
  constructor(lines, fieldPositions) {
    this.lines = lines;
    this.fieldPositions = fieldPositions;
  }

  instantiate(state, pos) {
    let text = [],
        lineStart = [pos];
    let lineObj = state.doc.lineAt(pos),
        baseIndent = /^\s*/.exec(lineObj.text)[0];

    for (let line of this.lines) {
      if (text.length) {
        let indent = baseIndent,
            tabs = /^\t*/.exec(line)[0].length;

        for (let i = 0; i < tabs; i++) indent += state.facet(_language.indentUnit);

        lineStart.push(pos + indent.length - tabs);
        line = indent + line.slice(tabs);
      }

      text.push(line);
      pos += line.length + 1;
    }

    let ranges = this.fieldPositions.map(pos => new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to));
    return {
      text,
      ranges
    };
  }

  static parse(template) {
    let fields = [];
    let lines = [],
        positions = [],
        m;

    for (let line of template.split(/\r\n?|\n/)) {
      while (m = /[#$]\{(?:(\d+)(?::([^}]*))?|([^}]*))\}/.exec(line)) {
        let seq = m[1] ? +m[1] : null,
            name = m[2] || m[3] || "",
            found = -1;

        for (let i = 0; i < fields.length; i++) {
          if (seq != null ? fields[i].seq == seq : name ? fields[i].name == name : false) found = i;
        }

        if (found < 0) {
          let i = 0;

          while (i < fields.length && (seq == null || fields[i].seq != null && fields[i].seq < seq)) i++;

          fields.splice(i, 0, {
            seq,
            name
          });
          found = i;

          for (let pos of positions) if (pos.field >= found) pos.field++;
        }

        positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));
        line = line.slice(0, m.index) + name + line.slice(m.index + m[0].length);
      }

      for (let esc; esc = /([$#])\\{/.exec(line);) {
        line = line.slice(0, esc.index) + esc[1] + "{" + line.slice(esc.index + esc[0].length);

        for (let pos of positions) if (pos.line == lines.length && pos.from > esc.index) {
          pos.from--;
          pos.to--;
        }
      }

      lines.push(line);
    }

    return new Snippet(lines, positions);
  }

}

let fieldMarker = /*@__PURE__*/_view.Decoration.widget({
  widget: /*@__PURE__*/new class extends _view.WidgetType {
    toDOM() {
      let span = document.createElement("span");
      span.className = "cm-snippetFieldPosition";
      return span;
    }

    ignoreEvent() {
      return false;
    }

  }()
});

let fieldRange = /*@__PURE__*/_view.Decoration.mark({
  class: "cm-snippetField"
});

class ActiveSnippet {
  constructor(ranges, active) {
    this.ranges = ranges;
    this.active = active;
    this.deco = _view.Decoration.set(ranges.map(r => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)));
  }

  map(changes) {
    let ranges = [];

    for (let r of this.ranges) {
      let mapped = r.map(changes);
      if (!mapped) return null;
      ranges.push(mapped);
    }

    return new ActiveSnippet(ranges, this.active);
  }

  selectionInsideField(sel) {
    return sel.ranges.every(range => this.ranges.some(r => r.field == this.active && r.from <= range.from && r.to >= range.to));
  }

}

const setActive = /*@__PURE__*/_state.StateEffect.define({
  map(value, changes) {
    return value && value.map(changes);
  }

});

const moveToField = /*@__PURE__*/_state.StateEffect.define();

const snippetState = /*@__PURE__*/_state.StateField.define({
  create() {
    return null;
  },

  update(value, tr) {
    for (let effect of tr.effects) {
      if (effect.is(setActive)) return effect.value;
      if (effect.is(moveToField) && value) return new ActiveSnippet(value.ranges, effect.value);
    }

    if (value && tr.docChanged) value = value.map(tr.changes);
    if (value && tr.selection && !value.selectionInsideField(tr.selection)) value = null;
    return value;
  },

  provide: f => _view.EditorView.decorations.from(f, val => val ? val.deco : _view.Decoration.none)
});

function fieldSelection(ranges, field) {
  return _state.EditorSelection.create(ranges.filter(r => r.field == field).map(r => _state.EditorSelection.range(r.from, r.to)));
}
/**
Convert a snippet template to a function that can
[apply](https://codemirror.net/6/docs/ref/#autocomplete.Completion.apply) it. Snippets are written
using syntax like this:

    "for (let ${index} = 0; ${index} < ${end}; ${index}++) {\n\t${}\n}"

Each `${}` placeholder (you may also use `#{}`) indicates a field
that the user can fill in. Its name, if any, will be the default
content for the field.

When the snippet is activated by calling the returned function,
the code is inserted at the given position. Newlines in the
template are indented by the indentation of the start line, plus
one [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after
the newline.

On activation, (all instances of) the first field are selected.
The user can move between fields with Tab and Shift-Tab as long as
the fields are active. Moving to the last field or moving the
cursor out of the current field deactivates the fields.

The order of fields defaults to textual order, but you can add
numbers to placeholders (`${1}` or `${1:defaultText}`) to provide
a custom order.

To include a literal `${` or `#{` in your template, put a
backslash after the dollar or hash and before the brace (`$\\{`).
This will be removed and the sequence will not be interpreted as a
placeholder.
*/


function snippet(template) {
  let snippet = Snippet.parse(template);
  return (editor, _completion, from, to) => {
    let {
      text,
      ranges
    } = snippet.instantiate(editor.state, from);
    let spec = {
      changes: {
        from,
        to,
        insert: _state.Text.of(text)
      },
      scrollIntoView: true
    };
    if (ranges.length) spec.selection = fieldSelection(ranges, 0);

    if (ranges.length > 1) {
      let active = new ActiveSnippet(ranges, 0);
      let effects = spec.effects = [setActive.of(active)];
      if (editor.state.field(snippetState, false) === undefined) effects.push(_state.StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme]));
    }

    editor.dispatch(editor.state.update(spec));
  };
}

function moveField(dir) {
  return ({
    state,
    dispatch
  }) => {
    let active = state.field(snippetState, false);
    if (!active || dir < 0 && active.active == 0) return false;
    let next = active.active + dir,
        last = dir > 0 && !active.ranges.some(r => r.field == next + dir);
    dispatch(state.update({
      selection: fieldSelection(active.ranges, next),
      effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next))
    }));
    return true;
  };
}
/**
A command that clears the active snippet, if any.
*/


const clearSnippet = ({
  state,
  dispatch
}) => {
  let active = state.field(snippetState, false);
  if (!active) return false;
  dispatch(state.update({
    effects: setActive.of(null)
  }));
  return true;
};
/**
Move to the next snippet field, if available.
*/


exports.clearSnippet = clearSnippet;
const nextSnippetField = /*@__PURE__*/moveField(1);
/**
Move to the previous snippet field, if available.
*/

exports.nextSnippetField = nextSnippetField;
const prevSnippetField = /*@__PURE__*/moveField(-1);
exports.prevSnippetField = prevSnippetField;
const defaultSnippetKeymap = [{
  key: "Tab",
  run: nextSnippetField,
  shift: prevSnippetField
}, {
  key: "Escape",
  run: clearSnippet
}];
/**
A facet that can be used to configure the key bindings used by
snippets. The default binds Tab to
[`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to
[`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape
to [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).
*/

const snippetKeymap = /*@__PURE__*/_state.Facet.define({
  combine(maps) {
    return maps.length ? maps[0] : defaultSnippetKeymap;
  }

});

exports.snippetKeymap = snippetKeymap;

const addSnippetKeymap = /*@__PURE__*/_state.Prec.highest( /*@__PURE__*/_view.keymap.compute([snippetKeymap], state => state.facet(snippetKeymap)));
/**
Create a completion from a snippet. Returns an object with the
properties from `completion`, plus an `apply` function that
applies the snippet.
*/


function snippetCompletion(template, completion) {
  return Object.assign(Object.assign({}, completion), {
    apply: snippet(template)
  });
}

const snippetPointerHandler = /*@__PURE__*/_view.EditorView.domEventHandlers({
  mousedown(event, view) {
    let active = view.state.field(snippetState, false),
        pos;
    if (!active || (pos = view.posAtCoords({
      x: event.clientX,
      y: event.clientY
    })) == null) return false;
    let match = active.ranges.find(r => r.from <= pos && r.to >= pos);
    if (!match || match.field == active.active) return false;
    view.dispatch({
      selection: fieldSelection(active.ranges, match.field),
      effects: setActive.of(active.ranges.some(r => r.field > match.field) ? new ActiveSnippet(active.ranges, match.field) : null)
    });
    return true;
  }

});

function wordRE(wordChars) {
  let escaped = wordChars.replace(/[\\[.+*?(){|^$]/g, "\\$&");

  try {
    return new RegExp(`[\\p{Alphabetic}\\p{Number}_${escaped}]+`, "ug");
  } catch (_a) {
    return new RegExp(`[\w${escaped}]`, "g");
  }
}

function mapRE(re, f) {
  return new RegExp(f(re.source), re.unicode ? "u" : "");
}

const wordCaches = /*@__PURE__*/Object.create(null);

function wordCache(wordChars) {
  return wordCaches[wordChars] || (wordCaches[wordChars] = new WeakMap());
}

function storeWords(doc, wordRE, result, seen, ignoreAt) {
  for (let lines = doc.iterLines(), pos = 0; !lines.next().done;) {
    let {
      value
    } = lines,
        m;
    wordRE.lastIndex = 0;

    while (m = wordRE.exec(value)) {
      if (!seen[m[0]] && pos + m.index != ignoreAt) {
        result.push({
          type: "text",
          label: m[0]
        });
        seen[m[0]] = true;
        if (result.length >= 2000
        /* MaxList */
        ) return;
      }
    }

    pos += value.length + 1;
  }
}

function collectWords(doc, cache, wordRE, to, ignoreAt) {
  let big = doc.length >= 1000
  /* MinCacheLen */
  ;
  let cached = big && cache.get(doc);
  if (cached) return cached;
  let result = [],
      seen = Object.create(null);

  if (doc.children) {
    let pos = 0;

    for (let ch of doc.children) {
      if (ch.length >= 1000
      /* MinCacheLen */
      ) {
        for (let c of collectWords(ch, cache, wordRE, to - pos, ignoreAt - pos)) {
          if (!seen[c.label]) {
            seen[c.label] = true;
            result.push(c);
          }
        }
      } else {
        storeWords(ch, wordRE, result, seen, ignoreAt - pos);
      }

      pos += ch.length + 1;
    }
  } else {
    storeWords(doc, wordRE, result, seen, ignoreAt);
  }

  if (big && result.length < 2000
  /* MaxList */
  ) cache.set(doc, result);
  return result;
}
/**
A completion source that will scan the document for words (using a
[character categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer)), and
return those as completions.
*/


const completeAnyWord = context => {
  let wordChars = context.state.languageDataAt("wordChars", context.pos).join("");
  let re = wordRE(wordChars);
  let token = context.matchBefore(mapRE(re, s => s + "$"));
  if (!token && !context.explicit) return null;
  let from = token ? token.from : context.pos;
  let options = collectWords(context.state.doc, wordCache(wordChars), re, 50000
  /* Range */
  , from);
  return {
    from,
    options,
    validFor: mapRE(re, s => "^" + s)
  };
};

exports.completeAnyWord = completeAnyWord;
const defaults = {
  brackets: ["(", "[", "{", "'", '"'],
  before: ")]}:;>"
};

const closeBracketEffect = /*@__PURE__*/_state.StateEffect.define({
  map(value, mapping) {
    let mapped = mapping.mapPos(value, -1, _state.MapMode.TrackAfter);
    return mapped == null ? undefined : mapped;
  }

});

const skipBracketEffect = /*@__PURE__*/_state.StateEffect.define({
  map(value, mapping) {
    return mapping.mapPos(value);
  }

});

const closedBracket = /*@__PURE__*/new class extends _state.RangeValue {}();
closedBracket.startSide = 1;
closedBracket.endSide = -1;

const bracketState = /*@__PURE__*/_state.StateField.define({
  create() {
    return _state.RangeSet.empty;
  },

  update(value, tr) {
    if (tr.selection) {
      let lineStart = tr.state.doc.lineAt(tr.selection.main.head).from;
      let prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.main.head).from;
      if (lineStart != tr.changes.mapPos(prevLineStart, -1)) value = _state.RangeSet.empty;
    }

    value = value.map(tr.changes);

    for (let effect of tr.effects) {
      if (effect.is(closeBracketEffect)) value = value.update({
        add: [closedBracket.range(effect.value, effect.value + 1)]
      });else if (effect.is(skipBracketEffect)) value = value.update({
        filter: from => from != effect.value
      });
    }

    return value;
  }

});
/**
Extension to enable bracket-closing behavior. When a closeable
bracket is typed, its closing bracket is immediately inserted
after the cursor. When closing a bracket directly in front of a
closing bracket inserted by the extension, the cursor moves over
that bracket.
*/


function closeBrackets() {
  return [inputHandler, bracketState];
}

const definedClosing = "()[]{}<>";

function closing(ch) {
  for (let i = 0; i < definedClosing.length; i += 2) if (definedClosing.charCodeAt(i) == ch) return definedClosing.charAt(i + 1);

  return (0, _state.fromCodePoint)(ch < 128 ? ch : ch + 1);
}

function config(state, pos) {
  return state.languageDataAt("closeBrackets", pos)[0] || defaults;
}

const android = typeof navigator == "object" && /*@__PURE__*/ /Android\b/.test(navigator.userAgent);

const inputHandler = /*@__PURE__*/_view.EditorView.inputHandler.of((view, from, to, insert) => {
  if ((android ? view.composing : view.compositionStarted) || view.state.readOnly) return false;
  let sel = view.state.selection.main;
  if (insert.length > 2 || insert.length == 2 && (0, _state.codePointSize)((0, _state.codePointAt)(insert, 0)) == 1 || from != sel.from || to != sel.to) return false;
  let tr = insertBracket(view.state, insert);
  if (!tr) return false;
  view.dispatch(tr);
  return true;
});
/**
Command that implements deleting a pair of matching brackets when
the cursor is between them.
*/


const deleteBracketPair = ({
  state,
  dispatch
}) => {
  if (state.readOnly) return false;
  let conf = config(state, state.selection.main.head);
  let tokens = conf.brackets || defaults.brackets;
  let dont = null,
      changes = state.changeByRange(range => {
    if (range.empty) {
      let before = prevChar(state.doc, range.head);

      for (let token of tokens) {
        if (token == before && nextChar(state.doc, range.head) == closing((0, _state.codePointAt)(token, 0))) return {
          changes: {
            from: range.head - token.length,
            to: range.head + token.length
          },
          range: _state.EditorSelection.cursor(range.head - token.length),
          userEvent: "delete.backward"
        };
      }
    }

    return {
      range: dont = range
    };
  });
  if (!dont) dispatch(state.update(changes, {
    scrollIntoView: true
  }));
  return !dont;
};
/**
Close-brackets related key bindings. Binds Backspace to
[`deleteBracketPair`](https://codemirror.net/6/docs/ref/#autocomplete.deleteBracketPair).
*/


exports.deleteBracketPair = deleteBracketPair;
const closeBracketsKeymap = [{
  key: "Backspace",
  run: deleteBracketPair
}];
/**
Implements the extension's behavior on text insertion. If the
given string counts as a bracket in the language around the
selection, and replacing the selection with it requires custom
behavior (inserting a closing version or skipping past a
previously-closed bracket), this function returns a transaction
representing that custom behavior. (You only need this if you want
to programmatically insert brackets—the
[`closeBrackets`](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets) extension will
take care of running this for user input.)
*/

exports.closeBracketsKeymap = closeBracketsKeymap;

function insertBracket(state, bracket) {
  let conf = config(state, state.selection.main.head);
  let tokens = conf.brackets || defaults.brackets;

  for (let tok of tokens) {
    let closed = closing((0, _state.codePointAt)(tok, 0));
    if (bracket == tok) return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1) : handleOpen(state, tok, closed, conf.before || defaults.before);
    if (bracket == closed && closedBracketAt(state, state.selection.main.from)) return handleClose(state, tok, closed);
  }

  return null;
}

function closedBracketAt(state, pos) {
  let found = false;
  state.field(bracketState).between(0, state.doc.length, from => {
    if (from == pos) found = true;
  });
  return found;
}

function nextChar(doc, pos) {
  let next = doc.sliceString(pos, pos + 2);
  return next.slice(0, (0, _state.codePointSize)((0, _state.codePointAt)(next, 0)));
}

function prevChar(doc, pos) {
  let prev = doc.sliceString(pos - 2, pos);
  return (0, _state.codePointSize)((0, _state.codePointAt)(prev, 0)) == prev.length ? prev : prev.slice(1);
}

function handleOpen(state, open, close, closeBefore) {
  let dont = null,
      changes = state.changeByRange(range => {
    if (!range.empty) return {
      changes: [{
        insert: open,
        from: range.from
      }, {
        insert: close,
        from: range.to
      }],
      effects: closeBracketEffect.of(range.to + open.length),
      range: _state.EditorSelection.range(range.anchor + open.length, range.head + open.length)
    };
    let next = nextChar(state.doc, range.head);
    if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1) return {
      changes: {
        insert: open + close,
        from: range.head
      },
      effects: closeBracketEffect.of(range.head + open.length),
      range: _state.EditorSelection.cursor(range.head + open.length)
    };
    return {
      range: dont = range
    };
  });
  return dont ? null : state.update(changes, {
    scrollIntoView: true,
    userEvent: "input.type"
  });
}

function handleClose(state, _open, close) {
  let dont = null,
      moved = state.selection.ranges.map(range => {
    if (range.empty && nextChar(state.doc, range.head) == close) return _state.EditorSelection.cursor(range.head + close.length);
    return dont = range;
  });
  return dont ? null : state.update({
    selection: _state.EditorSelection.create(moved, state.selection.mainIndex),
    scrollIntoView: true,
    effects: state.selection.ranges.map(({
      from
    }) => skipBracketEffect.of(from))
  });
} // Handles cases where the open and close token are the same, and
// possibly triple quotes (as in `"""abc"""`-style quoting).


function handleSame(state, token, allowTriple) {
  let dont = null,
      changes = state.changeByRange(range => {
    if (!range.empty) return {
      changes: [{
        insert: token,
        from: range.from
      }, {
        insert: token,
        from: range.to
      }],
      effects: closeBracketEffect.of(range.to + token.length),
      range: _state.EditorSelection.range(range.anchor + token.length, range.head + token.length)
    };
    let pos = range.head,
        next = nextChar(state.doc, pos);

    if (next == token) {
      if (nodeStart(state, pos)) {
        return {
          changes: {
            insert: token + token,
            from: pos
          },
          effects: closeBracketEffect.of(pos + token.length),
          range: _state.EditorSelection.cursor(pos + token.length)
        };
      } else if (closedBracketAt(state, pos)) {
        let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
        return {
          range: _state.EditorSelection.cursor(pos + token.length * (isTriple ? 3 : 1)),
          effects: skipBracketEffect.of(pos)
        };
      }
    } else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token && nodeStart(state, pos - 2 * token.length)) {
      return {
        changes: {
          insert: token + token + token + token,
          from: pos
        },
        effects: closeBracketEffect.of(pos + token.length),
        range: _state.EditorSelection.cursor(pos + token.length)
      };
    } else if (state.charCategorizer(pos)(next) != _state.CharCategory.Word) {
      let prev = state.sliceDoc(pos - 1, pos);
      if (prev != token && state.charCategorizer(pos)(prev) != _state.CharCategory.Word && !probablyInString(state, pos, token)) return {
        changes: {
          insert: token + token,
          from: pos
        },
        effects: closeBracketEffect.of(pos + token.length),
        range: _state.EditorSelection.cursor(pos + token.length)
      };
    }

    return {
      range: dont = range
    };
  });
  return dont ? null : state.update(changes, {
    scrollIntoView: true,
    userEvent: "input.type"
  });
}

function nodeStart(state, pos) {
  let tree = (0, _language.syntaxTree)(state).resolveInner(pos + 1);
  return tree.parent && tree.from == pos;
}

function probablyInString(state, pos, quoteToken) {
  let node = (0, _language.syntaxTree)(state).resolveInner(pos, -1);

  for (let i = 0; i < 5; i++) {
    if (state.sliceDoc(node.from, node.from + quoteToken.length) == quoteToken) {
      let first = node.firstChild;

      while (first && first.from == node.from && first.to - first.from > quoteToken.length) {
        if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken) return false;
        first = first.firstChild;
      }

      return true;
    }

    let parent = node.to == pos && node.parent;
    if (!parent) break;
    node = parent;
  }

  return false;
}
/**
Returns an extension that enables autocompletion.
*/


function autocompletion(config = {}) {
  return [completionState, completionConfig.of(config), completionPlugin, completionKeymapExt, baseTheme];
}
/**
Basic keybindings for autocompletion.

 - Ctrl-Space: [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)
 - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)
 - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`
 - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`
 - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
 - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
 - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)
*/


const completionKeymap = [{
  key: "Ctrl-Space",
  run: startCompletion
}, {
  key: "Escape",
  run: closeCompletion
}, {
  key: "ArrowDown",
  run: /*@__PURE__*/moveCompletionSelection(true)
}, {
  key: "ArrowUp",
  run: /*@__PURE__*/moveCompletionSelection(false)
}, {
  key: "PageDown",
  run: /*@__PURE__*/moveCompletionSelection(true, "page")
}, {
  key: "PageUp",
  run: /*@__PURE__*/moveCompletionSelection(false, "page")
}, {
  key: "Enter",
  run: acceptCompletion
}];
exports.completionKeymap = completionKeymap;

const completionKeymapExt = /*@__PURE__*/_state.Prec.highest( /*@__PURE__*/_view.keymap.computeN([completionConfig], state => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));
/**
Get the current completion status. When completions are available,
this will return `"active"`. When completions are pending (in the
process of being queried), this returns `"pending"`. Otherwise, it
returns `null`.
*/


function completionStatus(state) {
  let cState = state.field(completionState, false);
  return cState && cState.active.some(a => a.state == 1
  /* Pending */
  ) ? "pending" : cState && cState.active.some(a => a.state != 0
  /* Inactive */
  ) ? "active" : null;
}

const completionArrayCache = /*@__PURE__*/new WeakMap();
/**
Returns the available completions as an array.
*/

function currentCompletions(state) {
  var _a;

  let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;
  if (!open) return [];
  let completions = completionArrayCache.get(open.options);
  if (!completions) completionArrayCache.set(open.options, completions = open.options.map(o => o.completion));
  return completions;
}
/**
Return the currently selected completion, if any.
*/


function selectedCompletion(state) {
  var _a;

  let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;
  return open && open.selected >= 0 ? open.options[open.selected].completion : null;
}
/**
Returns the currently selected position in the active completion
list, or null if no completions are active.
*/


function selectedCompletionIndex(state) {
  var _a;

  let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;
  return open && open.selected >= 0 ? open.selected : null;
}
/**
Create an effect that can be attached to a transaction to change
the currently selected completion.
*/


function setSelectedCompletion(index) {
  return setSelectedEffect.of(index);
}
},{"@codemirror/state":"s5u9","@codemirror/view":"q9gB","@codemirror/language":"Hm1j"}],"Q7xo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.emacsStyleKeymap = exports.deleteTrailingWhitespace = exports.deleteToLineStart = exports.deleteToLineEnd = exports.deleteLine = exports.deleteGroupForward = exports.deleteGroupBackward = exports.deleteCharForward = exports.deleteCharBackward = exports.defaultKeymap = exports.cursorSyntaxRight = exports.cursorSyntaxLeft = exports.cursorSubwordForward = exports.cursorSubwordBackward = exports.cursorPageUp = exports.cursorPageDown = exports.cursorMatchingBracket = exports.cursorLineUp = exports.cursorLineStart = exports.cursorLineEnd = exports.cursorLineDown = exports.cursorLineBoundaryRight = exports.cursorLineBoundaryLeft = exports.cursorLineBoundaryForward = exports.cursorLineBoundaryBackward = exports.cursorGroupRight = exports.cursorGroupLeft = exports.cursorGroupForward = exports.cursorGroupBackward = exports.cursorDocStart = exports.cursorDocEnd = exports.cursorCharRight = exports.cursorCharLeft = exports.cursorCharForward = exports.cursorCharBackward = exports.copyLineUp = exports.copyLineDown = exports.blockUncomment = exports.blockComment = void 0;
exports.history = history;
exports.undoSelection = exports.undoDepth = exports.undo = exports.transposeChars = exports.toggleLineComment = exports.toggleComment = exports.toggleBlockCommentByLine = exports.toggleBlockComment = exports.standardKeymap = exports.splitLine = exports.simplifySelection = exports.selectSyntaxRight = exports.selectSyntaxLeft = exports.selectSubwordForward = exports.selectSubwordBackward = exports.selectParentSyntax = exports.selectPageUp = exports.selectPageDown = exports.selectMatchingBracket = exports.selectLineUp = exports.selectLineStart = exports.selectLineEnd = exports.selectLineDown = exports.selectLineBoundaryRight = exports.selectLineBoundaryLeft = exports.selectLineBoundaryForward = exports.selectLineBoundaryBackward = exports.selectLine = exports.selectGroupRight = exports.selectGroupLeft = exports.selectGroupForward = exports.selectGroupBackward = exports.selectDocStart = exports.selectDocEnd = exports.selectCharRight = exports.selectCharLeft = exports.selectCharForward = exports.selectCharBackward = exports.selectAll = exports.redoSelection = exports.redoDepth = exports.redo = exports.moveLineUp = exports.moveLineDown = exports.lineUncomment = exports.lineComment = exports.isolateHistory = exports.invertedEffects = exports.insertTab = exports.insertNewlineAndIndent = exports.insertNewline = exports.insertBlankLine = exports.indentWithTab = exports.indentSelection = exports.indentMore = exports.indentLess = exports.historyKeymap = exports.historyField = void 0;

var _state = require("@codemirror/state");

var _view = require("@codemirror/view");

var _language = require("@codemirror/language");

var _common = require("@lezer/common");

/**
Comment or uncomment the current selection. Will use line comments
if available, otherwise falling back to block comments.
*/
const toggleComment = target => {
  let config = getConfig(target.state);
  return config.line ? toggleLineComment(target) : config.block ? toggleBlockCommentByLine(target) : false;
};

exports.toggleComment = toggleComment;

function command(f, option) {
  return ({
    state,
    dispatch
  }) => {
    if (state.readOnly) return false;
    let tr = f(option, state);
    if (!tr) return false;
    dispatch(state.update(tr));
    return true;
  };
}
/**
Comment or uncomment the current selection using line comments.
The line comment syntax is taken from the
[`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
*/


const toggleLineComment = /*@__PURE__*/command(changeLineComment, 0
/* Toggle */
);
/**
Comment the current selection using line comments.
*/

exports.toggleLineComment = toggleLineComment;
const lineComment = /*@__PURE__*/command(changeLineComment, 1
/* Comment */
);
/**
Uncomment the current selection using line comments.
*/

exports.lineComment = lineComment;
const lineUncomment = /*@__PURE__*/command(changeLineComment, 2
/* Uncomment */
);
/**
Comment or uncomment the current selection using block comments.
The block comment syntax is taken from the
[`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
*/

exports.lineUncomment = lineUncomment;
const toggleBlockComment = /*@__PURE__*/command(changeBlockComment, 0
/* Toggle */
);
/**
Comment the current selection using block comments.
*/

exports.toggleBlockComment = toggleBlockComment;
const blockComment = /*@__PURE__*/command(changeBlockComment, 1
/* Comment */
);
/**
Uncomment the current selection using block comments.
*/

exports.blockComment = blockComment;
const blockUncomment = /*@__PURE__*/command(changeBlockComment, 2
/* Uncomment */
);
/**
Comment or uncomment the lines around the current selection using
block comments.
*/

exports.blockUncomment = blockUncomment;
const toggleBlockCommentByLine = /*@__PURE__*/command((o, s) => changeBlockComment(o, s, selectedLineRanges(s)), 0
/* Toggle */
);
exports.toggleBlockCommentByLine = toggleBlockCommentByLine;

function getConfig(state, pos = state.selection.main.head) {
  let data = state.languageDataAt("commentTokens", pos);
  return data.length ? data[0] : {};
}

const SearchMargin = 50;
/**
Determines if the given range is block-commented in the given
state.
*/

function findBlockComment(state, {
  open,
  close
}, from, to) {
  let textBefore = state.sliceDoc(from - SearchMargin, from);
  let textAfter = state.sliceDoc(to, to + SearchMargin);
  let spaceBefore = /\s*$/.exec(textBefore)[0].length,
      spaceAfter = /^\s*/.exec(textAfter)[0].length;
  let beforeOff = textBefore.length - spaceBefore;

  if (textBefore.slice(beforeOff - open.length, beforeOff) == open && textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
    return {
      open: {
        pos: from - spaceBefore,
        margin: spaceBefore && 1
      },
      close: {
        pos: to + spaceAfter,
        margin: spaceAfter && 1
      }
    };
  }

  let startText, endText;

  if (to - from <= 2 * SearchMargin) {
    startText = endText = state.sliceDoc(from, to);
  } else {
    startText = state.sliceDoc(from, from + SearchMargin);
    endText = state.sliceDoc(to - SearchMargin, to);
  }

  let startSpace = /^\s*/.exec(startText)[0].length,
      endSpace = /\s*$/.exec(endText)[0].length;
  let endOff = endText.length - endSpace - close.length;

  if (startText.slice(startSpace, startSpace + open.length) == open && endText.slice(endOff, endOff + close.length) == close) {
    return {
      open: {
        pos: from + startSpace + open.length,
        margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0
      },
      close: {
        pos: to - endSpace - close.length,
        margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0
      }
    };
  }

  return null;
}

function selectedLineRanges(state) {
  let ranges = [];

  for (let r of state.selection.ranges) {
    let fromLine = state.doc.lineAt(r.from);
    let toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);
    let last = ranges.length - 1;
    if (last >= 0 && ranges[last].to > fromLine.from) ranges[last].to = toLine.to;else ranges.push({
      from: fromLine.from,
      to: toLine.to
    });
  }

  return ranges;
} // Performs toggle, comment and uncomment of block comments in
// languages that support them.


function changeBlockComment(option, state, ranges = state.selection.ranges) {
  let tokens = ranges.map(r => getConfig(state, r.from).block);
  if (!tokens.every(c => c)) return null;
  let comments = ranges.map((r, i) => findBlockComment(state, tokens[i], r.from, r.to));

  if (option != 2
  /* Uncomment */
  && !comments.every(c => c)) {
    return {
      changes: state.changes(ranges.map((range, i) => {
        if (comments[i]) return [];
        return [{
          from: range.from,
          insert: tokens[i].open + " "
        }, {
          from: range.to,
          insert: " " + tokens[i].close
        }];
      }))
    };
  } else if (option != 1
  /* Comment */
  && comments.some(c => c)) {
    let changes = [];

    for (let i = 0, comment; i < comments.length; i++) if (comment = comments[i]) {
      let token = tokens[i],
          {
        open,
        close
      } = comment;
      changes.push({
        from: open.pos - token.open.length,
        to: open.pos + open.margin
      }, {
        from: close.pos - close.margin,
        to: close.pos + token.close.length
      });
    }

    return {
      changes
    };
  }

  return null;
} // Performs toggle, comment and uncomment of line comments.


function changeLineComment(option, state, ranges = state.selection.ranges) {
  let lines = [];
  let prevLine = -1;

  for (let {
    from,
    to
  } of ranges) {
    let startI = lines.length,
        minIndent = 1e9;

    for (let pos = from; pos <= to;) {
      let line = state.doc.lineAt(pos);

      if (line.from > prevLine && (from == to || to > line.from)) {
        prevLine = line.from;
        let token = getConfig(state, pos).line;
        if (!token) continue;
        let indent = /^\s*/.exec(line.text)[0].length;
        let empty = indent == line.length;
        let comment = line.text.slice(indent, indent + token.length) == token ? indent : -1;
        if (indent < line.text.length && indent < minIndent) minIndent = indent;
        lines.push({
          line,
          comment,
          token,
          indent,
          empty,
          single: false
        });
      }

      pos = line.to + 1;
    }

    if (minIndent < 1e9) for (let i = startI; i < lines.length; i++) if (lines[i].indent < lines[i].line.text.length) lines[i].indent = minIndent;
    if (lines.length == startI + 1) lines[startI].single = true;
  }

  if (option != 2
  /* Uncomment */
  && lines.some(l => l.comment < 0 && (!l.empty || l.single))) {
    let changes = [];

    for (let {
      line,
      token,
      indent,
      empty,
      single
    } of lines) if (single || !empty) changes.push({
      from: line.from + indent,
      insert: token + " "
    });

    let changeSet = state.changes(changes);
    return {
      changes: changeSet,
      selection: state.selection.map(changeSet, 1)
    };
  } else if (option != 1
  /* Comment */
  && lines.some(l => l.comment >= 0)) {
    let changes = [];

    for (let {
      line,
      comment,
      token
    } of lines) if (comment >= 0) {
      let from = line.from + comment,
          to = from + token.length;
      if (line.text[to - line.from] == " ") to++;
      changes.push({
        from,
        to
      });
    }

    return {
      changes
    };
  }

  return null;
}

const fromHistory = /*@__PURE__*/_state.Annotation.define();
/**
Transaction annotation that will prevent that transaction from
being combined with other transactions in the undo history. Given
`"before"`, it'll prevent merging with previous transactions. With
`"after"`, subsequent transactions won't be combined with this
one. With `"full"`, the transaction is isolated on both sides.
*/


const isolateHistory = /*@__PURE__*/_state.Annotation.define();
/**
This facet provides a way to register functions that, given a
transaction, provide a set of effects that the history should
store when inverting the transaction. This can be used to
integrate some kinds of effects in the history, so that they can
be undone (and redone again).
*/


exports.isolateHistory = isolateHistory;

const invertedEffects = /*@__PURE__*/_state.Facet.define();

exports.invertedEffects = invertedEffects;

const historyConfig = /*@__PURE__*/_state.Facet.define({
  combine(configs) {
    return (0, _state.combineConfig)(configs, {
      minDepth: 100,
      newGroupDelay: 500
    }, {
      minDepth: Math.max,
      newGroupDelay: Math.min
    });
  }

});

function changeEnd(changes) {
  let end = 0;
  changes.iterChangedRanges((_, to) => end = to);
  return end;
}

const historyField_ = /*@__PURE__*/_state.StateField.define({
  create() {
    return HistoryState.empty;
  },

  update(state, tr) {
    let config = tr.state.facet(historyConfig);
    let fromHist = tr.annotation(fromHistory);

    if (fromHist) {
      let selection = tr.docChanged ? _state.EditorSelection.single(changeEnd(tr.changes)) : undefined;
      let item = HistEvent.fromTransaction(tr, selection),
          from = fromHist.side;
      let other = from == 0
      /* Done */
      ? state.undone : state.done;
      if (item) other = updateBranch(other, other.length, config.minDepth, item);else other = addSelection(other, tr.startState.selection);
      return new HistoryState(from == 0
      /* Done */
      ? fromHist.rest : other, from == 0
      /* Done */
      ? other : fromHist.rest);
    }

    let isolate = tr.annotation(isolateHistory);
    if (isolate == "full" || isolate == "before") state = state.isolate();
    if (tr.annotation(_state.Transaction.addToHistory) === false) return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
    let event = HistEvent.fromTransaction(tr);
    let time = tr.annotation(_state.Transaction.time),
        userEvent = tr.annotation(_state.Transaction.userEvent);
    if (event) state = state.addChanges(event, time, userEvent, config.newGroupDelay, config.minDepth);else if (tr.selection) state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);
    if (isolate == "full" || isolate == "after") state = state.isolate();
    return state;
  },

  toJSON(value) {
    return {
      done: value.done.map(e => e.toJSON()),
      undone: value.undone.map(e => e.toJSON())
    };
  },

  fromJSON(json) {
    return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
  }

});
/**
Create a history extension with the given configuration.
*/


function history(config = {}) {
  return [historyField_, historyConfig.of(config), _view.EditorView.domEventHandlers({
    beforeinput(e, view) {
      let command = e.inputType == "historyUndo" ? undo : e.inputType == "historyRedo" ? redo : null;
      if (!command) return false;
      e.preventDefault();
      return command(view);
    }

  })];
}
/**
The state field used to store the history data. Should probably
only be used when you want to
[serialize](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) or
[deserialize](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) state objects in a way
that preserves history.
*/


const historyField = historyField_;
exports.historyField = historyField;

function cmd(side, selection) {
  return function ({
    state,
    dispatch
  }) {
    if (!selection && state.readOnly) return false;
    let historyState = state.field(historyField_, false);
    if (!historyState) return false;
    let tr = historyState.pop(side, state, selection);
    if (!tr) return false;
    dispatch(tr);
    return true;
  };
}
/**
Undo a single group of history events. Returns false if no group
was available.
*/


const undo = /*@__PURE__*/cmd(0
/* Done */
, false);
/**
Redo a group of history events. Returns false if no group was
available.
*/

exports.undo = undo;
const redo = /*@__PURE__*/cmd(1
/* Undone */
, false);
/**
Undo a change or selection change.
*/

exports.redo = redo;
const undoSelection = /*@__PURE__*/cmd(0
/* Done */
, true);
/**
Redo a change or selection change.
*/

exports.undoSelection = undoSelection;
const redoSelection = /*@__PURE__*/cmd(1
/* Undone */
, true);
exports.redoSelection = redoSelection;

function depth(side) {
  return function (state) {
    let histState = state.field(historyField_, false);
    if (!histState) return 0;
    let branch = side == 0
    /* Done */
    ? histState.done : histState.undone;
    return branch.length - (branch.length && !branch[0].changes ? 1 : 0);
  };
}
/**
The amount of undoable change events available in a given state.
*/


const undoDepth = /*@__PURE__*/depth(0
/* Done */
);
/**
The amount of redoable change events available in a given state.
*/

exports.undoDepth = undoDepth;
const redoDepth = /*@__PURE__*/depth(1
/* Undone */
); // History events store groups of changes or effects that need to be
// undone/redone together.

exports.redoDepth = redoDepth;

class HistEvent {
  constructor( // The changes in this event. Normal events hold at least one
  // change or effect. But it may be necessary to store selection
  // events before the first change, in which case a special type of
  // instance is created which doesn't hold any changes, with
  // changes == startSelection == undefined
  changes, // The effects associated with this event
  effects, // Accumulated mapping (from addToHistory==false) that should be
  // applied to events below this one.
  mapped, // The selection before this event
  startSelection, // Stores selection changes after this event, to be used for
  // selection undo/redo.
  selectionsAfter) {
    this.changes = changes;
    this.effects = effects;
    this.mapped = mapped;
    this.startSelection = startSelection;
    this.selectionsAfter = selectionsAfter;
  }

  setSelAfter(after) {
    return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
  }

  toJSON() {
    var _a, _b, _c;

    return {
      changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),
      mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
      startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
      selectionsAfter: this.selectionsAfter.map(s => s.toJSON())
    };
  }

  static fromJSON(json) {
    return new HistEvent(json.changes && _state.ChangeSet.fromJSON(json.changes), [], json.mapped && _state.ChangeDesc.fromJSON(json.mapped), json.startSelection && _state.EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(_state.EditorSelection.fromJSON));
  } // This does not check `addToHistory` and such, it assumes the
  // transaction needs to be converted to an item. Returns null when
  // there are no changes or effects in the transaction.


  static fromTransaction(tr, selection) {
    let effects = none;

    for (let invert of tr.startState.facet(invertedEffects)) {
      let result = invert(tr);
      if (result.length) effects = effects.concat(result);
    }

    if (!effects.length && tr.changes.empty) return null;
    return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, selection || tr.startState.selection, none);
  }

  static selection(selections) {
    return new HistEvent(undefined, none, undefined, undefined, selections);
  }

}

function updateBranch(branch, to, maxLen, newEvent) {
  let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
  let newBranch = branch.slice(start, to);
  newBranch.push(newEvent);
  return newBranch;
}

function isAdjacent(a, b) {
  let ranges = [],
      isAdjacent = false;
  a.iterChangedRanges((f, t) => ranges.push(f, t));
  b.iterChangedRanges((_f, _t, f, t) => {
    for (let i = 0; i < ranges.length;) {
      let from = ranges[i++],
          to = ranges[i++];
      if (t >= from && f <= to) isAdjacent = true;
    }
  });
  return isAdjacent;
}

function eqSelectionShape(a, b) {
  return a.ranges.length == b.ranges.length && a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;
}

function conc(a, b) {
  return !a.length ? b : !b.length ? a : a.concat(b);
}

const none = [];
const MaxSelectionsPerEvent = 200;

function addSelection(branch, selection) {
  if (!branch.length) {
    return [HistEvent.selection([selection])];
  } else {
    let lastEvent = branch[branch.length - 1];
    let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
    if (sels.length && sels[sels.length - 1].eq(selection)) return branch;
    sels.push(selection);
    return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
  }
} // Assumes the top item has one or more selectionAfter values


function popSelection(branch) {
  let last = branch[branch.length - 1];
  let newBranch = branch.slice();
  newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
  return newBranch;
} // Add a mapping to the top event in the given branch. If this maps
// away all the changes and effects in that item, drop it and
// propagate the mapping to the next item.


function addMappingToBranch(branch, mapping) {
  if (!branch.length) return branch;
  let length = branch.length,
      selections = none;

  while (length) {
    let event = mapEvent(branch[length - 1], mapping, selections);

    if (event.changes && !event.changes.empty || event.effects.length) {
      // Event survived mapping
      let result = branch.slice(0, length);
      result[length - 1] = event;
      return result;
    } else {
      // Drop this event, since there's no changes or effects left
      mapping = event.mapped;
      length--;
      selections = event.selectionsAfter;
    }
  }

  return selections.length ? [HistEvent.selection(selections)] : none;
}

function mapEvent(event, mapping, extraSelections) {
  let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(s => s.map(mapping)) : none, extraSelections); // Change-less events don't store mappings (they are always the last event in a branch)

  if (!event.changes) return HistEvent.selection(selections);
  let mappedChanges = event.changes.map(mapping),
      before = mapping.mapDesc(event.changes, true);
  let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
  return new HistEvent(mappedChanges, _state.StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
}

const joinableUserEvent = /^(input\.type|delete)($|\.)/;

class HistoryState {
  constructor(done, undone, prevTime = 0, prevUserEvent = undefined) {
    this.done = done;
    this.undone = undone;
    this.prevTime = prevTime;
    this.prevUserEvent = prevUserEvent;
  }

  isolate() {
    return this.prevTime ? new HistoryState(this.done, this.undone) : this;
  }

  addChanges(event, time, userEvent, newGroupDelay, maxLen) {
    let done = this.done,
        lastEvent = done[done.length - 1];

    if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes && (!userEvent || joinableUserEvent.test(userEvent)) && (!lastEvent.selectionsAfter.length && time - this.prevTime < newGroupDelay && isAdjacent(lastEvent.changes, event.changes) || // For compose (but not compose.start) events, always join with previous event
    userEvent == "input.type.compose")) {
      done = updateBranch(done, done.length - 1, maxLen, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none));
    } else {
      done = updateBranch(done, done.length, maxLen, event);
    }

    return new HistoryState(done, none, time, userEvent);
  }

  addSelection(selection, time, userEvent, newGroupDelay) {
    let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none;
    if (last.length > 0 && time - this.prevTime < newGroupDelay && userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) && eqSelectionShape(last[last.length - 1], selection)) return this;
    return new HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
  }

  addMapping(mapping) {
    return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
  }

  pop(side, state, selection) {
    let branch = side == 0
    /* Done */
    ? this.done : this.undone;
    if (branch.length == 0) return null;
    let event = branch[branch.length - 1];

    if (selection && event.selectionsAfter.length) {
      return state.update({
        selection: event.selectionsAfter[event.selectionsAfter.length - 1],
        annotations: fromHistory.of({
          side,
          rest: popSelection(branch)
        }),
        userEvent: side == 0
        /* Done */
        ? "select.undo" : "select.redo",
        scrollIntoView: true
      });
    } else if (!event.changes) {
      return null;
    } else {
      let rest = branch.length == 1 ? none : branch.slice(0, branch.length - 1);
      if (event.mapped) rest = addMappingToBranch(rest, event.mapped);
      return state.update({
        changes: event.changes,
        selection: event.startSelection,
        effects: event.effects,
        annotations: fromHistory.of({
          side,
          rest
        }),
        filter: false,
        userEvent: side == 0
        /* Done */
        ? "undo" : "redo",
        scrollIntoView: true
      });
    }
  }

}

HistoryState.empty = /*@__PURE__*/new HistoryState(none, none);
/**
Default key bindings for the undo history.

- Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#commands.undo).
- Mod-y (Mod-Shift-z on macOS) + Ctrl-Shift-z on Linux: [`redo`](https://codemirror.net/6/docs/ref/#commands.redo).
- Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#commands.undoSelection).
- Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#commands.redoSelection).
*/

const historyKeymap = [{
  key: "Mod-z",
  run: undo,
  preventDefault: true
}, {
  key: "Mod-y",
  mac: "Mod-Shift-z",
  run: redo,
  preventDefault: true
}, {
  linux: "Ctrl-Shift-z",
  run: redo,
  preventDefault: true
}, {
  key: "Mod-u",
  run: undoSelection,
  preventDefault: true
}, {
  key: "Alt-u",
  mac: "Mod-Shift-u",
  run: redoSelection,
  preventDefault: true
}];
exports.historyKeymap = historyKeymap;

function updateSel(sel, by) {
  return _state.EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
}

function setSel(state, selection) {
  return state.update({
    selection,
    scrollIntoView: true,
    userEvent: "select"
  });
}

function moveSel({
  state,
  dispatch
}, how) {
  let selection = updateSel(state.selection, how);
  if (selection.eq(state.selection)) return false;
  dispatch(setSel(state, selection));
  return true;
}

function rangeEnd(range, forward) {
  return _state.EditorSelection.cursor(forward ? range.to : range.from);
}

function cursorByChar(view, forward) {
  return moveSel(view, range => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
}

function ltrAtCursor(view) {
  return view.textDirectionAt(view.state.selection.main.head) == _view.Direction.LTR;
}
/**
Move the selection one character to the left (which is backward in
left-to-right text, forward in right-to-left text).
*/


const cursorCharLeft = view => cursorByChar(view, !ltrAtCursor(view));
/**
Move the selection one character to the right.
*/


exports.cursorCharLeft = cursorCharLeft;

const cursorCharRight = view => cursorByChar(view, ltrAtCursor(view));
/**
Move the selection one character forward.
*/


exports.cursorCharRight = cursorCharRight;

const cursorCharForward = view => cursorByChar(view, true);
/**
Move the selection one character backward.
*/


exports.cursorCharForward = cursorCharForward;

const cursorCharBackward = view => cursorByChar(view, false);

exports.cursorCharBackward = cursorCharBackward;

function cursorByGroup(view, forward) {
  return moveSel(view, range => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
}
/**
Move the selection to the left across one group of word or
non-word (but also non-space) characters.
*/


const cursorGroupLeft = view => cursorByGroup(view, !ltrAtCursor(view));
/**
Move the selection one group to the right.
*/


exports.cursorGroupLeft = cursorGroupLeft;

const cursorGroupRight = view => cursorByGroup(view, ltrAtCursor(view));
/**
Move the selection one group forward.
*/


exports.cursorGroupRight = cursorGroupRight;

const cursorGroupForward = view => cursorByGroup(view, true);
/**
Move the selection one group backward.
*/


exports.cursorGroupForward = cursorGroupForward;

const cursorGroupBackward = view => cursorByGroup(view, false);

exports.cursorGroupBackward = cursorGroupBackward;

function moveBySubword(view, range, forward) {
  let categorize = view.state.charCategorizer(range.from);
  return view.moveByChar(range, forward, start => {
    let cat = _state.CharCategory.Space,
        pos = range.from;
    let done = false,
        sawUpper = false,
        sawLower = false;

    let step = next => {
      if (done) return false;
      pos += forward ? next.length : -next.length;
      let nextCat = categorize(next),
          ahead;
      if (cat == _state.CharCategory.Space) cat = nextCat;
      if (cat != nextCat) return false;

      if (cat == _state.CharCategory.Word) {
        if (next.toLowerCase() == next) {
          if (!forward && sawUpper) return false;
          sawLower = true;
        } else if (sawLower) {
          if (forward) return false;
          done = true;
        } else {
          if (sawUpper && forward && categorize(ahead = view.state.sliceDoc(pos, pos + 1)) == _state.CharCategory.Word && ahead.toLowerCase() == ahead) return false;
          sawUpper = true;
        }
      }

      return true;
    };

    step(start);
    return step;
  });
}

function cursorBySubword(view, forward) {
  return moveSel(view, range => range.empty ? moveBySubword(view, range, forward) : rangeEnd(range, forward));
}
/**
Move the selection one group or camel-case subword forward.
*/


const cursorSubwordForward = view => cursorBySubword(view, true);
/**
Move the selection one group or camel-case subword backward.
*/


exports.cursorSubwordForward = cursorSubwordForward;

const cursorSubwordBackward = view => cursorBySubword(view, false);

exports.cursorSubwordBackward = cursorSubwordBackward;

function interestingNode(state, node, bracketProp) {
  if (node.type.prop(bracketProp)) return true;
  let len = node.to - node.from;
  return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
}

function moveBySyntax(state, start, forward) {
  let pos = (0, _language.syntaxTree)(state).resolveInner(start.head);
  let bracketProp = forward ? _common.NodeProp.closedBy : _common.NodeProp.openedBy; // Scan forward through child nodes to see if there's an interesting
  // node ahead.

  for (let at = start.head;;) {
    let next = forward ? pos.childAfter(at) : pos.childBefore(at);
    if (!next) break;
    if (interestingNode(state, next, bracketProp)) pos = next;else at = forward ? next.to : next.from;
  }

  let bracket = pos.type.prop(bracketProp),
      match,
      newPos;
  if (bracket && (match = forward ? (0, _language.matchBrackets)(state, pos.from, 1) : (0, _language.matchBrackets)(state, pos.to, -1)) && match.matched) newPos = forward ? match.end.to : match.end.from;else newPos = forward ? pos.to : pos.from;
  return _state.EditorSelection.cursor(newPos, forward ? -1 : 1);
}
/**
Move the cursor over the next syntactic element to the left.
*/


const cursorSyntaxLeft = view => moveSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
/**
Move the cursor over the next syntactic element to the right.
*/


exports.cursorSyntaxLeft = cursorSyntaxLeft;

const cursorSyntaxRight = view => moveSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));

exports.cursorSyntaxRight = cursorSyntaxRight;

function cursorByLine(view, forward) {
  return moveSel(view, range => {
    if (!range.empty) return rangeEnd(range, forward);
    let moved = view.moveVertically(range, forward);
    return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
  });
}
/**
Move the selection one line up.
*/


const cursorLineUp = view => cursorByLine(view, false);
/**
Move the selection one line down.
*/


exports.cursorLineUp = cursorLineUp;

const cursorLineDown = view => cursorByLine(view, true);

exports.cursorLineDown = cursorLineDown;

function pageHeight(view) {
  return Math.max(view.defaultLineHeight, Math.min(view.dom.clientHeight, innerHeight) - 5);
}

function cursorByPage(view, forward) {
  let {
    state
  } = view,
      selection = updateSel(state.selection, range => {
    return range.empty ? view.moveVertically(range, forward, pageHeight(view)) : rangeEnd(range, forward);
  });
  if (selection.eq(state.selection)) return false;
  let startPos = view.coordsAtPos(state.selection.main.head);
  let scrollRect = view.scrollDOM.getBoundingClientRect();
  let effect;
  if (startPos && startPos.top > scrollRect.top && startPos.bottom < scrollRect.bottom && startPos.top - scrollRect.top <= view.scrollDOM.scrollHeight - view.scrollDOM.scrollTop - view.scrollDOM.clientHeight) effect = _view.EditorView.scrollIntoView(selection.main.head, {
    y: "start",
    yMargin: startPos.top - scrollRect.top
  });
  view.dispatch(setSel(state, selection), {
    effects: effect
  });
  return true;
}
/**
Move the selection one page up.
*/


const cursorPageUp = view => cursorByPage(view, false);
/**
Move the selection one page down.
*/


exports.cursorPageUp = cursorPageUp;

const cursorPageDown = view => cursorByPage(view, true);

exports.cursorPageDown = cursorPageDown;

function moveByLineBoundary(view, start, forward) {
  let line = view.lineBlockAt(start.head),
      moved = view.moveToLineBoundary(start, forward);
  if (moved.head == start.head && moved.head != (forward ? line.to : line.from)) moved = view.moveToLineBoundary(start, forward, false);

  if (!forward && moved.head == line.from && line.length) {
    let space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
    if (space && start.head != line.from + space) moved = _state.EditorSelection.cursor(line.from + space);
  }

  return moved;
}
/**
Move the selection to the next line wrap point, or to the end of
the line if there isn't one left on this line.
*/


const cursorLineBoundaryForward = view => moveSel(view, range => moveByLineBoundary(view, range, true));
/**
Move the selection to previous line wrap point, or failing that to
the start of the line. If the line is indented, and the cursor
isn't already at the end of the indentation, this will move to the
end of the indentation instead of the start of the line.
*/


exports.cursorLineBoundaryForward = cursorLineBoundaryForward;

const cursorLineBoundaryBackward = view => moveSel(view, range => moveByLineBoundary(view, range, false));
/**
Move the selection one line wrap point to the left.
*/


exports.cursorLineBoundaryBackward = cursorLineBoundaryBackward;

const cursorLineBoundaryLeft = view => moveSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));
/**
Move the selection one line wrap point to the right.
*/


exports.cursorLineBoundaryLeft = cursorLineBoundaryLeft;

const cursorLineBoundaryRight = view => moveSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));
/**
Move the selection to the start of the line.
*/


exports.cursorLineBoundaryRight = cursorLineBoundaryRight;

const cursorLineStart = view => moveSel(view, range => _state.EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));
/**
Move the selection to the end of the line.
*/


exports.cursorLineStart = cursorLineStart;

const cursorLineEnd = view => moveSel(view, range => _state.EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));

exports.cursorLineEnd = cursorLineEnd;

function toMatchingBracket(state, dispatch, extend) {
  let found = false,
      selection = updateSel(state.selection, range => {
    let matching = (0, _language.matchBrackets)(state, range.head, -1) || (0, _language.matchBrackets)(state, range.head, 1) || range.head > 0 && (0, _language.matchBrackets)(state, range.head - 1, 1) || range.head < state.doc.length && (0, _language.matchBrackets)(state, range.head + 1, -1);
    if (!matching || !matching.end) return range;
    found = true;
    let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
    return extend ? _state.EditorSelection.range(range.anchor, head) : _state.EditorSelection.cursor(head);
  });
  if (!found) return false;
  dispatch(setSel(state, selection));
  return true;
}
/**
Move the selection to the bracket matching the one it is currently
on, if any.
*/


const cursorMatchingBracket = ({
  state,
  dispatch
}) => toMatchingBracket(state, dispatch, false);
/**
Extend the selection to the bracket matching the one the selection
head is currently on, if any.
*/


exports.cursorMatchingBracket = cursorMatchingBracket;

const selectMatchingBracket = ({
  state,
  dispatch
}) => toMatchingBracket(state, dispatch, true);

exports.selectMatchingBracket = selectMatchingBracket;

function extendSel(view, how) {
  let selection = updateSel(view.state.selection, range => {
    let head = how(range);
    return _state.EditorSelection.range(range.anchor, head.head, head.goalColumn);
  });
  if (selection.eq(view.state.selection)) return false;
  view.dispatch(setSel(view.state, selection));
  return true;
}

function selectByChar(view, forward) {
  return extendSel(view, range => view.moveByChar(range, forward));
}
/**
Move the selection head one character to the left, while leaving
the anchor in place.
*/


const selectCharLeft = view => selectByChar(view, !ltrAtCursor(view));
/**
Move the selection head one character to the right.
*/


exports.selectCharLeft = selectCharLeft;

const selectCharRight = view => selectByChar(view, ltrAtCursor(view));
/**
Move the selection head one character forward.
*/


exports.selectCharRight = selectCharRight;

const selectCharForward = view => selectByChar(view, true);
/**
Move the selection head one character backward.
*/


exports.selectCharForward = selectCharForward;

const selectCharBackward = view => selectByChar(view, false);

exports.selectCharBackward = selectCharBackward;

function selectByGroup(view, forward) {
  return extendSel(view, range => view.moveByGroup(range, forward));
}
/**
Move the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to
the left.
*/


const selectGroupLeft = view => selectByGroup(view, !ltrAtCursor(view));
/**
Move the selection head one group to the right.
*/


exports.selectGroupLeft = selectGroupLeft;

const selectGroupRight = view => selectByGroup(view, ltrAtCursor(view));
/**
Move the selection head one group forward.
*/


exports.selectGroupRight = selectGroupRight;

const selectGroupForward = view => selectByGroup(view, true);
/**
Move the selection head one group backward.
*/


exports.selectGroupForward = selectGroupForward;

const selectGroupBackward = view => selectByGroup(view, false);

exports.selectGroupBackward = selectGroupBackward;

function selectBySubword(view, forward) {
  return extendSel(view, range => moveBySubword(view, range, forward));
}
/**
Move the selection head one group or camel-case subword forward.
*/


const selectSubwordForward = view => selectBySubword(view, true);
/**
Move the selection head one group or subword backward.
*/


exports.selectSubwordForward = selectSubwordForward;

const selectSubwordBackward = view => selectBySubword(view, false);
/**
Move the selection head over the next syntactic element to the left.
*/


exports.selectSubwordBackward = selectSubwordBackward;

const selectSyntaxLeft = view => extendSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
/**
Move the selection head over the next syntactic element to the right.
*/


exports.selectSyntaxLeft = selectSyntaxLeft;

const selectSyntaxRight = view => extendSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));

exports.selectSyntaxRight = selectSyntaxRight;

function selectByLine(view, forward) {
  return extendSel(view, range => view.moveVertically(range, forward));
}
/**
Move the selection head one line up.
*/


const selectLineUp = view => selectByLine(view, false);
/**
Move the selection head one line down.
*/


exports.selectLineUp = selectLineUp;

const selectLineDown = view => selectByLine(view, true);

exports.selectLineDown = selectLineDown;

function selectByPage(view, forward) {
  return extendSel(view, range => view.moveVertically(range, forward, pageHeight(view)));
}
/**
Move the selection head one page up.
*/


const selectPageUp = view => selectByPage(view, false);
/**
Move the selection head one page down.
*/


exports.selectPageUp = selectPageUp;

const selectPageDown = view => selectByPage(view, true);
/**
Move the selection head to the next line boundary.
*/


exports.selectPageDown = selectPageDown;

const selectLineBoundaryForward = view => extendSel(view, range => moveByLineBoundary(view, range, true));
/**
Move the selection head to the previous line boundary.
*/


exports.selectLineBoundaryForward = selectLineBoundaryForward;

const selectLineBoundaryBackward = view => extendSel(view, range => moveByLineBoundary(view, range, false));
/**
Move the selection head one line boundary to the left.
*/


exports.selectLineBoundaryBackward = selectLineBoundaryBackward;

const selectLineBoundaryLeft = view => extendSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));
/**
Move the selection head one line boundary to the right.
*/


exports.selectLineBoundaryLeft = selectLineBoundaryLeft;

const selectLineBoundaryRight = view => extendSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));
/**
Move the selection head to the start of the line.
*/


exports.selectLineBoundaryRight = selectLineBoundaryRight;

const selectLineStart = view => extendSel(view, range => _state.EditorSelection.cursor(view.lineBlockAt(range.head).from));
/**
Move the selection head to the end of the line.
*/


exports.selectLineStart = selectLineStart;

const selectLineEnd = view => extendSel(view, range => _state.EditorSelection.cursor(view.lineBlockAt(range.head).to));
/**
Move the selection to the start of the document.
*/


exports.selectLineEnd = selectLineEnd;

const cursorDocStart = ({
  state,
  dispatch
}) => {
  dispatch(setSel(state, {
    anchor: 0
  }));
  return true;
};
/**
Move the selection to the end of the document.
*/


exports.cursorDocStart = cursorDocStart;

const cursorDocEnd = ({
  state,
  dispatch
}) => {
  dispatch(setSel(state, {
    anchor: state.doc.length
  }));
  return true;
};
/**
Move the selection head to the start of the document.
*/


exports.cursorDocEnd = cursorDocEnd;

const selectDocStart = ({
  state,
  dispatch
}) => {
  dispatch(setSel(state, {
    anchor: state.selection.main.anchor,
    head: 0
  }));
  return true;
};
/**
Move the selection head to the end of the document.
*/


exports.selectDocStart = selectDocStart;

const selectDocEnd = ({
  state,
  dispatch
}) => {
  dispatch(setSel(state, {
    anchor: state.selection.main.anchor,
    head: state.doc.length
  }));
  return true;
};
/**
Select the entire document.
*/


exports.selectDocEnd = selectDocEnd;

const selectAll = ({
  state,
  dispatch
}) => {
  dispatch(state.update({
    selection: {
      anchor: 0,
      head: state.doc.length
    },
    userEvent: "select"
  }));
  return true;
};
/**
Expand the selection to cover entire lines.
*/


exports.selectAll = selectAll;

const selectLine = ({
  state,
  dispatch
}) => {
  let ranges = selectedLineBlocks(state).map(({
    from,
    to
  }) => _state.EditorSelection.range(from, Math.min(to + 1, state.doc.length)));
  dispatch(state.update({
    selection: _state.EditorSelection.create(ranges),
    userEvent: "select"
  }));
  return true;
};
/**
Select the next syntactic construct that is larger than the
selection. Note that this will only work insofar as the language
[provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full
syntax tree.
*/


exports.selectLine = selectLine;

const selectParentSyntax = ({
  state,
  dispatch
}) => {
  let selection = updateSel(state.selection, range => {
    var _a;

    let context = (0, _language.syntaxTree)(state).resolveInner(range.head, 1);

    while (!(context.from < range.from && context.to >= range.to || context.to > range.to && context.from <= range.from || !((_a = context.parent) === null || _a === void 0 ? void 0 : _a.parent))) context = context.parent;

    return _state.EditorSelection.range(context.to, context.from);
  });
  dispatch(setSel(state, selection));
  return true;
};
/**
Simplify the current selection. When multiple ranges are selected,
reduce it to its main range. Otherwise, if the selection is
non-empty, convert it to a cursor selection.
*/


exports.selectParentSyntax = selectParentSyntax;

const simplifySelection = ({
  state,
  dispatch
}) => {
  let cur = state.selection,
      selection = null;
  if (cur.ranges.length > 1) selection = _state.EditorSelection.create([cur.main]);else if (!cur.main.empty) selection = _state.EditorSelection.create([_state.EditorSelection.cursor(cur.main.head)]);
  if (!selection) return false;
  dispatch(setSel(state, selection));
  return true;
};

exports.simplifySelection = simplifySelection;

function deleteBy({
  state,
  dispatch
}, by) {
  if (state.readOnly) return false;
  let event = "delete.selection";
  let changes = state.changeByRange(range => {
    let {
      from,
      to
    } = range;

    if (from == to) {
      let towards = by(from);
      if (towards < from) event = "delete.backward";else if (towards > from) event = "delete.forward";
      from = Math.min(from, towards);
      to = Math.max(to, towards);
    }

    return from == to ? {
      range
    } : {
      changes: {
        from,
        to
      },
      range: _state.EditorSelection.cursor(from)
    };
  });
  if (changes.changes.empty) return false;
  dispatch(state.update(changes, {
    scrollIntoView: true,
    userEvent: event,
    effects: event == "delete.selection" ? _view.EditorView.announce.of(state.phrase("Selection deleted")) : undefined
  }));
  return true;
}

function skipAtomic(target, pos, forward) {
  if (target instanceof _view.EditorView) for (let ranges of target.state.facet(_view.EditorView.atomicRanges).map(f => f(target))) ranges.between(pos, pos, (from, to) => {
    if (from < pos && to > pos) pos = forward ? to : from;
  });
  return pos;
}

const deleteByChar = (target, forward) => deleteBy(target, pos => {
  let {
    state
  } = target,
      line = state.doc.lineAt(pos),
      before,
      targetPos;

  if (!forward && pos > line.from && pos < line.from + 200 && !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
    if (before[before.length - 1] == "\t") return pos - 1;
    let col = (0, _state.countColumn)(before, state.tabSize),
        drop = col % (0, _language.getIndentUnit)(state) || (0, _language.getIndentUnit)(state);

    for (let i = 0; i < drop && before[before.length - 1 - i] == " "; i++) pos--;

    targetPos = pos;
  } else {
    targetPos = (0, _state.findClusterBreak)(line.text, pos - line.from, forward, forward) + line.from;
    if (targetPos == pos && line.number != (forward ? state.doc.lines : 1)) targetPos += forward ? 1 : -1;
  }

  return skipAtomic(target, targetPos, forward);
});
/**
Delete the selection, or, for cursor selections, the character
before the cursor.
*/


const deleteCharBackward = view => deleteByChar(view, false);
/**
Delete the selection or the character after the cursor.
*/


exports.deleteCharBackward = deleteCharBackward;

const deleteCharForward = view => deleteByChar(view, true);

exports.deleteCharForward = deleteCharForward;

const deleteByGroup = (target, forward) => deleteBy(target, start => {
  let pos = start,
      {
    state
  } = target,
      line = state.doc.lineAt(pos);
  let categorize = state.charCategorizer(pos);

  for (let cat = null;;) {
    if (pos == (forward ? line.to : line.from)) {
      if (pos == start && line.number != (forward ? state.doc.lines : 1)) pos += forward ? 1 : -1;
      break;
    }

    let next = (0, _state.findClusterBreak)(line.text, pos - line.from, forward) + line.from;
    let nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
    let nextCat = categorize(nextChar);
    if (cat != null && nextCat != cat) break;
    if (nextChar != " " || pos != start) cat = nextCat;
    pos = next;
  }

  return skipAtomic(target, pos, forward);
});
/**
Delete the selection or backward until the end of the next
[group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of
whitespace when they consist of a single space.
*/


const deleteGroupBackward = target => deleteByGroup(target, false);
/**
Delete the selection or forward until the end of the next group.
*/


exports.deleteGroupBackward = deleteGroupBackward;

const deleteGroupForward = target => deleteByGroup(target, true);
/**
Delete the selection, or, if it is a cursor selection, delete to
the end of the line. If the cursor is directly at the end of the
line, delete the line break after it.
*/


exports.deleteGroupForward = deleteGroupForward;

const deleteToLineEnd = view => deleteBy(view, pos => {
  let lineEnd = view.lineBlockAt(pos).to;
  return skipAtomic(view, pos < lineEnd ? lineEnd : Math.min(view.state.doc.length, pos + 1), true);
});
/**
Delete the selection, or, if it is a cursor selection, delete to
the start of the line. If the cursor is directly at the start of the
line, delete the line break before it.
*/


exports.deleteToLineEnd = deleteToLineEnd;

const deleteToLineStart = view => deleteBy(view, pos => {
  let lineStart = view.lineBlockAt(pos).from;
  return skipAtomic(view, pos > lineStart ? lineStart : Math.max(0, pos - 1), false);
});
/**
Delete all whitespace directly before a line end from the
document.
*/


exports.deleteToLineStart = deleteToLineStart;

const deleteTrailingWhitespace = ({
  state,
  dispatch
}) => {
  if (state.readOnly) return false;
  let changes = [];

  for (let pos = 0, prev = "", iter = state.doc.iter();;) {
    iter.next();

    if (iter.lineBreak || iter.done) {
      let trailing = prev.search(/\s+$/);
      if (trailing > -1) changes.push({
        from: pos - (prev.length - trailing),
        to: pos
      });
      if (iter.done) break;
      prev = "";
    } else {
      prev = iter.value;
    }

    pos += iter.value.length;
  }

  if (!changes.length) return false;
  dispatch(state.update({
    changes,
    userEvent: "delete"
  }));
  return true;
};
/**
Replace each selection range with a line break, leaving the cursor
on the line before the break.
*/


exports.deleteTrailingWhitespace = deleteTrailingWhitespace;

const splitLine = ({
  state,
  dispatch
}) => {
  if (state.readOnly) return false;
  let changes = state.changeByRange(range => {
    return {
      changes: {
        from: range.from,
        to: range.to,
        insert: _state.Text.of(["", ""])
      },
      range: _state.EditorSelection.cursor(range.from)
    };
  });
  dispatch(state.update(changes, {
    scrollIntoView: true,
    userEvent: "input"
  }));
  return true;
};
/**
Flip the characters before and after the cursor(s).
*/


exports.splitLine = splitLine;

const transposeChars = ({
  state,
  dispatch
}) => {
  if (state.readOnly) return false;
  let changes = state.changeByRange(range => {
    if (!range.empty || range.from == 0 || range.from == state.doc.length) return {
      range
    };
    let pos = range.from,
        line = state.doc.lineAt(pos);
    let from = pos == line.from ? pos - 1 : (0, _state.findClusterBreak)(line.text, pos - line.from, false) + line.from;
    let to = pos == line.to ? pos + 1 : (0, _state.findClusterBreak)(line.text, pos - line.from, true) + line.from;
    return {
      changes: {
        from,
        to,
        insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos))
      },
      range: _state.EditorSelection.cursor(to)
    };
  });
  if (changes.changes.empty) return false;
  dispatch(state.update(changes, {
    scrollIntoView: true,
    userEvent: "move.character"
  }));
  return true;
};

exports.transposeChars = transposeChars;

function selectedLineBlocks(state) {
  let blocks = [],
      upto = -1;

  for (let range of state.selection.ranges) {
    let startLine = state.doc.lineAt(range.from),
        endLine = state.doc.lineAt(range.to);
    if (!range.empty && range.to == endLine.from) endLine = state.doc.lineAt(range.to - 1);

    if (upto >= startLine.number) {
      let prev = blocks[blocks.length - 1];
      prev.to = endLine.to;
      prev.ranges.push(range);
    } else {
      blocks.push({
        from: startLine.from,
        to: endLine.to,
        ranges: [range]
      });
    }

    upto = endLine.number + 1;
  }

  return blocks;
}

function moveLine(state, dispatch, forward) {
  if (state.readOnly) return false;
  let changes = [],
      ranges = [];

  for (let block of selectedLineBlocks(state)) {
    if (forward ? block.to == state.doc.length : block.from == 0) continue;
    let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
    let size = nextLine.length + 1;

    if (forward) {
      changes.push({
        from: block.to,
        to: nextLine.to
      }, {
        from: block.from,
        insert: nextLine.text + state.lineBreak
      });

      for (let r of block.ranges) ranges.push(_state.EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));
    } else {
      changes.push({
        from: nextLine.from,
        to: block.from
      }, {
        from: block.to,
        insert: state.lineBreak + nextLine.text
      });

      for (let r of block.ranges) ranges.push(_state.EditorSelection.range(r.anchor - size, r.head - size));
    }
  }

  if (!changes.length) return false;
  dispatch(state.update({
    changes,
    scrollIntoView: true,
    selection: _state.EditorSelection.create(ranges, state.selection.mainIndex),
    userEvent: "move.line"
  }));
  return true;
}
/**
Move the selected lines up one line.
*/


const moveLineUp = ({
  state,
  dispatch
}) => moveLine(state, dispatch, false);
/**
Move the selected lines down one line.
*/


exports.moveLineUp = moveLineUp;

const moveLineDown = ({
  state,
  dispatch
}) => moveLine(state, dispatch, true);

exports.moveLineDown = moveLineDown;

function copyLine(state, dispatch, forward) {
  if (state.readOnly) return false;
  let changes = [];

  for (let block of selectedLineBlocks(state)) {
    if (forward) changes.push({
      from: block.from,
      insert: state.doc.slice(block.from, block.to) + state.lineBreak
    });else changes.push({
      from: block.to,
      insert: state.lineBreak + state.doc.slice(block.from, block.to)
    });
  }

  dispatch(state.update({
    changes,
    scrollIntoView: true,
    userEvent: "input.copyline"
  }));
  return true;
}
/**
Create a copy of the selected lines. Keep the selection in the top copy.
*/


const copyLineUp = ({
  state,
  dispatch
}) => copyLine(state, dispatch, false);
/**
Create a copy of the selected lines. Keep the selection in the bottom copy.
*/


exports.copyLineUp = copyLineUp;

const copyLineDown = ({
  state,
  dispatch
}) => copyLine(state, dispatch, true);
/**
Delete selected lines.
*/


exports.copyLineDown = copyLineDown;

const deleteLine = view => {
  if (view.state.readOnly) return false;
  let {
    state
  } = view,
      changes = state.changes(selectedLineBlocks(state).map(({
    from,
    to
  }) => {
    if (from > 0) from--;else if (to < state.doc.length) to++;
    return {
      from,
      to
    };
  }));
  let selection = updateSel(state.selection, range => view.moveVertically(range, true)).map(changes);
  view.dispatch({
    changes,
    selection,
    scrollIntoView: true,
    userEvent: "delete.line"
  });
  return true;
};
/**
Replace the selection with a newline.
*/


exports.deleteLine = deleteLine;

const insertNewline = ({
  state,
  dispatch
}) => {
  dispatch(state.update(state.replaceSelection(state.lineBreak), {
    scrollIntoView: true,
    userEvent: "input"
  }));
  return true;
};

exports.insertNewline = insertNewline;

function isBetweenBrackets(state, pos) {
  if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1))) return {
    from: pos,
    to: pos
  };
  let context = (0, _language.syntaxTree)(state).resolveInner(pos);
  let before = context.childBefore(pos),
      after = context.childAfter(pos),
      closedBy;
  if (before && after && before.to <= pos && after.from >= pos && (closedBy = before.type.prop(_common.NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 && state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from) return {
    from: before.to,
    to: after.from
  };
  return null;
}
/**
Replace the selection with a newline and indent the newly created
line(s). If the current line consists only of whitespace, this
will also delete that whitespace. When the cursor is between
matching brackets, an additional newline will be inserted after
the cursor.
*/


const insertNewlineAndIndent = /*@__PURE__*/newlineAndIndent(false);
/**
Create a blank, indented line below the current line.
*/

exports.insertNewlineAndIndent = insertNewlineAndIndent;
const insertBlankLine = /*@__PURE__*/newlineAndIndent(true);
exports.insertBlankLine = insertBlankLine;

function newlineAndIndent(atEof) {
  return ({
    state,
    dispatch
  }) => {
    if (state.readOnly) return false;
    let changes = state.changeByRange(range => {
      let {
        from,
        to
      } = range,
          line = state.doc.lineAt(from);
      let explode = !atEof && from == to && isBetweenBrackets(state, from);
      if (atEof) from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;
      let cx = new _language.IndentContext(state, {
        simulateBreak: from,
        simulateDoubleBreak: !!explode
      });
      let indent = (0, _language.getIndentation)(cx, from);
      if (indent == null) indent = /^\s*/.exec(state.doc.lineAt(from).text)[0].length;

      while (to < line.to && /\s/.test(line.text[to - line.from])) to++;

      if (explode) ({
        from,
        to
      } = explode);else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from))) from = line.from;
      let insert = ["", (0, _language.indentString)(state, indent)];
      if (explode) insert.push((0, _language.indentString)(state, cx.lineIndent(line.from, -1)));
      return {
        changes: {
          from,
          to,
          insert: _state.Text.of(insert)
        },
        range: _state.EditorSelection.cursor(from + 1 + insert[1].length)
      };
    });
    dispatch(state.update(changes, {
      scrollIntoView: true,
      userEvent: "input"
    }));
    return true;
  };
}

function changeBySelectedLine(state, f) {
  let atLine = -1;
  return state.changeByRange(range => {
    let changes = [];

    for (let pos = range.from; pos <= range.to;) {
      let line = state.doc.lineAt(pos);

      if (line.number > atLine && (range.empty || range.to > line.from)) {
        f(line, changes, range);
        atLine = line.number;
      }

      pos = line.to + 1;
    }

    let changeSet = state.changes(changes);
    return {
      changes,
      range: _state.EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1))
    };
  });
}
/**
Auto-indent the selected lines. This uses the [indentation service
facet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent
information.
*/


const indentSelection = ({
  state,
  dispatch
}) => {
  if (state.readOnly) return false;
  let updated = Object.create(null);
  let context = new _language.IndentContext(state, {
    overrideIndentation: start => {
      let found = updated[start];
      return found == null ? -1 : found;
    }
  });
  let changes = changeBySelectedLine(state, (line, changes, range) => {
    let indent = (0, _language.getIndentation)(context, line.from);
    if (indent == null) return;
    if (!/\S/.test(line.text)) indent = 0;
    let cur = /^\s*/.exec(line.text)[0];
    let norm = (0, _language.indentString)(state, indent);

    if (cur != norm || range.from < line.from + cur.length) {
      updated[line.from] = indent;
      changes.push({
        from: line.from,
        to: line.from + cur.length,
        insert: norm
      });
    }
  });
  if (!changes.changes.empty) dispatch(state.update(changes, {
    userEvent: "indent"
  }));
  return true;
};
/**
Add a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected
lines.
*/


exports.indentSelection = indentSelection;

const indentMore = ({
  state,
  dispatch
}) => {
  if (state.readOnly) return false;
  dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
    changes.push({
      from: line.from,
      insert: state.facet(_language.indentUnit)
    });
  }), {
    userEvent: "input.indent"
  }));
  return true;
};
/**
Remove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all
selected lines.
*/


exports.indentMore = indentMore;

const indentLess = ({
  state,
  dispatch
}) => {
  if (state.readOnly) return false;
  dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
    let space = /^\s*/.exec(line.text)[0];
    if (!space) return;
    let col = (0, _state.countColumn)(space, state.tabSize),
        keep = 0;
    let insert = (0, _language.indentString)(state, Math.max(0, col - (0, _language.getIndentUnit)(state)));

    while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep)) keep++;

    changes.push({
      from: line.from + keep,
      to: line.from + space.length,
      insert: insert.slice(keep)
    });
  }), {
    userEvent: "delete.dedent"
  }));
  return true;
};
/**
Insert a tab character at the cursor or, if something is selected,
use [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) to indent the entire
selection.
*/


exports.indentLess = indentLess;

const insertTab = ({
  state,
  dispatch
}) => {
  if (state.selection.ranges.some(r => !r.empty)) return indentMore({
    state,
    dispatch
  });
  dispatch(state.update(state.replaceSelection("\t"), {
    scrollIntoView: true,
    userEvent: "input"
  }));
  return true;
};
/**
Array of key bindings containing the Emacs-style bindings that are
available on macOS by default.

 - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
 - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
 - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
 - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
 - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
 - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
 - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
 - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
 - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)
 - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
 - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)
 - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)
 - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)
 - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)
*/


exports.insertTab = insertTab;
const emacsStyleKeymap = [{
  key: "Ctrl-b",
  run: cursorCharLeft,
  shift: selectCharLeft,
  preventDefault: true
}, {
  key: "Ctrl-f",
  run: cursorCharRight,
  shift: selectCharRight
}, {
  key: "Ctrl-p",
  run: cursorLineUp,
  shift: selectLineUp
}, {
  key: "Ctrl-n",
  run: cursorLineDown,
  shift: selectLineDown
}, {
  key: "Ctrl-a",
  run: cursorLineStart,
  shift: selectLineStart
}, {
  key: "Ctrl-e",
  run: cursorLineEnd,
  shift: selectLineEnd
}, {
  key: "Ctrl-d",
  run: deleteCharForward
}, {
  key: "Ctrl-h",
  run: deleteCharBackward
}, {
  key: "Ctrl-k",
  run: deleteToLineEnd
}, {
  key: "Ctrl-Alt-h",
  run: deleteGroupBackward
}, {
  key: "Ctrl-o",
  run: splitLine
}, {
  key: "Ctrl-t",
  run: transposeChars
}, {
  key: "Ctrl-v",
  run: cursorPageDown
}];
/**
An array of key bindings closely sticking to platform-standard or
widely used bindings. (This includes the bindings from
[`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`
property changed to `mac`.)

 - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
 - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
 - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)
 - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)
 - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
 - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
 - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
 - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
 - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
 - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
 - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
 - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
 - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
 - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
 - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)
 - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)
 - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
 - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
 - Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)
 - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)
 - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
 - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
 - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
 - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)
 - Cmd-Backspace (macOS): [`deleteToLineStart`](https://codemirror.net/6/docs/ref/#commands.deleteToLineStart).
 - Cmd-Delete (macOS): [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd).
*/

exports.emacsStyleKeymap = emacsStyleKeymap;
const standardKeymap = /*@__PURE__*/[{
  key: "ArrowLeft",
  run: cursorCharLeft,
  shift: selectCharLeft,
  preventDefault: true
}, {
  key: "Mod-ArrowLeft",
  mac: "Alt-ArrowLeft",
  run: cursorGroupLeft,
  shift: selectGroupLeft,
  preventDefault: true
}, {
  mac: "Cmd-ArrowLeft",
  run: cursorLineBoundaryLeft,
  shift: selectLineBoundaryLeft,
  preventDefault: true
}, {
  key: "ArrowRight",
  run: cursorCharRight,
  shift: selectCharRight,
  preventDefault: true
}, {
  key: "Mod-ArrowRight",
  mac: "Alt-ArrowRight",
  run: cursorGroupRight,
  shift: selectGroupRight,
  preventDefault: true
}, {
  mac: "Cmd-ArrowRight",
  run: cursorLineBoundaryRight,
  shift: selectLineBoundaryRight,
  preventDefault: true
}, {
  key: "ArrowUp",
  run: cursorLineUp,
  shift: selectLineUp,
  preventDefault: true
}, {
  mac: "Cmd-ArrowUp",
  run: cursorDocStart,
  shift: selectDocStart
}, {
  mac: "Ctrl-ArrowUp",
  run: cursorPageUp,
  shift: selectPageUp
}, {
  key: "ArrowDown",
  run: cursorLineDown,
  shift: selectLineDown,
  preventDefault: true
}, {
  mac: "Cmd-ArrowDown",
  run: cursorDocEnd,
  shift: selectDocEnd
}, {
  mac: "Ctrl-ArrowDown",
  run: cursorPageDown,
  shift: selectPageDown
}, {
  key: "PageUp",
  run: cursorPageUp,
  shift: selectPageUp
}, {
  key: "PageDown",
  run: cursorPageDown,
  shift: selectPageDown
}, {
  key: "Home",
  run: cursorLineBoundaryBackward,
  shift: selectLineBoundaryBackward,
  preventDefault: true
}, {
  key: "Mod-Home",
  run: cursorDocStart,
  shift: selectDocStart
}, {
  key: "End",
  run: cursorLineBoundaryForward,
  shift: selectLineBoundaryForward,
  preventDefault: true
}, {
  key: "Mod-End",
  run: cursorDocEnd,
  shift: selectDocEnd
}, {
  key: "Enter",
  run: insertNewlineAndIndent
}, {
  key: "Mod-a",
  run: selectAll
}, {
  key: "Backspace",
  run: deleteCharBackward,
  shift: deleteCharBackward
}, {
  key: "Delete",
  run: deleteCharForward
}, {
  key: "Mod-Backspace",
  mac: "Alt-Backspace",
  run: deleteGroupBackward
}, {
  key: "Mod-Delete",
  mac: "Alt-Delete",
  run: deleteGroupForward
}, {
  mac: "Mod-Backspace",
  run: deleteToLineStart
}, {
  mac: "Mod-Delete",
  run: deleteToLineEnd
}].concat( /*@__PURE__*/emacsStyleKeymap.map(b => ({
  mac: b.key,
  run: b.run,
  shift: b.shift
})));
/**
The default keymap. Includes all bindings from
[`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:

- Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)
- Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)
- Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)
- Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)
- Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)
- Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)
- Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)
- Ctrl-Enter (Comd-Enter on macOS): [`insertBlankLine`](https://codemirror.net/6/docs/ref/#commands.insertBlankLine)
- Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)
- Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)
- Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)
- Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)
- Ctrl-Alt-\\ (Cmd-Alt-\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)
- Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)
- Shift-Ctrl-\\ (Shift-Cmd-\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)
- Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#commands.toggleComment).
- Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#commands.toggleBlockComment).
*/

exports.standardKeymap = standardKeymap;
const defaultKeymap = /*@__PURE__*/[{
  key: "Alt-ArrowLeft",
  mac: "Ctrl-ArrowLeft",
  run: cursorSyntaxLeft,
  shift: selectSyntaxLeft
}, {
  key: "Alt-ArrowRight",
  mac: "Ctrl-ArrowRight",
  run: cursorSyntaxRight,
  shift: selectSyntaxRight
}, {
  key: "Alt-ArrowUp",
  run: moveLineUp
}, {
  key: "Shift-Alt-ArrowUp",
  run: copyLineUp
}, {
  key: "Alt-ArrowDown",
  run: moveLineDown
}, {
  key: "Shift-Alt-ArrowDown",
  run: copyLineDown
}, {
  key: "Escape",
  run: simplifySelection
}, {
  key: "Mod-Enter",
  run: insertBlankLine
}, {
  key: "Alt-l",
  mac: "Ctrl-l",
  run: selectLine
}, {
  key: "Mod-i",
  run: selectParentSyntax,
  preventDefault: true
}, {
  key: "Mod-[",
  run: indentLess
}, {
  key: "Mod-]",
  run: indentMore
}, {
  key: "Mod-Alt-\\",
  run: indentSelection
}, {
  key: "Shift-Mod-k",
  run: deleteLine
}, {
  key: "Shift-Mod-\\",
  run: cursorMatchingBracket
}, {
  key: "Mod-/",
  run: toggleComment
}, {
  key: "Alt-A",
  run: toggleBlockComment
}].concat(standardKeymap);
/**
A binding that binds Tab to [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) and
Shift-Tab to [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess).
Please see the [Tab example](../../examples/tab/) before using
this.
*/

exports.defaultKeymap = defaultKeymap;
const indentWithTab = {
  key: "Tab",
  run: indentMore,
  shift: indentLess
};
exports.indentWithTab = indentWithTab;
},{"@codemirror/state":"s5u9","@codemirror/view":"q9gB","@codemirror/language":"Hm1j","@lezer/common":"YT4N"}],"ITGR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = crelt;

function crelt() {
  var elt = arguments[0];
  if (typeof elt == "string") elt = document.createElement(elt);
  var i = 1,
      next = arguments[1];

  if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
    for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {
      var value = next[name];
      if (typeof value == "string") elt.setAttribute(name, value);else if (value != null) elt[name] = value;
    }

    i++;
  }

  for (; i < arguments.length; i++) add(elt, arguments[i]);

  return elt;
}

function add(elt, child) {
  if (typeof child == "string") {
    elt.appendChild(document.createTextNode(child));
  } else if (child == null) {} else if (child.nodeType != null) {
    elt.appendChild(child);
  } else if (Array.isArray(child)) {
    for (var i = 0; i < child.length; i++) add(elt, child[i]);
  } else {
    throw new RangeError("Unsupported child node: " + child);
  }
}
},{}],"lKbM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findPrevious = exports.findNext = exports.closeSearchPanel = exports.SearchQuery = exports.SearchCursor = exports.RegExpCursor = void 0;
exports.getSearchQuery = getSearchQuery;
exports.gotoLine = void 0;
exports.highlightSelectionMatches = highlightSelectionMatches;
exports.replaceNext = exports.replaceAll = exports.openSearchPanel = void 0;
exports.search = search;
exports.searchKeymap = void 0;
exports.searchPanelOpen = searchPanelOpen;
exports.setSearchQuery = exports.selectSelectionMatches = exports.selectNextOccurrence = exports.selectMatches = void 0;

var _view = require("@codemirror/view");

var _state = require("@codemirror/state");

var _crelt = _interopRequireDefault(require("crelt"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const basicNormalize = typeof String.prototype.normalize == "function" ? x => x.normalize("NFKD") : x => x;
/**
A search cursor provides an iterator over text matches in a
document.
*/

class SearchCursor {
  /**
  Create a text cursor. The query is the search string, `from` to
  `to` provides the region to search.
  
  When `normalize` is given, it will be called, on both the query
  string and the content it is matched against, before comparing.
  You can, for example, create a case-insensitive search by
  passing `s => s.toLowerCase()`.
  
  Text is always normalized with
  [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
  (when supported).
  */
  constructor(text, query, from = 0, to = text.length, normalize) {
    /**
    The current match (only holds a meaningful value after
    [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when
    `done` is false).
    */
    this.value = {
      from: 0,
      to: 0
    };
    /**
    Whether the end of the iterated region has been reached.
    */

    this.done = false;
    this.matches = [];
    this.buffer = "";
    this.bufferPos = 0;
    this.iter = text.iterRange(from, to);
    this.bufferStart = from;
    this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;
    this.query = this.normalize(query);
  }

  peek() {
    if (this.bufferPos == this.buffer.length) {
      this.bufferStart += this.buffer.length;
      this.iter.next();
      if (this.iter.done) return -1;
      this.bufferPos = 0;
      this.buffer = this.iter.value;
    }

    return (0, _state.codePointAt)(this.buffer, this.bufferPos);
  }
  /**
  Look for the next match. Updates the iterator's
  [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
  [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
  at least once before using the cursor.
  */


  next() {
    while (this.matches.length) this.matches.pop();

    return this.nextOverlapping();
  }
  /**
  The `next` method will ignore matches that partially overlap a
  previous match. This method behaves like `next`, but includes
  such matches.
  */


  nextOverlapping() {
    for (;;) {
      let next = this.peek();

      if (next < 0) {
        this.done = true;
        return this;
      }

      let str = (0, _state.fromCodePoint)(next),
          start = this.bufferStart + this.bufferPos;
      this.bufferPos += (0, _state.codePointSize)(next);
      let norm = this.normalize(str);

      for (let i = 0, pos = start;; i++) {
        let code = norm.charCodeAt(i);
        let match = this.match(code, pos);

        if (match) {
          this.value = match;
          return this;
        }

        if (i == norm.length - 1) break;
        if (pos == start && i < str.length && str.charCodeAt(i) == code) pos++;
      }
    }
  }

  match(code, pos) {
    let match = null;

    for (let i = 0; i < this.matches.length; i += 2) {
      let index = this.matches[i],
          keep = false;

      if (this.query.charCodeAt(index) == code) {
        if (index == this.query.length - 1) {
          match = {
            from: this.matches[i + 1],
            to: pos + 1
          };
        } else {
          this.matches[i]++;
          keep = true;
        }
      }

      if (!keep) {
        this.matches.splice(i, 2);
        i -= 2;
      }
    }

    if (this.query.charCodeAt(0) == code) {
      if (this.query.length == 1) match = {
        from: pos,
        to: pos + 1
      };else this.matches.push(1, pos);
    }

    return match;
  }

}

exports.SearchCursor = SearchCursor;
if (typeof Symbol != "undefined") SearchCursor.prototype[Symbol.iterator] = function () {
  return this;
};
const empty = {
  from: -1,
  to: -1,
  match: /*@__PURE__*/ /.*/.exec("")
};
const baseFlags = "gm" + (/x/.unicode == null ? "" : "u");
/**
This class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)
but searches for a regular expression pattern instead of a plain
string.
*/

class RegExpCursor {
  /**
  Create a cursor that will search the given range in the given
  document. `query` should be the raw pattern (as you'd pass it to
  `new RegExp`).
  */
  constructor(text, query, options, from = 0, to = text.length) {
    this.text = text;
    this.to = to;
    this.curLine = "";
    /**
    Set to `true` when the cursor has reached the end of the search
    range.
    */

    this.done = false;
    /**
    Will contain an object with the extent of the match and the
    match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)
    sucessfully finds a match.
    */

    this.value = empty;
    if (/\\[sWDnr]|\n|\r|\[\^/.test(query)) return new MultilineRegExpCursor(text, query, options, from, to);
    this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
    this.iter = text.iter();
    let startLine = text.lineAt(from);
    this.curLineStart = startLine.from;
    this.matchPos = toCharEnd(text, from);
    this.getLine(this.curLineStart);
  }

  getLine(skip) {
    this.iter.next(skip);

    if (this.iter.lineBreak) {
      this.curLine = "";
    } else {
      this.curLine = this.iter.value;
      if (this.curLineStart + this.curLine.length > this.to) this.curLine = this.curLine.slice(0, this.to - this.curLineStart);
      this.iter.next();
    }
  }

  nextLine() {
    this.curLineStart = this.curLineStart + this.curLine.length + 1;
    if (this.curLineStart > this.to) this.curLine = "";else this.getLine(0);
  }
  /**
  Move to the next match, if there is one.
  */


  next() {
    for (let off = this.matchPos - this.curLineStart;;) {
      this.re.lastIndex = off;
      let match = this.matchPos <= this.to && this.re.exec(this.curLine);

      if (match) {
        let from = this.curLineStart + match.index,
            to = from + match[0].length;
        this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));
        if (from == this.curLine.length) this.nextLine();

        if (from < to || from > this.value.to) {
          this.value = {
            from,
            to,
            match
          };
          return this;
        }

        off = this.matchPos - this.curLineStart;
      } else if (this.curLineStart + this.curLine.length < this.to) {
        this.nextLine();
        off = 0;
      } else {
        this.done = true;
        return this;
      }
    }
  }

}

exports.RegExpCursor = RegExpCursor;
const flattened = /*@__PURE__*/new WeakMap(); // Reusable (partially) flattened document strings

class FlattenedDoc {
  constructor(from, text) {
    this.from = from;
    this.text = text;
  }

  get to() {
    return this.from + this.text.length;
  }

  static get(doc, from, to) {
    let cached = flattened.get(doc);

    if (!cached || cached.from >= to || cached.to <= from) {
      let flat = new FlattenedDoc(from, doc.sliceString(from, to));
      flattened.set(doc, flat);
      return flat;
    }

    if (cached.from == from && cached.to == to) return cached;
    let {
      text,
      from: cachedFrom
    } = cached;

    if (cachedFrom > from) {
      text = doc.sliceString(from, cachedFrom) + text;
      cachedFrom = from;
    }

    if (cached.to < to) text += doc.sliceString(cached.to, to);
    flattened.set(doc, new FlattenedDoc(cachedFrom, text));
    return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));
  }

}

class MultilineRegExpCursor {
  constructor(text, query, options, from, to) {
    this.text = text;
    this.to = to;
    this.done = false;
    this.value = empty;
    this.matchPos = toCharEnd(text, from);
    this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
    this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000
    /* Base */
    ));
  }

  chunkEnd(pos) {
    return pos >= this.to ? this.to : this.text.lineAt(pos).to;
  }

  next() {
    for (;;) {
      let off = this.re.lastIndex = this.matchPos - this.flat.from;
      let match = this.re.exec(this.flat.text); // Skip empty matches directly after the last match

      if (match && !match[0] && match.index == off) {
        this.re.lastIndex = off + 1;
        match = this.re.exec(this.flat.text);
      } // If a match goes almost to the end of a noncomplete chunk, try
      // again, since it'll likely be able to match more


      if (match && this.flat.to < this.to && match.index + match[0].length > this.flat.text.length - 10) match = null;

      if (match) {
        let from = this.flat.from + match.index,
            to = from + match[0].length;
        this.value = {
          from,
          to,
          match
        };
        this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));
        return this;
      } else {
        if (this.flat.to == this.to) {
          this.done = true;
          return this;
        } // Grow the flattened doc


        this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
      }
    }
  }

}

if (typeof Symbol != "undefined") {
  RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] = function () {
    return this;
  };
}

function validRegExp(source) {
  try {
    new RegExp(source, baseFlags);
    return true;
  } catch (_a) {
    return false;
  }
}

function toCharEnd(text, pos) {
  if (pos >= text.length) return pos;
  let line = text.lineAt(pos),
      next;

  while (pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 0xDC00 && next < 0xE000) pos++;

  return pos;
}

function createLineDialog(view) {
  let input = (0, _crelt.default)("input", {
    class: "cm-textfield",
    name: "line"
  });
  let dom = (0, _crelt.default)("form", {
    class: "cm-gotoLine",
    onkeydown: event => {
      if (event.keyCode == 27) {
        // Escape
        event.preventDefault();
        view.dispatch({
          effects: dialogEffect.of(false)
        });
        view.focus();
      } else if (event.keyCode == 13) {
        // Enter
        event.preventDefault();
        go();
      }
    },
    onsubmit: event => {
      event.preventDefault();
      go();
    }
  }, (0, _crelt.default)("label", view.state.phrase("Go to line"), ": ", input), " ", (0, _crelt.default)("button", {
    class: "cm-button",
    type: "submit"
  }, view.state.phrase("go")));

  function go() {
    let match = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(input.value);
    if (!match) return;
    let {
      state
    } = view,
        startLine = state.doc.lineAt(state.selection.main.head);
    let [, sign, ln, cl, percent] = match;
    let col = cl ? +cl.slice(1) : 0;
    let line = ln ? +ln : startLine.number;

    if (ln && percent) {
      let pc = line / 100;
      if (sign) pc = pc * (sign == "-" ? -1 : 1) + startLine.number / state.doc.lines;
      line = Math.round(state.doc.lines * pc);
    } else if (ln && sign) {
      line = line * (sign == "-" ? -1 : 1) + startLine.number;
    }

    let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));
    view.dispatch({
      effects: dialogEffect.of(false),
      selection: _state.EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length))),
      scrollIntoView: true
    });
    view.focus();
  }

  return {
    dom
  };
}

const dialogEffect = /*@__PURE__*/_state.StateEffect.define();

const dialogField = /*@__PURE__*/_state.StateField.define({
  create() {
    return true;
  },

  update(value, tr) {
    for (let e of tr.effects) if (e.is(dialogEffect)) value = e.value;

    return value;
  },

  provide: f => _view.showPanel.from(f, val => val ? createLineDialog : null)
});
/**
Command that shows a dialog asking the user for a line number, and
when a valid position is provided, moves the cursor to that line.

Supports line numbers, relative line offsets prefixed with `+` or
`-`, document percentages suffixed with `%`, and an optional
column position by adding `:` and a second number after the line
number.

The dialog can be styled with the `panel.gotoLine` theme
selector.
*/


const gotoLine = view => {
  let panel = (0, _view.getPanel)(view, createLineDialog);

  if (!panel) {
    let effects = [dialogEffect.of(true)];
    if (view.state.field(dialogField, false) == null) effects.push(_state.StateEffect.appendConfig.of([dialogField, baseTheme$1]));
    view.dispatch({
      effects
    });
    panel = (0, _view.getPanel)(view, createLineDialog);
  }

  if (panel) panel.dom.querySelector("input").focus();
  return true;
};

exports.gotoLine = gotoLine;

const baseTheme$1 = /*@__PURE__*/_view.EditorView.baseTheme({
  ".cm-panel.cm-gotoLine": {
    padding: "2px 6px 4px",
    "& label": {
      fontSize: "80%"
    }
  }
});

const defaultHighlightOptions = {
  highlightWordAroundCursor: false,
  minSelectionLength: 1,
  maxMatches: 100,
  wholeWords: false
};

const highlightConfig = /*@__PURE__*/_state.Facet.define({
  combine(options) {
    return (0, _state.combineConfig)(options, defaultHighlightOptions, {
      highlightWordAroundCursor: (a, b) => a || b,
      minSelectionLength: Math.min,
      maxMatches: Math.min
    });
  }

});
/**
This extension highlights text that matches the selection. It uses
the `"cm-selectionMatch"` class for the highlighting. When
`highlightWordAroundCursor` is enabled, the word at the cursor
itself will be highlighted with `"cm-selectionMatch-main"`.
*/


function highlightSelectionMatches(options) {
  let ext = [defaultTheme, matchHighlighter];
  if (options) ext.push(highlightConfig.of(options));
  return ext;
}

const matchDeco = /*@__PURE__*/_view.Decoration.mark({
  class: "cm-selectionMatch"
});

const mainMatchDeco = /*@__PURE__*/_view.Decoration.mark({
  class: "cm-selectionMatch cm-selectionMatch-main"
}); // Whether the characters directly outside the given positions are non-word characters


function insideWordBoundaries(check, state, from, to) {
  return (from == 0 || check(state.sliceDoc(from - 1, from)) != _state.CharCategory.Word) && (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != _state.CharCategory.Word);
} // Whether the characters directly at the given positions are word characters


function insideWord(check, state, from, to) {
  return check(state.sliceDoc(from, from + 1)) == _state.CharCategory.Word && check(state.sliceDoc(to - 1, to)) == _state.CharCategory.Word;
}

const matchHighlighter = /*@__PURE__*/_view.ViewPlugin.fromClass(class {
  constructor(view) {
    this.decorations = this.getDeco(view);
  }

  update(update) {
    if (update.selectionSet || update.docChanged || update.viewportChanged) this.decorations = this.getDeco(update.view);
  }

  getDeco(view) {
    let conf = view.state.facet(highlightConfig);
    let {
      state
    } = view,
        sel = state.selection;
    if (sel.ranges.length > 1) return _view.Decoration.none;
    let range = sel.main,
        query,
        check = null;

    if (range.empty) {
      if (!conf.highlightWordAroundCursor) return _view.Decoration.none;
      let word = state.wordAt(range.head);
      if (!word) return _view.Decoration.none;
      check = state.charCategorizer(range.head);
      query = state.sliceDoc(word.from, word.to);
    } else {
      let len = range.to - range.from;
      if (len < conf.minSelectionLength || len > 200) return _view.Decoration.none;

      if (conf.wholeWords) {
        query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?

        check = state.charCategorizer(range.head);
        if (!(insideWordBoundaries(check, state, range.from, range.to) && insideWord(check, state, range.from, range.to))) return _view.Decoration.none;
      } else {
        query = state.sliceDoc(range.from, range.to).trim();
        if (!query) return _view.Decoration.none;
      }
    }

    let deco = [];

    for (let part of view.visibleRanges) {
      let cursor = new SearchCursor(state.doc, query, part.from, part.to);

      while (!cursor.next().done) {
        let {
          from,
          to
        } = cursor.value;

        if (!check || insideWordBoundaries(check, state, from, to)) {
          if (range.empty && from <= range.from && to >= range.to) deco.push(mainMatchDeco.range(from, to));else if (from >= range.to || to <= range.from) deco.push(matchDeco.range(from, to));
          if (deco.length > conf.maxMatches) return _view.Decoration.none;
        }
      }
    }

    return _view.Decoration.set(deco);
  }

}, {
  decorations: v => v.decorations
});

const defaultTheme = /*@__PURE__*/_view.EditorView.baseTheme({
  ".cm-selectionMatch": {
    backgroundColor: "#99ff7780"
  },
  ".cm-searchMatch .cm-selectionMatch": {
    backgroundColor: "transparent"
  }
}); // Select the words around the cursors.


const selectWord = ({
  state,
  dispatch
}) => {
  let {
    selection
  } = state;

  let newSel = _state.EditorSelection.create(selection.ranges.map(range => state.wordAt(range.head) || _state.EditorSelection.cursor(range.head)), selection.mainIndex);

  if (newSel.eq(selection)) return false;
  dispatch(state.update({
    selection: newSel
  }));
  return true;
}; // Find next occurrence of query relative to last cursor. Wrap around
// the document if there are no more matches.


function findNextOccurrence(state, query) {
  let {
    main,
    ranges
  } = state.selection;
  let word = state.wordAt(main.head),
      fullWord = word && word.from == main.from && word.to == main.to;

  for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {
    cursor.next();

    if (cursor.done) {
      if (cycled) return null;
      cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));
      cycled = true;
    } else {
      if (cycled && ranges.some(r => r.from == cursor.value.from)) continue;

      if (fullWord) {
        let word = state.wordAt(cursor.value.from);
        if (!word || word.from != cursor.value.from || word.to != cursor.value.to) continue;
      }

      return cursor.value;
    }
  }
}
/**
Select next occurrence of the current selection. Expand selection
to the surrounding word when the selection is empty.
*/


const selectNextOccurrence = ({
  state,
  dispatch
}) => {
  let {
    ranges
  } = state.selection;
  if (ranges.some(sel => sel.from === sel.to)) return selectWord({
    state,
    dispatch
  });
  let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);
  if (state.selection.ranges.some(r => state.sliceDoc(r.from, r.to) != searchedText)) return false;
  let range = findNextOccurrence(state, searchedText);
  if (!range) return false;
  dispatch(state.update({
    selection: state.selection.addRange(_state.EditorSelection.range(range.from, range.to), false),
    effects: _view.EditorView.scrollIntoView(range.to)
  }));
  return true;
};

exports.selectNextOccurrence = selectNextOccurrence;

const searchConfigFacet = /*@__PURE__*/_state.Facet.define({
  combine(configs) {
    var _a;

    return {
      top: configs.reduce((val, conf) => val !== null && val !== void 0 ? val : conf.top, undefined) || false,
      caseSensitive: configs.reduce((val, conf) => val !== null && val !== void 0 ? val : conf.caseSensitive, undefined) || false,
      literal: configs.reduce((val, conf) => val !== null && val !== void 0 ? val : conf.literal, undefined) || false,
      createPanel: ((_a = configs.find(c => c.createPanel)) === null || _a === void 0 ? void 0 : _a.createPanel) || (view => new SearchPanel(view))
    };
  }

});
/**
Add search state to the editor configuration, and optionally
configure the search extension.
([`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) will automatically
enable this if it isn't already on).
*/


function search(config) {
  return config ? [searchConfigFacet.of(config), searchExtensions] : searchExtensions;
}
/**
A search query. Part of the editor's search state.
*/


class SearchQuery {
  /**
  Create a query object.
  */
  constructor(config) {
    this.search = config.search;
    this.caseSensitive = !!config.caseSensitive;
    this.literal = !!config.literal;
    this.regexp = !!config.regexp;
    this.replace = config.replace || "";
    this.valid = !!this.search && (!this.regexp || validRegExp(this.search));
    this.unquoted = this.literal ? this.search : this.search.replace(/\\([nrt\\])/g, (_, ch) => ch == "n" ? "\n" : ch == "r" ? "\r" : ch == "t" ? "\t" : "\\");
  }
  /**
  Compare this query to another query.
  */


  eq(other) {
    return this.search == other.search && this.replace == other.replace && this.caseSensitive == other.caseSensitive && this.regexp == other.regexp;
  }
  /**
  @internal
  */


  create() {
    return this.regexp ? new RegExpQuery(this) : new StringQuery(this);
  }
  /**
  Get a search cursor for this query, searching through the given
  range in the given document.
  */


  getCursor(doc, from = 0, to = doc.length) {
    return this.regexp ? regexpCursor(this, doc, from, to) : stringCursor(this, doc, from, to);
  }

}

exports.SearchQuery = SearchQuery;

class QueryType {
  constructor(spec) {
    this.spec = spec;
  }

}

function stringCursor(spec, doc, from, to) {
  return new SearchCursor(doc, spec.unquoted, from, to, spec.caseSensitive ? undefined : x => x.toLowerCase());
}

class StringQuery extends QueryType {
  constructor(spec) {
    super(spec);
  }

  nextMatch(doc, curFrom, curTo) {
    let cursor = stringCursor(this.spec, doc, curTo, doc.length).nextOverlapping();
    if (cursor.done) cursor = stringCursor(this.spec, doc, 0, curFrom).nextOverlapping();
    return cursor.done ? null : cursor.value;
  } // Searching in reverse is, rather than implementing inverted search
  // cursor, done by scanning chunk after chunk forward.


  prevMatchInRange(doc, from, to) {
    for (let pos = to;;) {
      let start = Math.max(from, pos - 10000
      /* ChunkSize */
      - this.spec.unquoted.length);
      let cursor = stringCursor(this.spec, doc, start, pos),
          range = null;

      while (!cursor.nextOverlapping().done) range = cursor.value;

      if (range) return range;
      if (start == from) return null;
      pos -= 10000
      /* ChunkSize */
      ;
    }
  }

  prevMatch(doc, curFrom, curTo) {
    return this.prevMatchInRange(doc, 0, curFrom) || this.prevMatchInRange(doc, curTo, doc.length);
  }

  getReplacement(_result) {
    return this.spec.replace;
  }

  matchAll(doc, limit) {
    let cursor = stringCursor(this.spec, doc, 0, doc.length),
        ranges = [];

    while (!cursor.next().done) {
      if (ranges.length >= limit) return null;
      ranges.push(cursor.value);
    }

    return ranges;
  }

  highlight(doc, from, to, add) {
    let cursor = stringCursor(this.spec, doc, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, doc.length));

    while (!cursor.next().done) add(cursor.value.from, cursor.value.to);
  }

}

function regexpCursor(spec, doc, from, to) {
  return new RegExpCursor(doc, spec.search, spec.caseSensitive ? undefined : {
    ignoreCase: true
  }, from, to);
}

class RegExpQuery extends QueryType {
  nextMatch(doc, curFrom, curTo) {
    let cursor = regexpCursor(this.spec, doc, curTo, doc.length).next();
    if (cursor.done) cursor = regexpCursor(this.spec, doc, 0, curFrom).next();
    return cursor.done ? null : cursor.value;
  }

  prevMatchInRange(doc, from, to) {
    for (let size = 1;; size++) {
      let start = Math.max(from, to - size * 10000
      /* ChunkSize */
      );
      let cursor = regexpCursor(this.spec, doc, start, to),
          range = null;

      while (!cursor.next().done) range = cursor.value;

      if (range && (start == from || range.from > start + 10)) return range;
      if (start == from) return null;
    }
  }

  prevMatch(doc, curFrom, curTo) {
    return this.prevMatchInRange(doc, 0, curFrom) || this.prevMatchInRange(doc, curTo, doc.length);
  }

  getReplacement(result) {
    return this.spec.replace.replace(/\$([$&\d+])/g, (m, i) => i == "$" ? "$" : i == "&" ? result.match[0] : i != "0" && +i < result.match.length ? result.match[i] : m);
  }

  matchAll(doc, limit) {
    let cursor = regexpCursor(this.spec, doc, 0, doc.length),
        ranges = [];

    while (!cursor.next().done) {
      if (ranges.length >= limit) return null;
      ranges.push(cursor.value);
    }

    return ranges;
  }

  highlight(doc, from, to, add) {
    let cursor = regexpCursor(this.spec, doc, Math.max(0, from - 250
    /* HighlightMargin */
    ), Math.min(to + 250
    /* HighlightMargin */
    , doc.length));

    while (!cursor.next().done) add(cursor.value.from, cursor.value.to);
  }

}
/**
A state effect that updates the current search query. Note that
this only has an effect if the search state has been initialized
(by including [`search`](https://codemirror.net/6/docs/ref/#search.search) in your configuration or
by running [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) at least
once).
*/


const setSearchQuery = /*@__PURE__*/_state.StateEffect.define();

exports.setSearchQuery = setSearchQuery;

const togglePanel = /*@__PURE__*/_state.StateEffect.define();

const searchState = /*@__PURE__*/_state.StateField.define({
  create(state) {
    return new SearchState(defaultQuery(state).create(), null);
  },

  update(value, tr) {
    for (let effect of tr.effects) {
      if (effect.is(setSearchQuery)) value = new SearchState(effect.value.create(), value.panel);else if (effect.is(togglePanel)) value = new SearchState(value.query, effect.value ? createSearchPanel : null);
    }

    return value;
  },

  provide: f => _view.showPanel.from(f, val => val.panel)
});
/**
Get the current search query from an editor state.
*/


function getSearchQuery(state) {
  let curState = state.field(searchState, false);
  return curState ? curState.query.spec : defaultQuery(state);
}
/**
Query whether the search panel is open in the given editor state.
*/


function searchPanelOpen(state) {
  var _a;

  return ((_a = state.field(searchState, false)) === null || _a === void 0 ? void 0 : _a.panel) != null;
}

class SearchState {
  constructor(query, panel) {
    this.query = query;
    this.panel = panel;
  }

}

const matchMark = /*@__PURE__*/_view.Decoration.mark({
  class: "cm-searchMatch"
}),
      selectedMatchMark = /*@__PURE__*/_view.Decoration.mark({
  class: "cm-searchMatch cm-searchMatch-selected"
});

const searchHighlighter = /*@__PURE__*/_view.ViewPlugin.fromClass(class {
  constructor(view) {
    this.view = view;
    this.decorations = this.highlight(view.state.field(searchState));
  }

  update(update) {
    let state = update.state.field(searchState);
    if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged) this.decorations = this.highlight(state);
  }

  highlight({
    query,
    panel
  }) {
    if (!panel || !query.spec.valid) return _view.Decoration.none;
    let {
      view
    } = this;
    let builder = new _state.RangeSetBuilder();

    for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {
      let {
        from,
        to
      } = ranges[i];

      while (i < l - 1 && to > ranges[i + 1].from - 2 * 250
      /* HighlightMargin */
      ) to = ranges[++i].to;

      query.highlight(view.state.doc, from, to, (from, to) => {
        let selected = view.state.selection.ranges.some(r => r.from == from && r.to == to);
        builder.add(from, to, selected ? selectedMatchMark : matchMark);
      });
    }

    return builder.finish();
  }

}, {
  decorations: v => v.decorations
});

function searchCommand(f) {
  return view => {
    let state = view.state.field(searchState, false);
    return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);
  };
}
/**
Open the search panel if it isn't already open, and move the
selection to the first match after the current main selection.
Will wrap around to the start of the document when it reaches the
end.
*/


const findNext = /*@__PURE__*/searchCommand((view, {
  query
}) => {
  let {
    to
  } = view.state.selection.main;
  let next = query.nextMatch(view.state.doc, to, to);
  if (!next) return false;
  view.dispatch({
    selection: {
      anchor: next.from,
      head: next.to
    },
    scrollIntoView: true,
    effects: announceMatch(view, next),
    userEvent: "select.search"
  });
  return true;
});
/**
Move the selection to the previous instance of the search query,
before the current main selection. Will wrap past the start
of the document to start searching at the end again.
*/

exports.findNext = findNext;
const findPrevious = /*@__PURE__*/searchCommand((view, {
  query
}) => {
  let {
    state
  } = view,
      {
    from
  } = state.selection.main;
  let range = query.prevMatch(state.doc, from, from);
  if (!range) return false;
  view.dispatch({
    selection: {
      anchor: range.from,
      head: range.to
    },
    scrollIntoView: true,
    effects: announceMatch(view, range),
    userEvent: "select.search"
  });
  return true;
});
/**
Select all instances of the search query.
*/

exports.findPrevious = findPrevious;
const selectMatches = /*@__PURE__*/searchCommand((view, {
  query
}) => {
  let ranges = query.matchAll(view.state.doc, 1000);
  if (!ranges || !ranges.length) return false;
  view.dispatch({
    selection: _state.EditorSelection.create(ranges.map(r => _state.EditorSelection.range(r.from, r.to))),
    userEvent: "select.search.matches"
  });
  return true;
});
/**
Select all instances of the currently selected text.
*/

exports.selectMatches = selectMatches;

const selectSelectionMatches = ({
  state,
  dispatch
}) => {
  let sel = state.selection;
  if (sel.ranges.length > 1 || sel.main.empty) return false;
  let {
    from,
    to
  } = sel.main;
  let ranges = [],
      main = 0;

  for (let cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {
    if (ranges.length > 1000) return false;
    if (cur.value.from == from) main = ranges.length;
    ranges.push(_state.EditorSelection.range(cur.value.from, cur.value.to));
  }

  dispatch(state.update({
    selection: _state.EditorSelection.create(ranges, main),
    userEvent: "select.search.matches"
  }));
  return true;
};
/**
Replace the current match of the search query.
*/


exports.selectSelectionMatches = selectSelectionMatches;
const replaceNext = /*@__PURE__*/searchCommand((view, {
  query
}) => {
  let {
    state
  } = view,
      {
    from,
    to
  } = state.selection.main;
  if (state.readOnly) return false;
  let next = query.nextMatch(state.doc, from, from);
  if (!next) return false;
  let changes = [],
      selection,
      replacement;
  let announce = [];

  if (next.from == from && next.to == to) {
    replacement = state.toText(query.getReplacement(next));
    changes.push({
      from: next.from,
      to: next.to,
      insert: replacement
    });
    next = query.nextMatch(state.doc, next.from, next.to);
    announce.push(_view.EditorView.announce.of(state.phrase("replaced match on line $", state.doc.lineAt(from).number) + "."));
  }

  if (next) {
    let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;
    selection = {
      anchor: next.from - off,
      head: next.to - off
    };
    announce.push(announceMatch(view, next));
  }

  view.dispatch({
    changes,
    selection,
    scrollIntoView: !!selection,
    effects: announce,
    userEvent: "input.replace"
  });
  return true;
});
/**
Replace all instances of the search query with the given
replacement.
*/

exports.replaceNext = replaceNext;
const replaceAll = /*@__PURE__*/searchCommand((view, {
  query
}) => {
  if (view.state.readOnly) return false;
  let changes = query.matchAll(view.state.doc, 1e9).map(match => {
    let {
      from,
      to
    } = match;
    return {
      from,
      to,
      insert: query.getReplacement(match)
    };
  });
  if (!changes.length) return false;
  let announceText = view.state.phrase("replaced $ matches", changes.length) + ".";
  view.dispatch({
    changes,
    effects: _view.EditorView.announce.of(announceText),
    userEvent: "input.replace.all"
  });
  return true;
});
exports.replaceAll = replaceAll;

function createSearchPanel(view) {
  return view.state.facet(searchConfigFacet).createPanel(view);
}

function defaultQuery(state, fallback) {
  var _a, _b, _c;

  let sel = state.selection.main;
  let selText = sel.empty || sel.to > sel.from + 100 ? "" : state.sliceDoc(sel.from, sel.to);
  if (fallback && !selText) return fallback;
  let config = state.facet(searchConfigFacet);
  return new SearchQuery({
    search: ((_a = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a !== void 0 ? _a : config.literal) ? selText : selText.replace(/\n/g, "\\n"),
    caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config.caseSensitive,
    literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config.literal
  });
}
/**
Make sure the search panel is open and focused.
*/


const openSearchPanel = view => {
  let state = view.state.field(searchState, false);

  if (state && state.panel) {
    let panel = (0, _view.getPanel)(view, createSearchPanel);
    if (!panel) return false;
    let searchInput = panel.dom.querySelector("[main-field]");

    if (searchInput && searchInput != view.root.activeElement) {
      let query = defaultQuery(view.state, state.query.spec);
      if (query.valid) view.dispatch({
        effects: setSearchQuery.of(query)
      });
      searchInput.focus();
      searchInput.select();
    }
  } else {
    view.dispatch({
      effects: [togglePanel.of(true), state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : _state.StateEffect.appendConfig.of(searchExtensions)]
    });
  }

  return true;
};
/**
Close the search panel.
*/


exports.openSearchPanel = openSearchPanel;

const closeSearchPanel = view => {
  let state = view.state.field(searchState, false);
  if (!state || !state.panel) return false;
  let panel = (0, _view.getPanel)(view, createSearchPanel);
  if (panel && panel.dom.contains(view.root.activeElement)) view.focus();
  view.dispatch({
    effects: togglePanel.of(false)
  });
  return true;
};
/**
Default search-related key bindings.

 - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)
 - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)
 - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)
 - Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)
 - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)
*/


exports.closeSearchPanel = closeSearchPanel;
const searchKeymap = [{
  key: "Mod-f",
  run: openSearchPanel,
  scope: "editor search-panel"
}, {
  key: "F3",
  run: findNext,
  shift: findPrevious,
  scope: "editor search-panel",
  preventDefault: true
}, {
  key: "Mod-g",
  run: findNext,
  shift: findPrevious,
  scope: "editor search-panel",
  preventDefault: true
}, {
  key: "Escape",
  run: closeSearchPanel,
  scope: "editor search-panel"
}, {
  key: "Mod-Shift-l",
  run: selectSelectionMatches
}, {
  key: "Alt-g",
  run: gotoLine
}, {
  key: "Mod-d",
  run: selectNextOccurrence,
  preventDefault: true
}];
exports.searchKeymap = searchKeymap;

class SearchPanel {
  constructor(view) {
    this.view = view;
    let query = this.query = view.state.field(searchState).query.spec;
    this.commit = this.commit.bind(this);
    this.searchField = (0, _crelt.default)("input", {
      value: query.search,
      placeholder: phrase(view, "Find"),
      "aria-label": phrase(view, "Find"),
      class: "cm-textfield",
      name: "search",
      "main-field": "true",
      onchange: this.commit,
      onkeyup: this.commit
    });
    this.replaceField = (0, _crelt.default)("input", {
      value: query.replace,
      placeholder: phrase(view, "Replace"),
      "aria-label": phrase(view, "Replace"),
      class: "cm-textfield",
      name: "replace",
      onchange: this.commit,
      onkeyup: this.commit
    });
    this.caseField = (0, _crelt.default)("input", {
      type: "checkbox",
      name: "case",
      checked: query.caseSensitive,
      onchange: this.commit
    });
    this.reField = (0, _crelt.default)("input", {
      type: "checkbox",
      name: "re",
      checked: query.regexp,
      onchange: this.commit
    });

    function button(name, onclick, content) {
      return (0, _crelt.default)("button", {
        class: "cm-button",
        name,
        onclick,
        type: "button"
      }, content);
    }

    this.dom = (0, _crelt.default)("div", {
      onkeydown: e => this.keydown(e),
      class: "cm-search"
    }, [this.searchField, button("next", () => findNext(view), [phrase(view, "next")]), button("prev", () => findPrevious(view), [phrase(view, "previous")]), button("select", () => selectMatches(view), [phrase(view, "all")]), (0, _crelt.default)("label", null, [this.caseField, phrase(view, "match case")]), (0, _crelt.default)("label", null, [this.reField, phrase(view, "regexp")]), ...(view.state.readOnly ? [] : [(0, _crelt.default)("br"), this.replaceField, button("replace", () => replaceNext(view), [phrase(view, "replace")]), button("replaceAll", () => replaceAll(view), [phrase(view, "replace all")]), (0, _crelt.default)("button", {
      name: "close",
      onclick: () => closeSearchPanel(view),
      "aria-label": phrase(view, "close"),
      type: "button"
    }, ["×"])])]);
  }

  commit() {
    let query = new SearchQuery({
      search: this.searchField.value,
      caseSensitive: this.caseField.checked,
      regexp: this.reField.checked,
      replace: this.replaceField.value
    });

    if (!query.eq(this.query)) {
      this.query = query;
      this.view.dispatch({
        effects: setSearchQuery.of(query)
      });
    }
  }

  keydown(e) {
    if ((0, _view.runScopeHandlers)(this.view, e, "search-panel")) {
      e.preventDefault();
    } else if (e.keyCode == 13 && e.target == this.searchField) {
      e.preventDefault();
      (e.shiftKey ? findPrevious : findNext)(this.view);
    } else if (e.keyCode == 13 && e.target == this.replaceField) {
      e.preventDefault();
      replaceNext(this.view);
    }
  }

  update(update) {
    for (let tr of update.transactions) for (let effect of tr.effects) {
      if (effect.is(setSearchQuery) && !effect.value.eq(this.query)) this.setQuery(effect.value);
    }
  }

  setQuery(query) {
    this.query = query;
    this.searchField.value = query.search;
    this.replaceField.value = query.replace;
    this.caseField.checked = query.caseSensitive;
    this.reField.checked = query.regexp;
  }

  mount() {
    this.searchField.select();
  }

  get pos() {
    return 80;
  }

  get top() {
    return this.view.state.facet(searchConfigFacet).top;
  }

}

function phrase(view, phrase) {
  return view.state.phrase(phrase);
}

const AnnounceMargin = 30;
const Break = /[\s\.,:;?!]/;

function announceMatch(view, {
  from,
  to
}) {
  let line = view.state.doc.lineAt(from),
      lineEnd = view.state.doc.lineAt(to).to;
  let start = Math.max(line.from, from - AnnounceMargin),
      end = Math.min(lineEnd, to + AnnounceMargin);
  let text = view.state.sliceDoc(start, end);

  if (start != line.from) {
    for (let i = 0; i < AnnounceMargin; i++) if (!Break.test(text[i + 1]) && Break.test(text[i])) {
      text = text.slice(i);
      break;
    }
  }

  if (end != lineEnd) {
    for (let i = text.length - 1; i > text.length - AnnounceMargin; i--) if (!Break.test(text[i - 1]) && Break.test(text[i])) {
      text = text.slice(0, i);
      break;
    }
  }

  return _view.EditorView.announce.of(`${view.state.phrase("current match")}. ${text} ${view.state.phrase("on line")} ${line.number}.`);
}

const baseTheme = /*@__PURE__*/_view.EditorView.baseTheme({
  ".cm-panel.cm-search": {
    padding: "2px 6px 4px",
    position: "relative",
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "4px",
      backgroundColor: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    },
    "& input, & button, & label": {
      margin: ".2em .6em .2em 0"
    },
    "& input[type=checkbox]": {
      marginRight: ".2em"
    },
    "& label": {
      fontSize: "80%",
      whiteSpace: "pre"
    }
  },
  "&light .cm-searchMatch": {
    backgroundColor: "#ffff0054"
  },
  "&dark .cm-searchMatch": {
    backgroundColor: "#00ffff8a"
  },
  "&light .cm-searchMatch-selected": {
    backgroundColor: "#ff6a0054"
  },
  "&dark .cm-searchMatch-selected": {
    backgroundColor: "#ff00ff8a"
  }
});

const searchExtensions = [searchState, /*@__PURE__*/_state.Prec.lowest(searchHighlighter), baseTheme];
},{"@codemirror/view":"q9gB","@codemirror/state":"s5u9","crelt":"ITGR"}],"QqVo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.closeLintPanel = void 0;
exports.diagnosticCount = diagnosticCount;
exports.forceLinting = forceLinting;
exports.lintGutter = lintGutter;
exports.lintKeymap = void 0;
exports.linter = linter;
exports.openLintPanel = exports.nextDiagnostic = void 0;
exports.setDiagnostics = setDiagnostics;
exports.setDiagnosticsEffect = void 0;

var _view = require("@codemirror/view");

var _state = require("@codemirror/state");

var _crelt = _interopRequireDefault(require("crelt"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class SelectedDiagnostic {
  constructor(from, to, diagnostic) {
    this.from = from;
    this.to = to;
    this.diagnostic = diagnostic;
  }

}

class LintState {
  constructor(diagnostics, panel, selected) {
    this.diagnostics = diagnostics;
    this.panel = panel;
    this.selected = selected;
  }

  static init(diagnostics, panel, state) {
    // Filter the list of diagnostics for which to create markers
    let markedDiagnostics = diagnostics;
    let diagnosticFilter = state.facet(lintConfig).markerFilter;
    if (diagnosticFilter) markedDiagnostics = diagnosticFilter(markedDiagnostics);

    let ranges = _view.Decoration.set(markedDiagnostics.map(d => {
      // For zero-length ranges or ranges covering only a line break, create a widget
      return d.from == d.to || d.from == d.to - 1 && state.doc.lineAt(d.from).to == d.from ? _view.Decoration.widget({
        widget: new DiagnosticWidget(d),
        diagnostic: d
      }).range(d.from) : _view.Decoration.mark({
        attributes: {
          class: "cm-lintRange cm-lintRange-" + d.severity
        },
        diagnostic: d
      }).range(d.from, d.to);
    }), true);

    return new LintState(ranges, panel, findDiagnostic(ranges));
  }

}

function findDiagnostic(diagnostics, diagnostic = null, after = 0) {
  let found = null;
  diagnostics.between(after, 1e9, (from, to, {
    spec
  }) => {
    if (diagnostic && spec.diagnostic != diagnostic) return;
    found = new SelectedDiagnostic(from, to, spec.diagnostic);
    return false;
  });
  return found;
}

function hideTooltip(tr, tooltip) {
  return !!(tr.effects.some(e => e.is(setDiagnosticsEffect)) || tr.changes.touchesRange(tooltip.pos));
}

function maybeEnableLint(state, effects) {
  return state.field(lintState, false) ? effects : effects.concat(_state.StateEffect.appendConfig.of([lintState, _view.EditorView.decorations.compute([lintState], state => {
    let {
      selected,
      panel
    } = state.field(lintState);
    return !selected || !panel || selected.from == selected.to ? _view.Decoration.none : _view.Decoration.set([activeMark.range(selected.from, selected.to)]);
  }), (0, _view.hoverTooltip)(lintTooltip, {
    hideOn: hideTooltip
  }), baseTheme]));
}
/**
Returns a transaction spec which updates the current set of
diagnostics, and enables the lint extension if if wasn't already
active.
*/


function setDiagnostics(state, diagnostics) {
  return {
    effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)])
  };
}
/**
The state effect that updates the set of active diagnostics. Can
be useful when writing an extension that needs to track these.
*/


const setDiagnosticsEffect = /*@__PURE__*/_state.StateEffect.define();

exports.setDiagnosticsEffect = setDiagnosticsEffect;

const togglePanel = /*@__PURE__*/_state.StateEffect.define();

const movePanelSelection = /*@__PURE__*/_state.StateEffect.define();

const lintState = /*@__PURE__*/_state.StateField.define({
  create() {
    return new LintState(_view.Decoration.none, null, null);
  },

  update(value, tr) {
    if (tr.docChanged) {
      let mapped = value.diagnostics.map(tr.changes),
          selected = null;

      if (value.selected) {
        let selPos = tr.changes.mapPos(value.selected.from, 1);
        selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
      }

      value = new LintState(mapped, value.panel, selected);
    }

    for (let effect of tr.effects) {
      if (effect.is(setDiagnosticsEffect)) {
        value = LintState.init(effect.value, value.panel, tr.state);
      } else if (effect.is(togglePanel)) {
        value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
      } else if (effect.is(movePanelSelection)) {
        value = new LintState(value.diagnostics, value.panel, effect.value);
      }
    }

    return value;
  },

  provide: f => [_view.showPanel.from(f, val => val.panel), _view.EditorView.decorations.from(f, s => s.diagnostics)]
});
/**
Returns the number of active lint diagnostics in the given state.
*/


function diagnosticCount(state) {
  let lint = state.field(lintState, false);
  return lint ? lint.diagnostics.size : 0;
}

const activeMark = /*@__PURE__*/_view.Decoration.mark({
  class: "cm-lintRange cm-lintRange-active"
});

function lintTooltip(view, pos, side) {
  let {
    diagnostics
  } = view.state.field(lintState);
  let found = [],
      stackStart = 2e8,
      stackEnd = 0;
  diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to, {
    spec
  }) => {
    if (pos >= from && pos <= to && (from == to || (pos > from || side > 0) && (pos < to || side < 0))) {
      found.push(spec.diagnostic);
      stackStart = Math.min(from, stackStart);
      stackEnd = Math.max(to, stackEnd);
    }
  });
  let diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;
  if (diagnosticFilter) found = diagnosticFilter(found);
  if (!found.length) return null;
  return {
    pos: stackStart,
    end: stackEnd,
    above: view.state.doc.lineAt(stackStart).to < stackEnd,

    create() {
      return {
        dom: diagnosticsTooltip(view, found)
      };
    }

  };
}

function diagnosticsTooltip(view, diagnostics) {
  return (0, _crelt.default)("ul", {
    class: "cm-tooltip-lint"
  }, diagnostics.map(d => renderDiagnostic(view, d, false)));
}
/**
Command to open and focus the lint panel.
*/


const openLintPanel = view => {
  let field = view.state.field(lintState, false);
  if (!field || !field.panel) view.dispatch({
    effects: maybeEnableLint(view.state, [togglePanel.of(true)])
  });
  let panel = (0, _view.getPanel)(view, LintPanel.open);
  if (panel) panel.dom.querySelector(".cm-panel-lint ul").focus();
  return true;
};
/**
Command to close the lint panel, when open.
*/


exports.openLintPanel = openLintPanel;

const closeLintPanel = view => {
  let field = view.state.field(lintState, false);
  if (!field || !field.panel) return false;
  view.dispatch({
    effects: togglePanel.of(false)
  });
  return true;
};
/**
Move the selection to the next diagnostic.
*/


exports.closeLintPanel = closeLintPanel;

const nextDiagnostic = view => {
  let field = view.state.field(lintState, false);
  if (!field) return false;
  let sel = view.state.selection.main,
      next = field.diagnostics.iter(sel.to + 1);

  if (!next.value) {
    next = field.diagnostics.iter(0);
    if (!next.value || next.from == sel.from && next.to == sel.to) return false;
  }

  view.dispatch({
    selection: {
      anchor: next.from,
      head: next.to
    },
    scrollIntoView: true
  });
  return true;
};
/**
A set of default key bindings for the lint functionality.

- Ctrl-Shift-m (Cmd-Shift-m on macOS): [`openLintPanel`](https://codemirror.net/6/docs/ref/#lint.openLintPanel)
- F8: [`nextDiagnostic`](https://codemirror.net/6/docs/ref/#lint.nextDiagnostic)
*/


exports.nextDiagnostic = nextDiagnostic;
const lintKeymap = [{
  key: "Mod-Shift-m",
  run: openLintPanel
}, {
  key: "F8",
  run: nextDiagnostic
}];
exports.lintKeymap = lintKeymap;

const lintPlugin = /*@__PURE__*/_view.ViewPlugin.fromClass(class {
  constructor(view) {
    this.view = view;
    this.timeout = -1;
    this.set = true;
    let {
      delay
    } = view.state.facet(lintConfig);
    this.lintTime = Date.now() + delay;
    this.run = this.run.bind(this);
    this.timeout = setTimeout(this.run, delay);
  }

  run() {
    let now = Date.now();

    if (now < this.lintTime - 10) {
      setTimeout(this.run, this.lintTime - now);
    } else {
      this.set = false;
      let {
        state
      } = this.view,
          {
        sources
      } = state.facet(lintConfig);
      Promise.all(sources.map(source => Promise.resolve(source(this.view)))).then(annotations => {
        let all = annotations.reduce((a, b) => a.concat(b));
        if (this.view.state.doc == state.doc) this.view.dispatch(setDiagnostics(this.view.state, all));
      }, error => {
        (0, _view.logException)(this.view.state, error);
      });
    }
  }

  update(update) {
    let config = update.state.facet(lintConfig);

    if (update.docChanged || config != update.startState.facet(lintConfig)) {
      this.lintTime = Date.now() + config.delay;

      if (!this.set) {
        this.set = true;
        this.timeout = setTimeout(this.run, config.delay);
      }
    }
  }

  force() {
    if (this.set) {
      this.lintTime = Date.now();
      this.run();
    }
  }

  destroy() {
    clearTimeout(this.timeout);
  }

});

const lintConfig = /*@__PURE__*/_state.Facet.define({
  combine(input) {
    return Object.assign({
      sources: input.map(i => i.source)
    }, (0, _state.combineConfig)(input.map(i => i.config), {
      delay: 750,
      markerFilter: null,
      tooltipFilter: null
    }));
  },

  enables: lintPlugin
});
/**
Given a diagnostic source, this function returns an extension that
enables linting with that source. It will be called whenever the
editor is idle (after its content changed).
*/


function linter(source, config = {}) {
  return lintConfig.of({
    source,
    config
  });
}
/**
Forces any linters [configured](https://codemirror.net/6/docs/ref/#lint.linter) to run when the
editor is idle to run right away.
*/


function forceLinting(view) {
  let plugin = view.plugin(lintPlugin);
  if (plugin) plugin.force();
}

function assignKeys(actions) {
  let assigned = [];
  if (actions) actions: for (let {
    name
  } of actions) {
    for (let i = 0; i < name.length; i++) {
      let ch = name[i];

      if (/[a-zA-Z]/.test(ch) && !assigned.some(c => c.toLowerCase() == ch.toLowerCase())) {
        assigned.push(ch);
        continue actions;
      }
    }

    assigned.push("");
  }
  return assigned;
}

function renderDiagnostic(view, diagnostic, inPanel) {
  var _a;

  let keys = inPanel ? assignKeys(diagnostic.actions) : [];
  return (0, _crelt.default)("li", {
    class: "cm-diagnostic cm-diagnostic-" + diagnostic.severity
  }, (0, _crelt.default)("span", {
    class: "cm-diagnosticText"
  }, diagnostic.renderMessage ? diagnostic.renderMessage() : diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map((action, i) => {
    let click = e => {
      e.preventDefault();
      let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
      if (found) action.apply(view, found.from, found.to);
    };

    let {
      name
    } = action,
        keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;
    let nameElt = keyIndex < 0 ? name : [name.slice(0, keyIndex), (0, _crelt.default)("u", name.slice(keyIndex, keyIndex + 1)), name.slice(keyIndex + 1)];
    return (0, _crelt.default)("button", {
      type: "button",
      class: "cm-diagnosticAction",
      onclick: click,
      onmousedown: click,
      "aria-label": ` Action: ${name}${keyIndex < 0 ? "" : ` (access key "${keys[i]})"`}.`
    }, nameElt);
  }), diagnostic.source && (0, _crelt.default)("div", {
    class: "cm-diagnosticSource"
  }, diagnostic.source));
}

class DiagnosticWidget extends _view.WidgetType {
  constructor(diagnostic) {
    super();
    this.diagnostic = diagnostic;
  }

  eq(other) {
    return other.diagnostic == this.diagnostic;
  }

  toDOM() {
    return (0, _crelt.default)("span", {
      class: "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity
    });
  }

}

class PanelItem {
  constructor(view, diagnostic) {
    this.diagnostic = diagnostic;
    this.id = "item_" + Math.floor(Math.random() * 0xffffffff).toString(16);
    this.dom = renderDiagnostic(view, diagnostic, true);
    this.dom.id = this.id;
    this.dom.setAttribute("role", "option");
  }

}

class LintPanel {
  constructor(view) {
    this.view = view;
    this.items = [];

    let onkeydown = event => {
      if (event.keyCode == 27) {
        // Escape
        closeLintPanel(this.view);
        this.view.focus();
      } else if (event.keyCode == 38 || event.keyCode == 33) {
        // ArrowUp, PageUp
        this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
      } else if (event.keyCode == 40 || event.keyCode == 34) {
        // ArrowDown, PageDown
        this.moveSelection((this.selectedIndex + 1) % this.items.length);
      } else if (event.keyCode == 36) {
        // Home
        this.moveSelection(0);
      } else if (event.keyCode == 35) {
        // End
        this.moveSelection(this.items.length - 1);
      } else if (event.keyCode == 13) {
        // Enter
        this.view.focus();
      } else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) {
        // A-Z
        let {
          diagnostic
        } = this.items[this.selectedIndex],
            keys = assignKeys(diagnostic.actions);

        for (let i = 0; i < keys.length; i++) if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {
          let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);
          if (found) diagnostic.actions[i].apply(view, found.from, found.to);
        }
      } else {
        return;
      }

      event.preventDefault();
    };

    let onclick = event => {
      for (let i = 0; i < this.items.length; i++) {
        if (this.items[i].dom.contains(event.target)) this.moveSelection(i);
      }
    };

    this.list = (0, _crelt.default)("ul", {
      tabIndex: 0,
      role: "listbox",
      "aria-label": this.view.state.phrase("Diagnostics"),
      onkeydown,
      onclick
    });
    this.dom = (0, _crelt.default)("div", {
      class: "cm-panel-lint"
    }, this.list, (0, _crelt.default)("button", {
      type: "button",
      name: "close",
      "aria-label": this.view.state.phrase("close"),
      onclick: () => closeLintPanel(this.view)
    }, "×"));
    this.update();
  }

  get selectedIndex() {
    let selected = this.view.state.field(lintState).selected;
    if (!selected) return -1;

    for (let i = 0; i < this.items.length; i++) if (this.items[i].diagnostic == selected.diagnostic) return i;

    return -1;
  }

  update() {
    let {
      diagnostics,
      selected
    } = this.view.state.field(lintState);
    let i = 0,
        needsSync = false,
        newSelectedItem = null;
    diagnostics.between(0, this.view.state.doc.length, (_start, _end, {
      spec
    }) => {
      let found = -1,
          item;

      for (let j = i; j < this.items.length; j++) if (this.items[j].diagnostic == spec.diagnostic) {
        found = j;
        break;
      }

      if (found < 0) {
        item = new PanelItem(this.view, spec.diagnostic);
        this.items.splice(i, 0, item);
        needsSync = true;
      } else {
        item = this.items[found];

        if (found > i) {
          this.items.splice(i, found - i);
          needsSync = true;
        }
      }

      if (selected && item.diagnostic == selected.diagnostic) {
        if (!item.dom.hasAttribute("aria-selected")) {
          item.dom.setAttribute("aria-selected", "true");
          newSelectedItem = item;
        }
      } else if (item.dom.hasAttribute("aria-selected")) {
        item.dom.removeAttribute("aria-selected");
      }

      i++;
    });

    while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
      needsSync = true;
      this.items.pop();
    }

    if (this.items.length == 0) {
      this.items.push(new PanelItem(this.view, {
        from: -1,
        to: -1,
        severity: "info",
        message: this.view.state.phrase("No diagnostics")
      }));
      needsSync = true;
    }

    if (newSelectedItem) {
      this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
      this.view.requestMeasure({
        key: this,
        read: () => ({
          sel: newSelectedItem.dom.getBoundingClientRect(),
          panel: this.list.getBoundingClientRect()
        }),
        write: ({
          sel,
          panel
        }) => {
          if (sel.top < panel.top) this.list.scrollTop -= panel.top - sel.top;else if (sel.bottom > panel.bottom) this.list.scrollTop += sel.bottom - panel.bottom;
        }
      });
    } else if (this.selectedIndex < 0) {
      this.list.removeAttribute("aria-activedescendant");
    }

    if (needsSync) this.sync();
  }

  sync() {
    let domPos = this.list.firstChild;

    function rm() {
      let prev = domPos;
      domPos = prev.nextSibling;
      prev.remove();
    }

    for (let item of this.items) {
      if (item.dom.parentNode == this.list) {
        while (domPos != item.dom) rm();

        domPos = item.dom.nextSibling;
      } else {
        this.list.insertBefore(item.dom, domPos);
      }
    }

    while (domPos) rm();
  }

  moveSelection(selectedIndex) {
    if (this.selectedIndex < 0) return;
    let field = this.view.state.field(lintState);
    let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
    if (!selection) return;
    this.view.dispatch({
      selection: {
        anchor: selection.from,
        head: selection.to
      },
      scrollIntoView: true,
      effects: movePanelSelection.of(selection)
    });
  }

  static open(view) {
    return new LintPanel(view);
  }

}

function svg(content, attrs = `viewBox="0 0 40 40"`) {
  return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${attrs}>${encodeURIComponent(content)}</svg>')`;
}

function underline(color) {
  return svg(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${color}" fill="none" stroke-width=".7"/>`, `width="6" height="3"`);
}

const baseTheme = /*@__PURE__*/_view.EditorView.baseTheme({
  ".cm-diagnostic": {
    padding: "3px 6px 3px 8px",
    marginLeft: "-1px",
    display: "block",
    whiteSpace: "pre-wrap"
  },
  ".cm-diagnostic-error": {
    borderLeft: "5px solid #d11"
  },
  ".cm-diagnostic-warning": {
    borderLeft: "5px solid orange"
  },
  ".cm-diagnostic-info": {
    borderLeft: "5px solid #999"
  },
  ".cm-diagnosticAction": {
    font: "inherit",
    border: "none",
    padding: "2px 4px",
    backgroundColor: "#444",
    color: "white",
    borderRadius: "3px",
    marginLeft: "8px"
  },
  ".cm-diagnosticSource": {
    fontSize: "70%",
    opacity: .7
  },
  ".cm-lintRange": {
    backgroundPosition: "left bottom",
    backgroundRepeat: "repeat-x",
    paddingBottom: "0.7px"
  },
  ".cm-lintRange-error": {
    backgroundImage: /*@__PURE__*/underline("#d11")
  },
  ".cm-lintRange-warning": {
    backgroundImage: /*@__PURE__*/underline("orange")
  },
  ".cm-lintRange-info": {
    backgroundImage: /*@__PURE__*/underline("#999")
  },
  ".cm-lintRange-active": {
    backgroundColor: "#ffdd9980"
  },
  ".cm-tooltip-lint": {
    padding: 0,
    margin: 0
  },
  ".cm-lintPoint": {
    position: "relative",
    "&:after": {
      content: '""',
      position: "absolute",
      bottom: 0,
      left: "-2px",
      borderLeft: "3px solid transparent",
      borderRight: "3px solid transparent",
      borderBottom: "4px solid #d11"
    }
  },
  ".cm-lintPoint-warning": {
    "&:after": {
      borderBottomColor: "orange"
    }
  },
  ".cm-lintPoint-info": {
    "&:after": {
      borderBottomColor: "#999"
    }
  },
  ".cm-panel.cm-panel-lint": {
    position: "relative",
    "& ul": {
      maxHeight: "100px",
      overflowY: "auto",
      "& [aria-selected]": {
        backgroundColor: "#ddd",
        "& u": {
          textDecoration: "underline"
        }
      },
      "&:focus [aria-selected]": {
        background_fallback: "#bdf",
        backgroundColor: "Highlight",
        color_fallback: "white",
        color: "HighlightText"
      },
      "& u": {
        textDecoration: "none"
      },
      padding: 0,
      margin: 0
    },
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "2px",
      background: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    }
  }
});

class LintGutterMarker extends _view.GutterMarker {
  constructor(diagnostics) {
    super();
    this.diagnostics = diagnostics;
    this.severity = diagnostics.reduce((max, d) => {
      let s = d.severity;
      return s == "error" || s == "warning" && max == "info" ? s : max;
    }, "info");
  }

  toDOM(view) {
    let elt = document.createElement("div");
    elt.className = "cm-lint-marker cm-lint-marker-" + this.severity;
    let diagnostics = this.diagnostics;
    let diagnosticsFilter = view.state.facet(lintGutterConfig).tooltipFilter;
    if (diagnosticsFilter) diagnostics = diagnosticsFilter(diagnostics);
    if (diagnostics.length) elt.onmouseover = () => gutterMarkerMouseOver(view, elt, diagnostics);
    return elt;
  }

}

function trackHoverOn(view, marker) {
  let mousemove = event => {
    let rect = marker.getBoundingClientRect();
    if (event.clientX > rect.left - 10
    /* Margin */
    && event.clientX < rect.right + 10
    /* Margin */
    && event.clientY > rect.top - 10
    /* Margin */
    && event.clientY < rect.bottom + 10
    /* Margin */
    ) return;

    for (let target = event.target; target; target = target.parentNode) {
      if (target.nodeType == 1 && target.classList.contains("cm-tooltip-lint")) return;
    }

    window.removeEventListener("mousemove", mousemove);
    if (view.state.field(lintGutterTooltip)) view.dispatch({
      effects: setLintGutterTooltip.of(null)
    });
  };

  window.addEventListener("mousemove", mousemove);
}

function gutterMarkerMouseOver(view, marker, diagnostics) {
  function hovered() {
    let line = view.elementAtHeight(marker.getBoundingClientRect().top + 5 - view.documentTop);
    const linePos = view.coordsAtPos(line.from);

    if (linePos) {
      view.dispatch({
        effects: setLintGutterTooltip.of({
          pos: line.from,
          above: false,

          create() {
            return {
              dom: diagnosticsTooltip(view, diagnostics),
              getCoords: () => marker.getBoundingClientRect()
            };
          }

        })
      });
    }

    marker.onmouseout = marker.onmousemove = null;
    trackHoverOn(view, marker);
  }

  let {
    hoverTime
  } = view.state.facet(lintGutterConfig);
  let hoverTimeout = setTimeout(hovered, hoverTime);

  marker.onmouseout = () => {
    clearTimeout(hoverTimeout);
    marker.onmouseout = marker.onmousemove = null;
  };

  marker.onmousemove = () => {
    clearTimeout(hoverTimeout);
    hoverTimeout = setTimeout(hovered, hoverTime);
  };
}

function markersForDiagnostics(doc, diagnostics) {
  let byLine = Object.create(null);

  for (let diagnostic of diagnostics) {
    let line = doc.lineAt(diagnostic.from);
    (byLine[line.from] || (byLine[line.from] = [])).push(diagnostic);
  }

  let markers = [];

  for (let line in byLine) {
    markers.push(new LintGutterMarker(byLine[line]).range(+line));
  }

  return _state.RangeSet.of(markers, true);
}

const lintGutterExtension = /*@__PURE__*/(0, _view.gutter)({
  class: "cm-gutter-lint",
  markers: view => view.state.field(lintGutterMarkers)
});

const lintGutterMarkers = /*@__PURE__*/_state.StateField.define({
  create() {
    return _state.RangeSet.empty;
  },

  update(markers, tr) {
    markers = markers.map(tr.changes);
    let diagnosticFilter = tr.state.facet(lintGutterConfig).markerFilter;

    for (let effect of tr.effects) {
      if (effect.is(setDiagnosticsEffect)) {
        let diagnostics = effect.value;
        if (diagnosticFilter) diagnostics = diagnosticFilter(diagnostics || []);
        markers = markersForDiagnostics(tr.state.doc, diagnostics.slice(0));
      }
    }

    return markers;
  }

});

const setLintGutterTooltip = /*@__PURE__*/_state.StateEffect.define();

const lintGutterTooltip = /*@__PURE__*/_state.StateField.define({
  create() {
    return null;
  },

  update(tooltip, tr) {
    if (tooltip && tr.docChanged) tooltip = hideTooltip(tr, tooltip) ? null : Object.assign(Object.assign({}, tooltip), {
      pos: tr.changes.mapPos(tooltip.pos)
    });
    return tr.effects.reduce((t, e) => e.is(setLintGutterTooltip) ? e.value : t, tooltip);
  },

  provide: field => _view.showTooltip.from(field)
});

const lintGutterTheme = /*@__PURE__*/_view.EditorView.baseTheme({
  ".cm-gutter-lint": {
    width: "1.4em",
    "& .cm-gutterElement": {
      padding: ".2em"
    }
  },
  ".cm-lint-marker": {
    width: "1em",
    height: "1em"
  },
  ".cm-lint-marker-info": {
    content: /*@__PURE__*/svg(`<path fill="#aaf" stroke="#77e" stroke-width="6" stroke-linejoin="round" d="M5 5L35 5L35 35L5 35Z"/>`)
  },
  ".cm-lint-marker-warning": {
    content: /*@__PURE__*/svg(`<path fill="#fe8" stroke="#fd7" stroke-width="6" stroke-linejoin="round" d="M20 6L37 35L3 35Z"/>`)
  },
  ".cm-lint-marker-error:before": {
    content: /*@__PURE__*/svg(`<circle cx="20" cy="20" r="15" fill="#f87" stroke="#f43" stroke-width="6"/>`)
  }
});

const lintGutterConfig = /*@__PURE__*/_state.Facet.define({
  combine(configs) {
    return (0, _state.combineConfig)(configs, {
      hoverTime: 300
      /* Time */
      ,
      markerFilter: null,
      tooltipFilter: null
    });
  }

});
/**
Returns an extension that installs a gutter showing markers for
each line that has diagnostics, which can be hovered over to see
the diagnostics.
*/


function lintGutter(config = {}) {
  return [lintGutterConfig.of(config), lintGutterMarkers, lintGutterExtension, lintGutterTheme, lintGutterTooltip];
}
},{"@codemirror/view":"q9gB","@codemirror/state":"s5u9","crelt":"ITGR"}],"SA9Z":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "EditorView", {
  enumerable: true,
  get: function () {
    return _view.EditorView;
  }
});
exports.minimalSetup = exports.basicSetup = void 0;

var _view = require("@codemirror/view");

var _state = require("@codemirror/state");

var _language = require("@codemirror/language");

var _commands = require("@codemirror/commands");

var _search = require("@codemirror/search");

var _autocomplete = require("@codemirror/autocomplete");

var _lint = require("@codemirror/lint");

// (The superfluous function calls around the list of extensions work
// around current limitations in tree-shaking software.)

/**
This is an extension value that just pulls together a number of
extensions that you might want in a basic editor. It is meant as a
convenient helper to quickly set up CodeMirror without installing
and importing a lot of separate packages.

Specifically, it includes...

 - [the default command bindings](https://codemirror.net/6/docs/ref/#commands.defaultKeymap)
 - [line numbers](https://codemirror.net/6/docs/ref/#view.lineNumbers)
 - [special character highlighting](https://codemirror.net/6/docs/ref/#view.highlightSpecialChars)
 - [the undo history](https://codemirror.net/6/docs/ref/#commands.history)
 - [a fold gutter](https://codemirror.net/6/docs/ref/#language.foldGutter)
 - [custom selection drawing](https://codemirror.net/6/docs/ref/#view.drawSelection)
 - [drop cursor](https://codemirror.net/6/docs/ref/#view.dropCursor)
 - [multiple selections](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
 - [reindentation on input](https://codemirror.net/6/docs/ref/#language.indentOnInput)
 - [the default highlight style](https://codemirror.net/6/docs/ref/#language.defaultHighlightStyle) (as fallback)
 - [bracket matching](https://codemirror.net/6/docs/ref/#language.bracketMatching)
 - [bracket closing](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets)
 - [autocompletion](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion)
 - [rectangular selection](https://codemirror.net/6/docs/ref/#view.rectangularSelection) and [crosshair cursor](https://codemirror.net/6/docs/ref/#view.crosshairCursor)
 - [active line highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLine)
 - [active line gutter highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLineGutter)
 - [selection match highlighting](https://codemirror.net/6/docs/ref/#search.highlightSelectionMatches)
 - [search](https://codemirror.net/6/docs/ref/#search.searchKeymap)
 - [linting](https://codemirror.net/6/docs/ref/#lint.lintKeymap)

(You'll probably want to add some language package to your setup
too.)

This extension does not allow customization. The idea is that,
once you decide you want to configure your editor more precisely,
you take this package's source (which is just a bunch of imports
and an array literal), copy it into your own code, and adjust it
as desired.
*/
const basicSetup = /*@__PURE__*/(() => [(0, _view.lineNumbers)(), (0, _view.highlightActiveLineGutter)(), (0, _view.highlightSpecialChars)(), (0, _commands.history)(), (0, _language.foldGutter)(), (0, _view.drawSelection)(), (0, _view.dropCursor)(), _state.EditorState.allowMultipleSelections.of(true), (0, _language.indentOnInput)(), (0, _language.syntaxHighlighting)(_language.defaultHighlightStyle, {
  fallback: true
}), (0, _language.bracketMatching)(), (0, _autocomplete.closeBrackets)(), (0, _autocomplete.autocompletion)(), (0, _view.rectangularSelection)(), (0, _view.crosshairCursor)(), (0, _view.highlightActiveLine)(), (0, _search.highlightSelectionMatches)(), _view.keymap.of([..._autocomplete.closeBracketsKeymap, ..._commands.defaultKeymap, ..._search.searchKeymap, ..._commands.historyKeymap, ..._language.foldKeymap, ..._autocomplete.completionKeymap, ..._lint.lintKeymap])])();
/**
A minimal set of extensions to create a functional editor. Only
includes [the default keymap](https://codemirror.net/6/docs/ref/#commands.defaultKeymap), [undo
history](https://codemirror.net/6/docs/ref/#commands.history), [special character
highlighting](https://codemirror.net/6/docs/ref/#view.highlightSpecialChars), [custom selection
drawing](https://codemirror.net/6/docs/ref/#view.drawSelection), and [default highlight
style](https://codemirror.net/6/docs/ref/#language.defaultHighlightStyle).
*/


exports.basicSetup = basicSetup;

const minimalSetup = /*@__PURE__*/(() => [(0, _view.highlightSpecialChars)(), (0, _commands.history)(), (0, _view.drawSelection)(), (0, _language.syntaxHighlighting)(_language.defaultHighlightStyle, {
  fallback: true
}), _view.keymap.of([..._commands.defaultKeymap, ..._commands.historyKeymap])])();

exports.minimalSetup = minimalSetup;
},{"@codemirror/view":"q9gB","@codemirror/state":"s5u9","@codemirror/language":"Hm1j","@codemirror/commands":"Q7xo","@codemirror/search":"lKbM","@codemirror/autocomplete":"rKYW","@codemirror/lint":"QqVo"}],"Focm":[function(require,module,exports) {
"use strict";

var _field = require("./field");

var _runner = require("./runner");

var _cockroachLezer = require("./cockroach-lezer");

var _language = require("@codemirror/language");

var _autocomplete = require("@codemirror/autocomplete");

var _highlight = require("@lezer/highlight");

var _codemirror = require("codemirror");

var field = "_____\n" + "_____\n" + "А1А1_\n" + "~____";
var is_run_active = false;
var is_debug = false;
var debug_promise_resolve;
var f = new _field.Field(field);
var runner;
var editor;

var files = function files() {
  var files = localStorage.getItem('files');
  if (files == null) return {};
  return JSON.parse(files);
};

var draw = function draw() {
  var root = $("#field");
  var colsz = Math.round($('.field-parent').width() / f.fld[0].length);
  if (colsz * f.fld.length > $('.field-parent').height()) colsz = Math.round($('.field-parent').height() / f.fld.length);
  root.width(colsz * f.fld[0].length).height(colsz * f.fld.length);
  var html = "";
  var style = "style='width:" + colsz + "px; height:" + colsz + "px; line-height:" + colsz + "px'";

  for (var i = 0; i < f.fld.length; i++) {
    html += "<div class='field-row'>";

    for (var j = 0; j < f.fld[i].length; j++) {
      if (f.fld[i][j] == _field.EMPTY) html += "<div i=" + i + " j=" + j + " class='field-empty field-col' " + style + ">&nbsp;</div>";else if (f.fld[i][j] == _field.COCKROACH) html += "<div i=" + i + " j=" + j + " class='field-cockroach field-col' " + style + ">&nbsp;</div>";else html += "<div i=" + i + " j=" + j + " class='field-letter field-col' " + style + ">" + f.fld[i][j] + "</div>";
    }

    html += "</div>";
  }

  html += "</tbody></table>";
  root.html(html);
  var prev = 'Пусто';
  var next = 'Пусто';

  if (runner) {
    if (runner.prev) prev = runner.prev.getText();
    if (runner.next) next = runner.next.getText();
  }

  $('#prev-command').val(prev);
  $('#next-command').val(next);
  $('#last-char').val(f.last);

  if (runner && runner.next) {
    editor.dispatch({
      selection: {
        anchor: runner.next.start.start,
        head: runner.next.start.stop + 1
      }
    });
  }

  if (is_debug) {
    return new Promise(function (resolve, reject) {
      debug_promise_resolve = resolve;
    });
  }

  return Promise.resolve();
};

var initField = function initField() {
  f = new _field.Field(field);
  f.onChange(draw);
  is_run_active = false;
  $('#exec').removeClass('disabled');
  $('#prev-command').val('Пусто');
  $('#next-command').val('Пусто');
  $('#last-char').val(_field.EMPTY);
  $('#err-msg').hide();
  $('#field-width').val(f.width());
  $('#field-height').val(f.height());
};

var initEditor = function initEditor() {
  var parser0 = _cockroachLezer.parser.configure({
    props: [(0, _highlight.styleTags)({
      LINE_COMMENT: _highlight.tags.lineComment,
      UP: _highlight.tags.keyword,
      DOWN: _highlight.tags.keyword,
      LEFT: _highlight.tags.keyword,
      RIGHT: _highlight.tags.keyword,
      STAY: _highlight.tags.keyword,
      NOT: _highlight.tags.keyword,
      EMPTY: _highlight.tags.keyword,
      NUMBER: _highlight.tags.keyword,
      REPEAT: _highlight.tags.keyword,
      WHILE: _highlight.tags.keyword,
      OPEN_BRACKET: _highlight.tags.paren,
      CLOSE_BRACKET: _highlight.tags.paren,
      IF: _highlight.tags.keyword,
      THEN: _highlight.tags.keyword,
      ELSE: _highlight.tags.keyword,
      THIS: _highlight.tags.keyword,
      END: _highlight.tags.keyword
    }), _language.indentNodeProp.add({
      Application: function Application(context) {
        return context.column(context.node.from) + context.unit;
      }
    }), _language.foldNodeProp.add({
      Application: _language.foldInside
    })]
  });

  var lang = _language.LRLanguage.define({
    parser: parser0,
    languageData: {
      commenTokens: {
        line: "//"
      }
    }
  });

  var autoComplete = lang.data.of({
    autocomplete: (0, _autocomplete.completeFromList)([{
      label: 'ВВЕРХ',
      type: 'keyword'
    }, {
      label: 'ВНИЗ',
      type: 'keyword'
    }, {
      label: 'ВЛЕВО',
      type: 'keyword'
    }, {
      label: 'ВПРАВО',
      type: 'keyword'
    }, {
      label: 'СТОЯТЬ',
      type: 'keyword'
    }, {
      label: 'ЕСЛИ',
      type: 'keyword'
    }, {
      label: 'ТО',
      type: 'keyword'
    }, {
      label: 'ИНАЧЕ',
      type: 'keyword'
    }, {
      label: 'НЕ',
      type: 'keyword'
    }, {
      label: 'ПУСТО',
      type: 'keyword'
    }, {
      label: 'ЦИФРА',
      type: 'keyword'
    }, {
      label: 'ПОВТОРИ',
      type: 'keyword'
    }, {
      label: 'ПОКА',
      type: 'keyword'
    }, {
      label: 'ЭТО',
      type: 'keyword'
    }, {
      label: 'КОНЕЦ',
      type: 'keyword'
    }])
  });

  var cockroachLang = function cockroachLang() {
    return new _language.LanguageSupport(lang, [autoComplete]);
  };

  editor = new _codemirror.EditorView({
    lint: true,
    parent: document.querySelector('#prog-root'),
    extensions: [_codemirror.basicSetup, cockroachLang()],
    doc: 'ПОВТОРИ 4 {\n' + '  ВВЕРХ\n' + '  ЕСЛИ ЦИФРА ТО\n' + '      ВНИЗ\n' + '  ИНАЧЕ {\n' + '      ВВЕРХ\n' + '      ВНИЗ\n' + '      ВНИЗ\n' + '  }\n' + '  ВПРАВО\n' + '}'
  });
};

var drawSaved = function drawSaved() {
  var files0 = files();
  $('.load-saved').remove();

  for (var saved in files0) {
    $('#save-menu').append('<li><a class="dropdown-item load-saved" href="#">' + saved + '</a></li>');
  }
};

$(document).ready(function () {
  initField();
  $('#exec, #debug').click(function () {
    if (is_run_active) return;
    field = f.toString();
    is_run_active = true;
    is_debug = $(this).attr('id') == 'debug';
    $('#exec').addClass('disabled');
    $('#reset').addClass('disabled');
    $('#debug').addClass('disabled');
    $('#err-msg').hide();
    if (is_debug) $('#next-step').removeClass('disabled');
    runner = new _runner.ProgRunner(f, editor.state.doc.toString(), is_debug);
    runner.run().then(function () {
      setTimeout(draw, runner.delay);
      is_run_active = false;
      is_debug = false;
      $('#next-step').addClass('disabled');
      $('#exec').removeClass('disabled');
      $('#reset').removeClass('disabled');
      $('#debug').removeClass('disabled');
    }, function (err) {
      is_run_active = false;
      is_debug = false;
      $('#err-msg').html(err.msg.replaceAll('\n', '<br>'));
      $('#err-msg').show();
      $('#next-step').addClass('disabled');
      $('#exec').removeClass('disabled');
      $('#reset').removeClass('disabled');
      $('#debug').removeClass('disabled');

      if (err.token) {
        editor.dispatch({
          selection: {
            anchor: err.token.start.start,
            head: err.token.start.stop + 1
          }
        });
      }
    });
  });
  $('#reset').click(initField);
  $('#next-step').click(function () {
    debug_promise_resolve();
  });
  $('#set-field-size').click(function () {
    var width = $('#field-width').val();
    var height = $('#field-height').val();
    var new_field = "";

    for (var i = 0; i < height; i++) {
      new_field += i == 0 ? _field.COCKROACH : _field.EMPTY;
      new_field += _field.EMPTY.repeat(width - 1);
      if (height - i > 1) new_field += '\n';
    }

    field = new_field;
    initField();
  });
  initEditor();
  drawSaved();
  $('#save-form').submit(function () {
    $('#save-dialog').modal('hide');
    var files0 = files();
    files0[$('#app-name').val()] = {
      field: f.toString(),
      prog: editor.state.doc.toString()
    };
    localStorage.setItem('files', JSON.stringify(files0));
    drawSaved();
    return false;
  });
});
$(document).on('click', function (e) {
  if ($(e.target).hasClass('field-col')) return;
  $('.field-col').removeClass('red');
});
$(document).on('click', '.field-col', function () {
  if ($('.field-col.red').length == 0 || $('.field-col.field-empty.red').length == 1) {
    $('.field-col').removeClass('red');
    $(this).addClass('red');
  } else {
    f.change(parseInt($('.field-col.red').attr('i')), parseInt($('.field-col.red').attr('j')), parseInt($(this).attr('i')), parseInt($(this).attr('j')));
    $('.field-col').removeClass('red');
  }
});
$(document).on('click', '.load-saved', function (e) {
  var saved = files()[$(e.target).text()];
  field = saved.field;
  editor.dispatch({
    changes: {
      from: 0,
      to: editor.state.doc.toString().length,
      insert: saved.prog
    }
  });
  initField();
});
$(document).keypress(function (e) {
  if ($('.field-col.red').length == 0) return;
  var char = String.fromCharCode(e.keyCode);
  if (!f.testline(char)) return;
  f.set(char, parseInt($('.field-col.red').attr('i')), parseInt($('.field-col.red').attr('j')));
});
/**
 * TODO:
 * * сообщение и подсветка при ошибке компиляции
 */
},{"./field":"daBI","./runner":"ucK2","./cockroach-lezer":"Fi4p","@codemirror/language":"Hm1j","@codemirror/autocomplete":"rKYW","@lezer/highlight":"P8wn","codemirror":"SA9Z"}]},{},["Focm"], null)
//# sourceMappingURL=cockroach-web.7003f9fd.js.map